// Copyright (c) 2022 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/indykite/indykite-sdk-go/gen/indykite/authorization/v1beta1 (interfaces: AuthorizationAPIClient)
//
// Generated by this command:
//
//	mockgen -copyright_file ./doc/LICENSE -package authorization -destination ./test/authorization/v1beta1/authorization_api_mock.go github.com/indykite/indykite-sdk-go/gen/indykite/authorization/v1beta1 AuthorizationAPIClient
//

// Package authorization is a generated GoMock package.
package authorization

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"

	authorizationv1beta1 "github.com/indykite/indykite-sdk-go/gen/indykite/authorization/v1beta1"
)

// MockAuthorizationAPIClient is a mock of AuthorizationAPIClient interface.
type MockAuthorizationAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationAPIClientMockRecorder
	isgomock struct{}
}

// MockAuthorizationAPIClientMockRecorder is the mock recorder for MockAuthorizationAPIClient.
type MockAuthorizationAPIClientMockRecorder struct {
	mock *MockAuthorizationAPIClient
}

// NewMockAuthorizationAPIClient creates a new mock instance.
func NewMockAuthorizationAPIClient(ctrl *gomock.Controller) *MockAuthorizationAPIClient {
	mock := &MockAuthorizationAPIClient{ctrl: ctrl}
	mock.recorder = &MockAuthorizationAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationAPIClient) EXPECT() *MockAuthorizationAPIClientMockRecorder {
	return m.recorder
}

// IsAuthorized mocks base method.
func (m *MockAuthorizationAPIClient) IsAuthorized(ctx context.Context, in *authorizationv1beta1.IsAuthorizedRequest, opts ...grpc.CallOption) (*authorizationv1beta1.IsAuthorizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAuthorized", varargs...)
	ret0, _ := ret[0].(*authorizationv1beta1.IsAuthorizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockAuthorizationAPIClientMockRecorder) IsAuthorized(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockAuthorizationAPIClient)(nil).IsAuthorized), varargs...)
}

// WhatAuthorized mocks base method.
func (m *MockAuthorizationAPIClient) WhatAuthorized(ctx context.Context, in *authorizationv1beta1.WhatAuthorizedRequest, opts ...grpc.CallOption) (*authorizationv1beta1.WhatAuthorizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhatAuthorized", varargs...)
	ret0, _ := ret[0].(*authorizationv1beta1.WhatAuthorizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhatAuthorized indicates an expected call of WhatAuthorized.
func (mr *MockAuthorizationAPIClientMockRecorder) WhatAuthorized(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhatAuthorized", reflect.TypeOf((*MockAuthorizationAPIClient)(nil).WhatAuthorized), varargs...)
}

// WhoAuthorized mocks base method.
func (m *MockAuthorizationAPIClient) WhoAuthorized(ctx context.Context, in *authorizationv1beta1.WhoAuthorizedRequest, opts ...grpc.CallOption) (*authorizationv1beta1.WhoAuthorizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhoAuthorized", varargs...)
	ret0, _ := ret[0].(*authorizationv1beta1.WhoAuthorizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoAuthorized indicates an expected call of WhoAuthorized.
func (mr *MockAuthorizationAPIClientMockRecorder) WhoAuthorized(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAuthorized", reflect.TypeOf((*MockAuthorizationAPIClient)(nil).WhoAuthorized), varargs...)
}
