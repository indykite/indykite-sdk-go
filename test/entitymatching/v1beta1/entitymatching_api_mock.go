// Copyright (c) 2022 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/indykite/indykite-sdk-go/gen/indykite/entitymatching/v1beta1 (interfaces: EntityMatchingAPIClient)
//
// Generated by this command:
//
//	mockgen -copyright_file ./doc/LICENSE -package entitymatching -destination ./test/entitymatching/v1beta1/entitymatching_api_mock.go github.com/indykite/indykite-sdk-go/gen/indykite/entitymatching/v1beta1 EntityMatchingAPIClient
//

// Package entitymatching is a generated GoMock package.
package entitymatching

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"

	entitymatchingv1beta1 "github.com/indykite/indykite-sdk-go/gen/indykite/entitymatching/v1beta1"
)

// MockEntityMatchingAPIClient is a mock of EntityMatchingAPIClient interface.
type MockEntityMatchingAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockEntityMatchingAPIClientMockRecorder
	isgomock struct{}
}

// MockEntityMatchingAPIClientMockRecorder is the mock recorder for MockEntityMatchingAPIClient.
type MockEntityMatchingAPIClientMockRecorder struct {
	mock *MockEntityMatchingAPIClient
}

// NewMockEntityMatchingAPIClient creates a new mock instance.
func NewMockEntityMatchingAPIClient(ctrl *gomock.Controller) *MockEntityMatchingAPIClient {
	mock := &MockEntityMatchingAPIClient{ctrl: ctrl}
	mock.recorder = &MockEntityMatchingAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityMatchingAPIClient) EXPECT() *MockEntityMatchingAPIClientMockRecorder {
	return m.recorder
}

// ReadSuggestedPropertyMapping mocks base method.
func (m *MockEntityMatchingAPIClient) ReadSuggestedPropertyMapping(ctx context.Context, in *entitymatchingv1beta1.ReadSuggestedPropertyMappingRequest, opts ...grpc.CallOption) (*entitymatchingv1beta1.ReadSuggestedPropertyMappingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadSuggestedPropertyMapping", varargs...)
	ret0, _ := ret[0].(*entitymatchingv1beta1.ReadSuggestedPropertyMappingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSuggestedPropertyMapping indicates an expected call of ReadSuggestedPropertyMapping.
func (mr *MockEntityMatchingAPIClientMockRecorder) ReadSuggestedPropertyMapping(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSuggestedPropertyMapping", reflect.TypeOf((*MockEntityMatchingAPIClient)(nil).ReadSuggestedPropertyMapping), varargs...)
}

// RunEntityMatchingPipeline mocks base method.
func (m *MockEntityMatchingAPIClient) RunEntityMatchingPipeline(ctx context.Context, in *entitymatchingv1beta1.RunEntityMatchingPipelineRequest, opts ...grpc.CallOption) (*entitymatchingv1beta1.RunEntityMatchingPipelineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunEntityMatchingPipeline", varargs...)
	ret0, _ := ret[0].(*entitymatchingv1beta1.RunEntityMatchingPipelineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunEntityMatchingPipeline indicates an expected call of RunEntityMatchingPipeline.
func (mr *MockEntityMatchingAPIClientMockRecorder) RunEntityMatchingPipeline(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunEntityMatchingPipeline", reflect.TypeOf((*MockEntityMatchingAPIClient)(nil).RunEntityMatchingPipeline), varargs...)
}
