// Copyright (c) 2022 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./gen/indykite/identity/v1beta1/identity_management_api_grpc.pb.go

// Package identity is a generated GoMock package.
package identity

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	identityv1beta1 "github.com/indykite/jarvis-sdk-go/gen/indykite/identity/v1beta1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockIdentityManagementAPIClient is a mock of IdentityManagementAPIClient interface.
type MockIdentityManagementAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagementAPIClientMockRecorder
}

// MockIdentityManagementAPIClientMockRecorder is the mock recorder for MockIdentityManagementAPIClient.
type MockIdentityManagementAPIClientMockRecorder struct {
	mock *MockIdentityManagementAPIClient
}

// NewMockIdentityManagementAPIClient creates a new mock instance.
func NewMockIdentityManagementAPIClient(ctrl *gomock.Controller) *MockIdentityManagementAPIClient {
	mock := &MockIdentityManagementAPIClient{ctrl: ctrl}
	mock.recorder = &MockIdentityManagementAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityManagementAPIClient) EXPECT() *MockIdentityManagementAPIClientMockRecorder {
	return m.recorder
}

// BatchGetDocuments mocks base method.
func (m *MockIdentityManagementAPIClient) BatchGetDocuments(ctx context.Context, in *identityv1beta1.BatchGetDocumentsRequest, opts ...grpc.CallOption) (identityv1beta1.IdentityManagementAPI_BatchGetDocumentsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDocuments", varargs...)
	ret0, _ := ret[0].(identityv1beta1.IdentityManagementAPI_BatchGetDocumentsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDocuments indicates an expected call of BatchGetDocuments.
func (mr *MockIdentityManagementAPIClientMockRecorder) BatchGetDocuments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDocuments", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).BatchGetDocuments), varargs...)
}

// CancelInvitation mocks base method.
func (m *MockIdentityManagementAPIClient) CancelInvitation(ctx context.Context, in *identityv1beta1.CancelInvitationRequest, opts ...grpc.CallOption) (*identityv1beta1.CancelInvitationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelInvitation", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.CancelInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelInvitation indicates an expected call of CancelInvitation.
func (mr *MockIdentityManagementAPIClientMockRecorder) CancelInvitation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelInvitation", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).CancelInvitation), varargs...)
}

// ChangePassword mocks base method.
func (m *MockIdentityManagementAPIClient) ChangePassword(ctx context.Context, in *identityv1beta1.ChangePasswordRequest, opts ...grpc.CallOption) (*identityv1beta1.ChangePasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePassword", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.ChangePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockIdentityManagementAPIClientMockRecorder) ChangePassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).ChangePassword), varargs...)
}

// CheckConsentChallenge mocks base method.
func (m *MockIdentityManagementAPIClient) CheckConsentChallenge(ctx context.Context, in *identityv1beta1.CheckConsentChallengeRequest, opts ...grpc.CallOption) (*identityv1beta1.CheckConsentChallengeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckConsentChallenge", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.CheckConsentChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckConsentChallenge indicates an expected call of CheckConsentChallenge.
func (mr *MockIdentityManagementAPIClientMockRecorder) CheckConsentChallenge(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConsentChallenge", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).CheckConsentChallenge), varargs...)
}

// CheckInvitationState mocks base method.
func (m *MockIdentityManagementAPIClient) CheckInvitationState(ctx context.Context, in *identityv1beta1.CheckInvitationStateRequest, opts ...grpc.CallOption) (*identityv1beta1.CheckInvitationStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckInvitationState", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.CheckInvitationStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInvitationState indicates an expected call of CheckInvitationState.
func (mr *MockIdentityManagementAPIClientMockRecorder) CheckInvitationState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInvitationState", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).CheckInvitationState), varargs...)
}

// CreateConsentVerifier mocks base method.
func (m *MockIdentityManagementAPIClient) CreateConsentVerifier(ctx context.Context, in *identityv1beta1.CreateConsentVerifierRequest, opts ...grpc.CallOption) (*identityv1beta1.CreateConsentVerifierResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConsentVerifier", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.CreateConsentVerifierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsentVerifier indicates an expected call of CreateConsentVerifier.
func (mr *MockIdentityManagementAPIClientMockRecorder) CreateConsentVerifier(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsentVerifier", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).CreateConsentVerifier), varargs...)
}

// CreateInvitation mocks base method.
func (m *MockIdentityManagementAPIClient) CreateInvitation(ctx context.Context, in *identityv1beta1.CreateInvitationRequest, opts ...grpc.CallOption) (*identityv1beta1.CreateInvitationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInvitation", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.CreateInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockIdentityManagementAPIClientMockRecorder) CreateInvitation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).CreateInvitation), varargs...)
}

// DeleteDigitalTwin mocks base method.
func (m *MockIdentityManagementAPIClient) DeleteDigitalTwin(ctx context.Context, in *identityv1beta1.DeleteDigitalTwinRequest, opts ...grpc.CallOption) (*identityv1beta1.DeleteDigitalTwinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDigitalTwin", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.DeleteDigitalTwinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDigitalTwin indicates an expected call of DeleteDigitalTwin.
func (mr *MockIdentityManagementAPIClientMockRecorder) DeleteDigitalTwin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDigitalTwin", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).DeleteDigitalTwin), varargs...)
}

// EnrichToken mocks base method.
func (m *MockIdentityManagementAPIClient) EnrichToken(ctx context.Context, in *identityv1beta1.EnrichTokenRequest, opts ...grpc.CallOption) (*identityv1beta1.EnrichTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnrichToken", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.EnrichTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrichToken indicates an expected call of EnrichToken.
func (mr *MockIdentityManagementAPIClientMockRecorder) EnrichToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichToken", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).EnrichToken), varargs...)
}

// GetAccessToken mocks base method.
func (m *MockIdentityManagementAPIClient) GetAccessToken(ctx context.Context, in *identityv1beta1.GetAccessTokenRequest, opts ...grpc.CallOption) (*identityv1beta1.GetAccessTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessToken", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.GetAccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockIdentityManagementAPIClientMockRecorder) GetAccessToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).GetAccessToken), varargs...)
}

// GetDigitalTwin mocks base method.
func (m *MockIdentityManagementAPIClient) GetDigitalTwin(ctx context.Context, in *identityv1beta1.GetDigitalTwinRequest, opts ...grpc.CallOption) (*identityv1beta1.GetDigitalTwinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDigitalTwin", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.GetDigitalTwinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigitalTwin indicates an expected call of GetDigitalTwin.
func (mr *MockIdentityManagementAPIClientMockRecorder) GetDigitalTwin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigitalTwin", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).GetDigitalTwin), varargs...)
}

// GetDocument mocks base method.
func (m *MockIdentityManagementAPIClient) GetDocument(ctx context.Context, in *identityv1beta1.GetDocumentRequest, opts ...grpc.CallOption) (*identityv1beta1.GetDocumentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocument", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.GetDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockIdentityManagementAPIClientMockRecorder) GetDocument(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).GetDocument), varargs...)
}

// GetPasswordCredential mocks base method.
func (m *MockIdentityManagementAPIClient) GetPasswordCredential(ctx context.Context, in *identityv1beta1.GetPasswordCredentialRequest, opts ...grpc.CallOption) (*identityv1beta1.GetPasswordCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPasswordCredential", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.GetPasswordCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordCredential indicates an expected call of GetPasswordCredential.
func (mr *MockIdentityManagementAPIClientMockRecorder) GetPasswordCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordCredential", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).GetPasswordCredential), varargs...)
}

// ImportDigitalTwins mocks base method.
func (m *MockIdentityManagementAPIClient) ImportDigitalTwins(ctx context.Context, in *identityv1beta1.ImportDigitalTwinsRequest, opts ...grpc.CallOption) (*identityv1beta1.ImportDigitalTwinsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportDigitalTwins", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.ImportDigitalTwinsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDigitalTwins indicates an expected call of ImportDigitalTwins.
func (mr *MockIdentityManagementAPIClientMockRecorder) ImportDigitalTwins(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDigitalTwins", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).ImportDigitalTwins), varargs...)
}

// IsAuthorized mocks base method.
func (m *MockIdentityManagementAPIClient) IsAuthorized(ctx context.Context, in *identityv1beta1.IsAuthorizedRequest, opts ...grpc.CallOption) (*identityv1beta1.IsAuthorizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAuthorized", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.IsAuthorizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockIdentityManagementAPIClientMockRecorder) IsAuthorized(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).IsAuthorized), varargs...)
}

// ListDigitalTwins mocks base method.
func (m *MockIdentityManagementAPIClient) ListDigitalTwins(ctx context.Context, in *identityv1beta1.ListDigitalTwinsRequest, opts ...grpc.CallOption) (*identityv1beta1.ListDigitalTwinsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDigitalTwins", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.ListDigitalTwinsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDigitalTwins indicates an expected call of ListDigitalTwins.
func (mr *MockIdentityManagementAPIClientMockRecorder) ListDigitalTwins(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDigitalTwins", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).ListDigitalTwins), varargs...)
}

// ListDocuments mocks base method.
func (m *MockIdentityManagementAPIClient) ListDocuments(ctx context.Context, in *identityv1beta1.ListDocumentsRequest, opts ...grpc.CallOption) (*identityv1beta1.ListDocumentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDocuments", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.ListDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDocuments indicates an expected call of ListDocuments.
func (mr *MockIdentityManagementAPIClientMockRecorder) ListDocuments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocuments", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).ListDocuments), varargs...)
}

// MutateDocuments mocks base method.
func (m *MockIdentityManagementAPIClient) MutateDocuments(ctx context.Context, in *identityv1beta1.MutateDocumentsRequest, opts ...grpc.CallOption) (*identityv1beta1.MutateDocumentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MutateDocuments", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.MutateDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MutateDocuments indicates an expected call of MutateDocuments.
func (mr *MockIdentityManagementAPIClientMockRecorder) MutateDocuments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutateDocuments", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).MutateDocuments), varargs...)
}

// PatchDigitalTwin mocks base method.
func (m *MockIdentityManagementAPIClient) PatchDigitalTwin(ctx context.Context, in *identityv1beta1.PatchDigitalTwinRequest, opts ...grpc.CallOption) (*identityv1beta1.PatchDigitalTwinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDigitalTwin", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.PatchDigitalTwinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchDigitalTwin indicates an expected call of PatchDigitalTwin.
func (mr *MockIdentityManagementAPIClientMockRecorder) PatchDigitalTwin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDigitalTwin", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).PatchDigitalTwin), varargs...)
}

// RegisterDigitalTwinWithoutCredential mocks base method.
func (m *MockIdentityManagementAPIClient) RegisterDigitalTwinWithoutCredential(ctx context.Context, in *identityv1beta1.RegisterDigitalTwinWithoutCredentialRequest, opts ...grpc.CallOption) (*identityv1beta1.RegisterDigitalTwinWithoutCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterDigitalTwinWithoutCredential", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.RegisterDigitalTwinWithoutCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDigitalTwinWithoutCredential indicates an expected call of RegisterDigitalTwinWithoutCredential.
func (mr *MockIdentityManagementAPIClientMockRecorder) RegisterDigitalTwinWithoutCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDigitalTwinWithoutCredential", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).RegisterDigitalTwinWithoutCredential), varargs...)
}

// ResendInvitation mocks base method.
func (m *MockIdentityManagementAPIClient) ResendInvitation(ctx context.Context, in *identityv1beta1.ResendInvitationRequest, opts ...grpc.CallOption) (*identityv1beta1.ResendInvitationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResendInvitation", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.ResendInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendInvitation indicates an expected call of ResendInvitation.
func (mr *MockIdentityManagementAPIClientMockRecorder) ResendInvitation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendInvitation", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).ResendInvitation), varargs...)
}

// RunQuery mocks base method.
func (m *MockIdentityManagementAPIClient) RunQuery(ctx context.Context, in *identityv1beta1.RunQueryRequest, opts ...grpc.CallOption) (identityv1beta1.IdentityManagementAPI_RunQueryClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunQuery", varargs...)
	ret0, _ := ret[0].(identityv1beta1.IdentityManagementAPI_RunQueryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunQuery indicates an expected call of RunQuery.
func (mr *MockIdentityManagementAPIClientMockRecorder) RunQuery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunQuery", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).RunQuery), varargs...)
}

// SelfServiceTerminateSession mocks base method.
func (m *MockIdentityManagementAPIClient) SelfServiceTerminateSession(ctx context.Context, in *identityv1beta1.SelfServiceTerminateSessionRequest, opts ...grpc.CallOption) (*identityv1beta1.SelfServiceTerminateSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelfServiceTerminateSession", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.SelfServiceTerminateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelfServiceTerminateSession indicates an expected call of SelfServiceTerminateSession.
func (mr *MockIdentityManagementAPIClientMockRecorder) SelfServiceTerminateSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfServiceTerminateSession", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).SelfServiceTerminateSession), varargs...)
}

// SessionIntrospect mocks base method.
func (m *MockIdentityManagementAPIClient) SessionIntrospect(ctx context.Context, in *identityv1beta1.SessionIntrospectRequest, opts ...grpc.CallOption) (*identityv1beta1.SessionIntrospectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SessionIntrospect", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.SessionIntrospectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionIntrospect indicates an expected call of SessionIntrospect.
func (mr *MockIdentityManagementAPIClientMockRecorder) SessionIntrospect(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionIntrospect", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).SessionIntrospect), varargs...)
}

// StartDigitalTwinEmailVerification mocks base method.
func (m *MockIdentityManagementAPIClient) StartDigitalTwinEmailVerification(ctx context.Context, in *identityv1beta1.StartDigitalTwinEmailVerificationRequest, opts ...grpc.CallOption) (*identityv1beta1.StartDigitalTwinEmailVerificationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDigitalTwinEmailVerification", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.StartDigitalTwinEmailVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDigitalTwinEmailVerification indicates an expected call of StartDigitalTwinEmailVerification.
func (mr *MockIdentityManagementAPIClientMockRecorder) StartDigitalTwinEmailVerification(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDigitalTwinEmailVerification", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).StartDigitalTwinEmailVerification), varargs...)
}

// StartForgottenPasswordFlow mocks base method.
func (m *MockIdentityManagementAPIClient) StartForgottenPasswordFlow(ctx context.Context, in *identityv1beta1.StartForgottenPasswordFlowRequest, opts ...grpc.CallOption) (*identityv1beta1.StartForgottenPasswordFlowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartForgottenPasswordFlow", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.StartForgottenPasswordFlowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartForgottenPasswordFlow indicates an expected call of StartForgottenPasswordFlow.
func (mr *MockIdentityManagementAPIClientMockRecorder) StartForgottenPasswordFlow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartForgottenPasswordFlow", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).StartForgottenPasswordFlow), varargs...)
}

// TokenIntrospect mocks base method.
func (m *MockIdentityManagementAPIClient) TokenIntrospect(ctx context.Context, in *identityv1beta1.TokenIntrospectRequest, opts ...grpc.CallOption) (*identityv1beta1.TokenIntrospectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TokenIntrospect", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.TokenIntrospectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenIntrospect indicates an expected call of TokenIntrospect.
func (mr *MockIdentityManagementAPIClientMockRecorder) TokenIntrospect(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenIntrospect", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).TokenIntrospect), varargs...)
}

// UpdatePasswordCredential mocks base method.
func (m *MockIdentityManagementAPIClient) UpdatePasswordCredential(ctx context.Context, in *identityv1beta1.UpdatePasswordCredentialRequest, opts ...grpc.CallOption) (*identityv1beta1.UpdatePasswordCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePasswordCredential", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.UpdatePasswordCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePasswordCredential indicates an expected call of UpdatePasswordCredential.
func (mr *MockIdentityManagementAPIClientMockRecorder) UpdatePasswordCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordCredential", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).UpdatePasswordCredential), varargs...)
}

// VerifyDigitalTwinEmail mocks base method.
func (m *MockIdentityManagementAPIClient) VerifyDigitalTwinEmail(ctx context.Context, in *identityv1beta1.VerifyDigitalTwinEmailRequest, opts ...grpc.CallOption) (*identityv1beta1.VerifyDigitalTwinEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyDigitalTwinEmail", varargs...)
	ret0, _ := ret[0].(*identityv1beta1.VerifyDigitalTwinEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyDigitalTwinEmail indicates an expected call of VerifyDigitalTwinEmail.
func (mr *MockIdentityManagementAPIClientMockRecorder) VerifyDigitalTwinEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDigitalTwinEmail", reflect.TypeOf((*MockIdentityManagementAPIClient)(nil).VerifyDigitalTwinEmail), varargs...)
}

// MockIdentityManagementAPI_BatchGetDocumentsClient is a mock of IdentityManagementAPI_BatchGetDocumentsClient interface.
type MockIdentityManagementAPI_BatchGetDocumentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder
}

// MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder is the mock recorder for MockIdentityManagementAPI_BatchGetDocumentsClient.
type MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder struct {
	mock *MockIdentityManagementAPI_BatchGetDocumentsClient
}

// NewMockIdentityManagementAPI_BatchGetDocumentsClient creates a new mock instance.
func NewMockIdentityManagementAPI_BatchGetDocumentsClient(ctrl *gomock.Controller) *MockIdentityManagementAPI_BatchGetDocumentsClient {
	mock := &MockIdentityManagementAPI_BatchGetDocumentsClient{ctrl: ctrl}
	mock.recorder = &MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityManagementAPI_BatchGetDocumentsClient) EXPECT() *MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsClient) Recv() (*identityv1beta1.BatchGetDocumentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*identityv1beta1.BatchGetDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockIdentityManagementAPI_BatchGetDocumentsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockIdentityManagementAPI_BatchGetDocumentsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsClient)(nil).Trailer))
}

// MockIdentityManagementAPI_RunQueryClient is a mock of IdentityManagementAPI_RunQueryClient interface.
type MockIdentityManagementAPI_RunQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagementAPI_RunQueryClientMockRecorder
}

// MockIdentityManagementAPI_RunQueryClientMockRecorder is the mock recorder for MockIdentityManagementAPI_RunQueryClient.
type MockIdentityManagementAPI_RunQueryClientMockRecorder struct {
	mock *MockIdentityManagementAPI_RunQueryClient
}

// NewMockIdentityManagementAPI_RunQueryClient creates a new mock instance.
func NewMockIdentityManagementAPI_RunQueryClient(ctrl *gomock.Controller) *MockIdentityManagementAPI_RunQueryClient {
	mock := &MockIdentityManagementAPI_RunQueryClient{ctrl: ctrl}
	mock.recorder = &MockIdentityManagementAPI_RunQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityManagementAPI_RunQueryClient) EXPECT() *MockIdentityManagementAPI_RunQueryClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockIdentityManagementAPI_RunQueryClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockIdentityManagementAPI_RunQueryClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockIdentityManagementAPI_RunQueryClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockIdentityManagementAPI_RunQueryClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryClient)(nil).Context))
}

// Header mocks base method.
func (m *MockIdentityManagementAPI_RunQueryClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockIdentityManagementAPI_RunQueryClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockIdentityManagementAPI_RunQueryClient) Recv() (*identityv1beta1.RunQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*identityv1beta1.RunQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockIdentityManagementAPI_RunQueryClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockIdentityManagementAPI_RunQueryClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockIdentityManagementAPI_RunQueryClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockIdentityManagementAPI_RunQueryClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockIdentityManagementAPI_RunQueryClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockIdentityManagementAPI_RunQueryClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockIdentityManagementAPI_RunQueryClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryClient)(nil).Trailer))
}

// MockIdentityManagementAPIServer is a mock of IdentityManagementAPIServer interface.
type MockIdentityManagementAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagementAPIServerMockRecorder
}

// MockIdentityManagementAPIServerMockRecorder is the mock recorder for MockIdentityManagementAPIServer.
type MockIdentityManagementAPIServerMockRecorder struct {
	mock *MockIdentityManagementAPIServer
}

// NewMockIdentityManagementAPIServer creates a new mock instance.
func NewMockIdentityManagementAPIServer(ctrl *gomock.Controller) *MockIdentityManagementAPIServer {
	mock := &MockIdentityManagementAPIServer{ctrl: ctrl}
	mock.recorder = &MockIdentityManagementAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityManagementAPIServer) EXPECT() *MockIdentityManagementAPIServerMockRecorder {
	return m.recorder
}

// BatchGetDocuments mocks base method.
func (m *MockIdentityManagementAPIServer) BatchGetDocuments(arg0 *identityv1beta1.BatchGetDocumentsRequest, arg1 identityv1beta1.IdentityManagementAPI_BatchGetDocumentsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDocuments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchGetDocuments indicates an expected call of BatchGetDocuments.
func (mr *MockIdentityManagementAPIServerMockRecorder) BatchGetDocuments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDocuments", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).BatchGetDocuments), arg0, arg1)
}

// CancelInvitation mocks base method.
func (m *MockIdentityManagementAPIServer) CancelInvitation(arg0 context.Context, arg1 *identityv1beta1.CancelInvitationRequest) (*identityv1beta1.CancelInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelInvitation", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.CancelInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelInvitation indicates an expected call of CancelInvitation.
func (mr *MockIdentityManagementAPIServerMockRecorder) CancelInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelInvitation", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).CancelInvitation), arg0, arg1)
}

// ChangePassword mocks base method.
func (m *MockIdentityManagementAPIServer) ChangePassword(arg0 context.Context, arg1 *identityv1beta1.ChangePasswordRequest) (*identityv1beta1.ChangePasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.ChangePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockIdentityManagementAPIServerMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).ChangePassword), arg0, arg1)
}

// CheckConsentChallenge mocks base method.
func (m *MockIdentityManagementAPIServer) CheckConsentChallenge(arg0 context.Context, arg1 *identityv1beta1.CheckConsentChallengeRequest) (*identityv1beta1.CheckConsentChallengeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConsentChallenge", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.CheckConsentChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckConsentChallenge indicates an expected call of CheckConsentChallenge.
func (mr *MockIdentityManagementAPIServerMockRecorder) CheckConsentChallenge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConsentChallenge", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).CheckConsentChallenge), arg0, arg1)
}

// CheckInvitationState mocks base method.
func (m *MockIdentityManagementAPIServer) CheckInvitationState(arg0 context.Context, arg1 *identityv1beta1.CheckInvitationStateRequest) (*identityv1beta1.CheckInvitationStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInvitationState", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.CheckInvitationStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInvitationState indicates an expected call of CheckInvitationState.
func (mr *MockIdentityManagementAPIServerMockRecorder) CheckInvitationState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInvitationState", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).CheckInvitationState), arg0, arg1)
}

// CreateConsentVerifier mocks base method.
func (m *MockIdentityManagementAPIServer) CreateConsentVerifier(arg0 context.Context, arg1 *identityv1beta1.CreateConsentVerifierRequest) (*identityv1beta1.CreateConsentVerifierResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsentVerifier", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.CreateConsentVerifierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsentVerifier indicates an expected call of CreateConsentVerifier.
func (mr *MockIdentityManagementAPIServerMockRecorder) CreateConsentVerifier(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsentVerifier", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).CreateConsentVerifier), arg0, arg1)
}

// CreateInvitation mocks base method.
func (m *MockIdentityManagementAPIServer) CreateInvitation(arg0 context.Context, arg1 *identityv1beta1.CreateInvitationRequest) (*identityv1beta1.CreateInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.CreateInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockIdentityManagementAPIServerMockRecorder) CreateInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).CreateInvitation), arg0, arg1)
}

// DeleteDigitalTwin mocks base method.
func (m *MockIdentityManagementAPIServer) DeleteDigitalTwin(arg0 context.Context, arg1 *identityv1beta1.DeleteDigitalTwinRequest) (*identityv1beta1.DeleteDigitalTwinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDigitalTwin", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.DeleteDigitalTwinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDigitalTwin indicates an expected call of DeleteDigitalTwin.
func (mr *MockIdentityManagementAPIServerMockRecorder) DeleteDigitalTwin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDigitalTwin", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).DeleteDigitalTwin), arg0, arg1)
}

// EnrichToken mocks base method.
func (m *MockIdentityManagementAPIServer) EnrichToken(arg0 context.Context, arg1 *identityv1beta1.EnrichTokenRequest) (*identityv1beta1.EnrichTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichToken", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.EnrichTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrichToken indicates an expected call of EnrichToken.
func (mr *MockIdentityManagementAPIServerMockRecorder) EnrichToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichToken", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).EnrichToken), arg0, arg1)
}

// GetAccessToken mocks base method.
func (m *MockIdentityManagementAPIServer) GetAccessToken(arg0 context.Context, arg1 *identityv1beta1.GetAccessTokenRequest) (*identityv1beta1.GetAccessTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.GetAccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockIdentityManagementAPIServerMockRecorder) GetAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).GetAccessToken), arg0, arg1)
}

// GetDigitalTwin mocks base method.
func (m *MockIdentityManagementAPIServer) GetDigitalTwin(arg0 context.Context, arg1 *identityv1beta1.GetDigitalTwinRequest) (*identityv1beta1.GetDigitalTwinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDigitalTwin", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.GetDigitalTwinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigitalTwin indicates an expected call of GetDigitalTwin.
func (mr *MockIdentityManagementAPIServerMockRecorder) GetDigitalTwin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigitalTwin", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).GetDigitalTwin), arg0, arg1)
}

// GetDocument mocks base method.
func (m *MockIdentityManagementAPIServer) GetDocument(arg0 context.Context, arg1 *identityv1beta1.GetDocumentRequest) (*identityv1beta1.GetDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.GetDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockIdentityManagementAPIServerMockRecorder) GetDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).GetDocument), arg0, arg1)
}

// GetPasswordCredential mocks base method.
func (m *MockIdentityManagementAPIServer) GetPasswordCredential(arg0 context.Context, arg1 *identityv1beta1.GetPasswordCredentialRequest) (*identityv1beta1.GetPasswordCredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordCredential", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.GetPasswordCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordCredential indicates an expected call of GetPasswordCredential.
func (mr *MockIdentityManagementAPIServerMockRecorder) GetPasswordCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordCredential", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).GetPasswordCredential), arg0, arg1)
}

// ImportDigitalTwins mocks base method.
func (m *MockIdentityManagementAPIServer) ImportDigitalTwins(arg0 context.Context, arg1 *identityv1beta1.ImportDigitalTwinsRequest) (*identityv1beta1.ImportDigitalTwinsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDigitalTwins", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.ImportDigitalTwinsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDigitalTwins indicates an expected call of ImportDigitalTwins.
func (mr *MockIdentityManagementAPIServerMockRecorder) ImportDigitalTwins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDigitalTwins", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).ImportDigitalTwins), arg0, arg1)
}

// IsAuthorized mocks base method.
func (m *MockIdentityManagementAPIServer) IsAuthorized(arg0 context.Context, arg1 *identityv1beta1.IsAuthorizedRequest) (*identityv1beta1.IsAuthorizedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.IsAuthorizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockIdentityManagementAPIServerMockRecorder) IsAuthorized(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).IsAuthorized), arg0, arg1)
}

// ListDigitalTwins mocks base method.
func (m *MockIdentityManagementAPIServer) ListDigitalTwins(arg0 context.Context, arg1 *identityv1beta1.ListDigitalTwinsRequest) (*identityv1beta1.ListDigitalTwinsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDigitalTwins", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.ListDigitalTwinsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDigitalTwins indicates an expected call of ListDigitalTwins.
func (mr *MockIdentityManagementAPIServerMockRecorder) ListDigitalTwins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDigitalTwins", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).ListDigitalTwins), arg0, arg1)
}

// ListDocuments mocks base method.
func (m *MockIdentityManagementAPIServer) ListDocuments(arg0 context.Context, arg1 *identityv1beta1.ListDocumentsRequest) (*identityv1beta1.ListDocumentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDocuments", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.ListDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDocuments indicates an expected call of ListDocuments.
func (mr *MockIdentityManagementAPIServerMockRecorder) ListDocuments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocuments", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).ListDocuments), arg0, arg1)
}

// MutateDocuments mocks base method.
func (m *MockIdentityManagementAPIServer) MutateDocuments(arg0 context.Context, arg1 *identityv1beta1.MutateDocumentsRequest) (*identityv1beta1.MutateDocumentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutateDocuments", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.MutateDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MutateDocuments indicates an expected call of MutateDocuments.
func (mr *MockIdentityManagementAPIServerMockRecorder) MutateDocuments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutateDocuments", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).MutateDocuments), arg0, arg1)
}

// PatchDigitalTwin mocks base method.
func (m *MockIdentityManagementAPIServer) PatchDigitalTwin(arg0 context.Context, arg1 *identityv1beta1.PatchDigitalTwinRequest) (*identityv1beta1.PatchDigitalTwinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDigitalTwin", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.PatchDigitalTwinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchDigitalTwin indicates an expected call of PatchDigitalTwin.
func (mr *MockIdentityManagementAPIServerMockRecorder) PatchDigitalTwin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDigitalTwin", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).PatchDigitalTwin), arg0, arg1)
}

// RegisterDigitalTwinWithoutCredential mocks base method.
func (m *MockIdentityManagementAPIServer) RegisterDigitalTwinWithoutCredential(arg0 context.Context, arg1 *identityv1beta1.RegisterDigitalTwinWithoutCredentialRequest) (*identityv1beta1.RegisterDigitalTwinWithoutCredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDigitalTwinWithoutCredential", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.RegisterDigitalTwinWithoutCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDigitalTwinWithoutCredential indicates an expected call of RegisterDigitalTwinWithoutCredential.
func (mr *MockIdentityManagementAPIServerMockRecorder) RegisterDigitalTwinWithoutCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDigitalTwinWithoutCredential", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).RegisterDigitalTwinWithoutCredential), arg0, arg1)
}

// ResendInvitation mocks base method.
func (m *MockIdentityManagementAPIServer) ResendInvitation(arg0 context.Context, arg1 *identityv1beta1.ResendInvitationRequest) (*identityv1beta1.ResendInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendInvitation", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.ResendInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendInvitation indicates an expected call of ResendInvitation.
func (mr *MockIdentityManagementAPIServerMockRecorder) ResendInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendInvitation", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).ResendInvitation), arg0, arg1)
}

// RunQuery mocks base method.
func (m *MockIdentityManagementAPIServer) RunQuery(arg0 *identityv1beta1.RunQueryRequest, arg1 identityv1beta1.IdentityManagementAPI_RunQueryServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunQuery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunQuery indicates an expected call of RunQuery.
func (mr *MockIdentityManagementAPIServerMockRecorder) RunQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunQuery", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).RunQuery), arg0, arg1)
}

// SelfServiceTerminateSession mocks base method.
func (m *MockIdentityManagementAPIServer) SelfServiceTerminateSession(arg0 context.Context, arg1 *identityv1beta1.SelfServiceTerminateSessionRequest) (*identityv1beta1.SelfServiceTerminateSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfServiceTerminateSession", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.SelfServiceTerminateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelfServiceTerminateSession indicates an expected call of SelfServiceTerminateSession.
func (mr *MockIdentityManagementAPIServerMockRecorder) SelfServiceTerminateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfServiceTerminateSession", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).SelfServiceTerminateSession), arg0, arg1)
}

// SessionIntrospect mocks base method.
func (m *MockIdentityManagementAPIServer) SessionIntrospect(arg0 context.Context, arg1 *identityv1beta1.SessionIntrospectRequest) (*identityv1beta1.SessionIntrospectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionIntrospect", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.SessionIntrospectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionIntrospect indicates an expected call of SessionIntrospect.
func (mr *MockIdentityManagementAPIServerMockRecorder) SessionIntrospect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionIntrospect", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).SessionIntrospect), arg0, arg1)
}

// StartDigitalTwinEmailVerification mocks base method.
func (m *MockIdentityManagementAPIServer) StartDigitalTwinEmailVerification(arg0 context.Context, arg1 *identityv1beta1.StartDigitalTwinEmailVerificationRequest) (*identityv1beta1.StartDigitalTwinEmailVerificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDigitalTwinEmailVerification", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.StartDigitalTwinEmailVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDigitalTwinEmailVerification indicates an expected call of StartDigitalTwinEmailVerification.
func (mr *MockIdentityManagementAPIServerMockRecorder) StartDigitalTwinEmailVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDigitalTwinEmailVerification", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).StartDigitalTwinEmailVerification), arg0, arg1)
}

// StartForgottenPasswordFlow mocks base method.
func (m *MockIdentityManagementAPIServer) StartForgottenPasswordFlow(arg0 context.Context, arg1 *identityv1beta1.StartForgottenPasswordFlowRequest) (*identityv1beta1.StartForgottenPasswordFlowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartForgottenPasswordFlow", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.StartForgottenPasswordFlowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartForgottenPasswordFlow indicates an expected call of StartForgottenPasswordFlow.
func (mr *MockIdentityManagementAPIServerMockRecorder) StartForgottenPasswordFlow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartForgottenPasswordFlow", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).StartForgottenPasswordFlow), arg0, arg1)
}

// TokenIntrospect mocks base method.
func (m *MockIdentityManagementAPIServer) TokenIntrospect(arg0 context.Context, arg1 *identityv1beta1.TokenIntrospectRequest) (*identityv1beta1.TokenIntrospectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenIntrospect", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.TokenIntrospectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenIntrospect indicates an expected call of TokenIntrospect.
func (mr *MockIdentityManagementAPIServerMockRecorder) TokenIntrospect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenIntrospect", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).TokenIntrospect), arg0, arg1)
}

// UpdatePasswordCredential mocks base method.
func (m *MockIdentityManagementAPIServer) UpdatePasswordCredential(arg0 context.Context, arg1 *identityv1beta1.UpdatePasswordCredentialRequest) (*identityv1beta1.UpdatePasswordCredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordCredential", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.UpdatePasswordCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePasswordCredential indicates an expected call of UpdatePasswordCredential.
func (mr *MockIdentityManagementAPIServerMockRecorder) UpdatePasswordCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordCredential", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).UpdatePasswordCredential), arg0, arg1)
}

// VerifyDigitalTwinEmail mocks base method.
func (m *MockIdentityManagementAPIServer) VerifyDigitalTwinEmail(arg0 context.Context, arg1 *identityv1beta1.VerifyDigitalTwinEmailRequest) (*identityv1beta1.VerifyDigitalTwinEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDigitalTwinEmail", arg0, arg1)
	ret0, _ := ret[0].(*identityv1beta1.VerifyDigitalTwinEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyDigitalTwinEmail indicates an expected call of VerifyDigitalTwinEmail.
func (mr *MockIdentityManagementAPIServerMockRecorder) VerifyDigitalTwinEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDigitalTwinEmail", reflect.TypeOf((*MockIdentityManagementAPIServer)(nil).VerifyDigitalTwinEmail), arg0, arg1)
}

// MockUnsafeIdentityManagementAPIServer is a mock of UnsafeIdentityManagementAPIServer interface.
type MockUnsafeIdentityManagementAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeIdentityManagementAPIServerMockRecorder
}

// MockUnsafeIdentityManagementAPIServerMockRecorder is the mock recorder for MockUnsafeIdentityManagementAPIServer.
type MockUnsafeIdentityManagementAPIServerMockRecorder struct {
	mock *MockUnsafeIdentityManagementAPIServer
}

// NewMockUnsafeIdentityManagementAPIServer creates a new mock instance.
func NewMockUnsafeIdentityManagementAPIServer(ctrl *gomock.Controller) *MockUnsafeIdentityManagementAPIServer {
	mock := &MockUnsafeIdentityManagementAPIServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeIdentityManagementAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeIdentityManagementAPIServer) EXPECT() *MockUnsafeIdentityManagementAPIServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedIdentityManagementAPIServer mocks base method.
func (m *MockUnsafeIdentityManagementAPIServer) mustEmbedUnimplementedIdentityManagementAPIServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIdentityManagementAPIServer")
}

// mustEmbedUnimplementedIdentityManagementAPIServer indicates an expected call of mustEmbedUnimplementedIdentityManagementAPIServer.
func (mr *MockUnsafeIdentityManagementAPIServerMockRecorder) mustEmbedUnimplementedIdentityManagementAPIServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIdentityManagementAPIServer", reflect.TypeOf((*MockUnsafeIdentityManagementAPIServer)(nil).mustEmbedUnimplementedIdentityManagementAPIServer))
}

// MockIdentityManagementAPI_BatchGetDocumentsServer is a mock of IdentityManagementAPI_BatchGetDocumentsServer interface.
type MockIdentityManagementAPI_BatchGetDocumentsServer struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder
}

// MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder is the mock recorder for MockIdentityManagementAPI_BatchGetDocumentsServer.
type MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder struct {
	mock *MockIdentityManagementAPI_BatchGetDocumentsServer
}

// NewMockIdentityManagementAPI_BatchGetDocumentsServer creates a new mock instance.
func NewMockIdentityManagementAPI_BatchGetDocumentsServer(ctrl *gomock.Controller) *MockIdentityManagementAPI_BatchGetDocumentsServer {
	mock := &MockIdentityManagementAPI_BatchGetDocumentsServer{ctrl: ctrl}
	mock.recorder = &MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityManagementAPI_BatchGetDocumentsServer) EXPECT() *MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockIdentityManagementAPI_BatchGetDocumentsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsServer) Send(arg0 *identityv1beta1.BatchGetDocumentsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockIdentityManagementAPI_BatchGetDocumentsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockIdentityManagementAPI_BatchGetDocumentsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockIdentityManagementAPI_BatchGetDocumentsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockIdentityManagementAPI_BatchGetDocumentsServer)(nil).SetTrailer), arg0)
}

// MockIdentityManagementAPI_RunQueryServer is a mock of IdentityManagementAPI_RunQueryServer interface.
type MockIdentityManagementAPI_RunQueryServer struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagementAPI_RunQueryServerMockRecorder
}

// MockIdentityManagementAPI_RunQueryServerMockRecorder is the mock recorder for MockIdentityManagementAPI_RunQueryServer.
type MockIdentityManagementAPI_RunQueryServerMockRecorder struct {
	mock *MockIdentityManagementAPI_RunQueryServer
}

// NewMockIdentityManagementAPI_RunQueryServer creates a new mock instance.
func NewMockIdentityManagementAPI_RunQueryServer(ctrl *gomock.Controller) *MockIdentityManagementAPI_RunQueryServer {
	mock := &MockIdentityManagementAPI_RunQueryServer{ctrl: ctrl}
	mock.recorder = &MockIdentityManagementAPI_RunQueryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityManagementAPI_RunQueryServer) EXPECT() *MockIdentityManagementAPI_RunQueryServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockIdentityManagementAPI_RunQueryServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockIdentityManagementAPI_RunQueryServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockIdentityManagementAPI_RunQueryServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockIdentityManagementAPI_RunQueryServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockIdentityManagementAPI_RunQueryServer) Send(arg0 *identityv1beta1.RunQueryResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIdentityManagementAPI_RunQueryServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockIdentityManagementAPI_RunQueryServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockIdentityManagementAPI_RunQueryServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockIdentityManagementAPI_RunQueryServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockIdentityManagementAPI_RunQueryServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockIdentityManagementAPI_RunQueryServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockIdentityManagementAPI_RunQueryServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockIdentityManagementAPI_RunQueryServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockIdentityManagementAPI_RunQueryServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockIdentityManagementAPI_RunQueryServer)(nil).SetTrailer), arg0)
}
