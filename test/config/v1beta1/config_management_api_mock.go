// Copyright (c) 2022 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/indykite/indykite-sdk-go/gen/indykite/config/v1beta1 (interfaces: ConfigManagementAPIClient,ConfigManagementAPI_ListApplicationSpacesClient,ConfigManagementAPI_ListApplicationsClient,ConfigManagementAPI_ListApplicationAgentsClient)
//
// Generated by this command:
//
//	mockgen -copyright_file ./doc/LICENSE -package config -destination ./test/config/v1beta1/config_management_api_mock.go github.com/indykite/indykite-sdk-go/gen/indykite/config/v1beta1 ConfigManagementAPIClient,ConfigManagementAPI_ListApplicationSpacesClient,ConfigManagementAPI_ListApplicationsClient,ConfigManagementAPI_ListApplicationAgentsClient
//

// Package config is a generated GoMock package.
package config

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"

	configv1beta1 "github.com/indykite/indykite-sdk-go/gen/indykite/config/v1beta1"
)

// MockConfigManagementAPIClient is a mock of ConfigManagementAPIClient interface.
type MockConfigManagementAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagementAPIClientMockRecorder
}

// MockConfigManagementAPIClientMockRecorder is the mock recorder for MockConfigManagementAPIClient.
type MockConfigManagementAPIClientMockRecorder struct {
	mock *MockConfigManagementAPIClient
}

// NewMockConfigManagementAPIClient creates a new mock instance.
func NewMockConfigManagementAPIClient(ctrl *gomock.Controller) *MockConfigManagementAPIClient {
	mock := &MockConfigManagementAPIClient{ctrl: ctrl}
	mock.recorder = &MockConfigManagementAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManagementAPIClient) EXPECT() *MockConfigManagementAPIClientMockRecorder {
	return m.recorder
}

// AssignPermissions mocks base method.
func (m *MockConfigManagementAPIClient) AssignPermissions(arg0 context.Context, arg1 *configv1beta1.AssignPermissionsRequest, arg2 ...grpc.CallOption) (*configv1beta1.AssignPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignPermissions", varargs...)
	ret0, _ := ret[0].(*configv1beta1.AssignPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignPermissions indicates an expected call of AssignPermissions.
func (mr *MockConfigManagementAPIClientMockRecorder) AssignPermissions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissions", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).AssignPermissions), varargs...)
}

// CreateApplication mocks base method.
func (m *MockConfigManagementAPIClient) CreateApplication(arg0 context.Context, arg1 *configv1beta1.CreateApplicationRequest, arg2 ...grpc.CallOption) (*configv1beta1.CreateApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplication", varargs...)
	ret0, _ := ret[0].(*configv1beta1.CreateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockConfigManagementAPIClientMockRecorder) CreateApplication(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).CreateApplication), varargs...)
}

// CreateApplicationAgent mocks base method.
func (m *MockConfigManagementAPIClient) CreateApplicationAgent(arg0 context.Context, arg1 *configv1beta1.CreateApplicationAgentRequest, arg2 ...grpc.CallOption) (*configv1beta1.CreateApplicationAgentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationAgent", varargs...)
	ret0, _ := ret[0].(*configv1beta1.CreateApplicationAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationAgent indicates an expected call of CreateApplicationAgent.
func (mr *MockConfigManagementAPIClientMockRecorder) CreateApplicationAgent(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationAgent", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).CreateApplicationAgent), varargs...)
}

// CreateApplicationSpace mocks base method.
func (m *MockConfigManagementAPIClient) CreateApplicationSpace(arg0 context.Context, arg1 *configv1beta1.CreateApplicationSpaceRequest, arg2 ...grpc.CallOption) (*configv1beta1.CreateApplicationSpaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationSpace", varargs...)
	ret0, _ := ret[0].(*configv1beta1.CreateApplicationSpaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationSpace indicates an expected call of CreateApplicationSpace.
func (mr *MockConfigManagementAPIClientMockRecorder) CreateApplicationSpace(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationSpace", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).CreateApplicationSpace), varargs...)
}

// CreateConfigNode mocks base method.
func (m *MockConfigManagementAPIClient) CreateConfigNode(arg0 context.Context, arg1 *configv1beta1.CreateConfigNodeRequest, arg2 ...grpc.CallOption) (*configv1beta1.CreateConfigNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigNode", varargs...)
	ret0, _ := ret[0].(*configv1beta1.CreateConfigNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigNode indicates an expected call of CreateConfigNode.
func (mr *MockConfigManagementAPIClientMockRecorder) CreateConfigNode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigNode", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).CreateConfigNode), varargs...)
}

// CreateServiceAccount mocks base method.
func (m *MockConfigManagementAPIClient) CreateServiceAccount(arg0 context.Context, arg1 *configv1beta1.CreateServiceAccountRequest, arg2 ...grpc.CallOption) (*configv1beta1.CreateServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceAccount", varargs...)
	ret0, _ := ret[0].(*configv1beta1.CreateServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockConfigManagementAPIClientMockRecorder) CreateServiceAccount(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).CreateServiceAccount), varargs...)
}

// DeleteApplication mocks base method.
func (m *MockConfigManagementAPIClient) DeleteApplication(arg0 context.Context, arg1 *configv1beta1.DeleteApplicationRequest, arg2 ...grpc.CallOption) (*configv1beta1.DeleteApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplication", varargs...)
	ret0, _ := ret[0].(*configv1beta1.DeleteApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockConfigManagementAPIClientMockRecorder) DeleteApplication(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).DeleteApplication), varargs...)
}

// DeleteApplicationAgent mocks base method.
func (m *MockConfigManagementAPIClient) DeleteApplicationAgent(arg0 context.Context, arg1 *configv1beta1.DeleteApplicationAgentRequest, arg2 ...grpc.CallOption) (*configv1beta1.DeleteApplicationAgentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationAgent", varargs...)
	ret0, _ := ret[0].(*configv1beta1.DeleteApplicationAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationAgent indicates an expected call of DeleteApplicationAgent.
func (mr *MockConfigManagementAPIClientMockRecorder) DeleteApplicationAgent(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAgent", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).DeleteApplicationAgent), varargs...)
}

// DeleteApplicationAgentCredential mocks base method.
func (m *MockConfigManagementAPIClient) DeleteApplicationAgentCredential(arg0 context.Context, arg1 *configv1beta1.DeleteApplicationAgentCredentialRequest, arg2 ...grpc.CallOption) (*configv1beta1.DeleteApplicationAgentCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationAgentCredential", varargs...)
	ret0, _ := ret[0].(*configv1beta1.DeleteApplicationAgentCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationAgentCredential indicates an expected call of DeleteApplicationAgentCredential.
func (mr *MockConfigManagementAPIClientMockRecorder) DeleteApplicationAgentCredential(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAgentCredential", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).DeleteApplicationAgentCredential), varargs...)
}

// DeleteApplicationSpace mocks base method.
func (m *MockConfigManagementAPIClient) DeleteApplicationSpace(arg0 context.Context, arg1 *configv1beta1.DeleteApplicationSpaceRequest, arg2 ...grpc.CallOption) (*configv1beta1.DeleteApplicationSpaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationSpace", varargs...)
	ret0, _ := ret[0].(*configv1beta1.DeleteApplicationSpaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationSpace indicates an expected call of DeleteApplicationSpace.
func (mr *MockConfigManagementAPIClientMockRecorder) DeleteApplicationSpace(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationSpace", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).DeleteApplicationSpace), varargs...)
}

// DeleteConfigNode mocks base method.
func (m *MockConfigManagementAPIClient) DeleteConfigNode(arg0 context.Context, arg1 *configv1beta1.DeleteConfigNodeRequest, arg2 ...grpc.CallOption) (*configv1beta1.DeleteConfigNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigNode", varargs...)
	ret0, _ := ret[0].(*configv1beta1.DeleteConfigNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigNode indicates an expected call of DeleteConfigNode.
func (mr *MockConfigManagementAPIClientMockRecorder) DeleteConfigNode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigNode", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).DeleteConfigNode), varargs...)
}

// DeleteServiceAccount mocks base method.
func (m *MockConfigManagementAPIClient) DeleteServiceAccount(arg0 context.Context, arg1 *configv1beta1.DeleteServiceAccountRequest, arg2 ...grpc.CallOption) (*configv1beta1.DeleteServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceAccount", varargs...)
	ret0, _ := ret[0].(*configv1beta1.DeleteServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockConfigManagementAPIClientMockRecorder) DeleteServiceAccount(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).DeleteServiceAccount), varargs...)
}

// DeleteServiceAccountCredential mocks base method.
func (m *MockConfigManagementAPIClient) DeleteServiceAccountCredential(arg0 context.Context, arg1 *configv1beta1.DeleteServiceAccountCredentialRequest, arg2 ...grpc.CallOption) (*configv1beta1.DeleteServiceAccountCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceAccountCredential", varargs...)
	ret0, _ := ret[0].(*configv1beta1.DeleteServiceAccountCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceAccountCredential indicates an expected call of DeleteServiceAccountCredential.
func (mr *MockConfigManagementAPIClientMockRecorder) DeleteServiceAccountCredential(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccountCredential", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).DeleteServiceAccountCredential), varargs...)
}

// ListApplicationAgents mocks base method.
func (m *MockConfigManagementAPIClient) ListApplicationAgents(arg0 context.Context, arg1 *configv1beta1.ListApplicationAgentsRequest, arg2 ...grpc.CallOption) (configv1beta1.ConfigManagementAPI_ListApplicationAgentsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAgents", varargs...)
	ret0, _ := ret[0].(configv1beta1.ConfigManagementAPI_ListApplicationAgentsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAgents indicates an expected call of ListApplicationAgents.
func (mr *MockConfigManagementAPIClientMockRecorder) ListApplicationAgents(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAgents", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ListApplicationAgents), varargs...)
}

// ListApplicationSpaces mocks base method.
func (m *MockConfigManagementAPIClient) ListApplicationSpaces(arg0 context.Context, arg1 *configv1beta1.ListApplicationSpacesRequest, arg2 ...grpc.CallOption) (configv1beta1.ConfigManagementAPI_ListApplicationSpacesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationSpaces", varargs...)
	ret0, _ := ret[0].(configv1beta1.ConfigManagementAPI_ListApplicationSpacesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationSpaces indicates an expected call of ListApplicationSpaces.
func (mr *MockConfigManagementAPIClientMockRecorder) ListApplicationSpaces(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationSpaces", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ListApplicationSpaces), varargs...)
}

// ListApplications mocks base method.
func (m *MockConfigManagementAPIClient) ListApplications(arg0 context.Context, arg1 *configv1beta1.ListApplicationsRequest, arg2 ...grpc.CallOption) (configv1beta1.ConfigManagementAPI_ListApplicationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplications", varargs...)
	ret0, _ := ret[0].(configv1beta1.ConfigManagementAPI_ListApplicationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockConfigManagementAPIClientMockRecorder) ListApplications(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ListApplications), varargs...)
}

// ListConfigNodeVersions mocks base method.
func (m *MockConfigManagementAPIClient) ListConfigNodeVersions(arg0 context.Context, arg1 *configv1beta1.ListConfigNodeVersionsRequest, arg2 ...grpc.CallOption) (*configv1beta1.ListConfigNodeVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigNodeVersions", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ListConfigNodeVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigNodeVersions indicates an expected call of ListConfigNodeVersions.
func (mr *MockConfigManagementAPIClientMockRecorder) ListConfigNodeVersions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigNodeVersions", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ListConfigNodeVersions), varargs...)
}

// ListPermissions mocks base method.
func (m *MockConfigManagementAPIClient) ListPermissions(arg0 context.Context, arg1 *configv1beta1.ListPermissionsRequest, arg2 ...grpc.CallOption) (*configv1beta1.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissions", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockConfigManagementAPIClientMockRecorder) ListPermissions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ListPermissions), varargs...)
}

// ReadApplication mocks base method.
func (m *MockConfigManagementAPIClient) ReadApplication(arg0 context.Context, arg1 *configv1beta1.ReadApplicationRequest, arg2 ...grpc.CallOption) (*configv1beta1.ReadApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadApplication", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ReadApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadApplication indicates an expected call of ReadApplication.
func (mr *MockConfigManagementAPIClientMockRecorder) ReadApplication(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadApplication", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ReadApplication), varargs...)
}

// ReadApplicationAgent mocks base method.
func (m *MockConfigManagementAPIClient) ReadApplicationAgent(arg0 context.Context, arg1 *configv1beta1.ReadApplicationAgentRequest, arg2 ...grpc.CallOption) (*configv1beta1.ReadApplicationAgentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadApplicationAgent", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ReadApplicationAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadApplicationAgent indicates an expected call of ReadApplicationAgent.
func (mr *MockConfigManagementAPIClientMockRecorder) ReadApplicationAgent(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadApplicationAgent", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ReadApplicationAgent), varargs...)
}

// ReadApplicationAgentCredential mocks base method.
func (m *MockConfigManagementAPIClient) ReadApplicationAgentCredential(arg0 context.Context, arg1 *configv1beta1.ReadApplicationAgentCredentialRequest, arg2 ...grpc.CallOption) (*configv1beta1.ReadApplicationAgentCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadApplicationAgentCredential", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ReadApplicationAgentCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadApplicationAgentCredential indicates an expected call of ReadApplicationAgentCredential.
func (mr *MockConfigManagementAPIClientMockRecorder) ReadApplicationAgentCredential(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadApplicationAgentCredential", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ReadApplicationAgentCredential), varargs...)
}

// ReadApplicationSpace mocks base method.
func (m *MockConfigManagementAPIClient) ReadApplicationSpace(arg0 context.Context, arg1 *configv1beta1.ReadApplicationSpaceRequest, arg2 ...grpc.CallOption) (*configv1beta1.ReadApplicationSpaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadApplicationSpace", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ReadApplicationSpaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadApplicationSpace indicates an expected call of ReadApplicationSpace.
func (mr *MockConfigManagementAPIClientMockRecorder) ReadApplicationSpace(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadApplicationSpace", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ReadApplicationSpace), varargs...)
}

// ReadConfigNode mocks base method.
func (m *MockConfigManagementAPIClient) ReadConfigNode(arg0 context.Context, arg1 *configv1beta1.ReadConfigNodeRequest, arg2 ...grpc.CallOption) (*configv1beta1.ReadConfigNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadConfigNode", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ReadConfigNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfigNode indicates an expected call of ReadConfigNode.
func (mr *MockConfigManagementAPIClientMockRecorder) ReadConfigNode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfigNode", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ReadConfigNode), varargs...)
}

// ReadCustomer mocks base method.
func (m *MockConfigManagementAPIClient) ReadCustomer(arg0 context.Context, arg1 *configv1beta1.ReadCustomerRequest, arg2 ...grpc.CallOption) (*configv1beta1.ReadCustomerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadCustomer", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ReadCustomerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCustomer indicates an expected call of ReadCustomer.
func (mr *MockConfigManagementAPIClientMockRecorder) ReadCustomer(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCustomer", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ReadCustomer), varargs...)
}

// ReadServiceAccount mocks base method.
func (m *MockConfigManagementAPIClient) ReadServiceAccount(arg0 context.Context, arg1 *configv1beta1.ReadServiceAccountRequest, arg2 ...grpc.CallOption) (*configv1beta1.ReadServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadServiceAccount", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ReadServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceAccount indicates an expected call of ReadServiceAccount.
func (mr *MockConfigManagementAPIClientMockRecorder) ReadServiceAccount(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceAccount", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ReadServiceAccount), varargs...)
}

// ReadServiceAccountCredential mocks base method.
func (m *MockConfigManagementAPIClient) ReadServiceAccountCredential(arg0 context.Context, arg1 *configv1beta1.ReadServiceAccountCredentialRequest, arg2 ...grpc.CallOption) (*configv1beta1.ReadServiceAccountCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadServiceAccountCredential", varargs...)
	ret0, _ := ret[0].(*configv1beta1.ReadServiceAccountCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceAccountCredential indicates an expected call of ReadServiceAccountCredential.
func (mr *MockConfigManagementAPIClientMockRecorder) ReadServiceAccountCredential(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceAccountCredential", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).ReadServiceAccountCredential), varargs...)
}

// RegisterApplicationAgentCredential mocks base method.
func (m *MockConfigManagementAPIClient) RegisterApplicationAgentCredential(arg0 context.Context, arg1 *configv1beta1.RegisterApplicationAgentCredentialRequest, arg2 ...grpc.CallOption) (*configv1beta1.RegisterApplicationAgentCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterApplicationAgentCredential", varargs...)
	ret0, _ := ret[0].(*configv1beta1.RegisterApplicationAgentCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterApplicationAgentCredential indicates an expected call of RegisterApplicationAgentCredential.
func (mr *MockConfigManagementAPIClientMockRecorder) RegisterApplicationAgentCredential(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterApplicationAgentCredential", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).RegisterApplicationAgentCredential), varargs...)
}

// RegisterServiceAccountCredential mocks base method.
func (m *MockConfigManagementAPIClient) RegisterServiceAccountCredential(arg0 context.Context, arg1 *configv1beta1.RegisterServiceAccountCredentialRequest, arg2 ...grpc.CallOption) (*configv1beta1.RegisterServiceAccountCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterServiceAccountCredential", varargs...)
	ret0, _ := ret[0].(*configv1beta1.RegisterServiceAccountCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterServiceAccountCredential indicates an expected call of RegisterServiceAccountCredential.
func (mr *MockConfigManagementAPIClientMockRecorder) RegisterServiceAccountCredential(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterServiceAccountCredential", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).RegisterServiceAccountCredential), varargs...)
}

// RevokePermissions mocks base method.
func (m *MockConfigManagementAPIClient) RevokePermissions(arg0 context.Context, arg1 *configv1beta1.RevokePermissionsRequest, arg2 ...grpc.CallOption) (*configv1beta1.RevokePermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokePermissions", varargs...)
	ret0, _ := ret[0].(*configv1beta1.RevokePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokePermissions indicates an expected call of RevokePermissions.
func (mr *MockConfigManagementAPIClientMockRecorder) RevokePermissions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePermissions", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).RevokePermissions), varargs...)
}

// UpdateApplication mocks base method.
func (m *MockConfigManagementAPIClient) UpdateApplication(arg0 context.Context, arg1 *configv1beta1.UpdateApplicationRequest, arg2 ...grpc.CallOption) (*configv1beta1.UpdateApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplication", varargs...)
	ret0, _ := ret[0].(*configv1beta1.UpdateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockConfigManagementAPIClientMockRecorder) UpdateApplication(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).UpdateApplication), varargs...)
}

// UpdateApplicationAgent mocks base method.
func (m *MockConfigManagementAPIClient) UpdateApplicationAgent(arg0 context.Context, arg1 *configv1beta1.UpdateApplicationAgentRequest, arg2 ...grpc.CallOption) (*configv1beta1.UpdateApplicationAgentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationAgent", varargs...)
	ret0, _ := ret[0].(*configv1beta1.UpdateApplicationAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationAgent indicates an expected call of UpdateApplicationAgent.
func (mr *MockConfigManagementAPIClientMockRecorder) UpdateApplicationAgent(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationAgent", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).UpdateApplicationAgent), varargs...)
}

// UpdateApplicationSpace mocks base method.
func (m *MockConfigManagementAPIClient) UpdateApplicationSpace(arg0 context.Context, arg1 *configv1beta1.UpdateApplicationSpaceRequest, arg2 ...grpc.CallOption) (*configv1beta1.UpdateApplicationSpaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationSpace", varargs...)
	ret0, _ := ret[0].(*configv1beta1.UpdateApplicationSpaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationSpace indicates an expected call of UpdateApplicationSpace.
func (mr *MockConfigManagementAPIClientMockRecorder) UpdateApplicationSpace(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationSpace", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).UpdateApplicationSpace), varargs...)
}

// UpdateConfigNode mocks base method.
func (m *MockConfigManagementAPIClient) UpdateConfigNode(arg0 context.Context, arg1 *configv1beta1.UpdateConfigNodeRequest, arg2 ...grpc.CallOption) (*configv1beta1.UpdateConfigNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigNode", varargs...)
	ret0, _ := ret[0].(*configv1beta1.UpdateConfigNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigNode indicates an expected call of UpdateConfigNode.
func (mr *MockConfigManagementAPIClientMockRecorder) UpdateConfigNode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigNode", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).UpdateConfigNode), varargs...)
}

// UpdateServiceAccount mocks base method.
func (m *MockConfigManagementAPIClient) UpdateServiceAccount(arg0 context.Context, arg1 *configv1beta1.UpdateServiceAccountRequest, arg2 ...grpc.CallOption) (*configv1beta1.UpdateServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceAccount", varargs...)
	ret0, _ := ret[0].(*configv1beta1.UpdateServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount.
func (mr *MockConfigManagementAPIClientMockRecorder) UpdateServiceAccount(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockConfigManagementAPIClient)(nil).UpdateServiceAccount), varargs...)
}

// MockConfigManagementAPI_ListApplicationSpacesClient is a mock of ConfigManagementAPI_ListApplicationSpacesClient interface.
type MockConfigManagementAPI_ListApplicationSpacesClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder
}

// MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder is the mock recorder for MockConfigManagementAPI_ListApplicationSpacesClient.
type MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder struct {
	mock *MockConfigManagementAPI_ListApplicationSpacesClient
}

// NewMockConfigManagementAPI_ListApplicationSpacesClient creates a new mock instance.
func NewMockConfigManagementAPI_ListApplicationSpacesClient(ctrl *gomock.Controller) *MockConfigManagementAPI_ListApplicationSpacesClient {
	mock := &MockConfigManagementAPI_ListApplicationSpacesClient{ctrl: ctrl}
	mock.recorder = &MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManagementAPI_ListApplicationSpacesClient) EXPECT() *MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConfigManagementAPI_ListApplicationSpacesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationSpacesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockConfigManagementAPI_ListApplicationSpacesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationSpacesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockConfigManagementAPI_ListApplicationSpacesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationSpacesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockConfigManagementAPI_ListApplicationSpacesClient) Recv() (*configv1beta1.ListApplicationSpacesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*configv1beta1.ListApplicationSpacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationSpacesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockConfigManagementAPI_ListApplicationSpacesClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationSpacesClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockConfigManagementAPI_ListApplicationSpacesClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationSpacesClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockConfigManagementAPI_ListApplicationSpacesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockConfigManagementAPI_ListApplicationSpacesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationSpacesClient)(nil).Trailer))
}

// MockConfigManagementAPI_ListApplicationsClient is a mock of ConfigManagementAPI_ListApplicationsClient interface.
type MockConfigManagementAPI_ListApplicationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagementAPI_ListApplicationsClientMockRecorder
}

// MockConfigManagementAPI_ListApplicationsClientMockRecorder is the mock recorder for MockConfigManagementAPI_ListApplicationsClient.
type MockConfigManagementAPI_ListApplicationsClientMockRecorder struct {
	mock *MockConfigManagementAPI_ListApplicationsClient
}

// NewMockConfigManagementAPI_ListApplicationsClient creates a new mock instance.
func NewMockConfigManagementAPI_ListApplicationsClient(ctrl *gomock.Controller) *MockConfigManagementAPI_ListApplicationsClient {
	mock := &MockConfigManagementAPI_ListApplicationsClient{ctrl: ctrl}
	mock.recorder = &MockConfigManagementAPI_ListApplicationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManagementAPI_ListApplicationsClient) EXPECT() *MockConfigManagementAPI_ListApplicationsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConfigManagementAPI_ListApplicationsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConfigManagementAPI_ListApplicationsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockConfigManagementAPI_ListApplicationsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigManagementAPI_ListApplicationsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockConfigManagementAPI_ListApplicationsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockConfigManagementAPI_ListApplicationsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockConfigManagementAPI_ListApplicationsClient) Recv() (*configv1beta1.ListApplicationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*configv1beta1.ListApplicationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConfigManagementAPI_ListApplicationsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockConfigManagementAPI_ListApplicationsClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigManagementAPI_ListApplicationsClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockConfigManagementAPI_ListApplicationsClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigManagementAPI_ListApplicationsClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockConfigManagementAPI_ListApplicationsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockConfigManagementAPI_ListApplicationsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationsClient)(nil).Trailer))
}

// MockConfigManagementAPI_ListApplicationAgentsClient is a mock of ConfigManagementAPI_ListApplicationAgentsClient interface.
type MockConfigManagementAPI_ListApplicationAgentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder
}

// MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder is the mock recorder for MockConfigManagementAPI_ListApplicationAgentsClient.
type MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder struct {
	mock *MockConfigManagementAPI_ListApplicationAgentsClient
}

// NewMockConfigManagementAPI_ListApplicationAgentsClient creates a new mock instance.
func NewMockConfigManagementAPI_ListApplicationAgentsClient(ctrl *gomock.Controller) *MockConfigManagementAPI_ListApplicationAgentsClient {
	mock := &MockConfigManagementAPI_ListApplicationAgentsClient{ctrl: ctrl}
	mock.recorder = &MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManagementAPI_ListApplicationAgentsClient) EXPECT() *MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConfigManagementAPI_ListApplicationAgentsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationAgentsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockConfigManagementAPI_ListApplicationAgentsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationAgentsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockConfigManagementAPI_ListApplicationAgentsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationAgentsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockConfigManagementAPI_ListApplicationAgentsClient) Recv() (*configv1beta1.ListApplicationAgentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*configv1beta1.ListApplicationAgentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationAgentsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockConfigManagementAPI_ListApplicationAgentsClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationAgentsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockConfigManagementAPI_ListApplicationAgentsClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationAgentsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockConfigManagementAPI_ListApplicationAgentsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockConfigManagementAPI_ListApplicationAgentsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigManagementAPI_ListApplicationAgentsClient)(nil).Trailer))
}
