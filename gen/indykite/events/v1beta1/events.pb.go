// Copyright (c) 2020 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: indykite/events/v1beta1/events.proto

package eventsv1beta1

import (
	reflect "reflect"
	sync "sync"

	latlng "google.golang.org/genproto/googleapis/type/latlng"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	v1beta1 "github.com/indykite/jarvis-sdk-go/gen/indykite/objects/v1beta1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LoginEventType defines the different login result states.
type LoginEventType int32

const (
	LoginEventType_LOGIN_EVENT_TYPE_INVALID LoginEventType = 0
	LoginEventType_LOGIN_EVENT_TYPE_SUCCESS LoginEventType = 1
	LoginEventType_LOGIN_EVENT_TYPE_FAILED  LoginEventType = 2
)

// Enum value maps for LoginEventType.
var (
	LoginEventType_name = map[int32]string{
		0: "LOGIN_EVENT_TYPE_INVALID",
		1: "LOGIN_EVENT_TYPE_SUCCESS",
		2: "LOGIN_EVENT_TYPE_FAILED",
	}
	LoginEventType_value = map[string]int32{
		"LOGIN_EVENT_TYPE_INVALID": 0,
		"LOGIN_EVENT_TYPE_SUCCESS": 1,
		"LOGIN_EVENT_TYPE_FAILED":  2,
	}
)

func (x LoginEventType) Enum() *LoginEventType {
	p := new(LoginEventType)
	*p = x
	return p
}

func (x LoginEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_events_v1beta1_events_proto_enumTypes[0].Descriptor()
}

func (LoginEventType) Type() protoreflect.EnumType {
	return &file_indykite_events_v1beta1_events_proto_enumTypes[0]
}

func (x LoginEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginEventType.Descriptor instead.
func (LoginEventType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{0}
}

type HTTPMethod int32

const (
	HTTPMethod_HTTP_METHOD_INVALID HTTPMethod = 0
	HTTPMethod_HTTP_METHOD_GET     HTTPMethod = 1
	HTTPMethod_HTTP_METHOD_HEAD    HTTPMethod = 2
	HTTPMethod_HTTP_METHOD_POST    HTTPMethod = 3
	HTTPMethod_HTTP_METHOD_PUT     HTTPMethod = 4
	HTTPMethod_HTTP_METHOD_PATCH   HTTPMethod = 5
	HTTPMethod_HTTP_METHOD_DELETE  HTTPMethod = 6
	HTTPMethod_HTTP_METHOD_CONNECT HTTPMethod = 7
	HTTPMethod_HTTP_METHOD_OPTIONS HTTPMethod = 8
	HTTPMethod_HTTP_METHOD_TRACE   HTTPMethod = 9
)

// Enum value maps for HTTPMethod.
var (
	HTTPMethod_name = map[int32]string{
		0: "HTTP_METHOD_INVALID",
		1: "HTTP_METHOD_GET",
		2: "HTTP_METHOD_HEAD",
		3: "HTTP_METHOD_POST",
		4: "HTTP_METHOD_PUT",
		5: "HTTP_METHOD_PATCH",
		6: "HTTP_METHOD_DELETE",
		7: "HTTP_METHOD_CONNECT",
		8: "HTTP_METHOD_OPTIONS",
		9: "HTTP_METHOD_TRACE",
	}
	HTTPMethod_value = map[string]int32{
		"HTTP_METHOD_INVALID": 0,
		"HTTP_METHOD_GET":     1,
		"HTTP_METHOD_HEAD":    2,
		"HTTP_METHOD_POST":    3,
		"HTTP_METHOD_PUT":     4,
		"HTTP_METHOD_PATCH":   5,
		"HTTP_METHOD_DELETE":  6,
		"HTTP_METHOD_CONNECT": 7,
		"HTTP_METHOD_OPTIONS": 8,
		"HTTP_METHOD_TRACE":   9,
	}
)

func (x HTTPMethod) Enum() *HTTPMethod {
	p := new(HTTPMethod)
	*p = x
	return p
}

func (x HTTPMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_events_v1beta1_events_proto_enumTypes[1].Descriptor()
}

func (HTTPMethod) Type() protoreflect.EnumType {
	return &file_indykite_events_v1beta1_events_proto_enumTypes[1]
}

func (x HTTPMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPMethod.Descriptor instead.
func (HTTPMethod) EnumDescriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{1}
}

type HTTPProtocol int32

const (
	HTTPProtocol_HTTP_PROTOCOL_INVALID  HTTPProtocol = 0
	HTTPProtocol_HTTP_PROTOCOL_HTTP_1_1 HTTPProtocol = 1
	HTTPProtocol_HTTP_PROTOCOL_HTTP_2_0 HTTPProtocol = 2
)

// Enum value maps for HTTPProtocol.
var (
	HTTPProtocol_name = map[int32]string{
		0: "HTTP_PROTOCOL_INVALID",
		1: "HTTP_PROTOCOL_HTTP_1_1",
		2: "HTTP_PROTOCOL_HTTP_2_0",
	}
	HTTPProtocol_value = map[string]int32{
		"HTTP_PROTOCOL_INVALID":  0,
		"HTTP_PROTOCOL_HTTP_1_1": 1,
		"HTTP_PROTOCOL_HTTP_2_0": 2,
	}
)

func (x HTTPProtocol) Enum() *HTTPProtocol {
	p := new(HTTPProtocol)
	*p = x
	return p
}

func (x HTTPProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_events_v1beta1_events_proto_enumTypes[2].Descriptor()
}

func (HTTPProtocol) Type() protoreflect.EnumType {
	return &file_indykite_events_v1beta1_events_proto_enumTypes[2]
}

func (x HTTPProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPProtocol.Descriptor instead.
func (HTTPProtocol) EnumDescriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{2}
}

// EventContext is a generic context attached to events and holds any value.
type EventContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes map[string]*v1beta1.Value `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventContext) Reset() {
	*x = EventContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventContext) ProtoMessage() {}

func (x *EventContext) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventContext.ProtoReflect.Descriptor instead.
func (*EventContext) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{0}
}

func (x *EventContext) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventContext) GetAttributes() map[string]*v1beta1.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// AuthenticationEvent contains the Authentication Follow lifecycle events.
type AuthenticationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context   *EventContext          `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Result    LoginEventType         `protobuf:"varint,2,opt,name=result,proto3,enum=indykite.events.v1beta1.LoginEventType" json:"result,omitempty"`
	Subject   string                 `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	EventTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Anonymized location of source
	SourcePosition *latlng.LatLng `protobuf:"bytes,5,opt,name=source_position,json=sourcePosition,proto3" json:"source_position,omitempty"`
}

func (x *AuthenticationEvent) Reset() {
	*x = AuthenticationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationEvent) ProtoMessage() {}

func (x *AuthenticationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationEvent.ProtoReflect.Descriptor instead.
func (*AuthenticationEvent) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticationEvent) GetContext() *EventContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AuthenticationEvent) GetResult() LoginEventType {
	if x != nil {
		return x.Result
	}
	return LoginEventType_LOGIN_EVENT_TYPE_INVALID
}

func (x *AuthenticationEvent) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *AuthenticationEvent) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *AuthenticationEvent) GetSourcePosition() *latlng.LatLng {
	if x != nil {
		return x.SourcePosition
	}
	return nil
}

// Email holds email name and address info.
type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{2}
}

func (x *Email) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Email) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// SendTemplateEmailEvent holds the info to send email.
// https://sendgrid.com/docs/API_Reference/Web_API_v3/Mail/index.html
type SendTemplateEmailEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId            string                    `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	From                  *Email                    `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	ReplyTo               *Email                    `protobuf:"bytes,3,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	To                    []*Email                  `protobuf:"bytes,4,rep,name=to,proto3" json:"to,omitempty"`
	Cc                    []*Email                  `protobuf:"bytes,5,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc                   []*Email                  `protobuf:"bytes,6,rep,name=bcc,proto3" json:"bcc,omitempty"`
	Subject               string                    `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	Headers               map[string]string         `protobuf:"bytes,8,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomArgs            map[string]string         `protobuf:"bytes,11,rep,name=custom_args,json=customArgs,proto3" json:"custom_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DynamicTemplateValues map[string]*v1beta1.Value `protobuf:"bytes,12,rep,name=dynamic_template_values,json=dynamicTemplateValues,proto3" json:"dynamic_template_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Categories            []string                  `protobuf:"bytes,13,rep,name=categories,proto3" json:"categories,omitempty"`
	// The time of data.
	SendAtTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=send_at_time,json=sendAtTime,proto3" json:"send_at_time,omitempty"`
	BatchId    string                 `protobuf:"bytes,15,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *SendTemplateEmailEvent) Reset() {
	*x = SendTemplateEmailEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTemplateEmailEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTemplateEmailEvent) ProtoMessage() {}

func (x *SendTemplateEmailEvent) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTemplateEmailEvent.ProtoReflect.Descriptor instead.
func (*SendTemplateEmailEvent) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{3}
}

func (x *SendTemplateEmailEvent) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *SendTemplateEmailEvent) GetFrom() *Email {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetReplyTo() *Email {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetTo() []*Email {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetCc() []*Email {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetBcc() []*Email {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SendTemplateEmailEvent) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetCustomArgs() map[string]string {
	if x != nil {
		return x.CustomArgs
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetDynamicTemplateValues() map[string]*v1beta1.Value {
	if x != nil {
		return x.DynamicTemplateValues
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetSendAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SendAtTime
	}
	return nil
}

func (x *SendTemplateEmailEvent) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

// SendMessageEmailEvent holds the info to send email.
// https://sendgrid.com/docs/API_Reference/Web_API_v3/Mail/index.html
type SendMessageEmailEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From                  *Email                    `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ReplyTo               *Email                    `protobuf:"bytes,2,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	To                    []*Email                  `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	Cc                    []*Email                  `protobuf:"bytes,4,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc                   []*Email                  `protobuf:"bytes,5,rep,name=bcc,proto3" json:"bcc,omitempty"`
	Subject               string                    `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	TextContent           string                    `protobuf:"bytes,7,opt,name=text_content,json=textContent,proto3" json:"text_content,omitempty"`
	HtmlContent           string                    `protobuf:"bytes,8,opt,name=html_content,json=htmlContent,proto3" json:"html_content,omitempty"`
	Headers               map[string]string         `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomArgs            map[string]string         `protobuf:"bytes,10,rep,name=custom_args,json=customArgs,proto3" json:"custom_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DynamicTemplateValues map[string]*v1beta1.Value `protobuf:"bytes,11,rep,name=dynamic_template_values,json=dynamicTemplateValues,proto3" json:"dynamic_template_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Categories            []string                  `protobuf:"bytes,12,rep,name=categories,proto3" json:"categories,omitempty"`
	// The time of data.
	SendAtTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=send_at_time,json=sendAtTime,proto3" json:"send_at_time,omitempty"`
	BatchId    string                 `protobuf:"bytes,14,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *SendMessageEmailEvent) Reset() {
	*x = SendMessageEmailEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageEmailEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageEmailEvent) ProtoMessage() {}

func (x *SendMessageEmailEvent) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageEmailEvent.ProtoReflect.Descriptor instead.
func (*SendMessageEmailEvent) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{4}
}

func (x *SendMessageEmailEvent) GetFrom() *Email {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SendMessageEmailEvent) GetReplyTo() *Email {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *SendMessageEmailEvent) GetTo() []*Email {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SendMessageEmailEvent) GetCc() []*Email {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *SendMessageEmailEvent) GetBcc() []*Email {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *SendMessageEmailEvent) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SendMessageEmailEvent) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *SendMessageEmailEvent) GetHtmlContent() string {
	if x != nil {
		return x.HtmlContent
	}
	return ""
}

func (x *SendMessageEmailEvent) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *SendMessageEmailEvent) GetCustomArgs() map[string]string {
	if x != nil {
		return x.CustomArgs
	}
	return nil
}

func (x *SendMessageEmailEvent) GetDynamicTemplateValues() map[string]*v1beta1.Value {
	if x != nil {
		return x.DynamicTemplateValues
	}
	return nil
}

func (x *SendMessageEmailEvent) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *SendMessageEmailEvent) GetSendAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SendAtTime
	}
	return nil
}

func (x *SendMessageEmailEvent) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

// OPADecisionLogEvent represents a decision log event.
//
// [EventV1](https://github.com/open-policy-agent/opa/blob/master/plugins/logs/plugin.go#L43)
type OPADecisionLogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels      map[string]string        `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DecisionId  string                   `protobuf:"bytes,2,opt,name=decision_id,json=decisionId,proto3" json:"decision_id,omitempty"`
	Bundles     map[string]*BundleInfoV1 `protobuf:"bytes,3,rep,name=bundles,proto3" json:"bundles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Path        string                   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Query       string                   `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Input       *v1beta1.Value           `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	Result      *v1beta1.Value           `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	Erased      []string                 `protobuf:"bytes,8,rep,name=erased,proto3" json:"erased,omitempty"`
	Masked      []string                 `protobuf:"bytes,9,rep,name=masked,proto3" json:"masked,omitempty"`
	Error       string                   `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
	RequestedBy string                   `protobuf:"bytes,11,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	AtTime      *timestamppb.Timestamp   `protobuf:"bytes,12,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
	Metrics     *v1beta1.MapValue        `protobuf:"bytes,13,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *OPADecisionLogEvent) Reset() {
	*x = OPADecisionLogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OPADecisionLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPADecisionLogEvent) ProtoMessage() {}

func (x *OPADecisionLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPADecisionLogEvent.ProtoReflect.Descriptor instead.
func (*OPADecisionLogEvent) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{5}
}

func (x *OPADecisionLogEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *OPADecisionLogEvent) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *OPADecisionLogEvent) GetBundles() map[string]*BundleInfoV1 {
	if x != nil {
		return x.Bundles
	}
	return nil
}

func (x *OPADecisionLogEvent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OPADecisionLogEvent) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *OPADecisionLogEvent) GetInput() *v1beta1.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *OPADecisionLogEvent) GetResult() *v1beta1.Value {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OPADecisionLogEvent) GetErased() []string {
	if x != nil {
		return x.Erased
	}
	return nil
}

func (x *OPADecisionLogEvent) GetMasked() []string {
	if x != nil {
		return x.Masked
	}
	return nil
}

func (x *OPADecisionLogEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *OPADecisionLogEvent) GetRequestedBy() string {
	if x != nil {
		return x.RequestedBy
	}
	return ""
}

func (x *OPADecisionLogEvent) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

func (x *OPADecisionLogEvent) GetMetrics() *v1beta1.MapValue {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type BundleInfoV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision string `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *BundleInfoV1) Reset() {
	*x = BundleInfoV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleInfoV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleInfoV1) ProtoMessage() {}

func (x *BundleInfoV1) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleInfoV1.ProtoReflect.Descriptor instead.
func (*BundleInfoV1) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{6}
}

func (x *BundleInfoV1) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

// HTTPRequest contains data coming from the HTTP API
type HTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               string              `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	RouteKey              string              `protobuf:"bytes,2,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
	RawPath               string              `protobuf:"bytes,3,opt,name=raw_path,json=rawPath,proto3" json:"raw_path,omitempty"`
	RawQueryString        string              `protobuf:"bytes,4,opt,name=raw_query_string,json=rawQueryString,proto3" json:"raw_query_string,omitempty"`
	Cookies               []string            `protobuf:"bytes,5,rep,name=cookies,proto3" json:"cookies,omitempty"`
	Headers               map[string]string   `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	QueryStringParameters map[string]string   `protobuf:"bytes,7,rep,name=query_string_parameters,json=queryStringParameters,proto3" json:"query_string_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PathParameters        map[string]string   `protobuf:"bytes,8,rep,name=path_parameters,json=pathParameters,proto3" json:"path_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestContext        *HTTPRequestContext `protobuf:"bytes,9,opt,name=request_context,json=requestContext,proto3" json:"request_context,omitempty"`
	StageVariables        map[string]string   `protobuf:"bytes,10,rep,name=stage_variables,json=stageVariables,proto3" json:"stage_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body                  string              `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
	IsBase64Encoded       bool                `protobuf:"varint,12,opt,name=is_base64_encoded,json=isBase64Encoded,proto3" json:"is_base64_encoded,omitempty"`
}

func (x *HTTPRequest) Reset() {
	*x = HTTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequest) ProtoMessage() {}

func (x *HTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequest.ProtoReflect.Descriptor instead.
func (*HTTPRequest) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{7}
}

func (x *HTTPRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HTTPRequest) GetRouteKey() string {
	if x != nil {
		return x.RouteKey
	}
	return ""
}

func (x *HTTPRequest) GetRawPath() string {
	if x != nil {
		return x.RawPath
	}
	return ""
}

func (x *HTTPRequest) GetRawQueryString() string {
	if x != nil {
		return x.RawQueryString
	}
	return ""
}

func (x *HTTPRequest) GetCookies() []string {
	if x != nil {
		return x.Cookies
	}
	return nil
}

func (x *HTTPRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPRequest) GetQueryStringParameters() map[string]string {
	if x != nil {
		return x.QueryStringParameters
	}
	return nil
}

func (x *HTTPRequest) GetPathParameters() map[string]string {
	if x != nil {
		return x.PathParameters
	}
	return nil
}

func (x *HTTPRequest) GetRequestContext() *HTTPRequestContext {
	if x != nil {
		return x.RequestContext
	}
	return nil
}

func (x *HTTPRequest) GetStageVariables() map[string]string {
	if x != nil {
		return x.StageVariables
	}
	return nil
}

func (x *HTTPRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *HTTPRequest) GetIsBase64Encoded() bool {
	if x != nil {
		return x.IsBase64Encoded
	}
	return false
}

// HTTPRequestContext contains the information to identify the account and resources invoking the service.
type HTTPRequestContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteKey     string                                   `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
	AccountId    string                                   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Stage        string                                   `protobuf:"bytes,3,opt,name=stage,proto3" json:"stage,omitempty"`
	RequestId    string                                   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Authorizer   *HTTPRequestContextAuthorizerDescription `protobuf:"bytes,5,opt,name=authorizer,proto3" json:"authorizer,omitempty"`
	DomainName   string                                   `protobuf:"bytes,6,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	DomainPrefix string                                   `protobuf:"bytes,7,opt,name=domain_prefix,json=domainPrefix,proto3" json:"domain_prefix,omitempty"`
	Time         string                                   `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	TimeEpoch    int64                                    `protobuf:"varint,9,opt,name=time_epoch,json=timeEpoch,proto3" json:"time_epoch,omitempty"`
	Http         *HTTPRequestContextHTTPDescription       `protobuf:"bytes,10,opt,name=http,proto3" json:"http,omitempty"`
}

func (x *HTTPRequestContext) Reset() {
	*x = HTTPRequestContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestContext) ProtoMessage() {}

func (x *HTTPRequestContext) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestContext.ProtoReflect.Descriptor instead.
func (*HTTPRequestContext) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{8}
}

func (x *HTTPRequestContext) GetRouteKey() string {
	if x != nil {
		return x.RouteKey
	}
	return ""
}

func (x *HTTPRequestContext) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *HTTPRequestContext) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *HTTPRequestContext) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *HTTPRequestContext) GetAuthorizer() *HTTPRequestContextAuthorizerDescription {
	if x != nil {
		return x.Authorizer
	}
	return nil
}

func (x *HTTPRequestContext) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *HTTPRequestContext) GetDomainPrefix() string {
	if x != nil {
		return x.DomainPrefix
	}
	return ""
}

func (x *HTTPRequestContext) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *HTTPRequestContext) GetTimeEpoch() int64 {
	if x != nil {
		return x.TimeEpoch
	}
	return 0
}

func (x *HTTPRequestContext) GetHttp() *HTTPRequestContextHTTPDescription {
	if x != nil {
		return x.Http
	}
	return nil
}

// HTTPRequestContextAuthorizerDescription contains authorizer information for the request context.
type HTTPRequestContextAuthorizerDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jwt *HTTPRequestContextAuthorizerJWTDescription `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`
}

func (x *HTTPRequestContextAuthorizerDescription) Reset() {
	*x = HTTPRequestContextAuthorizerDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestContextAuthorizerDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestContextAuthorizerDescription) ProtoMessage() {}

func (x *HTTPRequestContextAuthorizerDescription) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestContextAuthorizerDescription.ProtoReflect.Descriptor instead.
func (*HTTPRequestContextAuthorizerDescription) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{9}
}

func (x *HTTPRequestContextAuthorizerDescription) GetJwt() *HTTPRequestContextAuthorizerJWTDescription {
	if x != nil {
		return x.Jwt
	}
	return nil
}

// HTTPRequestContextAuthorizerJWTDescription contains JWT authorizer information for the request context.
type HTTPRequestContextAuthorizerJWTDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claims map[string]string `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scopes []string          `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *HTTPRequestContextAuthorizerJWTDescription) Reset() {
	*x = HTTPRequestContextAuthorizerJWTDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestContextAuthorizerJWTDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestContextAuthorizerJWTDescription) ProtoMessage() {}

func (x *HTTPRequestContextAuthorizerJWTDescription) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestContextAuthorizerJWTDescription.ProtoReflect.Descriptor instead.
func (*HTTPRequestContextAuthorizerJWTDescription) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{10}
}

func (x *HTTPRequestContextAuthorizerJWTDescription) GetClaims() map[string]string {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *HTTPRequestContextAuthorizerJWTDescription) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

// HTTPRequestContextHTTPDescription contains HTTP information for the request context.
type HTTPRequestContextHTTPDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method    HTTPMethod   `protobuf:"varint,1,opt,name=method,proto3,enum=indykite.events.v1beta1.HTTPMethod" json:"method,omitempty"`
	Path      string       `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Protocol  HTTPProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=indykite.events.v1beta1.HTTPProtocol" json:"protocol,omitempty"`
	SourceIp  string       `protobuf:"bytes,4,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	UserAgent string       `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
}

func (x *HTTPRequestContextHTTPDescription) Reset() {
	*x = HTTPRequestContextHTTPDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_events_v1beta1_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRequestContextHTTPDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestContextHTTPDescription) ProtoMessage() {}

func (x *HTTPRequestContextHTTPDescription) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_events_v1beta1_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestContextHTTPDescription.ProtoReflect.Descriptor instead.
func (*HTTPRequestContextHTTPDescription) Descriptor() ([]byte, []int) {
	return file_indykite_events_v1beta1_events_proto_rawDescGZIP(), []int{11}
}

func (x *HTTPRequestContextHTTPDescription) GetMethod() HTTPMethod {
	if x != nil {
		return x.Method
	}
	return HTTPMethod_HTTP_METHOD_INVALID
}

func (x *HTTPRequestContextHTTPDescription) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPRequestContextHTTPDescription) GetProtocol() HTTPProtocol {
	if x != nil {
		return x.Protocol
	}
	return HTTPProtocol_HTTP_PROTOCOL_INVALID
}

func (x *HTTPRequestContextHTTPDescription) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *HTTPRequestContextHTTPDescription) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

var File_indykite_events_v1beta1_events_proto protoreflect.FileDescriptor

var file_indykite_events_v1beta1_events_proto_rawDesc = []byte{
	0x0a, 0x24, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x61,
	0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x02, 0x0a, 0x13, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf2, 0x07,
	0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x39, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x63, 0x63, 0x12, 0x30, 0x0a, 0x03, 0x62, 0x63, 0x63, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x62, 0x63, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x56, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x82,
	0x01, 0x0a, 0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x1a, 0x3a, 0x0a, 0x0c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x93, 0x08, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x63,
	0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x63, 0x63, 0x12, 0x30, 0x0a, 0x03, 0x62,
	0x63, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x62, 0x63, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74,
	0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x74, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a,
	0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x05, 0x0a, 0x13, 0x4f, 0x50, 0x41,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x50, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x50, 0x41, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f,
	0x50, 0x41, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x61, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x61, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x73, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x6b,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x61,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x0c, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56,
	0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x0c,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x31, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x07, 0x0a, 0x0b, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61,
	0x77, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x77, 0x0a, 0x17, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x61, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x03, 0x0a,
	0x12, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x4e, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x54, 0x54, 0x50, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x22,
	0x80, 0x01, 0x0a, 0x27, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x03, 0x6a,
	0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x4a,
	0x57, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6a,
	0x77, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x2a, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x4a, 0x57, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x67, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x4a, 0x57, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x01,
	0x0a, 0x21, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x48, 0x54, 0x54, 0x50, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2a, 0x69, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xf3,
	0x01, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a,
	0x13, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x15, 0x0a,
	0x11, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x43, 0x45, 0x10, 0x09, 0x2a, 0x61, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x02, 0x42, 0xf5, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6a, 0x61, 0x72, 0x76,
	0x69, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x45, 0x58, 0xaa, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0xca, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x23,
	0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_events_v1beta1_events_proto_rawDescOnce sync.Once
	file_indykite_events_v1beta1_events_proto_rawDescData = file_indykite_events_v1beta1_events_proto_rawDesc
)

func file_indykite_events_v1beta1_events_proto_rawDescGZIP() []byte {
	file_indykite_events_v1beta1_events_proto_rawDescOnce.Do(func() {
		file_indykite_events_v1beta1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_events_v1beta1_events_proto_rawDescData)
	})
	return file_indykite_events_v1beta1_events_proto_rawDescData
}

var file_indykite_events_v1beta1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_indykite_events_v1beta1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_indykite_events_v1beta1_events_proto_goTypes = []interface{}{
	(LoginEventType)(0),                                // 0: indykite.events.v1beta1.LoginEventType
	(HTTPMethod)(0),                                    // 1: indykite.events.v1beta1.HTTPMethod
	(HTTPProtocol)(0),                                  // 2: indykite.events.v1beta1.HTTPProtocol
	(*EventContext)(nil),                               // 3: indykite.events.v1beta1.EventContext
	(*AuthenticationEvent)(nil),                        // 4: indykite.events.v1beta1.AuthenticationEvent
	(*Email)(nil),                                      // 5: indykite.events.v1beta1.Email
	(*SendTemplateEmailEvent)(nil),                     // 6: indykite.events.v1beta1.SendTemplateEmailEvent
	(*SendMessageEmailEvent)(nil),                      // 7: indykite.events.v1beta1.SendMessageEmailEvent
	(*OPADecisionLogEvent)(nil),                        // 8: indykite.events.v1beta1.OPADecisionLogEvent
	(*BundleInfoV1)(nil),                               // 9: indykite.events.v1beta1.BundleInfoV1
	(*HTTPRequest)(nil),                                // 10: indykite.events.v1beta1.HTTPRequest
	(*HTTPRequestContext)(nil),                         // 11: indykite.events.v1beta1.HTTPRequestContext
	(*HTTPRequestContextAuthorizerDescription)(nil),    // 12: indykite.events.v1beta1.HTTPRequestContextAuthorizerDescription
	(*HTTPRequestContextAuthorizerJWTDescription)(nil), // 13: indykite.events.v1beta1.HTTPRequestContextAuthorizerJWTDescription
	(*HTTPRequestContextHTTPDescription)(nil),          // 14: indykite.events.v1beta1.HTTPRequestContextHTTPDescription
	nil,                           // 15: indykite.events.v1beta1.EventContext.AttributesEntry
	nil,                           // 16: indykite.events.v1beta1.SendTemplateEmailEvent.HeadersEntry
	nil,                           // 17: indykite.events.v1beta1.SendTemplateEmailEvent.CustomArgsEntry
	nil,                           // 18: indykite.events.v1beta1.SendTemplateEmailEvent.DynamicTemplateValuesEntry
	nil,                           // 19: indykite.events.v1beta1.SendMessageEmailEvent.HeadersEntry
	nil,                           // 20: indykite.events.v1beta1.SendMessageEmailEvent.CustomArgsEntry
	nil,                           // 21: indykite.events.v1beta1.SendMessageEmailEvent.DynamicTemplateValuesEntry
	nil,                           // 22: indykite.events.v1beta1.OPADecisionLogEvent.LabelsEntry
	nil,                           // 23: indykite.events.v1beta1.OPADecisionLogEvent.BundlesEntry
	nil,                           // 24: indykite.events.v1beta1.HTTPRequest.HeadersEntry
	nil,                           // 25: indykite.events.v1beta1.HTTPRequest.QueryStringParametersEntry
	nil,                           // 26: indykite.events.v1beta1.HTTPRequest.PathParametersEntry
	nil,                           // 27: indykite.events.v1beta1.HTTPRequest.StageVariablesEntry
	nil,                           // 28: indykite.events.v1beta1.HTTPRequestContextAuthorizerJWTDescription.ClaimsEntry
	(*timestamppb.Timestamp)(nil), // 29: google.protobuf.Timestamp
	(*latlng.LatLng)(nil),         // 30: google.type.LatLng
	(*v1beta1.Value)(nil),         // 31: indykite.objects.v1beta1.Value
	(*v1beta1.MapValue)(nil),      // 32: indykite.objects.v1beta1.MapValue
}
var file_indykite_events_v1beta1_events_proto_depIdxs = []int32{
	15, // 0: indykite.events.v1beta1.EventContext.attributes:type_name -> indykite.events.v1beta1.EventContext.AttributesEntry
	3,  // 1: indykite.events.v1beta1.AuthenticationEvent.context:type_name -> indykite.events.v1beta1.EventContext
	0,  // 2: indykite.events.v1beta1.AuthenticationEvent.result:type_name -> indykite.events.v1beta1.LoginEventType
	29, // 3: indykite.events.v1beta1.AuthenticationEvent.event_time:type_name -> google.protobuf.Timestamp
	30, // 4: indykite.events.v1beta1.AuthenticationEvent.source_position:type_name -> google.type.LatLng
	5,  // 5: indykite.events.v1beta1.SendTemplateEmailEvent.from:type_name -> indykite.events.v1beta1.Email
	5,  // 6: indykite.events.v1beta1.SendTemplateEmailEvent.reply_to:type_name -> indykite.events.v1beta1.Email
	5,  // 7: indykite.events.v1beta1.SendTemplateEmailEvent.to:type_name -> indykite.events.v1beta1.Email
	5,  // 8: indykite.events.v1beta1.SendTemplateEmailEvent.cc:type_name -> indykite.events.v1beta1.Email
	5,  // 9: indykite.events.v1beta1.SendTemplateEmailEvent.bcc:type_name -> indykite.events.v1beta1.Email
	16, // 10: indykite.events.v1beta1.SendTemplateEmailEvent.headers:type_name -> indykite.events.v1beta1.SendTemplateEmailEvent.HeadersEntry
	17, // 11: indykite.events.v1beta1.SendTemplateEmailEvent.custom_args:type_name -> indykite.events.v1beta1.SendTemplateEmailEvent.CustomArgsEntry
	18, // 12: indykite.events.v1beta1.SendTemplateEmailEvent.dynamic_template_values:type_name -> indykite.events.v1beta1.SendTemplateEmailEvent.DynamicTemplateValuesEntry
	29, // 13: indykite.events.v1beta1.SendTemplateEmailEvent.send_at_time:type_name -> google.protobuf.Timestamp
	5,  // 14: indykite.events.v1beta1.SendMessageEmailEvent.from:type_name -> indykite.events.v1beta1.Email
	5,  // 15: indykite.events.v1beta1.SendMessageEmailEvent.reply_to:type_name -> indykite.events.v1beta1.Email
	5,  // 16: indykite.events.v1beta1.SendMessageEmailEvent.to:type_name -> indykite.events.v1beta1.Email
	5,  // 17: indykite.events.v1beta1.SendMessageEmailEvent.cc:type_name -> indykite.events.v1beta1.Email
	5,  // 18: indykite.events.v1beta1.SendMessageEmailEvent.bcc:type_name -> indykite.events.v1beta1.Email
	19, // 19: indykite.events.v1beta1.SendMessageEmailEvent.headers:type_name -> indykite.events.v1beta1.SendMessageEmailEvent.HeadersEntry
	20, // 20: indykite.events.v1beta1.SendMessageEmailEvent.custom_args:type_name -> indykite.events.v1beta1.SendMessageEmailEvent.CustomArgsEntry
	21, // 21: indykite.events.v1beta1.SendMessageEmailEvent.dynamic_template_values:type_name -> indykite.events.v1beta1.SendMessageEmailEvent.DynamicTemplateValuesEntry
	29, // 22: indykite.events.v1beta1.SendMessageEmailEvent.send_at_time:type_name -> google.protobuf.Timestamp
	22, // 23: indykite.events.v1beta1.OPADecisionLogEvent.labels:type_name -> indykite.events.v1beta1.OPADecisionLogEvent.LabelsEntry
	23, // 24: indykite.events.v1beta1.OPADecisionLogEvent.bundles:type_name -> indykite.events.v1beta1.OPADecisionLogEvent.BundlesEntry
	31, // 25: indykite.events.v1beta1.OPADecisionLogEvent.input:type_name -> indykite.objects.v1beta1.Value
	31, // 26: indykite.events.v1beta1.OPADecisionLogEvent.result:type_name -> indykite.objects.v1beta1.Value
	29, // 27: indykite.events.v1beta1.OPADecisionLogEvent.at_time:type_name -> google.protobuf.Timestamp
	32, // 28: indykite.events.v1beta1.OPADecisionLogEvent.metrics:type_name -> indykite.objects.v1beta1.MapValue
	24, // 29: indykite.events.v1beta1.HTTPRequest.headers:type_name -> indykite.events.v1beta1.HTTPRequest.HeadersEntry
	25, // 30: indykite.events.v1beta1.HTTPRequest.query_string_parameters:type_name -> indykite.events.v1beta1.HTTPRequest.QueryStringParametersEntry
	26, // 31: indykite.events.v1beta1.HTTPRequest.path_parameters:type_name -> indykite.events.v1beta1.HTTPRequest.PathParametersEntry
	11, // 32: indykite.events.v1beta1.HTTPRequest.request_context:type_name -> indykite.events.v1beta1.HTTPRequestContext
	27, // 33: indykite.events.v1beta1.HTTPRequest.stage_variables:type_name -> indykite.events.v1beta1.HTTPRequest.StageVariablesEntry
	12, // 34: indykite.events.v1beta1.HTTPRequestContext.authorizer:type_name -> indykite.events.v1beta1.HTTPRequestContextAuthorizerDescription
	14, // 35: indykite.events.v1beta1.HTTPRequestContext.http:type_name -> indykite.events.v1beta1.HTTPRequestContextHTTPDescription
	13, // 36: indykite.events.v1beta1.HTTPRequestContextAuthorizerDescription.jwt:type_name -> indykite.events.v1beta1.HTTPRequestContextAuthorizerJWTDescription
	28, // 37: indykite.events.v1beta1.HTTPRequestContextAuthorizerJWTDescription.claims:type_name -> indykite.events.v1beta1.HTTPRequestContextAuthorizerJWTDescription.ClaimsEntry
	1,  // 38: indykite.events.v1beta1.HTTPRequestContextHTTPDescription.method:type_name -> indykite.events.v1beta1.HTTPMethod
	2,  // 39: indykite.events.v1beta1.HTTPRequestContextHTTPDescription.protocol:type_name -> indykite.events.v1beta1.HTTPProtocol
	31, // 40: indykite.events.v1beta1.EventContext.AttributesEntry.value:type_name -> indykite.objects.v1beta1.Value
	31, // 41: indykite.events.v1beta1.SendTemplateEmailEvent.DynamicTemplateValuesEntry.value:type_name -> indykite.objects.v1beta1.Value
	31, // 42: indykite.events.v1beta1.SendMessageEmailEvent.DynamicTemplateValuesEntry.value:type_name -> indykite.objects.v1beta1.Value
	9,  // 43: indykite.events.v1beta1.OPADecisionLogEvent.BundlesEntry.value:type_name -> indykite.events.v1beta1.BundleInfoV1
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_indykite_events_v1beta1_events_proto_init() }
func file_indykite_events_v1beta1_events_proto_init() {
	if File_indykite_events_v1beta1_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indykite_events_v1beta1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTemplateEmailEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageEmailEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OPADecisionLogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleInfoV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestContextAuthorizerDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestContextAuthorizerJWTDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_events_v1beta1_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRequestContextHTTPDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_events_v1beta1_events_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_events_v1beta1_events_proto_goTypes,
		DependencyIndexes: file_indykite_events_v1beta1_events_proto_depIdxs,
		EnumInfos:         file_indykite_events_v1beta1_events_proto_enumTypes,
		MessageInfos:      file_indykite_events_v1beta1_events_proto_msgTypes,
	}.Build()
	File_indykite_events_v1beta1_events_proto = out.File
	file_indykite_events_v1beta1_events_proto_rawDesc = nil
	file_indykite_events_v1beta1_events_proto_goTypes = nil
	file_indykite_events_v1beta1_events_proto_depIdxs = nil
}
