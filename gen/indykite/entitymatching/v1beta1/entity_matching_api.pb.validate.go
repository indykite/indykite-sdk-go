// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/entitymatching/v1beta1/entity_matching_api.proto

package entitymatchingv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RunEntityMatchingPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RunEntityMatchingPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunEntityMatchingPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RunEntityMatchingPipelineRequestMultiError, or nil if none found.
func (m *RunEntityMatchingPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunEntityMatchingPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := RunEntityMatchingPipelineRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RunEntityMatchingPipelineRequest_Id_Pattern.MatchString(m.GetId()) {
		err := RunEntityMatchingPipelineRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCustomPropertyMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunEntityMatchingPipelineRequestValidationError{
						field:  fmt.Sprintf("CustomPropertyMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunEntityMatchingPipelineRequestValidationError{
						field:  fmt.Sprintf("CustomPropertyMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunEntityMatchingPipelineRequestValidationError{
					field:  fmt.Sprintf("CustomPropertyMappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if val := m.GetSimilarityScoreCutoff(); val <= 0 || val > 1 {
		err := RunEntityMatchingPipelineRequestValidationError{
			field:  "SimilarityScoreCutoff",
			reason: "value must be inside range (0, 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RunEntityMatchingPipelineRequestMultiError(errors)
	}

	return nil
}

// RunEntityMatchingPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// RunEntityMatchingPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type RunEntityMatchingPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunEntityMatchingPipelineRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunEntityMatchingPipelineRequestMultiError) AllErrors() []error { return m }

// RunEntityMatchingPipelineRequestValidationError is the validation error
// returned by RunEntityMatchingPipelineRequest.Validate if the designated
// constraints aren't met.
type RunEntityMatchingPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunEntityMatchingPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunEntityMatchingPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunEntityMatchingPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunEntityMatchingPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunEntityMatchingPipelineRequestValidationError) ErrorName() string {
	return "RunEntityMatchingPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunEntityMatchingPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunEntityMatchingPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunEntityMatchingPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunEntityMatchingPipelineRequestValidationError{}

var _RunEntityMatchingPipelineRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on RunEntityMatchingPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RunEntityMatchingPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunEntityMatchingPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RunEntityMatchingPipelineResponseMultiError, or nil if none found.
func (m *RunEntityMatchingPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunEntityMatchingPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := RunEntityMatchingPipelineResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RunEntityMatchingPipelineResponse_Id_Pattern.MatchString(m.GetId()) {
		err := RunEntityMatchingPipelineResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLastRunTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunEntityMatchingPipelineResponseValidationError{
					field:  "LastRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunEntityMatchingPipelineResponseValidationError{
					field:  "LastRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastRunTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunEntityMatchingPipelineResponseValidationError{
				field:  "LastRunTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return RunEntityMatchingPipelineResponseMultiError(errors)
	}

	return nil
}

// RunEntityMatchingPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// RunEntityMatchingPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type RunEntityMatchingPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunEntityMatchingPipelineResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunEntityMatchingPipelineResponseMultiError) AllErrors() []error { return m }

// RunEntityMatchingPipelineResponseValidationError is the validation error
// returned by RunEntityMatchingPipelineResponse.Validate if the designated
// constraints aren't met.
type RunEntityMatchingPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunEntityMatchingPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunEntityMatchingPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunEntityMatchingPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunEntityMatchingPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunEntityMatchingPipelineResponseValidationError) ErrorName() string {
	return "RunEntityMatchingPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunEntityMatchingPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunEntityMatchingPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunEntityMatchingPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunEntityMatchingPipelineResponseValidationError{}

var _RunEntityMatchingPipelineResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadSuggestedPropertyMappingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadSuggestedPropertyMappingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadSuggestedPropertyMappingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadSuggestedPropertyMappingRequestMultiError, or nil if none found.
func (m *ReadSuggestedPropertyMappingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadSuggestedPropertyMappingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := ReadSuggestedPropertyMappingRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReadSuggestedPropertyMappingRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ReadSuggestedPropertyMappingRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadSuggestedPropertyMappingRequestMultiError(errors)
	}

	return nil
}

// ReadSuggestedPropertyMappingRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReadSuggestedPropertyMappingRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadSuggestedPropertyMappingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadSuggestedPropertyMappingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadSuggestedPropertyMappingRequestMultiError) AllErrors() []error { return m }

// ReadSuggestedPropertyMappingRequestValidationError is the validation error
// returned by ReadSuggestedPropertyMappingRequest.Validate if the designated
// constraints aren't met.
type ReadSuggestedPropertyMappingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadSuggestedPropertyMappingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadSuggestedPropertyMappingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadSuggestedPropertyMappingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadSuggestedPropertyMappingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadSuggestedPropertyMappingRequestValidationError) ErrorName() string {
	return "ReadSuggestedPropertyMappingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadSuggestedPropertyMappingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadSuggestedPropertyMappingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadSuggestedPropertyMappingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadSuggestedPropertyMappingRequestValidationError{}

var _ReadSuggestedPropertyMappingRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadSuggestedPropertyMappingResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReadSuggestedPropertyMappingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadSuggestedPropertyMappingResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadSuggestedPropertyMappingResponseMultiError, or nil if none found.
func (m *ReadSuggestedPropertyMappingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadSuggestedPropertyMappingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := ReadSuggestedPropertyMappingResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReadSuggestedPropertyMappingResponse_Id_Pattern.MatchString(m.GetId()) {
		err := ReadSuggestedPropertyMappingResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPropertyMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadSuggestedPropertyMappingResponseValidationError{
						field:  fmt.Sprintf("PropertyMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadSuggestedPropertyMappingResponseValidationError{
						field:  fmt.Sprintf("PropertyMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadSuggestedPropertyMappingResponseValidationError{
					field:  fmt.Sprintf("PropertyMappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := PipelineStatus_name[int32(m.GetPropertyMappingStatus())]; !ok {
		err := ReadSuggestedPropertyMappingResponseValidationError{
			field:  "PropertyMappingStatus",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadSuggestedPropertyMappingResponseMultiError(errors)
	}

	return nil
}

// ReadSuggestedPropertyMappingResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReadSuggestedPropertyMappingResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadSuggestedPropertyMappingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadSuggestedPropertyMappingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadSuggestedPropertyMappingResponseMultiError) AllErrors() []error { return m }

// ReadSuggestedPropertyMappingResponseValidationError is the validation error
// returned by ReadSuggestedPropertyMappingResponse.Validate if the designated
// constraints aren't met.
type ReadSuggestedPropertyMappingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadSuggestedPropertyMappingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadSuggestedPropertyMappingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadSuggestedPropertyMappingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadSuggestedPropertyMappingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadSuggestedPropertyMappingResponseValidationError) ErrorName() string {
	return "ReadSuggestedPropertyMappingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadSuggestedPropertyMappingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadSuggestedPropertyMappingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadSuggestedPropertyMappingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadSuggestedPropertyMappingResponseValidationError{}

var _ReadSuggestedPropertyMappingResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")
