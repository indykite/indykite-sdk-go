// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/ingest/v1beta2/model.proto

package ingestv1beta2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecordMultiError, or nil if none found.
func (m *Record) ValidateAll() error {
	return m.validate(true)
}

func (m *Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) > 256 {
		err := RecordValidationError{
			field:  "Id",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofOperationPresent := false
	switch v := m.Operation.(type) {
	case *Record_Upsert:
		if v == nil {
			err := RecordValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofOperationPresent = true

		if all {
			switch v := interface{}(m.GetUpsert()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecordValidationError{
						field:  "Upsert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecordValidationError{
						field:  "Upsert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpsert()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecordValidationError{
					field:  "Upsert",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Record_Delete:
		if v == nil {
			err := RecordValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofOperationPresent = true

		if all {
			switch v := interface{}(m.GetDelete()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecordValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecordValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecordValidationError{
					field:  "Delete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofOperationPresent {
		err := RecordValidationError{
			field:  "Operation",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RecordMultiError(errors)
	}

	return nil
}

// RecordMultiError is an error wrapping multiple validation errors returned by
// Record.ValidateAll() if the designated constraints aren't met.
type RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMultiError) AllErrors() []error { return m }

// RecordValidationError is the validation error returned by Record.Validate if
// the designated constraints aren't met.
type RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordValidationError) ErrorName() string { return "RecordValidationError" }

// Error satisfies the builtin error interface
func (e RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordValidationError{}

// Validate checks the field values on UpsertData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpsertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpsertDataMultiError, or
// nil if none found.
func (m *UpsertData) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *UpsertData_Node:
		if v == nil {
			err := UpsertDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertDataValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertDataValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertDataValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpsertData_Relation:
		if v == nil {
			err := UpsertDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetRelation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertDataValidationError{
						field:  "Relation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertDataValidationError{
						field:  "Relation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertDataValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := UpsertDataValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpsertDataMultiError(errors)
	}

	return nil
}

// UpsertDataMultiError is an error wrapping multiple validation errors
// returned by UpsertData.ValidateAll() if the designated constraints aren't met.
type UpsertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertDataMultiError) AllErrors() []error { return m }

// UpsertDataValidationError is the validation error returned by
// UpsertData.Validate if the designated constraints aren't met.
type UpsertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertDataValidationError) ErrorName() string { return "UpsertDataValidationError" }

// Error satisfies the builtin error interface
func (e UpsertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertDataValidationError{}

// Validate checks the field values on DeleteData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteDataMultiError, or
// nil if none found.
func (m *DeleteData) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *DeleteData_Node:
		if v == nil {
			err := DeleteDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DeleteData_Relation:
		if v == nil {
			err := DeleteDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetRelation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "Relation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "Relation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DeleteData_NodeProperty:
		if v == nil {
			err := DeleteDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetNodeProperty()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "NodeProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "NodeProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeProperty()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataValidationError{
					field:  "NodeProperty",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DeleteData_RelationProperty:
		if v == nil {
			err := DeleteDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetRelationProperty()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "RelationProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "RelationProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRelationProperty()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataValidationError{
					field:  "RelationProperty",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := DeleteDataValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDataMultiError(errors)
	}

	return nil
}

// DeleteDataMultiError is an error wrapping multiple validation errors
// returned by DeleteData.ValidateAll() if the designated constraints aren't met.
type DeleteDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataMultiError) AllErrors() []error { return m }

// DeleteDataValidationError is the validation error returned by
// DeleteData.Validate if the designated constraints aren't met.
type DeleteDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataValidationError) ErrorName() string { return "DeleteDataValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataValidationError{}

// Validate checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DigitalTwin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DigitalTwinMultiError, or
// nil if none found.
func (m *DigitalTwin) ValidateAll() error {
	return m.validate(true)
}

func (m *DigitalTwin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetExternalId()); l < 1 || l > 256 {
		err := DigitalTwinValidationError{
			field:  "ExternalId",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) > 64 {
		err := DigitalTwinValidationError{
			field:  "Type",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DigitalTwin_Type_Pattern.MatchString(m.GetType()) {
		err := DigitalTwinValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^([A-Z][a-z]+)+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 32 {
		err := DigitalTwinValidationError{
			field:  "Tags",
			reason: "value must contain no more than 32 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DigitalTwin_Tags_Unique := make(map[string]struct{}, len(m.GetTags()))

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if _, exists := _DigitalTwin_Tags_Unique[item]; exists {
			err := DigitalTwinValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DigitalTwin_Tags_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) > 64 {
			err := DigitalTwinValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_DigitalTwin_Tags_Pattern.MatchString(item) {
			err := DigitalTwinValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value does not match regex pattern \"^([A-Z][a-z]+)+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetTenantId()); l < 22 || l > 254 {
		err := DigitalTwinValidationError{
			field:  "TenantId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DigitalTwin_TenantId_Pattern.MatchString(m.GetTenantId()) {
		err := DigitalTwinValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetIdentityProperties()) > 10 {
		err := DigitalTwinValidationError{
			field:  "IdentityProperties",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIdentityProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DigitalTwinValidationError{
						field:  fmt.Sprintf("IdentityProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DigitalTwinValidationError{
						field:  fmt.Sprintf("IdentityProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DigitalTwinValidationError{
					field:  fmt.Sprintf("IdentityProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetProperties()) > 10 {
		err := DigitalTwinValidationError{
			field:  "Properties",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DigitalTwinValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DigitalTwinValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DigitalTwinValidationError{
					field:  fmt.Sprintf("Properties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetId() != "" {

		if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 256 {
			err := DigitalTwinValidationError{
				field:  "Id",
				reason: "value length must be between 22 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !strings.HasPrefix(m.GetId(), "gid:") {
			err := DigitalTwinValidationError{
				field:  "Id",
				reason: "value does not have prefix \"gid:\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DigitalTwinMultiError(errors)
	}

	return nil
}

// DigitalTwinMultiError is an error wrapping multiple validation errors
// returned by DigitalTwin.ValidateAll() if the designated constraints aren't met.
type DigitalTwinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DigitalTwinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DigitalTwinMultiError) AllErrors() []error { return m }

// DigitalTwinValidationError is the validation error returned by
// DigitalTwin.Validate if the designated constraints aren't met.
type DigitalTwinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DigitalTwinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DigitalTwinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DigitalTwinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DigitalTwinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DigitalTwinValidationError) ErrorName() string { return "DigitalTwinValidationError" }

// Error satisfies the builtin error interface
func (e DigitalTwinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDigitalTwin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DigitalTwinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DigitalTwinValidationError{}

var _DigitalTwin_Type_Pattern = regexp.MustCompile("^([A-Z][a-z]+)+$")

var _DigitalTwin_Tags_Pattern = regexp.MustCompile("^([A-Z][a-z]+)+$")

var _DigitalTwin_TenantId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetExternalId()); l < 1 || l > 256 {
		err := ResourceValidationError{
			field:  "ExternalId",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) > 64 {
		err := ResourceValidationError{
			field:  "Type",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Resource_Type_Pattern.MatchString(m.GetType()) {
		err := ResourceValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^([A-Z][a-z]+)+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 32 {
		err := ResourceValidationError{
			field:  "Tags",
			reason: "value must contain no more than 32 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_Resource_Tags_Unique := make(map[string]struct{}, len(m.GetTags()))

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if _, exists := _Resource_Tags_Unique[item]; exists {
			err := ResourceValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_Resource_Tags_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) > 64 {
			err := ResourceValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Resource_Tags_Pattern.MatchString(item) {
			err := ResourceValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value does not match regex pattern \"^([A-Z][a-z]+)+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetProperties()) > 50 {
		err := ResourceValidationError{
			field:  "Properties",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  fmt.Sprintf("Properties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

var _Resource_Type_Pattern = regexp.MustCompile("^([A-Z][a-z]+)+$")

var _Resource_Tags_Pattern = regexp.MustCompile("^([A-Z][a-z]+)+$")

// Validate checks the field values on IdentityProperty with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdentityProperty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityProperty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityPropertyMultiError, or nil if none found.
func (m *IdentityProperty) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityProperty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetKey() != "" {

		if len(m.GetKey()) > 256 {
			err := IdentityPropertyValidationError{
				field:  "Key",
				reason: "value length must be at most 256 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_IdentityProperty_Key_Pattern.MatchString(m.GetKey()) {
			err := IdentityPropertyValidationError{
				field:  "Key",
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentityPropertyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentityPropertyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityPropertyValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IdentityPropertyMultiError(errors)
	}

	return nil
}

// IdentityPropertyMultiError is an error wrapping multiple validation errors
// returned by IdentityProperty.ValidateAll() if the designated constraints
// aren't met.
type IdentityPropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityPropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityPropertyMultiError) AllErrors() []error { return m }

// IdentityPropertyValidationError is the validation error returned by
// IdentityProperty.Validate if the designated constraints aren't met.
type IdentityPropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityPropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityPropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityPropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityPropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityPropertyValidationError) ErrorName() string { return "IdentityPropertyValidationError" }

// Error satisfies the builtin error interface
func (e IdentityPropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityPropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityPropertyValidationError{}

var _IdentityProperty_Key_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]+$")

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *Node_DigitalTwin:
		if v == nil {
			err := NodeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetDigitalTwin()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "DigitalTwin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "DigitalTwin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDigitalTwin()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "DigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Node_Resource:
		if v == nil {
			err := NodeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetResource()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := NodeValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on Property with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Property) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Property with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyMultiError, or nil
// if none found.
func (m *Property) ValidateAll() error {
	return m.validate(true)
}

func (m *Property) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetKey() != "" {

		if len(m.GetKey()) > 256 {
			err := PropertyValidationError{
				field:  "Key",
				reason: "value length must be at most 256 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Property_Key_Pattern.MatchString(m.GetKey()) {
			err := PropertyValidationError{
				field:  "Key",
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PropertyMultiError(errors)
	}

	return nil
}

// PropertyMultiError is an error wrapping multiple validation errors returned
// by Property.ValidateAll() if the designated constraints aren't met.
type PropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyMultiError) AllErrors() []error { return m }

// PropertyValidationError is the validation error returned by
// Property.Validate if the designated constraints aren't met.
type PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyValidationError) ErrorName() string { return "PropertyValidationError" }

// Error satisfies the builtin error interface
func (e PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyValidationError{}

var _Property_Key_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]+$")

// Validate checks the field values on Relation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Relation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Relation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelationMultiError, or nil
// if none found.
func (m *Relation) ValidateAll() error {
	return m.validate(true)
}

func (m *Relation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMatch() == nil {
		err := RelationValidationError{
			field:  "Match",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetProperties()) > 50 {
		err := RelationValidationError{
			field:  "Properties",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationValidationError{
					field:  fmt.Sprintf("Properties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RelationMultiError(errors)
	}

	return nil
}

// RelationMultiError is an error wrapping multiple validation errors returned
// by Relation.ValidateAll() if the designated constraints aren't met.
type RelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationMultiError) AllErrors() []error { return m }

// RelationValidationError is the validation error returned by
// Relation.Validate if the designated constraints aren't met.
type RelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationValidationError) ErrorName() string { return "RelationValidationError" }

// Error satisfies the builtin error interface
func (e RelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationValidationError{}

// Validate checks the field values on NodeMatch with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeMatch with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeMatchMultiError, or nil
// if none found.
func (m *NodeMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetExternalId()); l < 1 || l > 256 {
		err := NodeMatchValidationError{
			field:  "ExternalId",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) > 64 {
		err := NodeMatchValidationError{
			field:  "Type",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_NodeMatch_Type_Pattern.MatchString(m.GetType()) {
		err := NodeMatchValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^([A-Z][a-z]+)+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NodeMatchMultiError(errors)
	}

	return nil
}

// NodeMatchMultiError is an error wrapping multiple validation errors returned
// by NodeMatch.ValidateAll() if the designated constraints aren't met.
type NodeMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMatchMultiError) AllErrors() []error { return m }

// NodeMatchValidationError is the validation error returned by
// NodeMatch.Validate if the designated constraints aren't met.
type NodeMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeMatchValidationError) ErrorName() string { return "NodeMatchValidationError" }

// Error satisfies the builtin error interface
func (e NodeMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeMatchValidationError{}

var _NodeMatch_Type_Pattern = regexp.MustCompile("^([A-Z][a-z]+)+$")

// Validate checks the field values on RelationMatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RelationMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationMatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelationMatchMultiError, or
// nil if none found.
func (m *RelationMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSourceMatch() == nil {
		err := RelationMatchValidationError{
			field:  "SourceMatch",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSourceMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationMatchValidationError{
					field:  "SourceMatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationMatchValidationError{
					field:  "SourceMatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationMatchValidationError{
				field:  "SourceMatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTargetMatch() == nil {
		err := RelationMatchValidationError{
			field:  "TargetMatch",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTargetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationMatchValidationError{
					field:  "TargetMatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationMatchValidationError{
					field:  "TargetMatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationMatchValidationError{
				field:  "TargetMatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetType()) > 128 {
		err := RelationMatchValidationError{
			field:  "Type",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RelationMatch_Type_Pattern.MatchString(m.GetType()) {
		err := RelationMatchValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[A-Z]+(?:_[A-Z]+)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RelationMatchMultiError(errors)
	}

	return nil
}

// RelationMatchMultiError is an error wrapping multiple validation errors
// returned by RelationMatch.ValidateAll() if the designated constraints
// aren't met.
type RelationMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationMatchMultiError) AllErrors() []error { return m }

// RelationMatchValidationError is the validation error returned by
// RelationMatch.Validate if the designated constraints aren't met.
type RelationMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationMatchValidationError) ErrorName() string { return "RelationMatchValidationError" }

// Error satisfies the builtin error interface
func (e RelationMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationMatchValidationError{}

var _RelationMatch_Type_Pattern = regexp.MustCompile("^[A-Z]+(?:_[A-Z]+)*$")

// Validate checks the field values on PropertyError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PropertyError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyErrorMultiError, or
// nil if none found.
func (m *PropertyError) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PropertyErrorMultiError(errors)
	}

	return nil
}

// PropertyErrorMultiError is an error wrapping multiple validation errors
// returned by PropertyError.ValidateAll() if the designated constraints
// aren't met.
type PropertyErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyErrorMultiError) AllErrors() []error { return m }

// PropertyErrorValidationError is the validation error returned by
// PropertyError.Validate if the designated constraints aren't met.
type PropertyErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyErrorValidationError) ErrorName() string { return "PropertyErrorValidationError" }

// Error satisfies the builtin error interface
func (e PropertyErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyErrorValidationError{}

// Validate checks the field values on RecordError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecordError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordError with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecordErrorMultiError, or
// nil if none found.
func (m *RecordError) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetPropertyErrors()))
		i := 0
		for key := range m.GetPropertyErrors() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPropertyErrors()[key]
			_ = val

			// no validation rules for PropertyErrors[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RecordErrorValidationError{
							field:  fmt.Sprintf("PropertyErrors[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RecordErrorValidationError{
							field:  fmt.Sprintf("PropertyErrors[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RecordErrorValidationError{
						field:  fmt.Sprintf("PropertyErrors[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return RecordErrorMultiError(errors)
	}

	return nil
}

// RecordErrorMultiError is an error wrapping multiple validation errors
// returned by RecordError.ValidateAll() if the designated constraints aren't met.
type RecordErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordErrorMultiError) AllErrors() []error { return m }

// RecordErrorValidationError is the validation error returned by
// RecordError.Validate if the designated constraints aren't met.
type RecordErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordErrorValidationError) ErrorName() string { return "RecordErrorValidationError" }

// Error satisfies the builtin error interface
func (e RecordErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordErrorValidationError{}

// Validate checks the field values on Info with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Info) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Info with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InfoMultiError, or nil if none found.
func (m *Info) ValidateAll() error {
	return m.validate(true)
}

func (m *Info) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InfoValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InfoValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InfoValidationError{
					field:  fmt.Sprintf("Changes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InfoMultiError(errors)
	}

	return nil
}

// InfoMultiError is an error wrapping multiple validation errors returned by
// Info.ValidateAll() if the designated constraints aren't met.
type InfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoMultiError) AllErrors() []error { return m }

// InfoValidationError is the validation error returned by Info.Validate if the
// designated constraints aren't met.
type InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoValidationError) ErrorName() string { return "InfoValidationError" }

// Error satisfies the builtin error interface
func (e InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoValidationError{}

// Validate checks the field values on Change with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Change) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Change with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChangeMultiError, or nil if none found.
func (m *Change) ValidateAll() error {
	return m.validate(true)
}

func (m *Change) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DataType

	if len(errors) > 0 {
		return ChangeMultiError(errors)
	}

	return nil
}

// ChangeMultiError is an error wrapping multiple validation errors returned by
// Change.ValidateAll() if the designated constraints aren't met.
type ChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMultiError) AllErrors() []error { return m }

// ChangeValidationError is the validation error returned by Change.Validate if
// the designated constraints aren't met.
type ChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeValidationError) ErrorName() string { return "ChangeValidationError" }

// Error satisfies the builtin error interface
func (e ChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeValidationError{}

// Validate checks the field values on DeleteData_NodePropertyMatch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteData_NodePropertyMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteData_NodePropertyMatch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteData_NodePropertyMatchMultiError, or nil if none found.
func (m *DeleteData_NodePropertyMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteData_NodePropertyMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMatch() == nil {
		err := DeleteData_NodePropertyMatchValidationError{
			field:  "Match",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteData_NodePropertyMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteData_NodePropertyMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteData_NodePropertyMatchValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetKey() != "" {

		if len(m.GetKey()) > 256 {
			err := DeleteData_NodePropertyMatchValidationError{
				field:  "Key",
				reason: "value length must be at most 256 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_DeleteData_NodePropertyMatch_Key_Pattern.MatchString(m.GetKey()) {
			err := DeleteData_NodePropertyMatchValidationError{
				field:  "Key",
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteData_NodePropertyMatchMultiError(errors)
	}

	return nil
}

// DeleteData_NodePropertyMatchMultiError is an error wrapping multiple
// validation errors returned by DeleteData_NodePropertyMatch.ValidateAll() if
// the designated constraints aren't met.
type DeleteData_NodePropertyMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteData_NodePropertyMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteData_NodePropertyMatchMultiError) AllErrors() []error { return m }

// DeleteData_NodePropertyMatchValidationError is the validation error returned
// by DeleteData_NodePropertyMatch.Validate if the designated constraints
// aren't met.
type DeleteData_NodePropertyMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteData_NodePropertyMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteData_NodePropertyMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteData_NodePropertyMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteData_NodePropertyMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteData_NodePropertyMatchValidationError) ErrorName() string {
	return "DeleteData_NodePropertyMatchValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteData_NodePropertyMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteData_NodePropertyMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteData_NodePropertyMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteData_NodePropertyMatchValidationError{}

var _DeleteData_NodePropertyMatch_Key_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]+$")

// Validate checks the field values on DeleteData_RelationPropertyMatch with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteData_RelationPropertyMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteData_RelationPropertyMatch with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteData_RelationPropertyMatchMultiError, or nil if none found.
func (m *DeleteData_RelationPropertyMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteData_RelationPropertyMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMatch() == nil {
		err := DeleteData_RelationPropertyMatchValidationError{
			field:  "Match",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteData_RelationPropertyMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteData_RelationPropertyMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteData_RelationPropertyMatchValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetKey() != "" {

		if len(m.GetKey()) > 256 {
			err := DeleteData_RelationPropertyMatchValidationError{
				field:  "Key",
				reason: "value length must be at most 256 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_DeleteData_RelationPropertyMatch_Key_Pattern.MatchString(m.GetKey()) {
			err := DeleteData_RelationPropertyMatchValidationError{
				field:  "Key",
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteData_RelationPropertyMatchMultiError(errors)
	}

	return nil
}

// DeleteData_RelationPropertyMatchMultiError is an error wrapping multiple
// validation errors returned by
// DeleteData_RelationPropertyMatch.ValidateAll() if the designated
// constraints aren't met.
type DeleteData_RelationPropertyMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteData_RelationPropertyMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteData_RelationPropertyMatchMultiError) AllErrors() []error { return m }

// DeleteData_RelationPropertyMatchValidationError is the validation error
// returned by DeleteData_RelationPropertyMatch.Validate if the designated
// constraints aren't met.
type DeleteData_RelationPropertyMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteData_RelationPropertyMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteData_RelationPropertyMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteData_RelationPropertyMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteData_RelationPropertyMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteData_RelationPropertyMatchValidationError) ErrorName() string {
	return "DeleteData_RelationPropertyMatchValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteData_RelationPropertyMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteData_RelationPropertyMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteData_RelationPropertyMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteData_RelationPropertyMatchValidationError{}

var _DeleteData_RelationPropertyMatch_Key_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]+$")
