// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: indykite/ingest/v1beta3/model.proto

package ingestv1beta3

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v1beta1 "github.com/indykite/indykite-sdk-go/gen/indykite/knowledge/objects/v1beta1"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType int32

const (
	DataType_DATA_TYPE_INVALID      DataType = 0
	DataType_DATA_TYPE_NODE         DataType = 1
	DataType_DATA_TYPE_RELATIONSHIP DataType = 3
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "DATA_TYPE_INVALID",
		1: "DATA_TYPE_NODE",
		3: "DATA_TYPE_RELATIONSHIP",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_INVALID":      0,
		"DATA_TYPE_NODE":         1,
		"DATA_TYPE_RELATIONSHIP": 3,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_ingest_v1beta3_model_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_indykite_ingest_v1beta3_model_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{0}
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the record, for client side reference
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Operation:
	//
	//	*Record_Upsert
	//	*Record_Delete
	Operation isRecord_Operation `protobuf_oneof:"operation"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Record) GetOperation() isRecord_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *Record) GetUpsert() *UpsertData {
	if x, ok := x.GetOperation().(*Record_Upsert); ok {
		return x.Upsert
	}
	return nil
}

func (x *Record) GetDelete() *DeleteData {
	if x, ok := x.GetOperation().(*Record_Delete); ok {
		return x.Delete
	}
	return nil
}

type isRecord_Operation interface {
	isRecord_Operation()
}

type Record_Upsert struct {
	Upsert *UpsertData `protobuf:"bytes,2,opt,name=upsert,proto3,oneof"`
}

type Record_Delete struct {
	Delete *DeleteData `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*Record_Upsert) isRecord_Operation() {}

func (*Record_Delete) isRecord_Operation() {}

type UpsertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*UpsertData_Node
	//	*UpsertData_Relationship
	Data isUpsertData_Data `protobuf_oneof:"data"`
}

func (x *UpsertData) Reset() {
	*x = UpsertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertData) ProtoMessage() {}

func (x *UpsertData) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertData.ProtoReflect.Descriptor instead.
func (*UpsertData) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{1}
}

func (m *UpsertData) GetData() isUpsertData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UpsertData) GetNode() *v1beta1.Node {
	if x, ok := x.GetData().(*UpsertData_Node); ok {
		return x.Node
	}
	return nil
}

func (x *UpsertData) GetRelationship() *Relationship {
	if x, ok := x.GetData().(*UpsertData_Relationship); ok {
		return x.Relationship
	}
	return nil
}

type isUpsertData_Data interface {
	isUpsertData_Data()
}

type UpsertData_Node struct {
	Node *v1beta1.Node `protobuf:"bytes,1,opt,name=node,proto3,oneof"`
}

type UpsertData_Relationship struct {
	Relationship *Relationship `protobuf:"bytes,2,opt,name=relationship,proto3,oneof"`
}

func (*UpsertData_Node) isUpsertData_Data() {}

func (*UpsertData_Relationship) isUpsertData_Data() {}

type DeleteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*DeleteData_Node
	//	*DeleteData_Relationship
	//	*DeleteData_NodeProperty
	//	*DeleteData_RelationshipProperty
	//	*DeleteData_NodeTags
	Data isDeleteData_Data `protobuf_oneof:"data"`
}

func (x *DeleteData) Reset() {
	*x = DeleteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteData) ProtoMessage() {}

func (x *DeleteData) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteData.ProtoReflect.Descriptor instead.
func (*DeleteData) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{2}
}

func (m *DeleteData) GetData() isDeleteData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DeleteData) GetNode() *NodeMatch {
	if x, ok := x.GetData().(*DeleteData_Node); ok {
		return x.Node
	}
	return nil
}

func (x *DeleteData) GetRelationship() *Relationship {
	if x, ok := x.GetData().(*DeleteData_Relationship); ok {
		return x.Relationship
	}
	return nil
}

func (x *DeleteData) GetNodeProperty() *DeleteData_NodePropertyMatch {
	if x, ok := x.GetData().(*DeleteData_NodeProperty); ok {
		return x.NodeProperty
	}
	return nil
}

func (x *DeleteData) GetRelationshipProperty() *DeleteData_RelationshipPropertyMatch {
	if x, ok := x.GetData().(*DeleteData_RelationshipProperty); ok {
		return x.RelationshipProperty
	}
	return nil
}

func (x *DeleteData) GetNodeTags() *DeleteData_NodeTagMatch {
	if x, ok := x.GetData().(*DeleteData_NodeTags); ok {
		return x.NodeTags
	}
	return nil
}

type isDeleteData_Data interface {
	isDeleteData_Data()
}

type DeleteData_Node struct {
	Node *NodeMatch `protobuf:"bytes,1,opt,name=node,proto3,oneof"`
}

type DeleteData_Relationship struct {
	Relationship *Relationship `protobuf:"bytes,2,opt,name=relationship,proto3,oneof"`
}

type DeleteData_NodeProperty struct {
	NodeProperty *DeleteData_NodePropertyMatch `protobuf:"bytes,3,opt,name=node_property,json=nodeProperty,proto3,oneof"`
}

type DeleteData_RelationshipProperty struct {
	RelationshipProperty *DeleteData_RelationshipPropertyMatch `protobuf:"bytes,4,opt,name=relationship_property,json=relationshipProperty,proto3,oneof"`
}

type DeleteData_NodeTags struct {
	NodeTags *DeleteData_NodeTagMatch `protobuf:"bytes,5,opt,name=node_tags,json=nodeTags,proto3,oneof"`
}

func (*DeleteData_Node) isDeleteData_Data() {}

func (*DeleteData_Relationship) isDeleteData_Data() {}

func (*DeleteData_NodeProperty) isDeleteData_Data() {}

func (*DeleteData_RelationshipProperty) isDeleteData_Data() {}

func (*DeleteData_NodeTags) isDeleteData_Data() {}

type Relationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     *NodeMatch          `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target     *NodeMatch          `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Type       string              `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Properties []*v1beta1.Property `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Relationship) Reset() {
	*x = Relationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relationship) ProtoMessage() {}

func (x *Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relationship.ProtoReflect.Descriptor instead.
func (*Relationship) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{3}
}

func (x *Relationship) GetSource() *NodeMatch {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Relationship) GetTarget() *NodeMatch {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Relationship) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Relationship) GetProperties() []*v1beta1.Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

type NodeMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *NodeMatch) Reset() {
	*x = NodeMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMatch) ProtoMessage() {}

func (x *NodeMatch) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMatch.ProtoReflect.Descriptor instead.
func (*NodeMatch) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{4}
}

func (x *NodeMatch) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *NodeMatch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RecordError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RecordError) Reset() {
	*x = RecordError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordError) ProtoMessage() {}

func (x *RecordError) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordError.ProtoReflect.Descriptor instead.
func (*RecordError) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{5}
}

func (x *RecordError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{6}
}

func (x *Info) GetChanges() []*Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataType DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=indykite.ingest.v1beta3.DataType" json:"data_type,omitempty"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{7}
}

func (x *Change) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Change) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_INVALID
}

type DeleteData_NodeTagMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *NodeMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Tags  []string   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DeleteData_NodeTagMatch) Reset() {
	*x = DeleteData_NodeTagMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteData_NodeTagMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteData_NodeTagMatch) ProtoMessage() {}

func (x *DeleteData_NodeTagMatch) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteData_NodeTagMatch.ProtoReflect.Descriptor instead.
func (*DeleteData_NodeTagMatch) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{2, 0}
}

func (x *DeleteData_NodeTagMatch) GetMatch() *NodeMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *DeleteData_NodeTagMatch) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DeleteData_NodePropertyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match        *NodeMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	PropertyType string     `protobuf:"bytes,2,opt,name=property_type,json=propertyType,proto3" json:"property_type,omitempty"`
}

func (x *DeleteData_NodePropertyMatch) Reset() {
	*x = DeleteData_NodePropertyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteData_NodePropertyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteData_NodePropertyMatch) ProtoMessage() {}

func (x *DeleteData_NodePropertyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteData_NodePropertyMatch.ProtoReflect.Descriptor instead.
func (*DeleteData_NodePropertyMatch) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{2, 1}
}

func (x *DeleteData_NodePropertyMatch) GetMatch() *NodeMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *DeleteData_NodePropertyMatch) GetPropertyType() string {
	if x != nil {
		return x.PropertyType
	}
	return ""
}

type DeleteData_RelationshipPropertyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source       *NodeMatch `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target       *NodeMatch `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Type         string     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	PropertyType string     `protobuf:"bytes,4,opt,name=property_type,json=propertyType,proto3" json:"property_type,omitempty"`
}

func (x *DeleteData_RelationshipPropertyMatch) Reset() {
	*x = DeleteData_RelationshipPropertyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteData_RelationshipPropertyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteData_RelationshipPropertyMatch) ProtoMessage() {}

func (x *DeleteData_RelationshipPropertyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteData_RelationshipPropertyMatch.ProtoReflect.Descriptor instead.
func (*DeleteData_RelationshipPropertyMatch) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_model_proto_rawDescGZIP(), []int{2, 2}
}

func (x *DeleteData_RelationshipPropertyMatch) GetSource() *NodeMatch {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DeleteData_RelationshipPropertyMatch) GetTarget() *NodeMatch {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DeleteData_RelationshipPropertyMatch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteData_RelationshipPropertyMatch) GetPropertyType() string {
	if x != nil {
		return x.PropertyType
	}
	return ""
}

var File_indykite_ingest_v1beta3_model_proto protoreflect.FileDescriptor

var file_indykite_ingest_v1beta3_model_proto_rawDesc = []byte{
	0x0a, 0x23, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x1a, 0x2c,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x69, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x33, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x42, 0x0b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x22, 0x98, 0x08, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x5c, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x4f, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x80,
	0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x38, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x10,
	0x0a, 0x18, 0x01, 0x22, 0x16, 0x72, 0x14, 0x18, 0x40, 0x32, 0x10, 0x5e, 0x28, 0x5b, 0x41, 0x2d,
	0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x25, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x28, 0x80, 0x02, 0x32, 0x18, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa7, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x18, 0x80, 0x01, 0x32, 0x14, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x5d, 0x2b, 0x28, 0x3f, 0x3a, 0x5f, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x2b, 0x29, 0x2a, 0x24, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xfa, 0x42,
	0x22, 0x72, 0x20, 0x28, 0x80, 0x02, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24,
	0xd0, 0x01, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xa6,
	0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19,
	0x18, 0x80, 0x01, 0x32, 0x14, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x2b, 0x28, 0x3f, 0x3a, 0x5f,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x56, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x32, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x18, 0x40, 0x32, 0x10, 0x5e, 0x28, 0x5b, 0x41, 0x2d, 0x5a,
	0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x23, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x2a, 0x51, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x48, 0x49, 0x50, 0x10, 0x03, 0x42, 0xf6, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x33, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x33, 0x3b, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x33, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x33, 0xca, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0xe2, 0x02, 0x23, 0x49,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5c, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_ingest_v1beta3_model_proto_rawDescOnce sync.Once
	file_indykite_ingest_v1beta3_model_proto_rawDescData = file_indykite_ingest_v1beta3_model_proto_rawDesc
)

func file_indykite_ingest_v1beta3_model_proto_rawDescGZIP() []byte {
	file_indykite_ingest_v1beta3_model_proto_rawDescOnce.Do(func() {
		file_indykite_ingest_v1beta3_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_ingest_v1beta3_model_proto_rawDescData)
	})
	return file_indykite_ingest_v1beta3_model_proto_rawDescData
}

var file_indykite_ingest_v1beta3_model_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_indykite_ingest_v1beta3_model_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_indykite_ingest_v1beta3_model_proto_goTypes = []any{
	(DataType)(0),                                // 0: indykite.ingest.v1beta3.DataType
	(*Record)(nil),                               // 1: indykite.ingest.v1beta3.Record
	(*UpsertData)(nil),                           // 2: indykite.ingest.v1beta3.UpsertData
	(*DeleteData)(nil),                           // 3: indykite.ingest.v1beta3.DeleteData
	(*Relationship)(nil),                         // 4: indykite.ingest.v1beta3.Relationship
	(*NodeMatch)(nil),                            // 5: indykite.ingest.v1beta3.NodeMatch
	(*RecordError)(nil),                          // 6: indykite.ingest.v1beta3.RecordError
	(*Info)(nil),                                 // 7: indykite.ingest.v1beta3.Info
	(*Change)(nil),                               // 8: indykite.ingest.v1beta3.Change
	(*DeleteData_NodeTagMatch)(nil),              // 9: indykite.ingest.v1beta3.DeleteData.NodeTagMatch
	(*DeleteData_NodePropertyMatch)(nil),         // 10: indykite.ingest.v1beta3.DeleteData.NodePropertyMatch
	(*DeleteData_RelationshipPropertyMatch)(nil), // 11: indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch
	(*v1beta1.Node)(nil),                         // 12: indykite.knowledge.objects.v1beta1.Node
	(*v1beta1.Property)(nil),                     // 13: indykite.knowledge.objects.v1beta1.Property
}
var file_indykite_ingest_v1beta3_model_proto_depIdxs = []int32{
	2,  // 0: indykite.ingest.v1beta3.Record.upsert:type_name -> indykite.ingest.v1beta3.UpsertData
	3,  // 1: indykite.ingest.v1beta3.Record.delete:type_name -> indykite.ingest.v1beta3.DeleteData
	12, // 2: indykite.ingest.v1beta3.UpsertData.node:type_name -> indykite.knowledge.objects.v1beta1.Node
	4,  // 3: indykite.ingest.v1beta3.UpsertData.relationship:type_name -> indykite.ingest.v1beta3.Relationship
	5,  // 4: indykite.ingest.v1beta3.DeleteData.node:type_name -> indykite.ingest.v1beta3.NodeMatch
	4,  // 5: indykite.ingest.v1beta3.DeleteData.relationship:type_name -> indykite.ingest.v1beta3.Relationship
	10, // 6: indykite.ingest.v1beta3.DeleteData.node_property:type_name -> indykite.ingest.v1beta3.DeleteData.NodePropertyMatch
	11, // 7: indykite.ingest.v1beta3.DeleteData.relationship_property:type_name -> indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch
	9,  // 8: indykite.ingest.v1beta3.DeleteData.node_tags:type_name -> indykite.ingest.v1beta3.DeleteData.NodeTagMatch
	5,  // 9: indykite.ingest.v1beta3.Relationship.source:type_name -> indykite.ingest.v1beta3.NodeMatch
	5,  // 10: indykite.ingest.v1beta3.Relationship.target:type_name -> indykite.ingest.v1beta3.NodeMatch
	13, // 11: indykite.ingest.v1beta3.Relationship.properties:type_name -> indykite.knowledge.objects.v1beta1.Property
	8,  // 12: indykite.ingest.v1beta3.Info.changes:type_name -> indykite.ingest.v1beta3.Change
	0,  // 13: indykite.ingest.v1beta3.Change.data_type:type_name -> indykite.ingest.v1beta3.DataType
	5,  // 14: indykite.ingest.v1beta3.DeleteData.NodeTagMatch.match:type_name -> indykite.ingest.v1beta3.NodeMatch
	5,  // 15: indykite.ingest.v1beta3.DeleteData.NodePropertyMatch.match:type_name -> indykite.ingest.v1beta3.NodeMatch
	5,  // 16: indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch.source:type_name -> indykite.ingest.v1beta3.NodeMatch
	5,  // 17: indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch.target:type_name -> indykite.ingest.v1beta3.NodeMatch
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_indykite_ingest_v1beta3_model_proto_init() }
func file_indykite_ingest_v1beta3_model_proto_init() {
	if File_indykite_ingest_v1beta3_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indykite_ingest_v1beta3_model_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Relationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*NodeMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RecordError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteData_NodeTagMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteData_NodePropertyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_model_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteData_RelationshipPropertyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_ingest_v1beta3_model_proto_msgTypes[0].OneofWrappers = []any{
		(*Record_Upsert)(nil),
		(*Record_Delete)(nil),
	}
	file_indykite_ingest_v1beta3_model_proto_msgTypes[1].OneofWrappers = []any{
		(*UpsertData_Node)(nil),
		(*UpsertData_Relationship)(nil),
	}
	file_indykite_ingest_v1beta3_model_proto_msgTypes[2].OneofWrappers = []any{
		(*DeleteData_Node)(nil),
		(*DeleteData_Relationship)(nil),
		(*DeleteData_NodeProperty)(nil),
		(*DeleteData_RelationshipProperty)(nil),
		(*DeleteData_NodeTags)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_ingest_v1beta3_model_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_ingest_v1beta3_model_proto_goTypes,
		DependencyIndexes: file_indykite_ingest_v1beta3_model_proto_depIdxs,
		EnumInfos:         file_indykite_ingest_v1beta3_model_proto_enumTypes,
		MessageInfos:      file_indykite_ingest_v1beta3_model_proto_msgTypes,
	}.Build()
	File_indykite_ingest_v1beta3_model_proto = out.File
	file_indykite_ingest_v1beta3_model_proto_rawDesc = nil
	file_indykite_ingest_v1beta3_model_proto_goTypes = nil
	file_indykite_ingest_v1beta3_model_proto_depIdxs = nil
}
