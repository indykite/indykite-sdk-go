// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Ingest Service Description.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: indykite/ingest/v1beta3/ingest_api.proto

package ingestv1beta3

import (
	reflect "reflect"
	sync "sync"

	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v1beta1 "github.com/indykite/indykite-sdk-go/gen/indykite/knowledge/objects/v1beta1"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchUpsertNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*v1beta1.Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *BatchUpsertNodesRequest) Reset() {
	*x = BatchUpsertNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpsertNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpsertNodesRequest) ProtoMessage() {}

func (x *BatchUpsertNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpsertNodesRequest.ProtoReflect.Descriptor instead.
func (*BatchUpsertNodesRequest) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{0}
}

func (x *BatchUpsertNodesRequest) GetNodes() []*v1beta1.Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type BatchUpsertNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Info `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchUpsertNodesResponse) Reset() {
	*x = BatchUpsertNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpsertNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpsertNodesResponse) ProtoMessage() {}

func (x *BatchUpsertNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpsertNodesResponse.ProtoReflect.Descriptor instead.
func (*BatchUpsertNodesResponse) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{1}
}

func (x *BatchUpsertNodesResponse) GetResults() []*Info {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchUpsertRelationshipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationships []*Relationship `protobuf:"bytes,1,rep,name=relationships,proto3" json:"relationships,omitempty"`
}

func (x *BatchUpsertRelationshipsRequest) Reset() {
	*x = BatchUpsertRelationshipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpsertRelationshipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpsertRelationshipsRequest) ProtoMessage() {}

func (x *BatchUpsertRelationshipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpsertRelationshipsRequest.ProtoReflect.Descriptor instead.
func (*BatchUpsertRelationshipsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{2}
}

func (x *BatchUpsertRelationshipsRequest) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

type BatchUpsertRelationshipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Info `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchUpsertRelationshipsResponse) Reset() {
	*x = BatchUpsertRelationshipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpsertRelationshipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpsertRelationshipsResponse) ProtoMessage() {}

func (x *BatchUpsertRelationshipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpsertRelationshipsResponse.ProtoReflect.Descriptor instead.
func (*BatchUpsertRelationshipsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{3}
}

func (x *BatchUpsertRelationshipsResponse) GetResults() []*Info {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchDeleteNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeMatch `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *BatchDeleteNodesRequest) Reset() {
	*x = BatchDeleteNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteNodesRequest) ProtoMessage() {}

func (x *BatchDeleteNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteNodesRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteNodesRequest) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{4}
}

func (x *BatchDeleteNodesRequest) GetNodes() []*NodeMatch {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type BatchDeleteNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Info `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchDeleteNodesResponse) Reset() {
	*x = BatchDeleteNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteNodesResponse) ProtoMessage() {}

func (x *BatchDeleteNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteNodesResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteNodesResponse) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{5}
}

func (x *BatchDeleteNodesResponse) GetResults() []*Info {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchDeleteRelationshipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationships []*Relationship `protobuf:"bytes,1,rep,name=relationships,proto3" json:"relationships,omitempty"`
}

func (x *BatchDeleteRelationshipsRequest) Reset() {
	*x = BatchDeleteRelationshipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteRelationshipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRelationshipsRequest) ProtoMessage() {}

func (x *BatchDeleteRelationshipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRelationshipsRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteRelationshipsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{6}
}

func (x *BatchDeleteRelationshipsRequest) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

type BatchDeleteRelationshipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Info `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchDeleteRelationshipsResponse) Reset() {
	*x = BatchDeleteRelationshipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteRelationshipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRelationshipsResponse) ProtoMessage() {}

func (x *BatchDeleteRelationshipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRelationshipsResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteRelationshipsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{7}
}

func (x *BatchDeleteRelationshipsResponse) GetResults() []*Info {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchDeleteNodePropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeProperties []*DeleteData_NodePropertyMatch `protobuf:"bytes,1,rep,name=node_properties,json=nodeProperties,proto3" json:"node_properties,omitempty"`
}

func (x *BatchDeleteNodePropertiesRequest) Reset() {
	*x = BatchDeleteNodePropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteNodePropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteNodePropertiesRequest) ProtoMessage() {}

func (x *BatchDeleteNodePropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteNodePropertiesRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteNodePropertiesRequest) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{8}
}

func (x *BatchDeleteNodePropertiesRequest) GetNodeProperties() []*DeleteData_NodePropertyMatch {
	if x != nil {
		return x.NodeProperties
	}
	return nil
}

type BatchDeleteNodePropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Info `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchDeleteNodePropertiesResponse) Reset() {
	*x = BatchDeleteNodePropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteNodePropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteNodePropertiesResponse) ProtoMessage() {}

func (x *BatchDeleteNodePropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteNodePropertiesResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteNodePropertiesResponse) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{9}
}

func (x *BatchDeleteNodePropertiesResponse) GetResults() []*Info {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchDeleteRelationshipPropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationshipProperties []*DeleteData_RelationshipPropertyMatch `protobuf:"bytes,1,rep,name=relationship_properties,json=relationshipProperties,proto3" json:"relationship_properties,omitempty"`
}

func (x *BatchDeleteRelationshipPropertiesRequest) Reset() {
	*x = BatchDeleteRelationshipPropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteRelationshipPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRelationshipPropertiesRequest) ProtoMessage() {}

func (x *BatchDeleteRelationshipPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRelationshipPropertiesRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteRelationshipPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{10}
}

func (x *BatchDeleteRelationshipPropertiesRequest) GetRelationshipProperties() []*DeleteData_RelationshipPropertyMatch {
	if x != nil {
		return x.RelationshipProperties
	}
	return nil
}

type BatchDeleteRelationshipPropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Info `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchDeleteRelationshipPropertiesResponse) Reset() {
	*x = BatchDeleteRelationshipPropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteRelationshipPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRelationshipPropertiesResponse) ProtoMessage() {}

func (x *BatchDeleteRelationshipPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRelationshipPropertiesResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteRelationshipPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{11}
}

func (x *BatchDeleteRelationshipPropertiesResponse) GetResults() []*Info {
	if x != nil {
		return x.Results
	}
	return nil
}

type StreamRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *StreamRecordsRequest) Reset() {
	*x = StreamRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRecordsRequest) ProtoMessage() {}

func (x *StreamRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRecordsRequest.ProtoReflect.Descriptor instead.
func (*StreamRecordsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{12}
}

func (x *StreamRecordsRequest) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type StreamRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId    string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	RecordIndex uint32 `protobuf:"varint,2,opt,name=record_index,json=recordIndex,proto3" json:"record_index,omitempty"`
	// Types that are assignable to Error:
	//
	//	*StreamRecordsResponse_RecordError
	//	*StreamRecordsResponse_StatusError
	Error isStreamRecordsResponse_Error `protobuf_oneof:"error"`
	Info  *Info                         `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *StreamRecordsResponse) Reset() {
	*x = StreamRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRecordsResponse) ProtoMessage() {}

func (x *StreamRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRecordsResponse.ProtoReflect.Descriptor instead.
func (*StreamRecordsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{13}
}

func (x *StreamRecordsResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *StreamRecordsResponse) GetRecordIndex() uint32 {
	if x != nil {
		return x.RecordIndex
	}
	return 0
}

func (m *StreamRecordsResponse) GetError() isStreamRecordsResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (x *StreamRecordsResponse) GetRecordError() *RecordError {
	if x, ok := x.GetError().(*StreamRecordsResponse_RecordError); ok {
		return x.RecordError
	}
	return nil
}

func (x *StreamRecordsResponse) GetStatusError() *status.Status {
	if x, ok := x.GetError().(*StreamRecordsResponse_StatusError); ok {
		return x.StatusError
	}
	return nil
}

func (x *StreamRecordsResponse) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type isStreamRecordsResponse_Error interface {
	isStreamRecordsResponse_Error()
}

type StreamRecordsResponse_RecordError struct {
	RecordError *RecordError `protobuf:"bytes,3,opt,name=record_error,json=recordError,proto3,oneof"`
}

type StreamRecordsResponse_StatusError struct {
	StatusError *status.Status `protobuf:"bytes,4,opt,name=status_error,json=statusError,proto3,oneof"`
}

func (*StreamRecordsResponse_RecordError) isStreamRecordsResponse_Error() {}

func (*StreamRecordsResponse_StatusError) isStreamRecordsResponse_Error() {}

type IngestRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *IngestRecordRequest) Reset() {
	*x = IngestRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRecordRequest) ProtoMessage() {}

func (x *IngestRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRecordRequest.ProtoReflect.Descriptor instead.
func (*IngestRecordRequest) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{14}
}

func (x *IngestRecordRequest) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type IngestRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Info     *Info  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *IngestRecordResponse) Reset() {
	*x = IngestRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRecordResponse) ProtoMessage() {}

func (x *IngestRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRecordResponse.ProtoReflect.Descriptor instead.
func (*IngestRecordResponse) Descriptor() ([]byte, []int) {
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP(), []int{15}
}

func (x *IngestRecordResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *IngestRecordResponse) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_indykite_ingest_v1beta3_ingest_api_proto protoreflect.FileDescriptor

var file_indykite_ingest_v1beta3_ingest_api_proto_rawDesc = []byte{
	0x0a, 0x28, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x33, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x69, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0xfa, 0x42,
	0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xfa, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x53, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01,
	0x10, 0xfa, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x22, 0x5b, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x33, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x60, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x33, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xfa, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x53, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08,
	0x01, 0x10, 0xfa, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x22, 0x5b, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x33, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x8f, 0x01, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10,
	0xfa, 0x01, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x5c, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x33, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x28, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x83, 0x01,
	0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0b,
	0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xfa, 0x01, 0x52, 0x16, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x29, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x14, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x58,
	0x0a, 0x13, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x66, 0x0a, 0x14, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x32, 0xc4, 0x08, 0x0a, 0x09, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x41, 0x50, 0x49, 0x12, 0x72,
	0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x6b, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x21, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x41, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xfa, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x42, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x3b, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02,
	0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0xca, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x5c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x33, 0xe2, 0x02, 0x23, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x3a, 0x3a, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_ingest_v1beta3_ingest_api_proto_rawDescOnce sync.Once
	file_indykite_ingest_v1beta3_ingest_api_proto_rawDescData = file_indykite_ingest_v1beta3_ingest_api_proto_rawDesc
)

func file_indykite_ingest_v1beta3_ingest_api_proto_rawDescGZIP() []byte {
	file_indykite_ingest_v1beta3_ingest_api_proto_rawDescOnce.Do(func() {
		file_indykite_ingest_v1beta3_ingest_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_ingest_v1beta3_ingest_api_proto_rawDescData)
	})
	return file_indykite_ingest_v1beta3_ingest_api_proto_rawDescData
}

var file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_indykite_ingest_v1beta3_ingest_api_proto_goTypes = []any{
	(*BatchUpsertNodesRequest)(nil),                   // 0: indykite.ingest.v1beta3.BatchUpsertNodesRequest
	(*BatchUpsertNodesResponse)(nil),                  // 1: indykite.ingest.v1beta3.BatchUpsertNodesResponse
	(*BatchUpsertRelationshipsRequest)(nil),           // 2: indykite.ingest.v1beta3.BatchUpsertRelationshipsRequest
	(*BatchUpsertRelationshipsResponse)(nil),          // 3: indykite.ingest.v1beta3.BatchUpsertRelationshipsResponse
	(*BatchDeleteNodesRequest)(nil),                   // 4: indykite.ingest.v1beta3.BatchDeleteNodesRequest
	(*BatchDeleteNodesResponse)(nil),                  // 5: indykite.ingest.v1beta3.BatchDeleteNodesResponse
	(*BatchDeleteRelationshipsRequest)(nil),           // 6: indykite.ingest.v1beta3.BatchDeleteRelationshipsRequest
	(*BatchDeleteRelationshipsResponse)(nil),          // 7: indykite.ingest.v1beta3.BatchDeleteRelationshipsResponse
	(*BatchDeleteNodePropertiesRequest)(nil),          // 8: indykite.ingest.v1beta3.BatchDeleteNodePropertiesRequest
	(*BatchDeleteNodePropertiesResponse)(nil),         // 9: indykite.ingest.v1beta3.BatchDeleteNodePropertiesResponse
	(*BatchDeleteRelationshipPropertiesRequest)(nil),  // 10: indykite.ingest.v1beta3.BatchDeleteRelationshipPropertiesRequest
	(*BatchDeleteRelationshipPropertiesResponse)(nil), // 11: indykite.ingest.v1beta3.BatchDeleteRelationshipPropertiesResponse
	(*StreamRecordsRequest)(nil),                      // 12: indykite.ingest.v1beta3.StreamRecordsRequest
	(*StreamRecordsResponse)(nil),                     // 13: indykite.ingest.v1beta3.StreamRecordsResponse
	(*IngestRecordRequest)(nil),                       // 14: indykite.ingest.v1beta3.IngestRecordRequest
	(*IngestRecordResponse)(nil),                      // 15: indykite.ingest.v1beta3.IngestRecordResponse
	(*v1beta1.Node)(nil),                              // 16: indykite.knowledge.objects.v1beta1.Node
	(*Info)(nil),                                      // 17: indykite.ingest.v1beta3.Info
	(*Relationship)(nil),                              // 18: indykite.ingest.v1beta3.Relationship
	(*NodeMatch)(nil),                                 // 19: indykite.ingest.v1beta3.NodeMatch
	(*DeleteData_NodePropertyMatch)(nil),              // 20: indykite.ingest.v1beta3.DeleteData.NodePropertyMatch
	(*DeleteData_RelationshipPropertyMatch)(nil),      // 21: indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch
	(*Record)(nil),                                    // 22: indykite.ingest.v1beta3.Record
	(*RecordError)(nil),                               // 23: indykite.ingest.v1beta3.RecordError
	(*status.Status)(nil),                             // 24: google.rpc.Status
}
var file_indykite_ingest_v1beta3_ingest_api_proto_depIdxs = []int32{
	16, // 0: indykite.ingest.v1beta3.BatchUpsertNodesRequest.nodes:type_name -> indykite.knowledge.objects.v1beta1.Node
	17, // 1: indykite.ingest.v1beta3.BatchUpsertNodesResponse.results:type_name -> indykite.ingest.v1beta3.Info
	18, // 2: indykite.ingest.v1beta3.BatchUpsertRelationshipsRequest.relationships:type_name -> indykite.ingest.v1beta3.Relationship
	17, // 3: indykite.ingest.v1beta3.BatchUpsertRelationshipsResponse.results:type_name -> indykite.ingest.v1beta3.Info
	19, // 4: indykite.ingest.v1beta3.BatchDeleteNodesRequest.nodes:type_name -> indykite.ingest.v1beta3.NodeMatch
	17, // 5: indykite.ingest.v1beta3.BatchDeleteNodesResponse.results:type_name -> indykite.ingest.v1beta3.Info
	18, // 6: indykite.ingest.v1beta3.BatchDeleteRelationshipsRequest.relationships:type_name -> indykite.ingest.v1beta3.Relationship
	17, // 7: indykite.ingest.v1beta3.BatchDeleteRelationshipsResponse.results:type_name -> indykite.ingest.v1beta3.Info
	20, // 8: indykite.ingest.v1beta3.BatchDeleteNodePropertiesRequest.node_properties:type_name -> indykite.ingest.v1beta3.DeleteData.NodePropertyMatch
	17, // 9: indykite.ingest.v1beta3.BatchDeleteNodePropertiesResponse.results:type_name -> indykite.ingest.v1beta3.Info
	21, // 10: indykite.ingest.v1beta3.BatchDeleteRelationshipPropertiesRequest.relationship_properties:type_name -> indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch
	17, // 11: indykite.ingest.v1beta3.BatchDeleteRelationshipPropertiesResponse.results:type_name -> indykite.ingest.v1beta3.Info
	22, // 12: indykite.ingest.v1beta3.StreamRecordsRequest.record:type_name -> indykite.ingest.v1beta3.Record
	23, // 13: indykite.ingest.v1beta3.StreamRecordsResponse.record_error:type_name -> indykite.ingest.v1beta3.RecordError
	24, // 14: indykite.ingest.v1beta3.StreamRecordsResponse.status_error:type_name -> google.rpc.Status
	17, // 15: indykite.ingest.v1beta3.StreamRecordsResponse.info:type_name -> indykite.ingest.v1beta3.Info
	22, // 16: indykite.ingest.v1beta3.IngestRecordRequest.record:type_name -> indykite.ingest.v1beta3.Record
	17, // 17: indykite.ingest.v1beta3.IngestRecordResponse.info:type_name -> indykite.ingest.v1beta3.Info
	12, // 18: indykite.ingest.v1beta3.IngestAPI.StreamRecords:input_type -> indykite.ingest.v1beta3.StreamRecordsRequest
	14, // 19: indykite.ingest.v1beta3.IngestAPI.IngestRecord:input_type -> indykite.ingest.v1beta3.IngestRecordRequest
	0,  // 20: indykite.ingest.v1beta3.IngestAPI.BatchUpsertNodes:input_type -> indykite.ingest.v1beta3.BatchUpsertNodesRequest
	2,  // 21: indykite.ingest.v1beta3.IngestAPI.BatchUpsertRelationships:input_type -> indykite.ingest.v1beta3.BatchUpsertRelationshipsRequest
	4,  // 22: indykite.ingest.v1beta3.IngestAPI.BatchDeleteNodes:input_type -> indykite.ingest.v1beta3.BatchDeleteNodesRequest
	6,  // 23: indykite.ingest.v1beta3.IngestAPI.BatchDeleteRelationships:input_type -> indykite.ingest.v1beta3.BatchDeleteRelationshipsRequest
	8,  // 24: indykite.ingest.v1beta3.IngestAPI.BatchDeleteNodeProperties:input_type -> indykite.ingest.v1beta3.BatchDeleteNodePropertiesRequest
	10, // 25: indykite.ingest.v1beta3.IngestAPI.BatchDeleteRelationshipProperties:input_type -> indykite.ingest.v1beta3.BatchDeleteRelationshipPropertiesRequest
	13, // 26: indykite.ingest.v1beta3.IngestAPI.StreamRecords:output_type -> indykite.ingest.v1beta3.StreamRecordsResponse
	15, // 27: indykite.ingest.v1beta3.IngestAPI.IngestRecord:output_type -> indykite.ingest.v1beta3.IngestRecordResponse
	1,  // 28: indykite.ingest.v1beta3.IngestAPI.BatchUpsertNodes:output_type -> indykite.ingest.v1beta3.BatchUpsertNodesResponse
	3,  // 29: indykite.ingest.v1beta3.IngestAPI.BatchUpsertRelationships:output_type -> indykite.ingest.v1beta3.BatchUpsertRelationshipsResponse
	5,  // 30: indykite.ingest.v1beta3.IngestAPI.BatchDeleteNodes:output_type -> indykite.ingest.v1beta3.BatchDeleteNodesResponse
	7,  // 31: indykite.ingest.v1beta3.IngestAPI.BatchDeleteRelationships:output_type -> indykite.ingest.v1beta3.BatchDeleteRelationshipsResponse
	9,  // 32: indykite.ingest.v1beta3.IngestAPI.BatchDeleteNodeProperties:output_type -> indykite.ingest.v1beta3.BatchDeleteNodePropertiesResponse
	11, // 33: indykite.ingest.v1beta3.IngestAPI.BatchDeleteRelationshipProperties:output_type -> indykite.ingest.v1beta3.BatchDeleteRelationshipPropertiesResponse
	26, // [26:34] is the sub-list for method output_type
	18, // [18:26] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_indykite_ingest_v1beta3_ingest_api_proto_init() }
func file_indykite_ingest_v1beta3_ingest_api_proto_init() {
	if File_indykite_ingest_v1beta3_ingest_api_proto != nil {
		return
	}
	file_indykite_ingest_v1beta3_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpsertNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpsertNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpsertRelationshipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpsertRelationshipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteRelationshipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteRelationshipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteNodePropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteNodePropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteRelationshipPropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteRelationshipPropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*StreamRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*StreamRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*IngestRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*IngestRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes[13].OneofWrappers = []any{
		(*StreamRecordsResponse_RecordError)(nil),
		(*StreamRecordsResponse_StatusError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_ingest_v1beta3_ingest_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indykite_ingest_v1beta3_ingest_api_proto_goTypes,
		DependencyIndexes: file_indykite_ingest_v1beta3_ingest_api_proto_depIdxs,
		MessageInfos:      file_indykite_ingest_v1beta3_ingest_api_proto_msgTypes,
	}.Build()
	File_indykite_ingest_v1beta3_ingest_api_proto = out.File
	file_indykite_ingest_v1beta3_ingest_api_proto_rawDesc = nil
	file_indykite_ingest_v1beta3_ingest_api_proto_goTypes = nil
	file_indykite_ingest_v1beta3_ingest_api_proto_depIdxs = nil
}
