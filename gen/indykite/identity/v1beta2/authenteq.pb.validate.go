// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/identity/v1beta2/authenteq.proto

package identityv1beta2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthenteqDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthenteqDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenteqDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenteqDetailsMultiError, or nil if none found.
func (m *AuthenteqDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenteqDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetDocumentData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenteqDetailsValidationError{
					field:  "DocumentData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenteqDetailsValidationError{
					field:  "DocumentData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocumentData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenteqDetailsValidationError{
				field:  "DocumentData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthenteqDetailsMultiError(errors)
	}

	return nil
}

// AuthenteqDetailsMultiError is an error wrapping multiple validation errors
// returned by AuthenteqDetails.ValidateAll() if the designated constraints
// aren't met.
type AuthenteqDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenteqDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenteqDetailsMultiError) AllErrors() []error { return m }

// AuthenteqDetailsValidationError is the validation error returned by
// AuthenteqDetails.Validate if the designated constraints aren't met.
type AuthenteqDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenteqDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenteqDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenteqDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenteqDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenteqDetailsValidationError) ErrorName() string { return "AuthenteqDetailsValidationError" }

// Error satisfies the builtin error interface
func (e AuthenteqDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenteqDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenteqDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenteqDetailsValidationError{}

// Validate checks the field values on AuthenteqDocumentData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenteqDocumentData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenteqDocumentData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenteqDocumentDataMultiError, or nil if none found.
func (m *AuthenteqDocumentData) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenteqDocumentData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentType

	// no validation rules for DocumentNumber

	// no validation rules for IssuingCountry

	// no validation rules for Jurisdiction

	// no validation rules for Nationality

	// no validation rules for SurnameAndGivenNames

	// no validation rules for Surname

	// no validation rules for GivenNames

	// no validation rules for NameSuffixes

	// no validation rules for NamePrefixes

	// no validation rules for Sex

	// no validation rules for DateOfBirth

	// no validation rules for DateOfExpiry

	// no validation rules for DateOfIssue

	// no validation rules for LicenseClass

	{
		sorted_keys := make([]string, len(m.GetLicenseClassDetails()))
		i := 0
		for key := range m.GetLicenseClassDetails() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLicenseClassDetails()[key]
			_ = val

			// no validation rules for LicenseClassDetails[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AuthenteqDocumentDataValidationError{
							field:  fmt.Sprintf("LicenseClassDetails[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AuthenteqDocumentDataValidationError{
							field:  fmt.Sprintf("LicenseClassDetails[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AuthenteqDocumentDataValidationError{
						field:  fmt.Sprintf("LicenseClassDetails[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetCroppedFrontImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenteqDocumentDataValidationError{
					field:  "CroppedFrontImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenteqDocumentDataValidationError{
					field:  "CroppedFrontImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCroppedFrontImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenteqDocumentDataValidationError{
				field:  "CroppedFrontImage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCroppedBackImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenteqDocumentDataValidationError{
					field:  "CroppedBackImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenteqDocumentDataValidationError{
					field:  "CroppedBackImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCroppedBackImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenteqDocumentDataValidationError{
				field:  "CroppedBackImage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFaceImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenteqDocumentDataValidationError{
					field:  "FaceImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenteqDocumentDataValidationError{
					field:  "FaceImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFaceImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenteqDocumentDataValidationError{
				field:  "FaceImage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthenteqDocumentDataMultiError(errors)
	}

	return nil
}

// AuthenteqDocumentDataMultiError is an error wrapping multiple validation
// errors returned by AuthenteqDocumentData.ValidateAll() if the designated
// constraints aren't met.
type AuthenteqDocumentDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenteqDocumentDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenteqDocumentDataMultiError) AllErrors() []error { return m }

// AuthenteqDocumentDataValidationError is the validation error returned by
// AuthenteqDocumentData.Validate if the designated constraints aren't met.
type AuthenteqDocumentDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenteqDocumentDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenteqDocumentDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenteqDocumentDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenteqDocumentDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenteqDocumentDataValidationError) ErrorName() string {
	return "AuthenteqDocumentDataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenteqDocumentDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenteqDocumentData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenteqDocumentDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenteqDocumentDataValidationError{}

// Validate checks the field values on LicenseClassDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LicenseClassDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LicenseClassDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LicenseClassDetailsMultiError, or nil if none found.
func (m *LicenseClassDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *LicenseClassDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Notes

	if len(errors) > 0 {
		return LicenseClassDetailsMultiError(errors)
	}

	return nil
}

// LicenseClassDetailsMultiError is an error wrapping multiple validation
// errors returned by LicenseClassDetails.ValidateAll() if the designated
// constraints aren't met.
type LicenseClassDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseClassDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseClassDetailsMultiError) AllErrors() []error { return m }

// LicenseClassDetailsValidationError is the validation error returned by
// LicenseClassDetails.Validate if the designated constraints aren't met.
type LicenseClassDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseClassDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseClassDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseClassDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseClassDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseClassDetailsValidationError) ErrorName() string {
	return "LicenseClassDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e LicenseClassDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseClassDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseClassDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseClassDetailsValidationError{}

// Validate checks the field values on WebImage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebImageMultiError, or nil
// if none found.
func (m *WebImage) ValidateAll() error {
	return m.validate(true)
}

func (m *WebImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContentType

	// no validation rules for Content

	if len(errors) > 0 {
		return WebImageMultiError(errors)
	}

	return nil
}

// WebImageMultiError is an error wrapping multiple validation errors returned
// by WebImage.ValidateAll() if the designated constraints aren't met.
type WebImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebImageMultiError) AllErrors() []error { return m }

// WebImageValidationError is the validation error returned by
// WebImage.Validate if the designated constraints aren't met.
type WebImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebImageValidationError) ErrorName() string { return "WebImageValidationError" }

// Error satisfies the builtin error interface
func (e WebImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebImageValidationError{}
