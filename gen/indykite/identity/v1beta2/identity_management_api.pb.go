// Copyright (c) 2020-2022 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Identity Management Service Description.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: indykite/identity/v1beta2/identity_management_api.proto

package identityv1beta2

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

	v1beta1 "github.com/indykite/jarvis-sdk-go/gen/indykite/objects/v1beta1"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredentialControl int32

const (
	CredentialControl_CREDENTIAL_CONTROL_INVALID CredentialControl = 0
	CredentialControl_CREDENTIAL_CONTROL_DISABLE CredentialControl = 1
	CredentialControl_CREDENTIAL_CONTROL_ENABLE  CredentialControl = 2
	CredentialControl_CREDENTIAL_CONTROL_LOCKOUT CredentialControl = 3
	// The user can't change the password.
	CredentialControl_CREDENTIAL_CONTROL_PASSWORD_CANT_CHANGE CredentialControl = 4
	// It's a default account type that represents a typical user.
	CredentialControl_CREDENTIAL_CONTROL_NORMAL_ACCOUNT CredentialControl = 5
	// Represents the password, which should never expire on the account.
	CredentialControl_CREDENTIAL_CONTROL_DONT_EXPIRE_PASSWORD CredentialControl = 6
	// The user's password has expired.
	CredentialControl_CREDENTIAL_CONTROL_PASSWORD_EXPIRED CredentialControl = 7 //CREDENTIAL_CONTROL_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 8;
)

// Enum value maps for CredentialControl.
var (
	CredentialControl_name = map[int32]string{
		0: "CREDENTIAL_CONTROL_INVALID",
		1: "CREDENTIAL_CONTROL_DISABLE",
		2: "CREDENTIAL_CONTROL_ENABLE",
		3: "CREDENTIAL_CONTROL_LOCKOUT",
		4: "CREDENTIAL_CONTROL_PASSWORD_CANT_CHANGE",
		5: "CREDENTIAL_CONTROL_NORMAL_ACCOUNT",
		6: "CREDENTIAL_CONTROL_DONT_EXPIRE_PASSWORD",
		7: "CREDENTIAL_CONTROL_PASSWORD_EXPIRED",
	}
	CredentialControl_value = map[string]int32{
		"CREDENTIAL_CONTROL_INVALID":              0,
		"CREDENTIAL_CONTROL_DISABLE":              1,
		"CREDENTIAL_CONTROL_ENABLE":               2,
		"CREDENTIAL_CONTROL_LOCKOUT":              3,
		"CREDENTIAL_CONTROL_PASSWORD_CANT_CHANGE": 4,
		"CREDENTIAL_CONTROL_NORMAL_ACCOUNT":       5,
		"CREDENTIAL_CONTROL_DONT_EXPIRE_PASSWORD": 6,
		"CREDENTIAL_CONTROL_PASSWORD_EXPIRED":     7,
	}
)

func (x CredentialControl) Enum() *CredentialControl {
	p := new(CredentialControl)
	*p = x
	return p
}

func (x CredentialControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialControl) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_identity_v1beta2_identity_management_api_proto_enumTypes[0].Descriptor()
}

func (CredentialControl) Type() protoreflect.EnumType {
	return &file_indykite_identity_v1beta2_identity_management_api_proto_enumTypes[0]
}

func (x CredentialControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialControl.Descriptor instead.
func (CredentialControl) EnumDescriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{0}
}

type TokenIntrospectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// The string value of the token. For access tokens, this
	// is the "access_token" value returned from the token endpoint
	// defined in OAuth 2.0. For refresh tokens, this is the "refresh_token"
	// value returned.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TokenIntrospectRequest) Reset() {
	*x = TokenIntrospectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectRequest) ProtoMessage() {}

func (x *TokenIntrospectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectRequest.ProtoReflect.Descriptor instead.
func (*TokenIntrospectRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{0}
}

func (x *TokenIntrospectRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TokenIntrospectRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TokenIntrospectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active    bool               `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	TokenInfo *IdentityTokenInfo `protobuf:"bytes,2,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
}

func (x *TokenIntrospectResponse) Reset() {
	*x = TokenIntrospectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectResponse) ProtoMessage() {}

func (x *TokenIntrospectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectResponse.ProtoReflect.Descriptor instead.
func (*TokenIntrospectResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{1}
}

func (x *TokenIntrospectResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *TokenIntrospectResponse) GetTokenInfo() *IdentityTokenInfo {
	if x != nil {
		return x.TokenInfo
	}
	return nil
}

type StartForgottenPasswordFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalTwin *DigitalTwin `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
}

func (x *StartForgottenPasswordFlowRequest) Reset() {
	*x = StartForgottenPasswordFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartForgottenPasswordFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartForgottenPasswordFlowRequest) ProtoMessage() {}

func (x *StartForgottenPasswordFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartForgottenPasswordFlowRequest.ProtoReflect.Descriptor instead.
func (*StartForgottenPasswordFlowRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{2}
}

func (x *StartForgottenPasswordFlowRequest) GetDigitalTwin() *DigitalTwin {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

type StartForgottenPasswordFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartForgottenPasswordFlowResponse) Reset() {
	*x = StartForgottenPasswordFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartForgottenPasswordFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartForgottenPasswordFlowResponse) ProtoMessage() {}

func (x *StartForgottenPasswordFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartForgottenPasswordFlowResponse.ProtoReflect.Descriptor instead.
func (*StartForgottenPasswordFlowResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{3}
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Uid:
	//	*ChangePasswordRequest_Token
	//	*ChangePasswordRequest_DigitalTwin
	Uid          isChangePasswordRequest_Uid `protobuf_oneof:"uid"`
	Password     string                      `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	IgnorePolicy bool                        `protobuf:"varint,4,opt,name=ignore_policy,json=ignorePolicy,proto3" json:"ignore_policy,omitempty"`
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{4}
}

func (m *ChangePasswordRequest) GetUid() isChangePasswordRequest_Uid {
	if m != nil {
		return m.Uid
	}
	return nil
}

func (x *ChangePasswordRequest) GetToken() string {
	if x, ok := x.GetUid().(*ChangePasswordRequest_Token); ok {
		return x.Token
	}
	return ""
}

func (x *ChangePasswordRequest) GetDigitalTwin() *DigitalTwin {
	if x, ok := x.GetUid().(*ChangePasswordRequest_DigitalTwin); ok {
		return x.DigitalTwin
	}
	return nil
}

func (x *ChangePasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ChangePasswordRequest) GetIgnorePolicy() bool {
	if x != nil {
		return x.IgnorePolicy
	}
	return false
}

type isChangePasswordRequest_Uid interface {
	isChangePasswordRequest_Uid()
}

type ChangePasswordRequest_Token struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3,oneof"`
}

type ChangePasswordRequest_DigitalTwin struct {
	DigitalTwin *DigitalTwin `protobuf:"bytes,2,opt,name=digital_twin,json=digitalTwin,proto3,oneof"`
}

func (*ChangePasswordRequest_Token) isChangePasswordRequest_Uid() {}

func (*ChangePasswordRequest_DigitalTwin) isChangePasswordRequest_Uid() {}

type ChangePasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ChangePasswordResponse) Reset() {
	*x = ChangePasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordResponse) ProtoMessage() {}

func (x *ChangePasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordResponse.ProtoReflect.Descriptor instead.
func (*ChangePasswordResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{5}
}

func (x *ChangePasswordResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type StartDigitalTwinEmailVerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalTwin *DigitalTwin      `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
	Email       string            `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Attributes  *v1beta1.MapValue `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *StartDigitalTwinEmailVerificationRequest) Reset() {
	*x = StartDigitalTwinEmailVerificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDigitalTwinEmailVerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDigitalTwinEmailVerificationRequest) ProtoMessage() {}

func (x *StartDigitalTwinEmailVerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDigitalTwinEmailVerificationRequest.ProtoReflect.Descriptor instead.
func (*StartDigitalTwinEmailVerificationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{6}
}

func (x *StartDigitalTwinEmailVerificationRequest) GetDigitalTwin() *DigitalTwin {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

func (x *StartDigitalTwinEmailVerificationRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *StartDigitalTwinEmailVerificationRequest) GetAttributes() *v1beta1.MapValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type StartDigitalTwinEmailVerificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartDigitalTwinEmailVerificationResponse) Reset() {
	*x = StartDigitalTwinEmailVerificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDigitalTwinEmailVerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDigitalTwinEmailVerificationResponse) ProtoMessage() {}

func (x *StartDigitalTwinEmailVerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDigitalTwinEmailVerificationResponse.ProtoReflect.Descriptor instead.
func (*StartDigitalTwinEmailVerificationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{7}
}

type VerifyDigitalTwinEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *VerifyDigitalTwinEmailRequest) Reset() {
	*x = VerifyDigitalTwinEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyDigitalTwinEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyDigitalTwinEmailRequest) ProtoMessage() {}

func (x *VerifyDigitalTwinEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyDigitalTwinEmailRequest.ProtoReflect.Descriptor instead.
func (*VerifyDigitalTwinEmailRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{8}
}

func (x *VerifyDigitalTwinEmailRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type VerifyDigitalTwinEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalTwin *DigitalTwin `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
}

func (x *VerifyDigitalTwinEmailResponse) Reset() {
	*x = VerifyDigitalTwinEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyDigitalTwinEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyDigitalTwinEmailResponse) ProtoMessage() {}

func (x *VerifyDigitalTwinEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyDigitalTwinEmailResponse.ProtoReflect.Descriptor instead.
func (*VerifyDigitalTwinEmailResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyDigitalTwinEmailResponse) GetDigitalTwin() *DigitalTwin {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

type SelfServiceTerminateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *SelfServiceTerminateSessionRequest) Reset() {
	*x = SelfServiceTerminateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfServiceTerminateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfServiceTerminateSessionRequest) ProtoMessage() {}

func (x *SelfServiceTerminateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfServiceTerminateSessionRequest.ProtoReflect.Descriptor instead.
func (*SelfServiceTerminateSessionRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{10}
}

func (x *SelfServiceTerminateSessionRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type SelfServiceTerminateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SelfServiceTerminateSessionResponse) Reset() {
	*x = SelfServiceTerminateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfServiceTerminateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfServiceTerminateSessionResponse) ProtoMessage() {}

func (x *SelfServiceTerminateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfServiceTerminateSessionResponse.ProtoReflect.Descriptor instead.
func (*SelfServiceTerminateSessionResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{11}
}

type DigitalTwinIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//	*DigitalTwinIdentifier_DigitalTwin
	//	*DigitalTwinIdentifier_PropertyFilter
	//	*DigitalTwinIdentifier_AccessToken
	Filter isDigitalTwinIdentifier_Filter `protobuf_oneof:"filter"`
}

func (x *DigitalTwinIdentifier) Reset() {
	*x = DigitalTwinIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalTwinIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalTwinIdentifier) ProtoMessage() {}

func (x *DigitalTwinIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalTwinIdentifier.ProtoReflect.Descriptor instead.
func (*DigitalTwinIdentifier) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{12}
}

func (m *DigitalTwinIdentifier) GetFilter() isDigitalTwinIdentifier_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *DigitalTwinIdentifier) GetDigitalTwin() *DigitalTwin {
	if x, ok := x.GetFilter().(*DigitalTwinIdentifier_DigitalTwin); ok {
		return x.DigitalTwin
	}
	return nil
}

func (x *DigitalTwinIdentifier) GetPropertyFilter() *PropertyFilter {
	if x, ok := x.GetFilter().(*DigitalTwinIdentifier_PropertyFilter); ok {
		return x.PropertyFilter
	}
	return nil
}

func (x *DigitalTwinIdentifier) GetAccessToken() string {
	if x, ok := x.GetFilter().(*DigitalTwinIdentifier_AccessToken); ok {
		return x.AccessToken
	}
	return ""
}

type isDigitalTwinIdentifier_Filter interface {
	isDigitalTwinIdentifier_Filter()
}

type DigitalTwinIdentifier_DigitalTwin struct {
	DigitalTwin *DigitalTwin `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3,oneof"`
}

type DigitalTwinIdentifier_PropertyFilter struct {
	PropertyFilter *PropertyFilter `protobuf:"bytes,2,opt,name=property_filter,json=propertyFilter,proto3,oneof"`
}

type DigitalTwinIdentifier_AccessToken struct {
	AccessToken string `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3,oneof"`
}

func (*DigitalTwinIdentifier_DigitalTwin) isDigitalTwinIdentifier_Filter() {}

func (*DigitalTwinIdentifier_PropertyFilter) isDigitalTwinIdentifier_Filter() {}

func (*DigitalTwinIdentifier_AccessToken) isDigitalTwinIdentifier_Filter() {}

type PropertyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value    *v1beta1.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	TenantId string         `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *PropertyFilter) Reset() {
	*x = PropertyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyFilter) ProtoMessage() {}

func (x *PropertyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyFilter.ProtoReflect.Descriptor instead.
func (*PropertyFilter) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{13}
}

func (x *PropertyFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PropertyFilter) GetValue() *v1beta1.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PropertyFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type GetDigitalTwinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *DigitalTwinIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Properties defines the list of requested properties to get.
	Properties []*PropertyMask `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *GetDigitalTwinRequest) Reset() {
	*x = GetDigitalTwinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDigitalTwinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDigitalTwinRequest) ProtoMessage() {}

func (x *GetDigitalTwinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDigitalTwinRequest.ProtoReflect.Descriptor instead.
func (*GetDigitalTwinRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetDigitalTwinRequest) GetId() *DigitalTwinIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetDigitalTwinRequest) GetProperties() []*PropertyMask {
	if x != nil {
		return x.Properties
	}
	return nil
}

type GetDigitalTwinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalTwin *DigitalEntity     `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
	TokenInfo   *IdentityTokenInfo `protobuf:"bytes,2,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
}

func (x *GetDigitalTwinResponse) Reset() {
	*x = GetDigitalTwinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDigitalTwinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDigitalTwinResponse) ProtoMessage() {}

func (x *GetDigitalTwinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDigitalTwinResponse.ProtoReflect.Descriptor instead.
func (*GetDigitalTwinResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetDigitalTwinResponse) GetDigitalTwin() *DigitalEntity {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

func (x *GetDigitalTwinResponse) GetTokenInfo() *IdentityTokenInfo {
	if x != nil {
		return x.TokenInfo
	}
	return nil
}

type ListDigitalTwinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// CollectionId, relative to `parent`, to list.
	// Required.
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// PageSize is the maximum number of documents to return.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// PageToken is the `next_page_token` value returned from a previous List request.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// OrderBy to sort results by. For example: `priority desc, name`.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Properties contains the requested property values.
	Properties []*Property `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *ListDigitalTwinsRequest) Reset() {
	*x = ListDigitalTwinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDigitalTwinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDigitalTwinsRequest) ProtoMessage() {}

func (x *ListDigitalTwinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDigitalTwinsRequest.ProtoReflect.Descriptor instead.
func (*ListDigitalTwinsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{16}
}

func (x *ListDigitalTwinsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListDigitalTwinsRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *ListDigitalTwinsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDigitalTwinsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDigitalTwinsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListDigitalTwinsRequest) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

type ListDigitalTwinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalTwin []*DigitalEntity `protobuf:"bytes,1,rep,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
	// NextPageToken is `page_token` value for the next ListDocumentsRequest.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDigitalTwinsResponse) Reset() {
	*x = ListDigitalTwinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDigitalTwinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDigitalTwinsResponse) ProtoMessage() {}

func (x *ListDigitalTwinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDigitalTwinsResponse.ProtoReflect.Descriptor instead.
func (*ListDigitalTwinsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListDigitalTwinsResponse) GetDigitalTwin() []*DigitalEntity {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

func (x *ListDigitalTwinsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type RegisterDigitalTwinWithoutCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId        string          `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	DigitalTwinKind DigitalTwinKind `protobuf:"varint,1,opt,name=digital_twin_kind,json=digitalTwinKind,proto3,enum=indykite.identity.v1beta2.DigitalTwinKind" json:"digital_twin_kind,omitempty"`
	// Tags define semantics for DigitalTwin.
	// First tag is considered as primary tag for use cases, when 1 tag must be extracted from the list.
	//
	// Tags defines more detailed semantic meaning, and are tightly coupled with the properties a DigitalTwin can have.
	DigitalTwinTags []string    `protobuf:"bytes,5,rep,name=digital_twin_tags,json=digitalTwinTags,proto3" json:"digital_twin_tags,omitempty"`
	Properties      []*Property `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"`
	// bookmarks to use with neo4j Transaction
	Bookmarks []string `protobuf:"bytes,4,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *RegisterDigitalTwinWithoutCredentialRequest) Reset() {
	*x = RegisterDigitalTwinWithoutCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDigitalTwinWithoutCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDigitalTwinWithoutCredentialRequest) ProtoMessage() {}

func (x *RegisterDigitalTwinWithoutCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDigitalTwinWithoutCredentialRequest.ProtoReflect.Descriptor instead.
func (*RegisterDigitalTwinWithoutCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterDigitalTwinWithoutCredentialRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *RegisterDigitalTwinWithoutCredentialRequest) GetDigitalTwinKind() DigitalTwinKind {
	if x != nil {
		return x.DigitalTwinKind
	}
	return DigitalTwinKind_DIGITAL_TWIN_KIND_INVALID
}

func (x *RegisterDigitalTwinWithoutCredentialRequest) GetDigitalTwinTags() []string {
	if x != nil {
		return x.DigitalTwinTags
	}
	return nil
}

func (x *RegisterDigitalTwinWithoutCredentialRequest) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *RegisterDigitalTwinWithoutCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type RegisterDigitalTwinWithoutCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalTwin *DigitalTwin            `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
	Results     []*BatchOperationResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	Bookmark    string                  `protobuf:"bytes,3,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *RegisterDigitalTwinWithoutCredentialResponse) Reset() {
	*x = RegisterDigitalTwinWithoutCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDigitalTwinWithoutCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDigitalTwinWithoutCredentialResponse) ProtoMessage() {}

func (x *RegisterDigitalTwinWithoutCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDigitalTwinWithoutCredentialResponse.ProtoReflect.Descriptor instead.
func (*RegisterDigitalTwinWithoutCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterDigitalTwinWithoutCredentialResponse) GetDigitalTwin() *DigitalTwin {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

func (x *RegisterDigitalTwinWithoutCredentialResponse) GetResults() []*BatchOperationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RegisterDigitalTwinWithoutCredentialResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type PatchDigitalTwinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *DigitalTwinIdentifier    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Operations []*PropertyBatchOperation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
	// AdminToken must be set when id contains only the DigitalTwin.
	AdminToken string `protobuf:"bytes,3,opt,name=admin_token,json=adminToken,proto3" json:"admin_token,omitempty"`
	// ForceDelete must be set to true to delete primary property
	ForceDelete bool `protobuf:"varint,4,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"`
}

func (x *PatchDigitalTwinRequest) Reset() {
	*x = PatchDigitalTwinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchDigitalTwinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchDigitalTwinRequest) ProtoMessage() {}

func (x *PatchDigitalTwinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchDigitalTwinRequest.ProtoReflect.Descriptor instead.
func (*PatchDigitalTwinRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{20}
}

func (x *PatchDigitalTwinRequest) GetId() *DigitalTwinIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatchDigitalTwinRequest) GetOperations() []*PropertyBatchOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *PatchDigitalTwinRequest) GetAdminToken() string {
	if x != nil {
		return x.AdminToken
	}
	return ""
}

func (x *PatchDigitalTwinRequest) GetForceDelete() bool {
	if x != nil {
		return x.ForceDelete
	}
	return false
}

type PatchDigitalTwinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*BatchOperationResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *PatchDigitalTwinResponse) Reset() {
	*x = PatchDigitalTwinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchDigitalTwinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchDigitalTwinResponse) ProtoMessage() {}

func (x *PatchDigitalTwinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchDigitalTwinResponse.ProtoReflect.Descriptor instead.
func (*PatchDigitalTwinResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{21}
}

func (x *PatchDigitalTwinResponse) GetResult() []*BatchOperationResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeleteDigitalTwinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *DigitalTwinIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// AdminToken must be set when id contains only the DigitalTwin.
	AdminToken string `protobuf:"bytes,2,opt,name=admin_token,json=adminToken,proto3" json:"admin_token,omitempty"`
}

func (x *DeleteDigitalTwinRequest) Reset() {
	*x = DeleteDigitalTwinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDigitalTwinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDigitalTwinRequest) ProtoMessage() {}

func (x *DeleteDigitalTwinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDigitalTwinRequest.ProtoReflect.Descriptor instead.
func (*DeleteDigitalTwinRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteDigitalTwinRequest) GetId() *DigitalTwinIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteDigitalTwinRequest) GetAdminToken() string {
	if x != nil {
		return x.AdminToken
	}
	return ""
}

type DeleteDigitalTwinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalTwin *DigitalTwin `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
}

func (x *DeleteDigitalTwinResponse) Reset() {
	*x = DeleteDigitalTwinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDigitalTwinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDigitalTwinResponse) ProtoMessage() {}

func (x *DeleteDigitalTwinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDigitalTwinResponse.ProtoReflect.Descriptor instead.
func (*DeleteDigitalTwinResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteDigitalTwinResponse) GetDigitalTwin() *DigitalTwin {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

type GetDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the document resource.
	// Format: `databases/{application_id}/documents/{document_path}`.
	// Format: `databases/{application_id}/documents/plans/free`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Mask is the fields to return. If not set, returns all fields.
	Mask *DocumentMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *GetDocumentRequest) Reset() {
	*x = GetDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentRequest) ProtoMessage() {}

func (x *GetDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{24}
}

func (x *GetDocumentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDocumentRequest) GetMask() *DocumentMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type GetDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Document is the result of the get.
	Document *Document `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
}

func (x *GetDocumentResponse) Reset() {
	*x = GetDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentResponse) ProtoMessage() {}

func (x *GetDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetDocumentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{25}
}

func (x *GetDocumentResponse) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

type BatchGetDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database is the name of the database.
	// Format: `databases/{application_id}`.
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Documents is the names of the documents to retrieve.
	// Format: `databases/{application_id}/documents/{document_path}`.
	Documents []string `protobuf:"bytes,2,rep,name=documents,proto3" json:"documents,omitempty"`
	// Mask is the fields to return. If not set, returns all fields.
	Mask *DocumentMask `protobuf:"bytes,3,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *BatchGetDocumentsRequest) Reset() {
	*x = BatchGetDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDocumentsRequest) ProtoMessage() {}

func (x *BatchGetDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDocumentsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{26}
}

func (x *BatchGetDocumentsRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *BatchGetDocumentsRequest) GetDocuments() []string {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *BatchGetDocumentsRequest) GetMask() *DocumentMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type BatchGetDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result is a single result.
	//
	// Types that are assignable to Result:
	//	*BatchGetDocumentsResponse_Found
	//	*BatchGetDocumentsResponse_Missing
	Result isBatchGetDocumentsResponse_Result `protobuf_oneof:"result"`
}

func (x *BatchGetDocumentsResponse) Reset() {
	*x = BatchGetDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDocumentsResponse) ProtoMessage() {}

func (x *BatchGetDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDocumentsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{27}
}

func (m *BatchGetDocumentsResponse) GetResult() isBatchGetDocumentsResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *BatchGetDocumentsResponse) GetFound() *Document {
	if x, ok := x.GetResult().(*BatchGetDocumentsResponse_Found); ok {
		return x.Found
	}
	return nil
}

func (x *BatchGetDocumentsResponse) GetMissing() string {
	if x, ok := x.GetResult().(*BatchGetDocumentsResponse_Missing); ok {
		return x.Missing
	}
	return ""
}

type isBatchGetDocumentsResponse_Result interface {
	isBatchGetDocumentsResponse_Result()
}

type BatchGetDocumentsResponse_Found struct {
	// A document that was requested.
	Found *Document `protobuf:"bytes,1,opt,name=found,proto3,oneof"`
}

type BatchGetDocumentsResponse_Missing struct {
	// Missing is a document name that was requested but does not exist.
	// Format: `databases/{application_id}/documents/{document_path}`.
	Missing string `protobuf:"bytes,2,opt,name=missing,proto3,oneof"`
}

func (*BatchGetDocumentsResponse_Found) isBatchGetDocumentsResponse_Result() {}

func (*BatchGetDocumentsResponse_Missing) isBatchGetDocumentsResponse_Result() {}

type ListDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parent resource name to resolve the collection.
	// Format: `databases/{application_id}/documents/{document_path}`.
	// Required.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// CollectionId, relative to `parent`, to list.
	// Required.
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// PageSize is the maximum number of documents to return.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// PageToken is the `next_page_token` value returned from a previous List request.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// OrderBy to sort results by. For example: `priority desc, name`.
	OrderBy string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Mask is the fields to return. If not set, returns all fields.
	Mask *DocumentMask `protobuf:"bytes,7,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *ListDocumentsRequest) Reset() {
	*x = ListDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentsRequest) ProtoMessage() {}

func (x *ListDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentsRequest.ProtoReflect.Descriptor instead.
func (*ListDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{28}
}

func (x *ListDocumentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDocumentsRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *ListDocumentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDocumentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDocumentsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListDocumentsRequest) GetMask() *DocumentMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type ListDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Documents found.
	Documents []*Document `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	// NextPageToken is `page_token` value for the next ListDocumentsRequest.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDocumentsResponse) Reset() {
	*x = ListDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentsResponse) ProtoMessage() {}

func (x *ListDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentsResponse.ProtoReflect.Descriptor instead.
func (*ListDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{29}
}

func (x *ListDocumentsResponse) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *ListDocumentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type MutateDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The database name.
	// Format: `databases/{application_id}`.
	// Required.
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// The writes to apply.
	Writes []*Write `protobuf:"bytes,2,rep,name=writes,proto3" json:"writes,omitempty"`
}

func (x *MutateDocumentsRequest) Reset() {
	*x = MutateDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateDocumentsRequest) ProtoMessage() {}

func (x *MutateDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateDocumentsRequest.ProtoReflect.Descriptor instead.
func (*MutateDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{30}
}

func (x *MutateDocumentsRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MutateDocumentsRequest) GetWrites() []*Write {
	if x != nil {
		return x.Writes
	}
	return nil
}

type MutateDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WriteResults is the result of applying the writes.
	//
	// This i-th write result corresponds to the i-th write in the
	// request.
	WriteResults []*WriteResult `protobuf:"bytes,1,rep,name=write_results,json=writeResults,proto3" json:"write_results,omitempty"`
}

func (x *MutateDocumentsResponse) Reset() {
	*x = MutateDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateDocumentsResponse) ProtoMessage() {}

func (x *MutateDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateDocumentsResponse.ProtoReflect.Descriptor instead.
func (*MutateDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{31}
}

func (x *MutateDocumentsResponse) GetWriteResults() []*WriteResult {
	if x != nil {
		return x.WriteResults
	}
	return nil
}

// RunQueryRequest ... NOT YET SUPPORTED!
type RunQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parent resource name to resolve the collection.
	// Format: `databases/{application_id}/documents/{document_path}`.
	// Required.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The query to run.
	//
	// Types that are assignable to QueryType:
	//	*RunQueryRequest_StructuredQuery
	QueryType isRunQueryRequest_QueryType `protobuf_oneof:"query_type"`
}

func (x *RunQueryRequest) Reset() {
	*x = RunQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQueryRequest) ProtoMessage() {}

func (x *RunQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQueryRequest.ProtoReflect.Descriptor instead.
func (*RunQueryRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{32}
}

func (x *RunQueryRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (m *RunQueryRequest) GetQueryType() isRunQueryRequest_QueryType {
	if m != nil {
		return m.QueryType
	}
	return nil
}

func (x *RunQueryRequest) GetStructuredQuery() *v1beta1.Value {
	if x, ok := x.GetQueryType().(*RunQueryRequest_StructuredQuery); ok {
		return x.StructuredQuery
	}
	return nil
}

type isRunQueryRequest_QueryType interface {
	isRunQueryRequest_QueryType()
}

type RunQueryRequest_StructuredQuery struct {
	// A structured query.
	StructuredQuery *v1beta1.Value `protobuf:"bytes,2,opt,name=structured_query,json=structuredQuery,proto3,oneof"`
}

func (*RunQueryRequest_StructuredQuery) isRunQueryRequest_QueryType() {}

// RunQueryResponse ... NOT YET SUPPORTED!
type RunQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A query result.
	Document *Document `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	// SkippedResults is the number of results that have been skipped due to an offset between
	// the last response and the current response.
	SkippedResults int32 `protobuf:"varint,4,opt,name=skipped_results,json=skippedResults,proto3" json:"skipped_results,omitempty"`
}

func (x *RunQueryResponse) Reset() {
	*x = RunQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQueryResponse) ProtoMessage() {}

func (x *RunQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQueryResponse.ProtoReflect.Descriptor instead.
func (*RunQueryResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{33}
}

func (x *RunQueryResponse) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *RunQueryResponse) GetSkippedResults() int32 {
	if x != nil {
		return x.SkippedResults
	}
	return 0
}

type GetPasswordCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalTwin *DigitalTwin `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
}

func (x *GetPasswordCredentialRequest) Reset() {
	*x = GetPasswordCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordCredentialRequest) ProtoMessage() {}

func (x *GetPasswordCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordCredentialRequest.ProtoReflect.Descriptor instead.
func (*GetPasswordCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{34}
}

func (x *GetPasswordCredentialRequest) GetDigitalTwin() *DigitalTwin {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

type GetPasswordCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPasswordCredentialResponse) Reset() {
	*x = GetPasswordCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordCredentialResponse) ProtoMessage() {}

func (x *GetPasswordCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordCredentialResponse.ProtoReflect.Descriptor instead.
func (*GetPasswordCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{35}
}

// UpdatePasswordCredentialRequest used to change the Password Credential meta-data.
type UpdatePasswordCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username used to login.
	//google.protobuf.StringValue login = 1;
	LoginProperties [][]byte              `protobuf:"bytes,1,rep,name=login_properties,json=loginProperties,proto3" json:"login_properties,omitempty"`
	MustChange      *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=must_change,json=mustChange,proto3" json:"must_change,omitempty"`
	Locked          *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=locked,proto3" json:"locked,omitempty"`
	// Types that are assignable to Primary:
	//	*UpdatePasswordCredentialRequest_Email
	//	*UpdatePasswordCredentialRequest_Mobile
	Primary isUpdatePasswordCredentialRequest_Primary `protobuf_oneof:"primary"`
}

func (x *UpdatePasswordCredentialRequest) Reset() {
	*x = UpdatePasswordCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordCredentialRequest) ProtoMessage() {}

func (x *UpdatePasswordCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordCredentialRequest.ProtoReflect.Descriptor instead.
func (*UpdatePasswordCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{36}
}

func (x *UpdatePasswordCredentialRequest) GetLoginProperties() [][]byte {
	if x != nil {
		return x.LoginProperties
	}
	return nil
}

func (x *UpdatePasswordCredentialRequest) GetMustChange() *wrapperspb.BoolValue {
	if x != nil {
		return x.MustChange
	}
	return nil
}

func (x *UpdatePasswordCredentialRequest) GetLocked() *wrapperspb.BoolValue {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (m *UpdatePasswordCredentialRequest) GetPrimary() isUpdatePasswordCredentialRequest_Primary {
	if m != nil {
		return m.Primary
	}
	return nil
}

func (x *UpdatePasswordCredentialRequest) GetEmail() string {
	if x, ok := x.GetPrimary().(*UpdatePasswordCredentialRequest_Email); ok {
		return x.Email
	}
	return ""
}

func (x *UpdatePasswordCredentialRequest) GetMobile() string {
	if x, ok := x.GetPrimary().(*UpdatePasswordCredentialRequest_Mobile); ok {
		return x.Mobile
	}
	return ""
}

type isUpdatePasswordCredentialRequest_Primary interface {
	isUpdatePasswordCredentialRequest_Primary()
}

type UpdatePasswordCredentialRequest_Email struct {
	Email string `protobuf:"bytes,3,opt,name=email,proto3,oneof"`
}

type UpdatePasswordCredentialRequest_Mobile struct {
	Mobile string `protobuf:"bytes,4,opt,name=mobile,proto3,oneof"`
}

func (*UpdatePasswordCredentialRequest_Email) isUpdatePasswordCredentialRequest_Primary() {}

func (*UpdatePasswordCredentialRequest_Mobile) isUpdatePasswordCredentialRequest_Primary() {}

type UpdatePasswordCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePasswordCredentialResponse) Reset() {
	*x = UpdatePasswordCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordCredentialResponse) ProtoMessage() {}

func (x *UpdatePasswordCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordCredentialResponse.ProtoReflect.Descriptor instead.
func (*UpdatePasswordCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{37}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Invalid Authorization
	//Password Policy Violation
	//Password Can't be changed
	//Unknown UID
	//UID has no Password Credential
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{38}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type SelfServiceChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SelfServiceChangePasswordRequest) Reset() {
	*x = SelfServiceChangePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfServiceChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfServiceChangePasswordRequest) ProtoMessage() {}

func (x *SelfServiceChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfServiceChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*SelfServiceChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{39}
}

func (x *SelfServiceChangePasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SelfServiceChangePasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` //Password policy violation
}

func (x *SelfServiceChangePasswordResponse) Reset() {
	*x = SelfServiceChangePasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfServiceChangePasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfServiceChangePasswordResponse) ProtoMessage() {}

func (x *SelfServiceChangePasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfServiceChangePasswordResponse.ProtoReflect.Descriptor instead.
func (*SelfServiceChangePasswordResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{40}
}

func (x *SelfServiceChangePasswordResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SelfServiceChangePasswordResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CreateInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TenantId specify under which tenant the user is invited
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// ReferenceId is unique external reference identifier to correlate the lifecycle events with.
	// Must be unique withing the whole application
	ReferenceId string `protobuf:"bytes,2,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// InviteAtTime can be empty to send invitation immediately.
	// Or can specify time in the future to postpone sending invitation message.
	InviteAtTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=invite_at_time,json=inviteAtTime,proto3" json:"invite_at_time,omitempty"`
	// ExpireTime can be empty and default lifetime is used. Or you can specify own expiration time of invitation.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Attributes passed into message sender
	MessageAttributes *v1beta1.MapValue `protobuf:"bytes,5,opt,name=message_attributes,json=messageAttributes,proto3" json:"message_attributes,omitempty"`
	// Types that are assignable to Invitee:
	//	*CreateInvitationRequest_Email
	//	*CreateInvitationRequest_Mobile
	Invitee isCreateInvitationRequest_Invitee `protobuf_oneof:"invitee"`
}

func (x *CreateInvitationRequest) Reset() {
	*x = CreateInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvitationRequest) ProtoMessage() {}

func (x *CreateInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvitationRequest.ProtoReflect.Descriptor instead.
func (*CreateInvitationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{41}
}

func (x *CreateInvitationRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateInvitationRequest) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *CreateInvitationRequest) GetInviteAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InviteAtTime
	}
	return nil
}

func (x *CreateInvitationRequest) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *CreateInvitationRequest) GetMessageAttributes() *v1beta1.MapValue {
	if x != nil {
		return x.MessageAttributes
	}
	return nil
}

func (m *CreateInvitationRequest) GetInvitee() isCreateInvitationRequest_Invitee {
	if m != nil {
		return m.Invitee
	}
	return nil
}

func (x *CreateInvitationRequest) GetEmail() string {
	if x, ok := x.GetInvitee().(*CreateInvitationRequest_Email); ok {
		return x.Email
	}
	return ""
}

func (x *CreateInvitationRequest) GetMobile() string {
	if x, ok := x.GetInvitee().(*CreateInvitationRequest_Mobile); ok {
		return x.Mobile
	}
	return ""
}

type isCreateInvitationRequest_Invitee interface {
	isCreateInvitationRequest_Invitee()
}

type CreateInvitationRequest_Email struct {
	// Email address where invitation message will be sent.
	Email string `protobuf:"bytes,6,opt,name=email,proto3,oneof"`
}

type CreateInvitationRequest_Mobile struct {
	// Mobile number where sms will be sent.
	Mobile string `protobuf:"bytes,7,opt,name=mobile,proto3,oneof"`
}

func (*CreateInvitationRequest_Email) isCreateInvitationRequest_Invitee() {}

func (*CreateInvitationRequest_Mobile) isCreateInvitationRequest_Invitee() {}

type CreateInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateInvitationResponse) Reset() {
	*x = CreateInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvitationResponse) ProtoMessage() {}

func (x *CreateInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvitationResponse.ProtoReflect.Descriptor instead.
func (*CreateInvitationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{42}
}

type CheckInvitationStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*CheckInvitationStateRequest_ReferenceId
	//	*CheckInvitationStateRequest_InvitationToken
	Identifier isCheckInvitationStateRequest_Identifier `protobuf_oneof:"identifier"`
}

func (x *CheckInvitationStateRequest) Reset() {
	*x = CheckInvitationStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInvitationStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInvitationStateRequest) ProtoMessage() {}

func (x *CheckInvitationStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInvitationStateRequest.ProtoReflect.Descriptor instead.
func (*CheckInvitationStateRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{43}
}

func (m *CheckInvitationStateRequest) GetIdentifier() isCheckInvitationStateRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *CheckInvitationStateRequest) GetReferenceId() string {
	if x, ok := x.GetIdentifier().(*CheckInvitationStateRequest_ReferenceId); ok {
		return x.ReferenceId
	}
	return ""
}

func (x *CheckInvitationStateRequest) GetInvitationToken() string {
	if x, ok := x.GetIdentifier().(*CheckInvitationStateRequest_InvitationToken); ok {
		return x.InvitationToken
	}
	return ""
}

type isCheckInvitationStateRequest_Identifier interface {
	isCheckInvitationStateRequest_Identifier()
}

type CheckInvitationStateRequest_ReferenceId struct {
	// ReferenceId is unique external reference identifier to correlate the lifecycle events with.
	ReferenceId string `protobuf:"bytes,1,opt,name=reference_id,json=referenceId,proto3,oneof"`
}

type CheckInvitationStateRequest_InvitationToken struct {
	// InvitationToken is a unique token used in invitation URL.
	InvitationToken string `protobuf:"bytes,2,opt,name=invitation_token,json=invitationToken,proto3,oneof"`
}

func (*CheckInvitationStateRequest_ReferenceId) isCheckInvitationStateRequest_Identifier() {}

func (*CheckInvitationStateRequest_InvitationToken) isCheckInvitationStateRequest_Identifier() {}

type CheckInvitationStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation *Invitation `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation,omitempty"`
}

func (x *CheckInvitationStateResponse) Reset() {
	*x = CheckInvitationStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInvitationStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInvitationStateResponse) ProtoMessage() {}

func (x *CheckInvitationStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInvitationStateResponse.ProtoReflect.Descriptor instead.
func (*CheckInvitationStateResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{44}
}

func (x *CheckInvitationStateResponse) GetInvitation() *Invitation {
	if x != nil {
		return x.Invitation
	}
	return nil
}

type ResendInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ReferenceId is unique external reference identifier to correlate the lifecycle events with.
	ReferenceId string `protobuf:"bytes,1,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
}

func (x *ResendInvitationRequest) Reset() {
	*x = ResendInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendInvitationRequest) ProtoMessage() {}

func (x *ResendInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendInvitationRequest.ProtoReflect.Descriptor instead.
func (*ResendInvitationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{45}
}

func (x *ResendInvitationRequest) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

type ResendInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResendInvitationResponse) Reset() {
	*x = ResendInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendInvitationResponse) ProtoMessage() {}

func (x *ResendInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendInvitationResponse.ProtoReflect.Descriptor instead.
func (*ResendInvitationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{46}
}

type CancelInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ReferenceId is unique external reference identifier to correlate the lifecycle events with.
	ReferenceId string `protobuf:"bytes,1,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
}

func (x *CancelInvitationRequest) Reset() {
	*x = CancelInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInvitationRequest) ProtoMessage() {}

func (x *CancelInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInvitationRequest.ProtoReflect.Descriptor instead.
func (*CancelInvitationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{47}
}

func (x *CancelInvitationRequest) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

type CancelInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelInvitationResponse) Reset() {
	*x = CancelInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInvitationResponse) ProtoMessage() {}

func (x *CancelInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInvitationResponse.ProtoReflect.Descriptor instead.
func (*CancelInvitationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{48}
}

type CheckOAuth2ConsentChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge string `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *CheckOAuth2ConsentChallengeRequest) Reset() {
	*x = CheckOAuth2ConsentChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOAuth2ConsentChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOAuth2ConsentChallengeRequest) ProtoMessage() {}

func (x *CheckOAuth2ConsentChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOAuth2ConsentChallengeRequest.ProtoReflect.Descriptor instead.
func (*CheckOAuth2ConsentChallengeRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{49}
}

func (x *CheckOAuth2ConsentChallengeRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

type CheckOAuth2ConsentChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId   string          `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AppSpaceId string          `protobuf:"bytes,2,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	Audiences  []*AudienceItem `protobuf:"bytes,3,rep,name=audiences,proto3" json:"audiences,omitempty"`
	Scopes     []*ScopeItem    `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it
	// to express that, for example, a user authenticated using two factor authentication.
	Acrs []string `protobuf:"bytes,5,rep,name=acrs,proto3" json:"acrs,omitempty"`
	// RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which
	// initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but
	// might come in handy if you want to deal with additional request parameters.
	RequestUrl string `protobuf:"bytes,6,opt,name=request_url,json=requestUrl,proto3" json:"request_url,omitempty"`
	// Skip, if true, implies that the client has requested the same scopes from the same user previously.
	// If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the
	// consent request using the usual API call.
	Skip        bool         `protobuf:"varint,7,opt,name=skip,proto3" json:"skip,omitempty"`
	DigitalTwin *DigitalTwin `protobuf:"bytes,8,opt,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
	// SubjectIdentifier is pairwise identifier as the sub claims in the token
	SubjectIdentifier string                 `protobuf:"bytes,9,opt,name=subject_identifier,json=subjectIdentifier,proto3" json:"subject_identifier,omitempty"`
	AuthenticatedAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=authenticated_at,json=authenticatedAt,proto3" json:"authenticated_at,omitempty"`
	RequestedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	// Context is an optional object which can hold arbitrary data. The data will be made available when fetching the
	// consent request under the "context" field. This is useful in scenarios where login and consent endpoints share
	// data.
	Context *v1beta1.MapValue `protobuf:"bytes,12,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *CheckOAuth2ConsentChallengeResponse) Reset() {
	*x = CheckOAuth2ConsentChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOAuth2ConsentChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOAuth2ConsentChallengeResponse) ProtoMessage() {}

func (x *CheckOAuth2ConsentChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOAuth2ConsentChallengeResponse.ProtoReflect.Descriptor instead.
func (*CheckOAuth2ConsentChallengeResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{50}
}

func (x *CheckOAuth2ConsentChallengeResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CheckOAuth2ConsentChallengeResponse) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *CheckOAuth2ConsentChallengeResponse) GetAudiences() []*AudienceItem {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *CheckOAuth2ConsentChallengeResponse) GetScopes() []*ScopeItem {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *CheckOAuth2ConsentChallengeResponse) GetAcrs() []string {
	if x != nil {
		return x.Acrs
	}
	return nil
}

func (x *CheckOAuth2ConsentChallengeResponse) GetRequestUrl() string {
	if x != nil {
		return x.RequestUrl
	}
	return ""
}

func (x *CheckOAuth2ConsentChallengeResponse) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *CheckOAuth2ConsentChallengeResponse) GetDigitalTwin() *DigitalTwin {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

func (x *CheckOAuth2ConsentChallengeResponse) GetSubjectIdentifier() string {
	if x != nil {
		return x.SubjectIdentifier
	}
	return ""
}

func (x *CheckOAuth2ConsentChallengeResponse) GetAuthenticatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AuthenticatedAt
	}
	return nil
}

func (x *CheckOAuth2ConsentChallengeResponse) GetRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

func (x *CheckOAuth2ConsentChallengeResponse) GetContext() *v1beta1.MapValue {
	if x != nil {
		return x.Context
	}
	return nil
}

type ScopeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Required    bool   `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *ScopeItem) Reset() {
	*x = ScopeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeItem) ProtoMessage() {}

func (x *ScopeItem) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeItem.ProtoReflect.Descriptor instead.
func (*ScopeItem) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{51}
}

func (x *ScopeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScopeItem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ScopeItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScopeItem) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type AudienceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserSupportEmailAddress string `protobuf:"bytes,1,opt,name=user_support_email_address,json=userSupportEmailAddress,proto3" json:"user_support_email_address,omitempty"`
	ClientId                string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	DisplayName             string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description             string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	LogoUrl                 string `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	HomepageUrl             string `protobuf:"bytes,6,opt,name=homepage_url,json=homepageUrl,proto3" json:"homepage_url,omitempty"`
	PrivacyPolicyUrl        string `protobuf:"bytes,7,opt,name=privacy_policy_url,json=privacyPolicyUrl,proto3" json:"privacy_policy_url,omitempty"`
	TosUrl                  string `protobuf:"bytes,8,opt,name=tos_url,json=tosUrl,proto3" json:"tos_url,omitempty"`
}

func (x *AudienceItem) Reset() {
	*x = AudienceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceItem) ProtoMessage() {}

func (x *AudienceItem) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceItem.ProtoReflect.Descriptor instead.
func (*AudienceItem) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{52}
}

func (x *AudienceItem) GetUserSupportEmailAddress() string {
	if x != nil {
		return x.UserSupportEmailAddress
	}
	return ""
}

func (x *AudienceItem) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AudienceItem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AudienceItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AudienceItem) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *AudienceItem) GetHomepageUrl() string {
	if x != nil {
		return x.HomepageUrl
	}
	return ""
}

func (x *AudienceItem) GetPrivacyPolicyUrl() string {
	if x != nil {
		return x.PrivacyPolicyUrl
	}
	return ""
}

func (x *AudienceItem) GetTosUrl() string {
	if x != nil {
		return x.TosUrl
	}
	return ""
}

type CreateOAuth2ConsentVerifierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentChallenge string `protobuf:"bytes,1,opt,name=consent_challenge,json=consentChallenge,proto3" json:"consent_challenge,omitempty"`
	// Types that are assignable to Result:
	//	*CreateOAuth2ConsentVerifierRequest_Approval
	//	*CreateOAuth2ConsentVerifierRequest_Denial
	Result isCreateOAuth2ConsentVerifierRequest_Result `protobuf_oneof:"result"`
}

func (x *CreateOAuth2ConsentVerifierRequest) Reset() {
	*x = CreateOAuth2ConsentVerifierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOAuth2ConsentVerifierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOAuth2ConsentVerifierRequest) ProtoMessage() {}

func (x *CreateOAuth2ConsentVerifierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOAuth2ConsentVerifierRequest.ProtoReflect.Descriptor instead.
func (*CreateOAuth2ConsentVerifierRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{53}
}

func (x *CreateOAuth2ConsentVerifierRequest) GetConsentChallenge() string {
	if x != nil {
		return x.ConsentChallenge
	}
	return ""
}

func (m *CreateOAuth2ConsentVerifierRequest) GetResult() isCreateOAuth2ConsentVerifierRequest_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *CreateOAuth2ConsentVerifierRequest) GetApproval() *ConsentApproval {
	if x, ok := x.GetResult().(*CreateOAuth2ConsentVerifierRequest_Approval); ok {
		return x.Approval
	}
	return nil
}

func (x *CreateOAuth2ConsentVerifierRequest) GetDenial() *DenialResponse {
	if x, ok := x.GetResult().(*CreateOAuth2ConsentVerifierRequest_Denial); ok {
		return x.Denial
	}
	return nil
}

type isCreateOAuth2ConsentVerifierRequest_Result interface {
	isCreateOAuth2ConsentVerifierRequest_Result()
}

type CreateOAuth2ConsentVerifierRequest_Approval struct {
	Approval *ConsentApproval `protobuf:"bytes,2,opt,name=approval,proto3,oneof"`
}

type CreateOAuth2ConsentVerifierRequest_Denial struct {
	Denial *DenialResponse `protobuf:"bytes,3,opt,name=denial,proto3,oneof"`
}

func (*CreateOAuth2ConsentVerifierRequest_Approval) isCreateOAuth2ConsentVerifierRequest_Result() {}

func (*CreateOAuth2ConsentVerifierRequest_Denial) isCreateOAuth2ConsentVerifierRequest_Result() {}

type CreateOAuth2ConsentVerifierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verifier              string `protobuf:"bytes,1,opt,name=verifier,proto3" json:"verifier,omitempty"`
	AuthorizationEndpoint string `protobuf:"bytes,2,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
}

func (x *CreateOAuth2ConsentVerifierResponse) Reset() {
	*x = CreateOAuth2ConsentVerifierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOAuth2ConsentVerifierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOAuth2ConsentVerifierResponse) ProtoMessage() {}

func (x *CreateOAuth2ConsentVerifierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOAuth2ConsentVerifierResponse.ProtoReflect.Descriptor instead.
func (*CreateOAuth2ConsentVerifierResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{54}
}

func (x *CreateOAuth2ConsentVerifierResponse) GetVerifier() string {
	if x != nil {
		return x.Verifier
	}
	return ""
}

func (x *CreateOAuth2ConsentVerifierResponse) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

type ConsentApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GrantScopes sets the scope the user authorized the client to use. Should be a subset of `requested_scope`.
	GrantScopes []string `protobuf:"bytes,1,rep,name=grant_scopes,json=grantScopes,proto3" json:"grant_scopes,omitempty"`
	// GrantedAudiences sets the audience the user authorized the client to use. Should be a subset of `audiences`.
	GrantedAudiences []string `protobuf:"bytes,2,rep,name=granted_audiences,json=grantedAudiences,proto3" json:"granted_audiences,omitempty"`
	// Session allows you to set (optional) session data for access and ID tokens.
	Session *ConsentRequestSessionData `protobuf:"bytes,3,opt,name=session,proto3" json:"session,omitempty"`
	// Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same
	// client asks the same user for the same, or a subset of, scope.
	Remember bool `protobuf:"varint,4,opt,name=remember,proto3" json:"remember,omitempty"`
	// RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the
	// authorization will be remembered indefinitely.
	RememberFor int64 `protobuf:"varint,5,opt,name=remember_for,json=rememberFor,proto3" json:"remember_for,omitempty"`
}

func (x *ConsentApproval) Reset() {
	*x = ConsentApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentApproval) ProtoMessage() {}

func (x *ConsentApproval) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentApproval.ProtoReflect.Descriptor instead.
func (*ConsentApproval) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{55}
}

func (x *ConsentApproval) GetGrantScopes() []string {
	if x != nil {
		return x.GrantScopes
	}
	return nil
}

func (x *ConsentApproval) GetGrantedAudiences() []string {
	if x != nil {
		return x.GrantedAudiences
	}
	return nil
}

func (x *ConsentApproval) GetSession() *ConsentRequestSessionData {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ConsentApproval) GetRemember() bool {
	if x != nil {
		return x.Remember
	}
	return false
}

func (x *ConsentApproval) GetRememberFor() int64 {
	if x != nil {
		return x.RememberFor
	}
	return 0
}

// Used to pass session data to a consent request.
type ConsentRequestSessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccessToken sets session data for the access and refresh token, as well as any future tokens issued by the
	// refresh grant. Keep in mind that this data will be available to anyone performing OAuth 2.0 Challenge Introspection.
	// If only your services can perform OAuth 2.0 Challenge Introspection, this is usually fine. But if third parties
	// can access that endpoint as well, sensitive data from the session might be exposed to them. Use with care!
	AccessToken *v1beta1.MapValue `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// IDToken sets session data for the OpenID Connect ID token. Keep in mind that the session'id payloads are readable
	// by anyone that has access to the ID Challenge. Use with care!
	IdToken  *v1beta1.MapValue `protobuf:"bytes,2,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
	Userinfo *v1beta1.MapValue `protobuf:"bytes,3,opt,name=userinfo,proto3" json:"userinfo,omitempty"`
}

func (x *ConsentRequestSessionData) Reset() {
	*x = ConsentRequestSessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentRequestSessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentRequestSessionData) ProtoMessage() {}

func (x *ConsentRequestSessionData) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentRequestSessionData.ProtoReflect.Descriptor instead.
func (*ConsentRequestSessionData) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{56}
}

func (x *ConsentRequestSessionData) GetAccessToken() *v1beta1.MapValue {
	if x != nil {
		return x.AccessToken
	}
	return nil
}

func (x *ConsentRequestSessionData) GetIdToken() *v1beta1.MapValue {
	if x != nil {
		return x.IdToken
	}
	return nil
}

func (x *ConsentRequestSessionData) GetUserinfo() *v1beta1.MapValue {
	if x != nil {
		return x.Userinfo
	}
	return nil
}

// The request payload used to accept a login or consent request.
type DenialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).
	// See [https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2.1](full specification)
	// Defaults to `access_denied`.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Description of the error in a human readable format.
	ErrorDescription string `protobuf:"bytes,2,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// Hint to help resolve the error.
	ErrorHint string `protobuf:"bytes,3,opt,name=error_hint,json=errorHint,proto3" json:"error_hint,omitempty"`
	// Represents the HTTP status code of the error (e.g. 401 or 403)
	//
	// Defaults to 403
	StatusCode int64 `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *DenialResponse) Reset() {
	*x = DenialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenialResponse) ProtoMessage() {}

func (x *DenialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenialResponse.ProtoReflect.Descriptor instead.
func (*DenialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{57}
}

func (x *DenialResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DenialResponse) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *DenialResponse) GetErrorHint() string {
	if x != nil {
		return x.ErrorHint
	}
	return ""
}

func (x *DenialResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type GetAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Client Application Identifier. Set by the server from the authenticated client.
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	//Identity Provider configuration unique id - overrules type + name.
	ProviderId string `protobuf:"bytes,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	//Identity Provider type.
	//id.indykite.jarvis.services.configuration.OAuth2ProviderType provider = 3;
	//Identity Provider configuration  name.
	ProviderName string `protobuf:"bytes,4,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	//Digital Twin / Subject ID (Optional). If not provided authentication flow triggered.
	SubjectId string `protobuf:"bytes,5,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	//Requested scopes
	Scopes []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
	//If true a refresh_token is requested and stored so next time authentication is not requested.
	OfflineAccess bool `protobuf:"varint,7,opt,name=offline_access,json=offlineAccess,proto3" json:"offline_access,omitempty"`
}

func (x *GetAccessTokenRequest) Reset() {
	*x = GetAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessTokenRequest) ProtoMessage() {}

func (x *GetAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*GetAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{58}
}

func (x *GetAccessTokenRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetAccessTokenRequest) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *GetAccessTokenRequest) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *GetAccessTokenRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *GetAccessTokenRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GetAccessTokenRequest) GetOfflineAccess() bool {
	if x != nil {
		return x.OfflineAccess
	}
	return false
}

type GetAccessTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The active access token
	Token *OAuth2TokenResponse `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetAccessTokenResponse) Reset() {
	*x = GetAccessTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessTokenResponse) ProtoMessage() {}

func (x *GetAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*GetAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{59}
}

func (x *GetAccessTokenResponse) GetToken() *OAuth2TokenResponse {
	if x != nil {
		return x.Token
	}
	return nil
}

type SessionIntrospectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// The string value of the token. For access tokens, this
	// is the "access_token" value returned from the token endpoint
	// defined in OAuth 2.0. For refresh tokens, this is the "refresh_token"
	// value returned.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SessionIntrospectRequest) Reset() {
	*x = SessionIntrospectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionIntrospectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionIntrospectRequest) ProtoMessage() {}

func (x *SessionIntrospectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionIntrospectRequest.ProtoReflect.Descriptor instead.
func (*SessionIntrospectRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{60}
}

func (x *SessionIntrospectRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SessionIntrospectRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SessionIntrospectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active       bool               `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	TokenInfo    *IdentityTokenInfo `protobuf:"bytes,2,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
	ProviderData []string           `protobuf:"bytes,3,rep,name=provider_data,json=providerData,proto3" json:"provider_data,omitempty"`
}

func (x *SessionIntrospectResponse) Reset() {
	*x = SessionIntrospectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionIntrospectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionIntrospectResponse) ProtoMessage() {}

func (x *SessionIntrospectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionIntrospectResponse.ProtoReflect.Descriptor instead.
func (*SessionIntrospectResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{61}
}

func (x *SessionIntrospectResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *SessionIntrospectResponse) GetTokenInfo() *IdentityTokenInfo {
	if x != nil {
		return x.TokenInfo
	}
	return nil
}

func (x *SessionIntrospectResponse) GetProviderData() []string {
	if x != nil {
		return x.ProviderData
	}
	return nil
}

type IsAuthorizedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subject is DigitalTwin identifier to check if is authorized to perform given actions.
	Subject *DigitalTwinIdentifier `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// A list of resources to authorize against.
	Resources []*IsAuthorizedRequest_Resource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// A list of actions the subject want to perform.
	// NOTE: Currently only one action is supported.
	Actions []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *IsAuthorizedRequest) Reset() {
	*x = IsAuthorizedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedRequest) ProtoMessage() {}

func (x *IsAuthorizedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedRequest.ProtoReflect.Descriptor instead.
func (*IsAuthorizedRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{62}
}

func (x *IsAuthorizedRequest) GetSubject() *DigitalTwinIdentifier {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *IsAuthorizedRequest) GetResources() []*IsAuthorizedRequest_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *IsAuthorizedRequest) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type IsAuthorizedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time the decision was made.
	DecisionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=decision_time,json=decisionTime,proto3" json:"decision_time,omitempty"`
	// Decisions is map with resource references as keys.
	Decisions map[string]*AuthorizationDecision `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IsAuthorizedResponse) Reset() {
	*x = IsAuthorizedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedResponse) ProtoMessage() {}

func (x *IsAuthorizedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedResponse.ProtoReflect.Descriptor instead.
func (*IsAuthorizedResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{63}
}

func (x *IsAuthorizedResponse) GetDecisionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DecisionTime
	}
	return nil
}

func (x *IsAuthorizedResponse) GetDecisions() map[string]*AuthorizationDecision {
	if x != nil {
		return x.Decisions
	}
	return nil
}

type AuthorizationDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is allowed to perform action.
	AllowAction map[string]bool `protobuf:"bytes,1,rep,name=allow_action,json=allowAction,proto3" json:"allow_action,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AuthorizationDecision) Reset() {
	*x = AuthorizationDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationDecision) ProtoMessage() {}

func (x *AuthorizationDecision) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationDecision.ProtoReflect.Descriptor instead.
func (*AuthorizationDecision) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{64}
}

func (x *AuthorizationDecision) GetAllowAction() map[string]bool {
	if x != nil {
		return x.AllowAction
	}
	return nil
}

type EnrichTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Access token to identify session to enrich.
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	//Claims to be enriched in the session, will also be populated in the access token after a refresh.
	TokenClaims *structpb.Struct `protobuf:"bytes,2,opt,name=token_claims,json=tokenClaims,proto3" json:"token_claims,omitempty"`
	//Claims to be enriched in the session, but will not be populated in the access token.
	SessionClaims *structpb.Struct `protobuf:"bytes,3,opt,name=session_claims,json=sessionClaims,proto3" json:"session_claims,omitempty"`
}

func (x *EnrichTokenRequest) Reset() {
	*x = EnrichTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichTokenRequest) ProtoMessage() {}

func (x *EnrichTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichTokenRequest.ProtoReflect.Descriptor instead.
func (*EnrichTokenRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{65}
}

func (x *EnrichTokenRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *EnrichTokenRequest) GetTokenClaims() *structpb.Struct {
	if x != nil {
		return x.TokenClaims
	}
	return nil
}

func (x *EnrichTokenRequest) GetSessionClaims() *structpb.Struct {
	if x != nil {
		return x.SessionClaims
	}
	return nil
}

// EnrichTokenResponse ...
type EnrichTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnrichTokenResponse) Reset() {
	*x = EnrichTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichTokenResponse) ProtoMessage() {}

func (x *EnrichTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichTokenResponse.ProtoReflect.Descriptor instead.
func (*EnrichTokenResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{66}
}

type CreateConsentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PiiProcessorID is ID in GID format of an application to which we give consent to.
	PiiProcessorId string `protobuf:"bytes,1,opt,name=pii_processor_id,json=piiProcessorId,proto3" json:"pii_processor_id,omitempty"`
	// PiiPrincipalID is ID in GID format of a DigitalTwin that gave consent.
	PiiPrincipalId string `protobuf:"bytes,2,opt,name=pii_principal_id,json=piiPrincipalId,proto3" json:"pii_principal_id,omitempty"`
	// Properties is a list
	Properties []string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *CreateConsentRequest) Reset() {
	*x = CreateConsentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentRequest) ProtoMessage() {}

func (x *CreateConsentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentRequest.ProtoReflect.Descriptor instead.
func (*CreateConsentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{67}
}

func (x *CreateConsentRequest) GetPiiProcessorId() string {
	if x != nil {
		return x.PiiProcessorId
	}
	return ""
}

func (x *CreateConsentRequest) GetPiiPrincipalId() string {
	if x != nil {
		return x.PiiPrincipalId
	}
	return ""
}

func (x *CreateConsentRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CreateConsentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentId string `protobuf:"bytes,1,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
}

func (x *CreateConsentResponse) Reset() {
	*x = CreateConsentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentResponse) ProtoMessage() {}

func (x *CreateConsentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentResponse.ProtoReflect.Descriptor instead.
func (*CreateConsentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{68}
}

func (x *CreateConsentResponse) GetConsentId() string {
	if x != nil {
		return x.ConsentId
	}
	return ""
}

type ListConsentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PiiPrincipalID is ID in GID format of a DigitalTwin that gave consent.
	PiiPrincipalId string `protobuf:"bytes,1,opt,name=pii_principal_id,json=piiPrincipalId,proto3" json:"pii_principal_id,omitempty"`
}

func (x *ListConsentsRequest) Reset() {
	*x = ListConsentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsentsRequest) ProtoMessage() {}

func (x *ListConsentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsentsRequest.ProtoReflect.Descriptor instead.
func (*ListConsentsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{69}
}

func (x *ListConsentsRequest) GetPiiPrincipalId() string {
	if x != nil {
		return x.PiiPrincipalId
	}
	return ""
}

type ListConsentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentReceipt *ConsentReceipt `protobuf:"bytes,1,opt,name=consent_receipt,json=consentReceipt,proto3" json:"consent_receipt,omitempty"`
}

func (x *ListConsentsResponse) Reset() {
	*x = ListConsentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsentsResponse) ProtoMessage() {}

func (x *ListConsentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsentsResponse.ProtoReflect.Descriptor instead.
func (*ListConsentsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{70}
}

func (x *ListConsentsResponse) GetConsentReceipt() *ConsentReceipt {
	if x != nil {
		return x.ConsentReceipt
	}
	return nil
}

type RevokeConsentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PiiPrincipalID is ID in GID format of a DigitalTwin that gave consent.
	PiiPrincipalId string   `protobuf:"bytes,1,opt,name=pii_principal_id,json=piiPrincipalId,proto3" json:"pii_principal_id,omitempty"`
	ConsentIds     []string `protobuf:"bytes,2,rep,name=consent_ids,json=consentIds,proto3" json:"consent_ids,omitempty"`
}

func (x *RevokeConsentRequest) Reset() {
	*x = RevokeConsentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeConsentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConsentRequest) ProtoMessage() {}

func (x *RevokeConsentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConsentRequest.ProtoReflect.Descriptor instead.
func (*RevokeConsentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{71}
}

func (x *RevokeConsentRequest) GetPiiPrincipalId() string {
	if x != nil {
		return x.PiiPrincipalId
	}
	return ""
}

func (x *RevokeConsentRequest) GetConsentIds() []string {
	if x != nil {
		return x.ConsentIds
	}
	return nil
}

type RevokeConsentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevokeConsentResponse) Reset() {
	*x = RevokeConsentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeConsentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConsentResponse) ProtoMessage() {}

func (x *RevokeConsentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConsentResponse.ProtoReflect.Descriptor instead.
func (*RevokeConsentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{72}
}

// Resource to authorize against.
type IsAuthorizedRequest_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Resource label
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *IsAuthorizedRequest_Resource) Reset() {
	*x = IsAuthorizedRequest_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedRequest_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedRequest_Resource) ProtoMessage() {}

func (x *IsAuthorizedRequest_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedRequest_Resource.ProtoReflect.Descriptor instead.
func (*IsAuthorizedRequest_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP(), []int{62, 0}
}

func (x *IsAuthorizedRequest_Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IsAuthorizedRequest_Resource) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

var File_indykite_identity_v1beta2_identity_management_api_proto protoreflect.FileDescriptor

var file_indykite_identity_v1beta2_identity_management_api_proto_rawDesc = []byte{
	0x0a, 0x37, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2a, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4b, 0x0a, 0x16, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7e, 0x0a, 0x17,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x4b, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x21,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52,
	0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x22, 0x24, 0x0a, 0x22,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x28,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x42, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x2b, 0x0a, 0x29, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x54, 0x77, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a,
	0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6b, 0x0a, 0x1e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x54, 0x77, 0x69, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69,
	0x6e, 0x22, 0x49, 0x0a, 0x22, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x25, 0x0a, 0x23,
	0x53, 0x65, 0x6c, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x15, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54,
	0x77, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a,
	0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x54, 0x77, 0x69, 0x6e, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x14, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42,
	0x01, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x42,
	0x26, 0x72, 0x24, 0x10, 0x1b, 0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64, 0x3a, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32, 0x37, 0x2c, 0x31,
	0x30, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x54, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09, 0x22, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x54, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x0a, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x10, 0x1b, 0x18, 0x64,
	0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32, 0x37, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9a, 0x03, 0x0a, 0x2b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa,
	0x42, 0x23, 0x72, 0x21, 0x10, 0x1b, 0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64, 0x3a, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32, 0x37, 0x2c,
	0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x62, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x77, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x10, 0x20, 0x18, 0x01, 0x22, 0x16, 0x72, 0x14, 0x18, 0x40,
	0x32, 0x10, 0x5e, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29,
	0x2b, 0x24, 0x52, 0x0f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x0f, 0xfa, 0x42,
	0x0c, 0x92, 0x01, 0x09, 0x08, 0x01, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x2c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54,
	0x77, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x8d, 0x02, 0x0a, 0x17, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01,
	0x09, 0x08, 0x01, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x63, 0x0a, 0x18, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x87, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x54, 0x77, 0x69, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69,
	0x6e, 0x22, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x91, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x22, 0x7e, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x3b, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x82,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x16, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x06, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x17, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0f,
	0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x69, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52,
	0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x22, 0x1f, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d,
	0x75, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3e, 0x0a, 0x20, 0x53,
	0x65, 0x6c, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x53, 0x0a, 0x21, 0x53,
	0x65, 0x6c, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xdf, 0x03, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x10, 0x1b, 0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64,
	0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32,
	0x37, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x10, 0x0a,
	0x18, 0x64, 0x32, 0x17, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x7b, 0x31, 0x30, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0xb2, 0x01, 0x04, 0x08, 0x00, 0x40, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xb2, 0x01, 0x04, 0x08,
	0x00, 0x40, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10, 0x05, 0x18, 0xff, 0x01, 0x60, 0x01, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x03, 0xf8,
	0x42, 0x01, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2,
	0x01, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x10, 0x0a, 0x18, 0x64, 0x32,
	0x17, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b,
	0x31, 0x30, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x0a, 0x18, 0x80, 0x10, 0x48, 0x00, 0x52,
	0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x22, 0x65, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x17, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f,
	0x72, 0x1d, 0x10, 0x0a, 0x18, 0x64, 0x32, 0x17, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x31, 0x30, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52,
	0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18,
	0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d,
	0x10, 0x0a, 0x18, 0x64, 0x32, 0x17, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x31, 0x30, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x16, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x22, 0xf0, 0x04, 0x0a, 0x23, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x63, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x63, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x54, 0x77, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x0c, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6d,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x22,
	0xf9, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x16, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x42, 0x0d, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x78, 0x0a, 0x23, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x0c, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x10, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x22, 0xe1,
	0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0xf0, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x32, 0x0f, 0x5e, 0x5b, 0x20,
	0x21, 0x23, 0x2d, 0x5c, 0x5b, 0x5c, 0x5d, 0x2d, 0x7e, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x32, 0x0f, 0x5e, 0x5b, 0x20, 0x21, 0x23, 0x2d,
	0x5c, 0x5b, 0x5c, 0x5d, 0x2d, 0x7e, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x10, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x25, 0xfa, 0x42, 0x22, 0x22, 0x20, 0x30, 0x90, 0x03, 0x30, 0x91, 0x03, 0x30,
	0x93, 0x03, 0x30, 0x98, 0x03, 0x30, 0x99, 0x03, 0x30, 0x9a, 0x03, 0x30, 0x9c, 0x03, 0x30, 0xa6,
	0x03, 0x30, 0xad, 0x03, 0x30, 0xc3, 0x03, 0x40, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5e, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x18, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x4b, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xf2, 0x02, 0x0a, 0x13, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x61, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x20, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x2c, 0xfa, 0x42, 0x29, 0x92, 0x01, 0x26, 0x08, 0x01, 0x10, 0x01, 0x22,
	0x20, 0x72, 0x1e, 0x10, 0x02, 0x18, 0x32, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x3a, 0x5f, 0x5c, 0x2d, 0x5c, 0x2f, 0x5d, 0x7b, 0x32, 0x2c, 0x7d,
	0x24, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x32, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xfa, 0x42, 0x1a, 0x72, 0x18, 0x10, 0x02, 0x18, 0x32, 0x32, 0x12, 0x5e, 0x28, 0x3f,
	0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xa5, 0x02, 0x0a, 0x14, 0x49, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x5c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6e,
	0x0a, 0x0e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd,
	0x01, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3,
	0x01, 0x0a, 0x12, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x70, 0x69, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0xfa, 0x42, 0x23, 0x72, 0x21, 0x10, 0x1b, 0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64, 0x3a,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32, 0x37,
	0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x0e, 0x70, 0x69, 0x69, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x70, 0x69, 0x69, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x10, 0x1b, 0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69,
	0x64, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b,
	0x32, 0x37, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x0e, 0x70, 0x69, 0x69, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x92, 0x01, 0x1e, 0x08, 0x01, 0x18, 0x01, 0x22, 0x18, 0x72, 0x16, 0x10, 0x02, 0x18, 0x32,
	0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d,
	0x2b, 0x24, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x36,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a,
	0x10, 0x70, 0x69, 0x69, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x10, 0x1b,
	0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32, 0x37, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52,
	0x0e, 0x70, 0x69, 0x69, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x22,
	0x6a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x70, 0x69, 0x69, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0xfa, 0x42, 0x23, 0x72, 0x21, 0x10, 0x1b, 0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64, 0x3a,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32, 0x37,
	0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x0e, 0x70, 0x69, 0x69, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xfa, 0x42, 0x0e,
	0x92, 0x01, 0x0b, 0x08, 0x01, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x24, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0xbc, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x52, 0x45, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27,
	0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x44, 0x4f, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x07, 0x32, 0xa3, 0x27, 0x0a, 0x15, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x12, 0xc5, 0x01, 0x0a,
	0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x12, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a,
	0x01, 0x2a, 0x5a, 0x24, 0x12, 0x22, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x7d, 0x22, 0x1a, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x67, 0x6f, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x75, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xdc, 0x01, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xda, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01,
	0x2a, 0x5a, 0x20, 0x12, 0x1e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2f, 0x7b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x7d, 0x22, 0x1e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2f, 0x7b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x7d, 0x12, 0xfd, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x53, 0x65, 0x6c, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x53,
	0x65, 0x6c, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x12,
	0x28, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x65, 0x6c, 0x66, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x65, 0x6c, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x54, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69,
	0x6e, 0x73, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x24,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54,
	0x77, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x54, 0x77, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x2a, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x2a,
	0x2a, 0x7d, 0x12, 0xcc, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a, 0x01, 0x2a, 0x22, 0x3f,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3d,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x30,
	0x01, 0x12, 0xc5, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x49,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x2a, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x0f, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x3a, 0x01, 0x2a, 0x22,
	0x3d, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x3d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0xfa,
	0x01, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8b, 0x01, 0x3a, 0x01,
	0x2a, 0x5a, 0x47, 0x3a, 0x01, 0x2a, 0x22, 0x42, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x2a,
	0x7d, 0x3a, 0x72, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x3d, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x7d,
	0x3a, 0x72, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x30, 0x01, 0x12, 0x9c, 0x01, 0x0a, 0x1b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7b, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a,
	0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0c, 0x49, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0b, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x72, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x37,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3a,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7,
	0x01, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x92, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x42, 0x1a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6a, 0x61,
	0x72, 0x76, 0x69, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x3b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa,
	0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xca, 0x02, 0x19, 0x49, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xe2, 0x02, 0x25, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x5c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1b, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_identity_v1beta2_identity_management_api_proto_rawDescOnce sync.Once
	file_indykite_identity_v1beta2_identity_management_api_proto_rawDescData = file_indykite_identity_v1beta2_identity_management_api_proto_rawDesc
)

func file_indykite_identity_v1beta2_identity_management_api_proto_rawDescGZIP() []byte {
	file_indykite_identity_v1beta2_identity_management_api_proto_rawDescOnce.Do(func() {
		file_indykite_identity_v1beta2_identity_management_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_identity_v1beta2_identity_management_api_proto_rawDescData)
	})
	return file_indykite_identity_v1beta2_identity_management_api_proto_rawDescData
}

var file_indykite_identity_v1beta2_identity_management_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes = make([]protoimpl.MessageInfo, 76)
var file_indykite_identity_v1beta2_identity_management_api_proto_goTypes = []interface{}{
	(CredentialControl)(0),                               // 0: indykite.identity.v1beta2.CredentialControl
	(*TokenIntrospectRequest)(nil),                       // 1: indykite.identity.v1beta2.TokenIntrospectRequest
	(*TokenIntrospectResponse)(nil),                      // 2: indykite.identity.v1beta2.TokenIntrospectResponse
	(*StartForgottenPasswordFlowRequest)(nil),            // 3: indykite.identity.v1beta2.StartForgottenPasswordFlowRequest
	(*StartForgottenPasswordFlowResponse)(nil),           // 4: indykite.identity.v1beta2.StartForgottenPasswordFlowResponse
	(*ChangePasswordRequest)(nil),                        // 5: indykite.identity.v1beta2.ChangePasswordRequest
	(*ChangePasswordResponse)(nil),                       // 6: indykite.identity.v1beta2.ChangePasswordResponse
	(*StartDigitalTwinEmailVerificationRequest)(nil),     // 7: indykite.identity.v1beta2.StartDigitalTwinEmailVerificationRequest
	(*StartDigitalTwinEmailVerificationResponse)(nil),    // 8: indykite.identity.v1beta2.StartDigitalTwinEmailVerificationResponse
	(*VerifyDigitalTwinEmailRequest)(nil),                // 9: indykite.identity.v1beta2.VerifyDigitalTwinEmailRequest
	(*VerifyDigitalTwinEmailResponse)(nil),               // 10: indykite.identity.v1beta2.VerifyDigitalTwinEmailResponse
	(*SelfServiceTerminateSessionRequest)(nil),           // 11: indykite.identity.v1beta2.SelfServiceTerminateSessionRequest
	(*SelfServiceTerminateSessionResponse)(nil),          // 12: indykite.identity.v1beta2.SelfServiceTerminateSessionResponse
	(*DigitalTwinIdentifier)(nil),                        // 13: indykite.identity.v1beta2.DigitalTwinIdentifier
	(*PropertyFilter)(nil),                               // 14: indykite.identity.v1beta2.PropertyFilter
	(*GetDigitalTwinRequest)(nil),                        // 15: indykite.identity.v1beta2.GetDigitalTwinRequest
	(*GetDigitalTwinResponse)(nil),                       // 16: indykite.identity.v1beta2.GetDigitalTwinResponse
	(*ListDigitalTwinsRequest)(nil),                      // 17: indykite.identity.v1beta2.ListDigitalTwinsRequest
	(*ListDigitalTwinsResponse)(nil),                     // 18: indykite.identity.v1beta2.ListDigitalTwinsResponse
	(*RegisterDigitalTwinWithoutCredentialRequest)(nil),  // 19: indykite.identity.v1beta2.RegisterDigitalTwinWithoutCredentialRequest
	(*RegisterDigitalTwinWithoutCredentialResponse)(nil), // 20: indykite.identity.v1beta2.RegisterDigitalTwinWithoutCredentialResponse
	(*PatchDigitalTwinRequest)(nil),                      // 21: indykite.identity.v1beta2.PatchDigitalTwinRequest
	(*PatchDigitalTwinResponse)(nil),                     // 22: indykite.identity.v1beta2.PatchDigitalTwinResponse
	(*DeleteDigitalTwinRequest)(nil),                     // 23: indykite.identity.v1beta2.DeleteDigitalTwinRequest
	(*DeleteDigitalTwinResponse)(nil),                    // 24: indykite.identity.v1beta2.DeleteDigitalTwinResponse
	(*GetDocumentRequest)(nil),                           // 25: indykite.identity.v1beta2.GetDocumentRequest
	(*GetDocumentResponse)(nil),                          // 26: indykite.identity.v1beta2.GetDocumentResponse
	(*BatchGetDocumentsRequest)(nil),                     // 27: indykite.identity.v1beta2.BatchGetDocumentsRequest
	(*BatchGetDocumentsResponse)(nil),                    // 28: indykite.identity.v1beta2.BatchGetDocumentsResponse
	(*ListDocumentsRequest)(nil),                         // 29: indykite.identity.v1beta2.ListDocumentsRequest
	(*ListDocumentsResponse)(nil),                        // 30: indykite.identity.v1beta2.ListDocumentsResponse
	(*MutateDocumentsRequest)(nil),                       // 31: indykite.identity.v1beta2.MutateDocumentsRequest
	(*MutateDocumentsResponse)(nil),                      // 32: indykite.identity.v1beta2.MutateDocumentsResponse
	(*RunQueryRequest)(nil),                              // 33: indykite.identity.v1beta2.RunQueryRequest
	(*RunQueryResponse)(nil),                             // 34: indykite.identity.v1beta2.RunQueryResponse
	(*GetPasswordCredentialRequest)(nil),                 // 35: indykite.identity.v1beta2.GetPasswordCredentialRequest
	(*GetPasswordCredentialResponse)(nil),                // 36: indykite.identity.v1beta2.GetPasswordCredentialResponse
	(*UpdatePasswordCredentialRequest)(nil),              // 37: indykite.identity.v1beta2.UpdatePasswordCredentialRequest
	(*UpdatePasswordCredentialResponse)(nil),             // 38: indykite.identity.v1beta2.UpdatePasswordCredentialResponse
	(*Error)(nil),                                        // 39: indykite.identity.v1beta2.Error
	(*SelfServiceChangePasswordRequest)(nil),             // 40: indykite.identity.v1beta2.SelfServiceChangePasswordRequest
	(*SelfServiceChangePasswordResponse)(nil),            // 41: indykite.identity.v1beta2.SelfServiceChangePasswordResponse
	(*CreateInvitationRequest)(nil),                      // 42: indykite.identity.v1beta2.CreateInvitationRequest
	(*CreateInvitationResponse)(nil),                     // 43: indykite.identity.v1beta2.CreateInvitationResponse
	(*CheckInvitationStateRequest)(nil),                  // 44: indykite.identity.v1beta2.CheckInvitationStateRequest
	(*CheckInvitationStateResponse)(nil),                 // 45: indykite.identity.v1beta2.CheckInvitationStateResponse
	(*ResendInvitationRequest)(nil),                      // 46: indykite.identity.v1beta2.ResendInvitationRequest
	(*ResendInvitationResponse)(nil),                     // 47: indykite.identity.v1beta2.ResendInvitationResponse
	(*CancelInvitationRequest)(nil),                      // 48: indykite.identity.v1beta2.CancelInvitationRequest
	(*CancelInvitationResponse)(nil),                     // 49: indykite.identity.v1beta2.CancelInvitationResponse
	(*CheckOAuth2ConsentChallengeRequest)(nil),           // 50: indykite.identity.v1beta2.CheckOAuth2ConsentChallengeRequest
	(*CheckOAuth2ConsentChallengeResponse)(nil),          // 51: indykite.identity.v1beta2.CheckOAuth2ConsentChallengeResponse
	(*ScopeItem)(nil),                                    // 52: indykite.identity.v1beta2.ScopeItem
	(*AudienceItem)(nil),                                 // 53: indykite.identity.v1beta2.AudienceItem
	(*CreateOAuth2ConsentVerifierRequest)(nil),           // 54: indykite.identity.v1beta2.CreateOAuth2ConsentVerifierRequest
	(*CreateOAuth2ConsentVerifierResponse)(nil),          // 55: indykite.identity.v1beta2.CreateOAuth2ConsentVerifierResponse
	(*ConsentApproval)(nil),                              // 56: indykite.identity.v1beta2.ConsentApproval
	(*ConsentRequestSessionData)(nil),                    // 57: indykite.identity.v1beta2.ConsentRequestSessionData
	(*DenialResponse)(nil),                               // 58: indykite.identity.v1beta2.DenialResponse
	(*GetAccessTokenRequest)(nil),                        // 59: indykite.identity.v1beta2.GetAccessTokenRequest
	(*GetAccessTokenResponse)(nil),                       // 60: indykite.identity.v1beta2.GetAccessTokenResponse
	(*SessionIntrospectRequest)(nil),                     // 61: indykite.identity.v1beta2.SessionIntrospectRequest
	(*SessionIntrospectResponse)(nil),                    // 62: indykite.identity.v1beta2.SessionIntrospectResponse
	(*IsAuthorizedRequest)(nil),                          // 63: indykite.identity.v1beta2.IsAuthorizedRequest
	(*IsAuthorizedResponse)(nil),                         // 64: indykite.identity.v1beta2.IsAuthorizedResponse
	(*AuthorizationDecision)(nil),                        // 65: indykite.identity.v1beta2.AuthorizationDecision
	(*EnrichTokenRequest)(nil),                           // 66: indykite.identity.v1beta2.EnrichTokenRequest
	(*EnrichTokenResponse)(nil),                          // 67: indykite.identity.v1beta2.EnrichTokenResponse
	(*CreateConsentRequest)(nil),                         // 68: indykite.identity.v1beta2.CreateConsentRequest
	(*CreateConsentResponse)(nil),                        // 69: indykite.identity.v1beta2.CreateConsentResponse
	(*ListConsentsRequest)(nil),                          // 70: indykite.identity.v1beta2.ListConsentsRequest
	(*ListConsentsResponse)(nil),                         // 71: indykite.identity.v1beta2.ListConsentsResponse
	(*RevokeConsentRequest)(nil),                         // 72: indykite.identity.v1beta2.RevokeConsentRequest
	(*RevokeConsentResponse)(nil),                        // 73: indykite.identity.v1beta2.RevokeConsentResponse
	(*IsAuthorizedRequest_Resource)(nil),                 // 74: indykite.identity.v1beta2.IsAuthorizedRequest.Resource
	nil,                                                  // 75: indykite.identity.v1beta2.IsAuthorizedResponse.DecisionsEntry
	nil,                                                  // 76: indykite.identity.v1beta2.AuthorizationDecision.AllowActionEntry
	(*IdentityTokenInfo)(nil),                            // 77: indykite.identity.v1beta2.IdentityTokenInfo
	(*DigitalTwin)(nil),                                  // 78: indykite.identity.v1beta2.DigitalTwin
	(*v1beta1.MapValue)(nil),                             // 79: indykite.objects.v1beta1.MapValue
	(*v1beta1.Value)(nil),                                // 80: indykite.objects.v1beta1.Value
	(*PropertyMask)(nil),                                 // 81: indykite.identity.v1beta2.PropertyMask
	(*DigitalEntity)(nil),                                // 82: indykite.identity.v1beta2.DigitalEntity
	(*Property)(nil),                                     // 83: indykite.identity.v1beta2.Property
	(DigitalTwinKind)(0),                                 // 84: indykite.identity.v1beta2.DigitalTwinKind
	(*BatchOperationResult)(nil),                         // 85: indykite.identity.v1beta2.BatchOperationResult
	(*PropertyBatchOperation)(nil),                       // 86: indykite.identity.v1beta2.PropertyBatchOperation
	(*DocumentMask)(nil),                                 // 87: indykite.identity.v1beta2.DocumentMask
	(*Document)(nil),                                     // 88: indykite.identity.v1beta2.Document
	(*Write)(nil),                                        // 89: indykite.identity.v1beta2.Write
	(*WriteResult)(nil),                                  // 90: indykite.identity.v1beta2.WriteResult
	(*wrapperspb.BoolValue)(nil),                         // 91: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),                        // 92: google.protobuf.Timestamp
	(*Invitation)(nil),                                   // 93: indykite.identity.v1beta2.Invitation
	(*OAuth2TokenResponse)(nil),                          // 94: indykite.identity.v1beta2.OAuth2TokenResponse
	(*structpb.Struct)(nil),                              // 95: google.protobuf.Struct
	(*ConsentReceipt)(nil),                               // 96: indykite.identity.v1beta2.ConsentReceipt
	(*ImportDigitalTwinsRequest)(nil),                    // 97: indykite.identity.v1beta2.ImportDigitalTwinsRequest
	(*ImportDigitalTwinsResponse)(nil),                   // 98: indykite.identity.v1beta2.ImportDigitalTwinsResponse
}
var file_indykite_identity_v1beta2_identity_management_api_proto_depIdxs = []int32{
	77, // 0: indykite.identity.v1beta2.TokenIntrospectResponse.token_info:type_name -> indykite.identity.v1beta2.IdentityTokenInfo
	78, // 1: indykite.identity.v1beta2.StartForgottenPasswordFlowRequest.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	78, // 2: indykite.identity.v1beta2.ChangePasswordRequest.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	39, // 3: indykite.identity.v1beta2.ChangePasswordResponse.error:type_name -> indykite.identity.v1beta2.Error
	78, // 4: indykite.identity.v1beta2.StartDigitalTwinEmailVerificationRequest.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	79, // 5: indykite.identity.v1beta2.StartDigitalTwinEmailVerificationRequest.attributes:type_name -> indykite.objects.v1beta1.MapValue
	78, // 6: indykite.identity.v1beta2.VerifyDigitalTwinEmailResponse.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	78, // 7: indykite.identity.v1beta2.DigitalTwinIdentifier.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	14, // 8: indykite.identity.v1beta2.DigitalTwinIdentifier.property_filter:type_name -> indykite.identity.v1beta2.PropertyFilter
	80, // 9: indykite.identity.v1beta2.PropertyFilter.value:type_name -> indykite.objects.v1beta1.Value
	13, // 10: indykite.identity.v1beta2.GetDigitalTwinRequest.id:type_name -> indykite.identity.v1beta2.DigitalTwinIdentifier
	81, // 11: indykite.identity.v1beta2.GetDigitalTwinRequest.properties:type_name -> indykite.identity.v1beta2.PropertyMask
	82, // 12: indykite.identity.v1beta2.GetDigitalTwinResponse.digital_twin:type_name -> indykite.identity.v1beta2.DigitalEntity
	77, // 13: indykite.identity.v1beta2.GetDigitalTwinResponse.token_info:type_name -> indykite.identity.v1beta2.IdentityTokenInfo
	83, // 14: indykite.identity.v1beta2.ListDigitalTwinsRequest.properties:type_name -> indykite.identity.v1beta2.Property
	82, // 15: indykite.identity.v1beta2.ListDigitalTwinsResponse.digital_twin:type_name -> indykite.identity.v1beta2.DigitalEntity
	84, // 16: indykite.identity.v1beta2.RegisterDigitalTwinWithoutCredentialRequest.digital_twin_kind:type_name -> indykite.identity.v1beta2.DigitalTwinKind
	83, // 17: indykite.identity.v1beta2.RegisterDigitalTwinWithoutCredentialRequest.properties:type_name -> indykite.identity.v1beta2.Property
	78, // 18: indykite.identity.v1beta2.RegisterDigitalTwinWithoutCredentialResponse.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	85, // 19: indykite.identity.v1beta2.RegisterDigitalTwinWithoutCredentialResponse.results:type_name -> indykite.identity.v1beta2.BatchOperationResult
	13, // 20: indykite.identity.v1beta2.PatchDigitalTwinRequest.id:type_name -> indykite.identity.v1beta2.DigitalTwinIdentifier
	86, // 21: indykite.identity.v1beta2.PatchDigitalTwinRequest.operations:type_name -> indykite.identity.v1beta2.PropertyBatchOperation
	85, // 22: indykite.identity.v1beta2.PatchDigitalTwinResponse.result:type_name -> indykite.identity.v1beta2.BatchOperationResult
	13, // 23: indykite.identity.v1beta2.DeleteDigitalTwinRequest.id:type_name -> indykite.identity.v1beta2.DigitalTwinIdentifier
	78, // 24: indykite.identity.v1beta2.DeleteDigitalTwinResponse.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	87, // 25: indykite.identity.v1beta2.GetDocumentRequest.mask:type_name -> indykite.identity.v1beta2.DocumentMask
	88, // 26: indykite.identity.v1beta2.GetDocumentResponse.document:type_name -> indykite.identity.v1beta2.Document
	87, // 27: indykite.identity.v1beta2.BatchGetDocumentsRequest.mask:type_name -> indykite.identity.v1beta2.DocumentMask
	88, // 28: indykite.identity.v1beta2.BatchGetDocumentsResponse.found:type_name -> indykite.identity.v1beta2.Document
	87, // 29: indykite.identity.v1beta2.ListDocumentsRequest.mask:type_name -> indykite.identity.v1beta2.DocumentMask
	88, // 30: indykite.identity.v1beta2.ListDocumentsResponse.documents:type_name -> indykite.identity.v1beta2.Document
	89, // 31: indykite.identity.v1beta2.MutateDocumentsRequest.writes:type_name -> indykite.identity.v1beta2.Write
	90, // 32: indykite.identity.v1beta2.MutateDocumentsResponse.write_results:type_name -> indykite.identity.v1beta2.WriteResult
	80, // 33: indykite.identity.v1beta2.RunQueryRequest.structured_query:type_name -> indykite.objects.v1beta1.Value
	88, // 34: indykite.identity.v1beta2.RunQueryResponse.document:type_name -> indykite.identity.v1beta2.Document
	78, // 35: indykite.identity.v1beta2.GetPasswordCredentialRequest.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	91, // 36: indykite.identity.v1beta2.UpdatePasswordCredentialRequest.must_change:type_name -> google.protobuf.BoolValue
	91, // 37: indykite.identity.v1beta2.UpdatePasswordCredentialRequest.locked:type_name -> google.protobuf.BoolValue
	92, // 38: indykite.identity.v1beta2.CreateInvitationRequest.invite_at_time:type_name -> google.protobuf.Timestamp
	92, // 39: indykite.identity.v1beta2.CreateInvitationRequest.expire_time:type_name -> google.protobuf.Timestamp
	79, // 40: indykite.identity.v1beta2.CreateInvitationRequest.message_attributes:type_name -> indykite.objects.v1beta1.MapValue
	93, // 41: indykite.identity.v1beta2.CheckInvitationStateResponse.invitation:type_name -> indykite.identity.v1beta2.Invitation
	53, // 42: indykite.identity.v1beta2.CheckOAuth2ConsentChallengeResponse.audiences:type_name -> indykite.identity.v1beta2.AudienceItem
	52, // 43: indykite.identity.v1beta2.CheckOAuth2ConsentChallengeResponse.scopes:type_name -> indykite.identity.v1beta2.ScopeItem
	78, // 44: indykite.identity.v1beta2.CheckOAuth2ConsentChallengeResponse.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	92, // 45: indykite.identity.v1beta2.CheckOAuth2ConsentChallengeResponse.authenticated_at:type_name -> google.protobuf.Timestamp
	92, // 46: indykite.identity.v1beta2.CheckOAuth2ConsentChallengeResponse.requested_at:type_name -> google.protobuf.Timestamp
	79, // 47: indykite.identity.v1beta2.CheckOAuth2ConsentChallengeResponse.context:type_name -> indykite.objects.v1beta1.MapValue
	56, // 48: indykite.identity.v1beta2.CreateOAuth2ConsentVerifierRequest.approval:type_name -> indykite.identity.v1beta2.ConsentApproval
	58, // 49: indykite.identity.v1beta2.CreateOAuth2ConsentVerifierRequest.denial:type_name -> indykite.identity.v1beta2.DenialResponse
	57, // 50: indykite.identity.v1beta2.ConsentApproval.session:type_name -> indykite.identity.v1beta2.ConsentRequestSessionData
	79, // 51: indykite.identity.v1beta2.ConsentRequestSessionData.access_token:type_name -> indykite.objects.v1beta1.MapValue
	79, // 52: indykite.identity.v1beta2.ConsentRequestSessionData.id_token:type_name -> indykite.objects.v1beta1.MapValue
	79, // 53: indykite.identity.v1beta2.ConsentRequestSessionData.userinfo:type_name -> indykite.objects.v1beta1.MapValue
	94, // 54: indykite.identity.v1beta2.GetAccessTokenResponse.token:type_name -> indykite.identity.v1beta2.OAuth2TokenResponse
	77, // 55: indykite.identity.v1beta2.SessionIntrospectResponse.token_info:type_name -> indykite.identity.v1beta2.IdentityTokenInfo
	13, // 56: indykite.identity.v1beta2.IsAuthorizedRequest.subject:type_name -> indykite.identity.v1beta2.DigitalTwinIdentifier
	74, // 57: indykite.identity.v1beta2.IsAuthorizedRequest.resources:type_name -> indykite.identity.v1beta2.IsAuthorizedRequest.Resource
	92, // 58: indykite.identity.v1beta2.IsAuthorizedResponse.decision_time:type_name -> google.protobuf.Timestamp
	75, // 59: indykite.identity.v1beta2.IsAuthorizedResponse.decisions:type_name -> indykite.identity.v1beta2.IsAuthorizedResponse.DecisionsEntry
	76, // 60: indykite.identity.v1beta2.AuthorizationDecision.allow_action:type_name -> indykite.identity.v1beta2.AuthorizationDecision.AllowActionEntry
	95, // 61: indykite.identity.v1beta2.EnrichTokenRequest.token_claims:type_name -> google.protobuf.Struct
	95, // 62: indykite.identity.v1beta2.EnrichTokenRequest.session_claims:type_name -> google.protobuf.Struct
	96, // 63: indykite.identity.v1beta2.ListConsentsResponse.consent_receipt:type_name -> indykite.identity.v1beta2.ConsentReceipt
	65, // 64: indykite.identity.v1beta2.IsAuthorizedResponse.DecisionsEntry.value:type_name -> indykite.identity.v1beta2.AuthorizationDecision
	1,  // 65: indykite.identity.v1beta2.IdentityManagementAPI.TokenIntrospect:input_type -> indykite.identity.v1beta2.TokenIntrospectRequest
	3,  // 66: indykite.identity.v1beta2.IdentityManagementAPI.StartForgottenPasswordFlow:input_type -> indykite.identity.v1beta2.StartForgottenPasswordFlowRequest
	5,  // 67: indykite.identity.v1beta2.IdentityManagementAPI.ChangePassword:input_type -> indykite.identity.v1beta2.ChangePasswordRequest
	7,  // 68: indykite.identity.v1beta2.IdentityManagementAPI.StartDigitalTwinEmailVerification:input_type -> indykite.identity.v1beta2.StartDigitalTwinEmailVerificationRequest
	9,  // 69: indykite.identity.v1beta2.IdentityManagementAPI.VerifyDigitalTwinEmail:input_type -> indykite.identity.v1beta2.VerifyDigitalTwinEmailRequest
	11, // 70: indykite.identity.v1beta2.IdentityManagementAPI.SelfServiceTerminateSession:input_type -> indykite.identity.v1beta2.SelfServiceTerminateSessionRequest
	97, // 71: indykite.identity.v1beta2.IdentityManagementAPI.ImportDigitalTwins:input_type -> indykite.identity.v1beta2.ImportDigitalTwinsRequest
	15, // 72: indykite.identity.v1beta2.IdentityManagementAPI.GetDigitalTwin:input_type -> indykite.identity.v1beta2.GetDigitalTwinRequest
	17, // 73: indykite.identity.v1beta2.IdentityManagementAPI.ListDigitalTwins:input_type -> indykite.identity.v1beta2.ListDigitalTwinsRequest
	19, // 74: indykite.identity.v1beta2.IdentityManagementAPI.RegisterDigitalTwinWithoutCredential:input_type -> indykite.identity.v1beta2.RegisterDigitalTwinWithoutCredentialRequest
	21, // 75: indykite.identity.v1beta2.IdentityManagementAPI.PatchDigitalTwin:input_type -> indykite.identity.v1beta2.PatchDigitalTwinRequest
	23, // 76: indykite.identity.v1beta2.IdentityManagementAPI.DeleteDigitalTwin:input_type -> indykite.identity.v1beta2.DeleteDigitalTwinRequest
	25, // 77: indykite.identity.v1beta2.IdentityManagementAPI.GetDocument:input_type -> indykite.identity.v1beta2.GetDocumentRequest
	27, // 78: indykite.identity.v1beta2.IdentityManagementAPI.BatchGetDocuments:input_type -> indykite.identity.v1beta2.BatchGetDocumentsRequest
	29, // 79: indykite.identity.v1beta2.IdentityManagementAPI.ListDocuments:input_type -> indykite.identity.v1beta2.ListDocumentsRequest
	31, // 80: indykite.identity.v1beta2.IdentityManagementAPI.MutateDocuments:input_type -> indykite.identity.v1beta2.MutateDocumentsRequest
	33, // 81: indykite.identity.v1beta2.IdentityManagementAPI.RunQuery:input_type -> indykite.identity.v1beta2.RunQueryRequest
	50, // 82: indykite.identity.v1beta2.IdentityManagementAPI.CheckOAuth2ConsentChallenge:input_type -> indykite.identity.v1beta2.CheckOAuth2ConsentChallengeRequest
	54, // 83: indykite.identity.v1beta2.IdentityManagementAPI.CreateOAuth2ConsentVerifier:input_type -> indykite.identity.v1beta2.CreateOAuth2ConsentVerifierRequest
	42, // 84: indykite.identity.v1beta2.IdentityManagementAPI.CreateInvitation:input_type -> indykite.identity.v1beta2.CreateInvitationRequest
	44, // 85: indykite.identity.v1beta2.IdentityManagementAPI.CheckInvitationState:input_type -> indykite.identity.v1beta2.CheckInvitationStateRequest
	46, // 86: indykite.identity.v1beta2.IdentityManagementAPI.ResendInvitation:input_type -> indykite.identity.v1beta2.ResendInvitationRequest
	48, // 87: indykite.identity.v1beta2.IdentityManagementAPI.CancelInvitation:input_type -> indykite.identity.v1beta2.CancelInvitationRequest
	63, // 88: indykite.identity.v1beta2.IdentityManagementAPI.IsAuthorized:input_type -> indykite.identity.v1beta2.IsAuthorizedRequest
	66, // 89: indykite.identity.v1beta2.IdentityManagementAPI.EnrichToken:input_type -> indykite.identity.v1beta2.EnrichTokenRequest
	68, // 90: indykite.identity.v1beta2.IdentityManagementAPI.CreateConsent:input_type -> indykite.identity.v1beta2.CreateConsentRequest
	70, // 91: indykite.identity.v1beta2.IdentityManagementAPI.ListConsents:input_type -> indykite.identity.v1beta2.ListConsentsRequest
	72, // 92: indykite.identity.v1beta2.IdentityManagementAPI.RevokeConsent:input_type -> indykite.identity.v1beta2.RevokeConsentRequest
	35, // 93: indykite.identity.v1beta2.IdentityManagementAPI.GetPasswordCredential:input_type -> indykite.identity.v1beta2.GetPasswordCredentialRequest
	37, // 94: indykite.identity.v1beta2.IdentityManagementAPI.UpdatePasswordCredential:input_type -> indykite.identity.v1beta2.UpdatePasswordCredentialRequest
	59, // 95: indykite.identity.v1beta2.IdentityManagementAPI.GetAccessToken:input_type -> indykite.identity.v1beta2.GetAccessTokenRequest
	61, // 96: indykite.identity.v1beta2.IdentityManagementAPI.SessionIntrospect:input_type -> indykite.identity.v1beta2.SessionIntrospectRequest
	2,  // 97: indykite.identity.v1beta2.IdentityManagementAPI.TokenIntrospect:output_type -> indykite.identity.v1beta2.TokenIntrospectResponse
	4,  // 98: indykite.identity.v1beta2.IdentityManagementAPI.StartForgottenPasswordFlow:output_type -> indykite.identity.v1beta2.StartForgottenPasswordFlowResponse
	6,  // 99: indykite.identity.v1beta2.IdentityManagementAPI.ChangePassword:output_type -> indykite.identity.v1beta2.ChangePasswordResponse
	8,  // 100: indykite.identity.v1beta2.IdentityManagementAPI.StartDigitalTwinEmailVerification:output_type -> indykite.identity.v1beta2.StartDigitalTwinEmailVerificationResponse
	10, // 101: indykite.identity.v1beta2.IdentityManagementAPI.VerifyDigitalTwinEmail:output_type -> indykite.identity.v1beta2.VerifyDigitalTwinEmailResponse
	12, // 102: indykite.identity.v1beta2.IdentityManagementAPI.SelfServiceTerminateSession:output_type -> indykite.identity.v1beta2.SelfServiceTerminateSessionResponse
	98, // 103: indykite.identity.v1beta2.IdentityManagementAPI.ImportDigitalTwins:output_type -> indykite.identity.v1beta2.ImportDigitalTwinsResponse
	16, // 104: indykite.identity.v1beta2.IdentityManagementAPI.GetDigitalTwin:output_type -> indykite.identity.v1beta2.GetDigitalTwinResponse
	18, // 105: indykite.identity.v1beta2.IdentityManagementAPI.ListDigitalTwins:output_type -> indykite.identity.v1beta2.ListDigitalTwinsResponse
	20, // 106: indykite.identity.v1beta2.IdentityManagementAPI.RegisterDigitalTwinWithoutCredential:output_type -> indykite.identity.v1beta2.RegisterDigitalTwinWithoutCredentialResponse
	22, // 107: indykite.identity.v1beta2.IdentityManagementAPI.PatchDigitalTwin:output_type -> indykite.identity.v1beta2.PatchDigitalTwinResponse
	24, // 108: indykite.identity.v1beta2.IdentityManagementAPI.DeleteDigitalTwin:output_type -> indykite.identity.v1beta2.DeleteDigitalTwinResponse
	26, // 109: indykite.identity.v1beta2.IdentityManagementAPI.GetDocument:output_type -> indykite.identity.v1beta2.GetDocumentResponse
	28, // 110: indykite.identity.v1beta2.IdentityManagementAPI.BatchGetDocuments:output_type -> indykite.identity.v1beta2.BatchGetDocumentsResponse
	30, // 111: indykite.identity.v1beta2.IdentityManagementAPI.ListDocuments:output_type -> indykite.identity.v1beta2.ListDocumentsResponse
	32, // 112: indykite.identity.v1beta2.IdentityManagementAPI.MutateDocuments:output_type -> indykite.identity.v1beta2.MutateDocumentsResponse
	34, // 113: indykite.identity.v1beta2.IdentityManagementAPI.RunQuery:output_type -> indykite.identity.v1beta2.RunQueryResponse
	51, // 114: indykite.identity.v1beta2.IdentityManagementAPI.CheckOAuth2ConsentChallenge:output_type -> indykite.identity.v1beta2.CheckOAuth2ConsentChallengeResponse
	55, // 115: indykite.identity.v1beta2.IdentityManagementAPI.CreateOAuth2ConsentVerifier:output_type -> indykite.identity.v1beta2.CreateOAuth2ConsentVerifierResponse
	43, // 116: indykite.identity.v1beta2.IdentityManagementAPI.CreateInvitation:output_type -> indykite.identity.v1beta2.CreateInvitationResponse
	45, // 117: indykite.identity.v1beta2.IdentityManagementAPI.CheckInvitationState:output_type -> indykite.identity.v1beta2.CheckInvitationStateResponse
	47, // 118: indykite.identity.v1beta2.IdentityManagementAPI.ResendInvitation:output_type -> indykite.identity.v1beta2.ResendInvitationResponse
	49, // 119: indykite.identity.v1beta2.IdentityManagementAPI.CancelInvitation:output_type -> indykite.identity.v1beta2.CancelInvitationResponse
	64, // 120: indykite.identity.v1beta2.IdentityManagementAPI.IsAuthorized:output_type -> indykite.identity.v1beta2.IsAuthorizedResponse
	67, // 121: indykite.identity.v1beta2.IdentityManagementAPI.EnrichToken:output_type -> indykite.identity.v1beta2.EnrichTokenResponse
	69, // 122: indykite.identity.v1beta2.IdentityManagementAPI.CreateConsent:output_type -> indykite.identity.v1beta2.CreateConsentResponse
	71, // 123: indykite.identity.v1beta2.IdentityManagementAPI.ListConsents:output_type -> indykite.identity.v1beta2.ListConsentsResponse
	73, // 124: indykite.identity.v1beta2.IdentityManagementAPI.RevokeConsent:output_type -> indykite.identity.v1beta2.RevokeConsentResponse
	36, // 125: indykite.identity.v1beta2.IdentityManagementAPI.GetPasswordCredential:output_type -> indykite.identity.v1beta2.GetPasswordCredentialResponse
	38, // 126: indykite.identity.v1beta2.IdentityManagementAPI.UpdatePasswordCredential:output_type -> indykite.identity.v1beta2.UpdatePasswordCredentialResponse
	60, // 127: indykite.identity.v1beta2.IdentityManagementAPI.GetAccessToken:output_type -> indykite.identity.v1beta2.GetAccessTokenResponse
	62, // 128: indykite.identity.v1beta2.IdentityManagementAPI.SessionIntrospect:output_type -> indykite.identity.v1beta2.SessionIntrospectResponse
	97, // [97:129] is the sub-list for method output_type
	65, // [65:97] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_indykite_identity_v1beta2_identity_management_api_proto_init() }
func file_indykite_identity_v1beta2_identity_management_api_proto_init() {
	if File_indykite_identity_v1beta2_identity_management_api_proto != nil {
		return
	}
	file_indykite_identity_v1beta2_attributes_proto_init()
	file_indykite_identity_v1beta2_document_proto_init()
	file_indykite_identity_v1beta2_import_proto_init()
	file_indykite_identity_v1beta2_model_proto_init()
	file_indykite_identity_v1beta2_consent_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenIntrospectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenIntrospectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartForgottenPasswordFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartForgottenPasswordFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDigitalTwinEmailVerificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDigitalTwinEmailVerificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyDigitalTwinEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyDigitalTwinEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfServiceTerminateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfServiceTerminateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalTwinIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDigitalTwinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDigitalTwinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDigitalTwinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDigitalTwinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDigitalTwinWithoutCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDigitalTwinWithoutCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchDigitalTwinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchDigitalTwinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDigitalTwinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDigitalTwinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfServiceChangePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfServiceChangePasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInvitationStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInvitationStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOAuth2ConsentChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOAuth2ConsentChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOAuth2ConsentVerifierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOAuth2ConsentVerifierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentRequestSessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionIntrospectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionIntrospectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeConsentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeConsentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedRequest_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ChangePasswordRequest_Token)(nil),
		(*ChangePasswordRequest_DigitalTwin)(nil),
	}
	file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*DigitalTwinIdentifier_DigitalTwin)(nil),
		(*DigitalTwinIdentifier_PropertyFilter)(nil),
		(*DigitalTwinIdentifier_AccessToken)(nil),
	}
	file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*BatchGetDocumentsResponse_Found)(nil),
		(*BatchGetDocumentsResponse_Missing)(nil),
	}
	file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*RunQueryRequest_StructuredQuery)(nil),
	}
	file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*UpdatePasswordCredentialRequest_Email)(nil),
		(*UpdatePasswordCredentialRequest_Mobile)(nil),
	}
	file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*CreateInvitationRequest_Email)(nil),
		(*CreateInvitationRequest_Mobile)(nil),
	}
	file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*CheckInvitationStateRequest_ReferenceId)(nil),
		(*CheckInvitationStateRequest_InvitationToken)(nil),
	}
	file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*CreateOAuth2ConsentVerifierRequest_Approval)(nil),
		(*CreateOAuth2ConsentVerifierRequest_Denial)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_identity_v1beta2_identity_management_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   76,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indykite_identity_v1beta2_identity_management_api_proto_goTypes,
		DependencyIndexes: file_indykite_identity_v1beta2_identity_management_api_proto_depIdxs,
		EnumInfos:         file_indykite_identity_v1beta2_identity_management_api_proto_enumTypes,
		MessageInfos:      file_indykite_identity_v1beta2_identity_management_api_proto_msgTypes,
	}.Build()
	File_indykite_identity_v1beta2_identity_management_api_proto = out.File
	file_indykite_identity_v1beta2_identity_management_api_proto_rawDesc = nil
	file_indykite_identity_v1beta2_identity_management_api_proto_goTypes = nil
	file_indykite_identity_v1beta2_identity_management_api_proto_depIdxs = nil
}
