// Copyright (c) 2022 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: indykite/identity/v1beta2/readid.proto

package identityv1beta2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReadIDSession is an interpretation of data read from an identity document
type ReadIDSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SessionId is an unique identifier for a session
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// OpaqueId is a customer-provided identifier
	OpaqueId string `protobuf:"bytes,2,opt,name=opaque_id,json=opaqueId,proto3" json:"opaque_id,omitempty"`
	// IdentityData consolidated from all the data that is part of this session
	IdentityData *ReadIDConsolidatedIdentityData `protobuf:"bytes,3,opt,name=identity_data,json=consolidatedIdentityData,proto3" json:"identity_data,omitempty"`
	// App is an application related data
	App *ReadIDApp `protobuf:"bytes,4,opt,name=app,proto3" json:"app,omitempty"`
	// DeviceInfo	is a device related data
	DeviceInfo *ReadIDDeviceInfo `protobuf:"bytes,5,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	// ClientId is an unique identifier for client
	ClientId string `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// CustomerApp is a customer reference for application that submitted this session
	CustomerApp string `protobuf:"bytes,7,opt,name=customer_app,json=customerApplicationReference,proto3" json:"customer_app,omitempty"`
	// DeviceId is an unique identifier for device
	DeviceId string `protobuf:"bytes,8,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// ExpiryDate is the date when this session will be purged from the database
	ExpiryDate string `protobuf:"bytes,9,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	// InstanceId is an unique identifier for a specific install of a submitting application
	InstanceId string `protobuf:"bytes,10,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *ReadIDSession) Reset() {
	*x = ReadIDSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_readid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadIDSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadIDSession) ProtoMessage() {}

func (x *ReadIDSession) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_readid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadIDSession.ProtoReflect.Descriptor instead.
func (*ReadIDSession) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_readid_proto_rawDescGZIP(), []int{0}
}

func (x *ReadIDSession) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ReadIDSession) GetOpaqueId() string {
	if x != nil {
		return x.OpaqueId
	}
	return ""
}

func (x *ReadIDSession) GetIdentityData() *ReadIDConsolidatedIdentityData {
	if x != nil {
		return x.IdentityData
	}
	return nil
}

func (x *ReadIDSession) GetApp() *ReadIDApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ReadIDSession) GetDeviceInfo() *ReadIDDeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *ReadIDSession) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ReadIDSession) GetCustomerApp() string {
	if x != nil {
		return x.CustomerApp
	}
	return ""
}

func (x *ReadIDSession) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ReadIDSession) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *ReadIDSession) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type ReadIDConsolidatedIdentityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipCloneDetection                  string `protobuf:"bytes,1,opt,name=chip_clone_detection,json=chipCloneDetection,proto3" json:"chip_clone_detection,omitempty"`
	ChipCloneDetectionSource            string `protobuf:"bytes,2,opt,name=chip_clone_detection_source,json=chipCloneDetectionSource,proto3" json:"chip_clone_detection_source,omitempty"`
	ChipCloneDetectionSourceName        string `protobuf:"bytes,3,opt,name=chip_clone_detection_source_name,json=chipCloneDetectionSourceName,proto3" json:"chip_clone_detection_source_name,omitempty"`
	ChipVerification                    string `protobuf:"bytes,4,opt,name=chip_verification,json=chipVerification,proto3" json:"chip_verification,omitempty"`
	ChipVerificationSource              string `protobuf:"bytes,5,opt,name=chip_verification_source,json=chipVerificationSource,proto3" json:"chip_verification_source,omitempty"`
	ChipVerificationSourceName          string `protobuf:"bytes,6,opt,name=chip_verification_source_name,json=chipVerificationSourceName,proto3" json:"chip_verification_source_name,omitempty"`
	DateOfBirth                         string `protobuf:"bytes,7,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	DateOfBirthSource                   string `protobuf:"bytes,8,opt,name=date_of_birth_source,json=dateOfBirthSource,proto3" json:"date_of_birth_source,omitempty"`
	DateOfBirthSourceName               string `protobuf:"bytes,9,opt,name=date_of_birth_source_name,json=dateOfBirthSourceName,proto3" json:"date_of_birth_source_name,omitempty"`
	DateOfExpiry                        string `protobuf:"bytes,10,opt,name=date_of_expiry,json=dateOfExpiry,proto3" json:"date_of_expiry,omitempty"`
	DateOfExpirySource                  string `protobuf:"bytes,11,opt,name=date_of_expiry_source,json=dateOfExpirySource,proto3" json:"date_of_expiry_source,omitempty"`
	DateOfExpirySourceName              string `protobuf:"bytes,12,opt,name=date_of_expiry_source_name,json=dateOfExpirySourceName,proto3" json:"date_of_expiry_source_name,omitempty"`
	DocumentCode                        string `protobuf:"bytes,13,opt,name=document_code,json=documentCode,proto3" json:"document_code,omitempty"`
	DocumentCodeSource                  string `protobuf:"bytes,14,opt,name=document_code_source,json=documentCodeSource,proto3" json:"document_code_source,omitempty"`
	DocumentCodeSourceName              string `protobuf:"bytes,15,opt,name=document_code_source_name,json=documentCodeSourceName,proto3" json:"document_code_source_name,omitempty"`
	DocumentNumber                      string `protobuf:"bytes,16,opt,name=document_number,json=documentNumber,proto3" json:"document_number,omitempty"`
	DocumentNumberSource                string `protobuf:"bytes,17,opt,name=document_number_source,json=documentNumberSource,proto3" json:"document_number_source,omitempty"`
	DocumentNumberSourceName            string `protobuf:"bytes,18,opt,name=document_number_source_name,json=documentNumberSourceName,proto3" json:"document_number_source_name,omitempty"`
	DocumentType                        string `protobuf:"bytes,19,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	DocumentTypeSource                  string `protobuf:"bytes,20,opt,name=document_type_source,json=documentTypeSource,proto3" json:"document_type_source,omitempty"`
	DocumentTypeSourceName              string `protobuf:"bytes,21,opt,name=document_type_source_name,json=documentTypeSourceName,proto3" json:"document_type_source_name,omitempty"`
	Gender                              string `protobuf:"bytes,22,opt,name=gender,proto3" json:"gender,omitempty"`
	GenderSource                        string `protobuf:"bytes,23,opt,name=gender_source,json=genderSource,proto3" json:"gender_source,omitempty"`
	GenderSourceName                    string `protobuf:"bytes,24,opt,name=gender_source_name,json=genderSourceName,proto3" json:"gender_source_name,omitempty"`
	IssuingCountry                      string `protobuf:"bytes,25,opt,name=issuing_country,json=issuingCountry,proto3" json:"issuing_country,omitempty"`
	IssuingCountrySource                string `protobuf:"bytes,26,opt,name=issuing_country_source,json=issuingCountrySource,proto3" json:"issuing_country_source,omitempty"`
	IssuingCountrySourceName            string `protobuf:"bytes,27,opt,name=issuing_country_source_name,json=issuingCountrySourceName,proto3" json:"issuing_country_source_name,omitempty"`
	NameOfHolder                        string `protobuf:"bytes,28,opt,name=name_of_holder,json=nameOfHolder,proto3" json:"name_of_holder,omitempty"`
	NameOfHolderSource                  string `protobuf:"bytes,29,opt,name=name_of_holder_source,json=nameOfHolderSource,proto3" json:"name_of_holder_source,omitempty"`
	NameOfHolderSourceName              string `protobuf:"bytes,30,opt,name=name_of_holder_source_name,json=nameOfHolderSourceName,proto3" json:"name_of_holder_source_name,omitempty"`
	Nationality                         string `protobuf:"bytes,31,opt,name=nationality,proto3" json:"nationality,omitempty"`
	NationalitySource                   string `protobuf:"bytes,32,opt,name=nationality_source,json=nationalitySource,proto3" json:"nationality_source,omitempty"`
	NationalitySourceName               string `protobuf:"bytes,33,opt,name=nationality_source_name,json=nationalitySourceName,proto3" json:"nationality_source_name,omitempty"`
	PersonalNumber                      string `protobuf:"bytes,34,opt,name=personal_number,json=personalNumber,proto3" json:"personal_number,omitempty"`
	PersonalNumberSource                string `protobuf:"bytes,35,opt,name=personal_number_source,json=personalNumberSource,proto3" json:"personal_number_source,omitempty"`
	PersonalNumberSourceName            string `protobuf:"bytes,36,opt,name=personal_number_source_name,json=personalNumberSourceName,proto3" json:"personal_number_source_name,omitempty"`
	PlaceOfBirth                        string `protobuf:"bytes,37,opt,name=place_of_birth,json=placeOfBirth,proto3" json:"place_of_birth,omitempty"`
	PlaceOfBirthSource                  string `protobuf:"bytes,38,opt,name=place_of_birth_source,json=placeOfBirthSource,proto3" json:"place_of_birth_source,omitempty"`
	PlaceOfBirthSourceName              string `protobuf:"bytes,39,opt,name=place_of_birth_source_name,json=placeOfBirthSourceName,proto3" json:"place_of_birth_source_name,omitempty"`
	PrimaryIdentifier                   string `protobuf:"bytes,40,opt,name=primary_identifier,json=primaryIdentifier,proto3" json:"primary_identifier,omitempty"`
	PrimaryIdentifierSource             string `protobuf:"bytes,41,opt,name=primary_identifier_source,json=primaryIdentifierSource,proto3" json:"primary_identifier_source,omitempty"`
	PrimaryIdentifierSourceName         string `protobuf:"bytes,42,opt,name=primary_identifier_source_name,json=primaryIdentifierSourceName,proto3" json:"primary_identifier_source_name,omitempty"`
	SecondaryIdentifier                 string `protobuf:"bytes,43,opt,name=secondary_identifier,json=secondaryIdentifier,proto3" json:"secondary_identifier,omitempty"`
	SecondaryIdentifierSource           string `protobuf:"bytes,44,opt,name=secondary_identifier_source,json=secondaryIdentifierSource,proto3" json:"secondary_identifier_source,omitempty"`
	SecondaryIdentifierSourceName       string `protobuf:"bytes,45,opt,name=secondary_identifier_source_name,json=secondaryIdentifierSourceName,proto3" json:"secondary_identifier_source_name,omitempty"`
	SelfieVerificationProfile           string `protobuf:"bytes,46,opt,name=selfie_verification_profile,json=selfieVerificationProfile,proto3" json:"selfie_verification_profile,omitempty"`
	SelfieVerificationProfileSource     string `protobuf:"bytes,47,opt,name=selfie_verification_profile_source,json=selfieVerificationProfileSource,proto3" json:"selfie_verification_profile_source,omitempty"`
	SelfieVerificationProfileSourceName string `protobuf:"bytes,48,opt,name=selfie_verification_profile_source_name,json=selfieVerificationProfileSourceName,proto3" json:"selfie_verification_profile_source_name,omitempty"`
	SelfieVerificationStatus            string `protobuf:"bytes,49,opt,name=selfie_verification_status,json=selfieVerificationStatus,proto3" json:"selfie_verification_status,omitempty"`
	SelfieVerificationStatusSource      string `protobuf:"bytes,50,opt,name=selfie_verification_status_source,json=selfieVerificationStatusSource,proto3" json:"selfie_verification_status_source,omitempty"`
	SelfieVerificationStatusSourceName  string `protobuf:"bytes,51,opt,name=selfie_verification_status_source_name,json=selfieVerificationStatusSourceName,proto3" json:"selfie_verification_status_source_name,omitempty"`
	VisualVerification                  string `protobuf:"bytes,53,opt,name=visual_verification,json=visualVerification,proto3" json:"visual_verification,omitempty"`
	VisualVerificationSource            string `protobuf:"bytes,54,opt,name=visual_verification_source,json=visualVerificationSource,proto3" json:"visual_verification_source,omitempty"`
	VisualVerificationSourceName        string `protobuf:"bytes,55,opt,name=visual_verification_source_name,json=visualVerificationSourceName,proto3" json:"visual_verification_source_name,omitempty"`
}

func (x *ReadIDConsolidatedIdentityData) Reset() {
	*x = ReadIDConsolidatedIdentityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_readid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadIDConsolidatedIdentityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadIDConsolidatedIdentityData) ProtoMessage() {}

func (x *ReadIDConsolidatedIdentityData) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_readid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadIDConsolidatedIdentityData.ProtoReflect.Descriptor instead.
func (*ReadIDConsolidatedIdentityData) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_readid_proto_rawDescGZIP(), []int{1}
}

func (x *ReadIDConsolidatedIdentityData) GetChipCloneDetection() string {
	if x != nil {
		return x.ChipCloneDetection
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetChipCloneDetectionSource() string {
	if x != nil {
		return x.ChipCloneDetectionSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetChipCloneDetectionSourceName() string {
	if x != nil {
		return x.ChipCloneDetectionSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetChipVerification() string {
	if x != nil {
		return x.ChipVerification
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetChipVerificationSource() string {
	if x != nil {
		return x.ChipVerificationSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetChipVerificationSourceName() string {
	if x != nil {
		return x.ChipVerificationSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDateOfBirthSource() string {
	if x != nil {
		return x.DateOfBirthSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDateOfBirthSourceName() string {
	if x != nil {
		return x.DateOfBirthSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDateOfExpiry() string {
	if x != nil {
		return x.DateOfExpiry
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDateOfExpirySource() string {
	if x != nil {
		return x.DateOfExpirySource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDateOfExpirySourceName() string {
	if x != nil {
		return x.DateOfExpirySourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDocumentCode() string {
	if x != nil {
		return x.DocumentCode
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDocumentCodeSource() string {
	if x != nil {
		return x.DocumentCodeSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDocumentCodeSourceName() string {
	if x != nil {
		return x.DocumentCodeSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDocumentNumber() string {
	if x != nil {
		return x.DocumentNumber
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDocumentNumberSource() string {
	if x != nil {
		return x.DocumentNumberSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDocumentNumberSourceName() string {
	if x != nil {
		return x.DocumentNumberSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDocumentTypeSource() string {
	if x != nil {
		return x.DocumentTypeSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetDocumentTypeSourceName() string {
	if x != nil {
		return x.DocumentTypeSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetGenderSource() string {
	if x != nil {
		return x.GenderSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetGenderSourceName() string {
	if x != nil {
		return x.GenderSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetIssuingCountry() string {
	if x != nil {
		return x.IssuingCountry
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetIssuingCountrySource() string {
	if x != nil {
		return x.IssuingCountrySource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetIssuingCountrySourceName() string {
	if x != nil {
		return x.IssuingCountrySourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetNameOfHolder() string {
	if x != nil {
		return x.NameOfHolder
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetNameOfHolderSource() string {
	if x != nil {
		return x.NameOfHolderSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetNameOfHolderSourceName() string {
	if x != nil {
		return x.NameOfHolderSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetNationalitySource() string {
	if x != nil {
		return x.NationalitySource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetNationalitySourceName() string {
	if x != nil {
		return x.NationalitySourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetPersonalNumber() string {
	if x != nil {
		return x.PersonalNumber
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetPersonalNumberSource() string {
	if x != nil {
		return x.PersonalNumberSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetPersonalNumberSourceName() string {
	if x != nil {
		return x.PersonalNumberSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetPlaceOfBirth() string {
	if x != nil {
		return x.PlaceOfBirth
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetPlaceOfBirthSource() string {
	if x != nil {
		return x.PlaceOfBirthSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetPlaceOfBirthSourceName() string {
	if x != nil {
		return x.PlaceOfBirthSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetPrimaryIdentifier() string {
	if x != nil {
		return x.PrimaryIdentifier
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetPrimaryIdentifierSource() string {
	if x != nil {
		return x.PrimaryIdentifierSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetPrimaryIdentifierSourceName() string {
	if x != nil {
		return x.PrimaryIdentifierSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetSecondaryIdentifier() string {
	if x != nil {
		return x.SecondaryIdentifier
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetSecondaryIdentifierSource() string {
	if x != nil {
		return x.SecondaryIdentifierSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetSecondaryIdentifierSourceName() string {
	if x != nil {
		return x.SecondaryIdentifierSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetSelfieVerificationProfile() string {
	if x != nil {
		return x.SelfieVerificationProfile
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetSelfieVerificationProfileSource() string {
	if x != nil {
		return x.SelfieVerificationProfileSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetSelfieVerificationProfileSourceName() string {
	if x != nil {
		return x.SelfieVerificationProfileSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetSelfieVerificationStatus() string {
	if x != nil {
		return x.SelfieVerificationStatus
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetSelfieVerificationStatusSource() string {
	if x != nil {
		return x.SelfieVerificationStatusSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetSelfieVerificationStatusSourceName() string {
	if x != nil {
		return x.SelfieVerificationStatusSourceName
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetVisualVerification() string {
	if x != nil {
		return x.VisualVerification
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetVisualVerificationSource() string {
	if x != nil {
		return x.VisualVerificationSource
	}
	return ""
}

func (x *ReadIDConsolidatedIdentityData) GetVisualVerificationSourceName() string {
	if x != nil {
		return x.VisualVerificationSourceName
	}
	return ""
}

type ReadIDApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppVersion   string `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	CustomerName string `protobuf:"bytes,2,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	PackageName  string `protobuf:"bytes,3,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	Timestamp    int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ReadIDApp) Reset() {
	*x = ReadIDApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_readid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadIDApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadIDApp) ProtoMessage() {}

func (x *ReadIDApp) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_readid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadIDApp.ProtoReflect.Descriptor instead.
func (*ReadIDApp) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_readid_proto_rawDescGZIP(), []int{2}
}

func (x *ReadIDApp) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ReadIDApp) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *ReadIDApp) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ReadIDApp) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ReadIDDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brand                       string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
	ExtendedLengthApduSupported bool   `protobuf:"varint,2,opt,name=extended_length_apdu_supported,json=extendedLengthApduSupported,proto3" json:"extended_length_apdu_supported,omitempty"`
	Manufacturer                string `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	MaxTransceiveLength         int32  `protobuf:"varint,4,opt,name=max_transceive_length,json=maxTransceiveLength,proto3" json:"max_transceive_length,omitempty"`
	Model                       string `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	OsVersion                   string `protobuf:"bytes,6,opt,name=os_version,json=OSVersion,proto3" json:"os_version,omitempty"`
	Platform                    string `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	Timestamp                   int64  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ReadIDDeviceInfo) Reset() {
	*x = ReadIDDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_readid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadIDDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadIDDeviceInfo) ProtoMessage() {}

func (x *ReadIDDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_readid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadIDDeviceInfo.ProtoReflect.Descriptor instead.
func (*ReadIDDeviceInfo) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_readid_proto_rawDescGZIP(), []int{3}
}

func (x *ReadIDDeviceInfo) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *ReadIDDeviceInfo) GetExtendedLengthApduSupported() bool {
	if x != nil {
		return x.ExtendedLengthApduSupported
	}
	return false
}

func (x *ReadIDDeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ReadIDDeviceInfo) GetMaxTransceiveLength() int32 {
	if x != nil {
		return x.MaxTransceiveLength
	}
	return 0
}

func (x *ReadIDDeviceInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ReadIDDeviceInfo) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *ReadIDDeviceInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ReadIDDeviceInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_indykite_identity_v1beta2_readid_proto protoreflect.FileDescriptor

var file_indykite_identity_v1beta2_readid_proto_rawDesc = []byte{
	0x0a, 0x26, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x22, 0xed, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x49, 0x44, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x6a, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x44, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x03, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x44, 0x41, 0x70, 0x70,
	0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x44, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x22, 0xa5, 0x17, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x44, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x68, 0x69, 0x70,
	0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63,
	0x68, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x68, 0x69, 0x70, 0x5f,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x63, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18,
	0x63, 0x68, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x63, 0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63,
	0x68, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x2f, 0x0a,
	0x14, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x19, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x31,
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73,
	0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x73,
	0x75, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x15, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e,
	0x61, 0x6d, 0x65, 0x4f, 0x66, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x12, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x1a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1b,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x20,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65, 0x6c, 0x66,
	0x69, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x22, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1f, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x54, 0x0a, 0x27, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x23, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x6c, 0x66,
	0x69, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65,
	0x6c, 0x66, 0x69, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x52, 0x0a, 0x26, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x22, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x61, 0x64, 0x49, 0x44, 0x41, 0x70, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0xb4, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x49, 0x44, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x61,
	0x70, 0x64, 0x75, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x41, 0x70, 0x64, 0x75, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x83, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x42, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6a, 0x61,
	0x72, 0x76, 0x69, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x3b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa,
	0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xca, 0x02, 0x19, 0x49, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xe2, 0x02, 0x25, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x5c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1b, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_identity_v1beta2_readid_proto_rawDescOnce sync.Once
	file_indykite_identity_v1beta2_readid_proto_rawDescData = file_indykite_identity_v1beta2_readid_proto_rawDesc
)

func file_indykite_identity_v1beta2_readid_proto_rawDescGZIP() []byte {
	file_indykite_identity_v1beta2_readid_proto_rawDescOnce.Do(func() {
		file_indykite_identity_v1beta2_readid_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_identity_v1beta2_readid_proto_rawDescData)
	})
	return file_indykite_identity_v1beta2_readid_proto_rawDescData
}

var file_indykite_identity_v1beta2_readid_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_indykite_identity_v1beta2_readid_proto_goTypes = []interface{}{
	(*ReadIDSession)(nil),                  // 0: indykite.identity.v1beta2.ReadIDSession
	(*ReadIDConsolidatedIdentityData)(nil), // 1: indykite.identity.v1beta2.ReadIDConsolidatedIdentityData
	(*ReadIDApp)(nil),                      // 2: indykite.identity.v1beta2.ReadIDApp
	(*ReadIDDeviceInfo)(nil),               // 3: indykite.identity.v1beta2.ReadIDDeviceInfo
}
var file_indykite_identity_v1beta2_readid_proto_depIdxs = []int32{
	1, // 0: indykite.identity.v1beta2.ReadIDSession.identity_data:type_name -> indykite.identity.v1beta2.ReadIDConsolidatedIdentityData
	2, // 1: indykite.identity.v1beta2.ReadIDSession.app:type_name -> indykite.identity.v1beta2.ReadIDApp
	3, // 2: indykite.identity.v1beta2.ReadIDSession.device_info:type_name -> indykite.identity.v1beta2.ReadIDDeviceInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_indykite_identity_v1beta2_readid_proto_init() }
func file_indykite_identity_v1beta2_readid_proto_init() {
	if File_indykite_identity_v1beta2_readid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indykite_identity_v1beta2_readid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadIDSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_readid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadIDConsolidatedIdentityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_readid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadIDApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_readid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadIDDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_identity_v1beta2_readid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_identity_v1beta2_readid_proto_goTypes,
		DependencyIndexes: file_indykite_identity_v1beta2_readid_proto_depIdxs,
		MessageInfos:      file_indykite_identity_v1beta2_readid_proto_msgTypes,
	}.Build()
	File_indykite_identity_v1beta2_readid_proto = out.File
	file_indykite_identity_v1beta2_readid_proto_rawDesc = nil
	file_indykite_identity_v1beta2_readid_proto_goTypes = nil
	file_indykite_identity_v1beta2_readid_proto_depIdxs = nil
}
