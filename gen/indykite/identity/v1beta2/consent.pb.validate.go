// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/identity/v1beta2/consent.proto

package identityv1beta2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConsentReceipt with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConsentReceipt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsentReceipt with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsentReceiptMultiError,
// or nil if none found.
func (m *ConsentReceipt) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsentReceipt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PiiPrincipalId

	if all {
		switch v := interface{}(m.GetPiiProcessor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsentReceiptValidationError{
					field:  "PiiProcessor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsentReceiptValidationError{
					field:  "PiiProcessor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPiiProcessor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsentReceiptValidationError{
				field:  "PiiProcessor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsentReceiptValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsentReceiptValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsentReceiptValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConsentReceiptMultiError(errors)
	}

	return nil
}

// ConsentReceiptMultiError is an error wrapping multiple validation errors
// returned by ConsentReceipt.ValidateAll() if the designated constraints
// aren't met.
type ConsentReceiptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsentReceiptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsentReceiptMultiError) AllErrors() []error { return m }

// ConsentReceiptValidationError is the validation error returned by
// ConsentReceipt.Validate if the designated constraints aren't met.
type ConsentReceiptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsentReceiptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsentReceiptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsentReceiptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsentReceiptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsentReceiptValidationError) ErrorName() string { return "ConsentReceiptValidationError" }

// Error satisfies the builtin error interface
func (e ConsentReceiptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsentReceipt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsentReceiptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsentReceiptValidationError{}

// Validate checks the field values on PiiController with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PiiController) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PiiController with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PiiControllerMultiError, or
// nil if none found.
func (m *PiiController) ValidateAll() error {
	return m.validate(true)
}

func (m *PiiController) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PiiControllerId

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return PiiControllerMultiError(errors)
	}

	return nil
}

// PiiControllerMultiError is an error wrapping multiple validation errors
// returned by PiiController.ValidateAll() if the designated constraints
// aren't met.
type PiiControllerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PiiControllerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PiiControllerMultiError) AllErrors() []error { return m }

// PiiControllerValidationError is the validation error returned by
// PiiController.Validate if the designated constraints aren't met.
type PiiControllerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PiiControllerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PiiControllerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PiiControllerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PiiControllerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PiiControllerValidationError) ErrorName() string { return "PiiControllerValidationError" }

// Error satisfies the builtin error interface
func (e PiiControllerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPiiController.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PiiControllerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PiiControllerValidationError{}

// Validate checks the field values on PiiProcessor with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PiiProcessor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PiiProcessor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PiiProcessorMultiError, or
// nil if none found.
func (m *PiiProcessor) ValidateAll() error {
	return m.validate(true)
}

func (m *PiiProcessor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PiiProcessorId

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Owner

	// no validation rules for PolicyUri

	// no validation rules for TermsOfServiceUri

	// no validation rules for ClientUri

	// no validation rules for LogoUri

	// no validation rules for UserSupportEmailAddress

	if len(errors) > 0 {
		return PiiProcessorMultiError(errors)
	}

	return nil
}

// PiiProcessorMultiError is an error wrapping multiple validation errors
// returned by PiiProcessor.ValidateAll() if the designated constraints aren't met.
type PiiProcessorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PiiProcessorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PiiProcessorMultiError) AllErrors() []error { return m }

// PiiProcessorValidationError is the validation error returned by
// PiiProcessor.Validate if the designated constraints aren't met.
type PiiProcessorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PiiProcessorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PiiProcessorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PiiProcessorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PiiProcessorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PiiProcessorValidationError) ErrorName() string { return "PiiProcessorValidationError" }

// Error satisfies the builtin error interface
func (e PiiProcessorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPiiProcessor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PiiProcessorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PiiProcessorValidationError{}

// Validate checks the field values on ConsentReceipt_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsentReceipt_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsentReceipt_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsentReceipt_ItemMultiError, or nil if none found.
func (m *ConsentReceipt_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsentReceipt_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsentId

	if all {
		switch v := interface{}(m.GetPiiController()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsentReceipt_ItemValidationError{
					field:  "PiiController",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsentReceipt_ItemValidationError{
					field:  "PiiController",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPiiController()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsentReceipt_ItemValidationError{
				field:  "PiiController",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConsentedAtTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsentReceipt_ItemValidationError{
					field:  "ConsentedAtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsentReceipt_ItemValidationError{
					field:  "ConsentedAtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsentedAtTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsentReceipt_ItemValidationError{
				field:  "ConsentedAtTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConsentReceipt_ItemMultiError(errors)
	}

	return nil
}

// ConsentReceipt_ItemMultiError is an error wrapping multiple validation
// errors returned by ConsentReceipt_Item.ValidateAll() if the designated
// constraints aren't met.
type ConsentReceipt_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsentReceipt_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsentReceipt_ItemMultiError) AllErrors() []error { return m }

// ConsentReceipt_ItemValidationError is the validation error returned by
// ConsentReceipt_Item.Validate if the designated constraints aren't met.
type ConsentReceipt_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsentReceipt_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsentReceipt_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsentReceipt_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsentReceipt_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsentReceipt_ItemValidationError) ErrorName() string {
	return "ConsentReceipt_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ConsentReceipt_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsentReceipt_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsentReceipt_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsentReceipt_ItemValidationError{}
