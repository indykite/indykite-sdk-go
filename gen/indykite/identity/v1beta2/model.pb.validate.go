// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/identity/v1beta2/model.proto

package identityv1beta2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DigitalTwin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DigitalTwinMultiError, or
// nil if none found.
func (m *DigitalTwin) ValidateAll() error {
	return m.validate(true)
}

func (m *DigitalTwin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 27 || l > 100 {
		err := DigitalTwinValidationError{
			field:  "Id",
			reason: "value length must be between 27 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DigitalTwin_Id_Pattern.MatchString(m.GetId()) {
		err := DigitalTwinValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^gid:[A-Za-z0-9-_]{27,100}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTenantId()); l < 27 || l > 100 {
		err := DigitalTwinValidationError{
			field:  "TenantId",
			reason: "value length must be between 27 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DigitalTwin_TenantId_Pattern.MatchString(m.GetTenantId()) {
		err := DigitalTwinValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^gid:[A-Za-z0-9-_]{27,100}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DigitalTwinKind_name[int32(m.GetKind())]; !ok {
		err := DigitalTwinValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DigitalTwinState_name[int32(m.GetState())]; !ok {
		err := DigitalTwinValidationError{
			field:  "State",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 32 {
		err := DigitalTwinValidationError{
			field:  "Tags",
			reason: "value must contain no more than 32 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DigitalTwin_Tags_Unique := make(map[string]struct{}, len(m.GetTags()))

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if _, exists := _DigitalTwin_Tags_Unique[item]; exists {
			err := DigitalTwinValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DigitalTwin_Tags_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) > 64 {
			err := DigitalTwinValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_DigitalTwin_Tags_Pattern.MatchString(item) {
			err := DigitalTwinValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value does not match regex pattern \"^([A-Z][a-z]+)+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DigitalTwinMultiError(errors)
	}

	return nil
}

// DigitalTwinMultiError is an error wrapping multiple validation errors
// returned by DigitalTwin.ValidateAll() if the designated constraints aren't met.
type DigitalTwinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DigitalTwinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DigitalTwinMultiError) AllErrors() []error { return m }

// DigitalTwinValidationError is the validation error returned by
// DigitalTwin.Validate if the designated constraints aren't met.
type DigitalTwinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DigitalTwinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DigitalTwinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DigitalTwinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DigitalTwinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DigitalTwinValidationError) ErrorName() string { return "DigitalTwinValidationError" }

// Error satisfies the builtin error interface
func (e DigitalTwinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDigitalTwin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DigitalTwinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DigitalTwinValidationError{}

var _DigitalTwin_Id_Pattern = regexp.MustCompile("^gid:[A-Za-z0-9-_]{27,100}$")

var _DigitalTwin_TenantId_Pattern = regexp.MustCompile("^gid:[A-Za-z0-9-_]{27,100}$")

var _DigitalTwin_Tags_Pattern = regexp.MustCompile("^([A-Z][a-z]+)+$")

// Validate checks the field values on DigitalEntity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DigitalEntity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DigitalEntity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DigitalEntityMultiError, or
// nil if none found.
func (m *DigitalEntity) ValidateAll() error {
	return m.validate(true)
}

func (m *DigitalEntity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDigitalTwin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DigitalEntityValidationError{
					field:  "DigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DigitalEntityValidationError{
					field:  "DigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDigitalTwin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DigitalEntityValidationError{
				field:  "DigitalTwin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DigitalEntityValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DigitalEntityValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DigitalEntityValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DigitalEntityValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DigitalEntityValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DigitalEntityValidationError{
					field:  fmt.Sprintf("Properties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DigitalEntityMultiError(errors)
	}

	return nil
}

// DigitalEntityMultiError is an error wrapping multiple validation errors
// returned by DigitalEntity.ValidateAll() if the designated constraints
// aren't met.
type DigitalEntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DigitalEntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DigitalEntityMultiError) AllErrors() []error { return m }

// DigitalEntityValidationError is the validation error returned by
// DigitalEntity.Validate if the designated constraints aren't met.
type DigitalEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DigitalEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DigitalEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DigitalEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DigitalEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DigitalEntityValidationError) ErrorName() string { return "DigitalEntityValidationError" }

// Error satisfies the builtin error interface
func (e DigitalEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDigitalEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DigitalEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DigitalEntityValidationError{}

// Validate checks the field values on ErrorMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorMessageMultiError, or
// nil if none found.
func (m *ErrorMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorMessageValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorMessageValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorMessageValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorMessageMultiError(errors)
	}

	return nil
}

// ErrorMessageMultiError is an error wrapping multiple validation errors
// returned by ErrorMessage.ValidateAll() if the designated constraints aren't met.
type ErrorMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMessageMultiError) AllErrors() []error { return m }

// ErrorMessageValidationError is the validation error returned by
// ErrorMessage.Validate if the designated constraints aren't met.
type ErrorMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorMessageValidationError) ErrorName() string { return "ErrorMessageValidationError" }

// Error satisfies the builtin error interface
func (e ErrorMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorMessageValidationError{}

// Validate checks the field values on Invitation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Invitation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Invitation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InvitationMultiError, or
// nil if none found.
func (m *Invitation) ValidateAll() error {
	return m.validate(true)
}

func (m *Invitation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTenantId()); l < 27 || l > 100 {
		err := InvitationValidationError{
			field:  "TenantId",
			reason: "value length must be between 27 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Invitation_TenantId_Pattern.MatchString(m.GetTenantId()) {
		err := InvitationValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^gid:[A-Za-z0-9-_]{27,100}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ReferenceId

	if all {
		switch v := interface{}(m.GetInviteAtTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "InviteAtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "InviteAtTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInviteAtTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvitationValidationError{
				field:  "InviteAtTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvitationValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMessageAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "MessageAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "MessageAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvitationValidationError{
				field:  "MessageAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAcceptedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "AcceptedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "AcceptedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAcceptedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvitationValidationError{
				field:  "AcceptedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	switch m.Invitee.(type) {

	case *Invitation_Email:
		// no validation rules for Email

	case *Invitation_Mobile:
		// no validation rules for Mobile

	default:
		err := InvitationValidationError{
			field:  "Invitee",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return InvitationMultiError(errors)
	}

	return nil
}

// InvitationMultiError is an error wrapping multiple validation errors
// returned by Invitation.ValidateAll() if the designated constraints aren't met.
type InvitationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvitationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvitationMultiError) AllErrors() []error { return m }

// InvitationValidationError is the validation error returned by
// Invitation.Validate if the designated constraints aren't met.
type InvitationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvitationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvitationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvitationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvitationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvitationValidationError) ErrorName() string { return "InvitationValidationError" }

// Error satisfies the builtin error interface
func (e InvitationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvitation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvitationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvitationValidationError{}

var _Invitation_TenantId_Pattern = regexp.MustCompile("^gid:[A-Za-z0-9-_]{27,100}$")

// Validate checks the field values on WellKnown with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WellKnown) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WellKnown with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WellKnownMultiError, or nil
// if none found.
func (m *WellKnown) ValidateAll() error {
	return m.validate(true)
}

func (m *WellKnown) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Issuer

	// no validation rules for AuthorizationEndpoint

	// no validation rules for RegistrationEndpoint

	// no validation rules for TokenEndpoint

	// no validation rules for JwksUri

	// no validation rules for UserinfoEndpoint

	// no validation rules for RequestParameterSupported

	// no validation rules for RequestUriParameterSupported

	// no validation rules for RequireRequestUriRegistration

	// no validation rules for ClaimsParameterSupported

	// no validation rules for RevocationEndpoint

	// no validation rules for BackchannelLogoutSupported

	// no validation rules for BackchannelLogoutSessionSupported

	// no validation rules for FrontchannelLogoutSupported

	// no validation rules for FrontchannelLogoutSessionSupported

	// no validation rules for EndSessionEndpoint

	if len(errors) > 0 {
		return WellKnownMultiError(errors)
	}

	return nil
}

// WellKnownMultiError is an error wrapping multiple validation errors returned
// by WellKnown.ValidateAll() if the designated constraints aren't met.
type WellKnownMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WellKnownMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WellKnownMultiError) AllErrors() []error { return m }

// WellKnownValidationError is the validation error returned by
// WellKnown.Validate if the designated constraints aren't met.
type WellKnownValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WellKnownValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WellKnownValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WellKnownValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WellKnownValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WellKnownValidationError) ErrorName() string { return "WellKnownValidationError" }

// Error satisfies the builtin error interface
func (e WellKnownValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWellKnown.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WellKnownValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WellKnownValidationError{}

// Validate checks the field values on OAuth2TokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OAuth2TokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth2TokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuth2TokenResponseMultiError, or nil if none found.
func (m *OAuth2TokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth2TokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExpiresIn

	// no validation rules for Scope

	// no validation rules for IdToken

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for TokenType

	if len(errors) > 0 {
		return OAuth2TokenResponseMultiError(errors)
	}

	return nil
}

// OAuth2TokenResponseMultiError is an error wrapping multiple validation
// errors returned by OAuth2TokenResponse.ValidateAll() if the designated
// constraints aren't met.
type OAuth2TokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuth2TokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuth2TokenResponseMultiError) AllErrors() []error { return m }

// OAuth2TokenResponseValidationError is the validation error returned by
// OAuth2TokenResponse.Validate if the designated constraints aren't met.
type OAuth2TokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuth2TokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuth2TokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuth2TokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuth2TokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuth2TokenResponseValidationError) ErrorName() string {
	return "OAuth2TokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OAuth2TokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth2TokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuth2TokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuth2TokenResponseValidationError{}

// Validate checks the field values on FlushInactiveOAuth2TokensRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FlushInactiveOAuth2TokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushInactiveOAuth2TokensRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FlushInactiveOAuth2TokensRequestMultiError, or nil if none found.
func (m *FlushInactiveOAuth2TokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushInactiveOAuth2TokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotAfter

	if len(errors) > 0 {
		return FlushInactiveOAuth2TokensRequestMultiError(errors)
	}

	return nil
}

// FlushInactiveOAuth2TokensRequestMultiError is an error wrapping multiple
// validation errors returned by
// FlushInactiveOAuth2TokensRequest.ValidateAll() if the designated
// constraints aren't met.
type FlushInactiveOAuth2TokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushInactiveOAuth2TokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushInactiveOAuth2TokensRequestMultiError) AllErrors() []error { return m }

// FlushInactiveOAuth2TokensRequestValidationError is the validation error
// returned by FlushInactiveOAuth2TokensRequest.Validate if the designated
// constraints aren't met.
type FlushInactiveOAuth2TokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushInactiveOAuth2TokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushInactiveOAuth2TokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushInactiveOAuth2TokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushInactiveOAuth2TokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushInactiveOAuth2TokensRequestValidationError) ErrorName() string {
	return "FlushInactiveOAuth2TokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FlushInactiveOAuth2TokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushInactiveOAuth2TokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushInactiveOAuth2TokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushInactiveOAuth2TokensRequestValidationError{}

// Validate checks the field values on IdentityTokenInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdentityTokenInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityTokenInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityTokenInfoMultiError, or nil if none found.
func (m *IdentityTokenInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityTokenInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomerId

	// no validation rules for AppSpaceId

	// no validation rules for ApplicationId

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityTokenInfoValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImpersonated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "Impersonated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "Impersonated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImpersonated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityTokenInfoValidationError{
				field:  "Impersonated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIssueTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "IssueTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "IssueTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityTokenInfoValidationError{
				field:  "IssueTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityTokenInfoValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuthenticationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "AuthenticationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "AuthenticationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthenticationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityTokenInfoValidationError{
				field:  "AuthenticationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProviderInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IdentityTokenInfoValidationError{
						field:  fmt.Sprintf("ProviderInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IdentityTokenInfoValidationError{
						field:  fmt.Sprintf("ProviderInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityTokenInfoValidationError{
					field:  fmt.Sprintf("ProviderInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSessionClaims()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "SessionClaims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "SessionClaims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSessionClaims()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityTokenInfoValidationError{
				field:  "SessionClaims",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTokenClaims()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "TokenClaims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentityTokenInfoValidationError{
					field:  "TokenClaims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokenClaims()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityTokenInfoValidationError{
				field:  "TokenClaims",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IdentityTokenInfoMultiError(errors)
	}

	return nil
}

// IdentityTokenInfoMultiError is an error wrapping multiple validation errors
// returned by IdentityTokenInfo.ValidateAll() if the designated constraints
// aren't met.
type IdentityTokenInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityTokenInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityTokenInfoMultiError) AllErrors() []error { return m }

// IdentityTokenInfoValidationError is the validation error returned by
// IdentityTokenInfo.Validate if the designated constraints aren't met.
type IdentityTokenInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityTokenInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityTokenInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityTokenInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityTokenInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityTokenInfoValidationError) ErrorName() string {
	return "IdentityTokenInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IdentityTokenInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityTokenInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityTokenInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityTokenInfoValidationError{}

// Validate checks the field values on ProviderInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProviderInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderInfoMultiError, or
// nil if none found.
func (m *ProviderInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Issuer

	if len(errors) > 0 {
		return ProviderInfoMultiError(errors)
	}

	return nil
}

// ProviderInfoMultiError is an error wrapping multiple validation errors
// returned by ProviderInfo.ValidateAll() if the designated constraints aren't met.
type ProviderInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderInfoMultiError) AllErrors() []error { return m }

// ProviderInfoValidationError is the validation error returned by
// ProviderInfo.Validate if the designated constraints aren't met.
type ProviderInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderInfoValidationError) ErrorName() string { return "ProviderInfoValidationError" }

// Error satisfies the builtin error interface
func (e ProviderInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderInfoValidationError{}

// Validate checks the field values on UserInfoResponsePayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserInfoResponsePayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoResponsePayload with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoResponsePayloadMultiError, or nil if none found.
func (m *UserInfoResponsePayload) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoResponsePayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sub

	// no validation rules for Name

	// no validation rules for GivenName

	// no validation rules for FamilyName

	// no validation rules for MiddleName

	// no validation rules for Nickname

	// no validation rules for PreferredUsername

	// no validation rules for Profile

	// no validation rules for Picture

	// no validation rules for Website

	// no validation rules for Email

	// no validation rules for EmailVerified

	// no validation rules for Gender

	// no validation rules for Birthdate

	// no validation rules for Zoneinfo

	// no validation rules for Locale

	// no validation rules for PhoneNumber

	// no validation rules for PhoneNumberVerified

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UserInfoResponsePayloadMultiError(errors)
	}

	return nil
}

// UserInfoResponsePayloadMultiError is an error wrapping multiple validation
// errors returned by UserInfoResponsePayload.ValidateAll() if the designated
// constraints aren't met.
type UserInfoResponsePayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoResponsePayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoResponsePayloadMultiError) AllErrors() []error { return m }

// UserInfoResponsePayloadValidationError is the validation error returned by
// UserInfoResponsePayload.Validate if the designated constraints aren't met.
type UserInfoResponsePayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoResponsePayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoResponsePayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoResponsePayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoResponsePayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoResponsePayloadValidationError) ErrorName() string {
	return "UserInfoResponsePayloadValidationError"
}

// Error satisfies the builtin error interface
func (e UserInfoResponsePayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoResponsePayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoResponsePayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoResponsePayloadValidationError{}

// Validate checks the field values on PostalAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostalAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostalAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostalAddressMultiError, or
// nil if none found.
func (m *PostalAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *PostalAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _PostalAddress_AddressType_InLookup[m.GetAddressType()]; !ok {
		err := PostalAddressValidationError{
			field:  "AddressType",
			reason: "value must be in list [home home_preferred work work_preferred other other_preferred]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddressCountry()) > 254 {
		err := PostalAddressValidationError{
			field:  "AddressCountry",
			reason: "value length must be at most 254 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _PostalAddress_AddressCountryCode_InLookup[m.GetAddressCountryCode()]; !ok {
		err := PostalAddressValidationError{
			field:  "AddressCountryCode",
			reason: "value must be in list [AF AX AL DZ AS AD AO AI AQ AG AR AM AW AU AT AZ BS BH BD BB BY BE BZ BJ BM BT BO BQ BA BW BV BR IO BN BG BF BI KH CM CA CV KY CF TD CL CN CX CC CO KM CG CD CK CR CI HR CU CW CY CZ DK DJ DM DO EC EG SV GQ ER EE ET FK FO FJ FI FR GF PF TF GA GM GE DE GH GI GR GL GD GP GU GT GG GN GW GY HT HM VA HN HK HU IS IN ID IR IQ IE IM IL IT JM JP JE JO KZ KE KI KP KR KW KG LA LV LB LS LR LY LI LT LU MO MK MG MW MY MV ML MT MH MQ MR MU YT MX FM MD MC MN ME MS MA MZ MM NA NR NP NL NC NZ NI NE NG NU NF MP NO OM PK PW PS PA PG PY PE PH PN PL PT PR QA RE RO RU RW BL SH KN LC MF PM VC WS SM ST SA SN RS SC SL SG SX SK SI SB SO ZA GS SS ES LK SD SR SJ SZ SE CH SY TW TJ TZ TH TL TG TK TO TT TN TR TM TC TV UG UA AE GB US UM UY UZ VU VE VN VG VI WF EH YE ZM ZW]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddressLocality()) > 254 {
		err := PostalAddressValidationError{
			field:  "AddressLocality",
			reason: "value length must be at most 254 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddressRegion()) > 254 {
		err := PostalAddressValidationError{
			field:  "AddressRegion",
			reason: "value length must be at most 254 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostOfficeBoxNumber()) > 50 {
		err := PostalAddressValidationError{
			field:  "PostOfficeBoxNumber",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostalCode()) > 50 {
		err := PostalAddressValidationError{
			field:  "PostalCode",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStreetAddress()) > 254 {
		err := PostalAddressValidationError{
			field:  "StreetAddress",
			reason: "value length must be at most 254 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFormatted()) > 1024 {
		err := PostalAddressValidationError{
			field:  "Formatted",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PostalAddressMultiError(errors)
	}

	return nil
}

// PostalAddressMultiError is an error wrapping multiple validation errors
// returned by PostalAddress.ValidateAll() if the designated constraints
// aren't met.
type PostalAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostalAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostalAddressMultiError) AllErrors() []error { return m }

// PostalAddressValidationError is the validation error returned by
// PostalAddress.Validate if the designated constraints aren't met.
type PostalAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostalAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostalAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostalAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostalAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostalAddressValidationError) ErrorName() string { return "PostalAddressValidationError" }

// Error satisfies the builtin error interface
func (e PostalAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostalAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostalAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostalAddressValidationError{}

var _PostalAddress_AddressType_InLookup = map[string]struct{}{
	"home":            {},
	"home_preferred":  {},
	"work":            {},
	"work_preferred":  {},
	"other":           {},
	"other_preferred": {},
}

var _PostalAddress_AddressCountryCode_InLookup = map[string]struct{}{
	"AF": {},
	"AX": {},
	"AL": {},
	"DZ": {},
	"AS": {},
	"AD": {},
	"AO": {},
	"AI": {},
	"AQ": {},
	"AG": {},
	"AR": {},
	"AM": {},
	"AW": {},
	"AU": {},
	"AT": {},
	"AZ": {},
	"BS": {},
	"BH": {},
	"BD": {},
	"BB": {},
	"BY": {},
	"BE": {},
	"BZ": {},
	"BJ": {},
	"BM": {},
	"BT": {},
	"BO": {},
	"BQ": {},
	"BA": {},
	"BW": {},
	"BV": {},
	"BR": {},
	"IO": {},
	"BN": {},
	"BG": {},
	"BF": {},
	"BI": {},
	"KH": {},
	"CM": {},
	"CA": {},
	"CV": {},
	"KY": {},
	"CF": {},
	"TD": {},
	"CL": {},
	"CN": {},
	"CX": {},
	"CC": {},
	"CO": {},
	"KM": {},
	"CG": {},
	"CD": {},
	"CK": {},
	"CR": {},
	"CI": {},
	"HR": {},
	"CU": {},
	"CW": {},
	"CY": {},
	"CZ": {},
	"DK": {},
	"DJ": {},
	"DM": {},
	"DO": {},
	"EC": {},
	"EG": {},
	"SV": {},
	"GQ": {},
	"ER": {},
	"EE": {},
	"ET": {},
	"FK": {},
	"FO": {},
	"FJ": {},
	"FI": {},
	"FR": {},
	"GF": {},
	"PF": {},
	"TF": {},
	"GA": {},
	"GM": {},
	"GE": {},
	"DE": {},
	"GH": {},
	"GI": {},
	"GR": {},
	"GL": {},
	"GD": {},
	"GP": {},
	"GU": {},
	"GT": {},
	"GG": {},
	"GN": {},
	"GW": {},
	"GY": {},
	"HT": {},
	"HM": {},
	"VA": {},
	"HN": {},
	"HK": {},
	"HU": {},
	"IS": {},
	"IN": {},
	"ID": {},
	"IR": {},
	"IQ": {},
	"IE": {},
	"IM": {},
	"IL": {},
	"IT": {},
	"JM": {},
	"JP": {},
	"JE": {},
	"JO": {},
	"KZ": {},
	"KE": {},
	"KI": {},
	"KP": {},
	"KR": {},
	"KW": {},
	"KG": {},
	"LA": {},
	"LV": {},
	"LB": {},
	"LS": {},
	"LR": {},
	"LY": {},
	"LI": {},
	"LT": {},
	"LU": {},
	"MO": {},
	"MK": {},
	"MG": {},
	"MW": {},
	"MY": {},
	"MV": {},
	"ML": {},
	"MT": {},
	"MH": {},
	"MQ": {},
	"MR": {},
	"MU": {},
	"YT": {},
	"MX": {},
	"FM": {},
	"MD": {},
	"MC": {},
	"MN": {},
	"ME": {},
	"MS": {},
	"MA": {},
	"MZ": {},
	"MM": {},
	"NA": {},
	"NR": {},
	"NP": {},
	"NL": {},
	"NC": {},
	"NZ": {},
	"NI": {},
	"NE": {},
	"NG": {},
	"NU": {},
	"NF": {},
	"MP": {},
	"NO": {},
	"OM": {},
	"PK": {},
	"PW": {},
	"PS": {},
	"PA": {},
	"PG": {},
	"PY": {},
	"PE": {},
	"PH": {},
	"PN": {},
	"PL": {},
	"PT": {},
	"PR": {},
	"QA": {},
	"RE": {},
	"RO": {},
	"RU": {},
	"RW": {},
	"BL": {},
	"SH": {},
	"KN": {},
	"LC": {},
	"MF": {},
	"PM": {},
	"VC": {},
	"WS": {},
	"SM": {},
	"ST": {},
	"SA": {},
	"SN": {},
	"RS": {},
	"SC": {},
	"SL": {},
	"SG": {},
	"SX": {},
	"SK": {},
	"SI": {},
	"SB": {},
	"SO": {},
	"ZA": {},
	"GS": {},
	"SS": {},
	"ES": {},
	"LK": {},
	"SD": {},
	"SR": {},
	"SJ": {},
	"SZ": {},
	"SE": {},
	"CH": {},
	"SY": {},
	"TW": {},
	"TJ": {},
	"TZ": {},
	"TH": {},
	"TL": {},
	"TG": {},
	"TK": {},
	"TO": {},
	"TT": {},
	"TN": {},
	"TR": {},
	"TM": {},
	"TC": {},
	"TV": {},
	"UG": {},
	"UA": {},
	"AE": {},
	"GB": {},
	"US": {},
	"UM": {},
	"UY": {},
	"UZ": {},
	"VU": {},
	"VE": {},
	"VN": {},
	"VG": {},
	"VI": {},
	"WF": {},
	"EH": {},
	"YE": {},
	"ZM": {},
	"ZW": {},
}
