// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: indykite/identity/v1beta2/identity_management_api.proto

package identityv1beta2

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityManagementAPIClient is the client API for IdentityManagementAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityManagementAPIClient interface {
	// TokenIntrospect function validates the token and returns information about it.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	TokenIntrospect(ctx context.Context, in *TokenIntrospectRequest, opts ...grpc.CallOption) (*TokenIntrospectResponse, error)
	// StartForgottenPasswordFlow function initiates the flow where systems sends a notification to DigitalTwin
	// with a link to set the new password.
	//
	// The flow checks if the DigitalTwin has primary contact information and if so it sends a message with a link.
	// By opening the link the UI SDK guides the User-Agent through the Authentication Flow where the user is
	// allowed to set a new Password credential.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	StartForgottenPasswordFlow(ctx context.Context, in *StartForgottenPasswordFlowRequest, opts ...grpc.CallOption) (*StartForgottenPasswordFlowResponse, error)
	// ChangePassword function allows the Application to replace the Password credential of a DigitalTwin.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// StartDigitalTwinEmailVerification function initiates the flow where IndyKite systems sends a
	// notification to DigitalTwin with a link to verify the control over
	// the notification channel (email only for now).
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	StartDigitalTwinEmailVerification(ctx context.Context, in *StartDigitalTwinEmailVerificationRequest, opts ...grpc.CallOption) (*StartDigitalTwinEmailVerificationResponse, error)
	// VerifyDigitalTwinEmail function confirms to IndyKite system that the message from
	// StartDigitalTwinEmailVerification function was sent and user visited the link.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	VerifyDigitalTwinEmail(ctx context.Context, in *VerifyDigitalTwinEmailRequest, opts ...grpc.CallOption) (*VerifyDigitalTwinEmailResponse, error)
	// SelfServiceTerminateSession function terminates and invalidates a login session.
	//
	// This is a protected operation and it can be accessed by both credentials,
	// with valid agent or DigitalTwin credential.
	SelfServiceTerminateSession(ctx context.Context, in *SelfServiceTerminateSessionRequest, opts ...grpc.CallOption) (*SelfServiceTerminateSessionResponse, error)
	// ImportDigitalTwins imports multiple DigitalTwin into the IndyKite database.
	//
	// No more than 1000 users can be imported in a single call.
	ImportDigitalTwins(ctx context.Context, in *ImportDigitalTwinsRequest, opts ...grpc.CallOption) (*ImportDigitalTwinsResponse, error)
	// GetDigitalTwin gets a DigitalTwin and requested properties.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	GetDigitalTwin(ctx context.Context, in *GetDigitalTwinRequest, opts ...grpc.CallOption) (*GetDigitalTwinResponse, error)
	// ListDigitalTwins lists DigitalTwins matching the filter.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	ListDigitalTwins(ctx context.Context, in *ListDigitalTwinsRequest, opts ...grpc.CallOption) (*ListDigitalTwinsResponse, error)
	// RegisterDigitalTwinWithoutCredential creates a DigitalTwin without credentials, but with properties
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	RegisterDigitalTwinWithoutCredential(ctx context.Context, in *RegisterDigitalTwinWithoutCredentialRequest, opts ...grpc.CallOption) (*RegisterDigitalTwinWithoutCredentialResponse, error)
	// PatchDigitalTwin updates the properties of a DigitalTwin.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	PatchDigitalTwin(ctx context.Context, in *PatchDigitalTwinRequest, opts ...grpc.CallOption) (*PatchDigitalTwinResponse, error)
	// DeleteDigitalTwin deletes the given DigitalTwin entirely from the system.
	//
	// This operation can't be restored.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	DeleteDigitalTwin(ctx context.Context, in *DeleteDigitalTwinRequest, opts ...grpc.CallOption) (*DeleteDigitalTwinResponse, error)
	// CheckOAuth2ConsentChallenge read the Consent Challenge from DB.
	CheckOAuth2ConsentChallenge(ctx context.Context, in *CheckOAuth2ConsentChallengeRequest, opts ...grpc.CallOption) (*CheckOAuth2ConsentChallengeResponse, error)
	// CreateOAuth2ConsentVerifier invalidates the Consent Challenge and creates a new Consent Verifier.
	CreateOAuth2ConsentVerifier(ctx context.Context, in *CreateOAuth2ConsentVerifierRequest, opts ...grpc.CallOption) (*CreateOAuth2ConsentVerifierResponse, error)
	// CreateInvitation will start invitation workflow
	CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
	// CheckInvitationState returns state of invitation and its data
	CheckInvitationState(ctx context.Context, in *CheckInvitationStateRequest, opts ...grpc.CallOption) (*CheckInvitationStateResponse, error)
	// ResendInvitation expect reference ID of invitation to send email again
	ResendInvitation(ctx context.Context, in *ResendInvitationRequest, opts ...grpc.CallOption) (*ResendInvitationResponse, error)
	// CancelInvitation expects reference ID of invitation to cancel
	CancelInvitation(ctx context.Context, in *CancelInvitationRequest, opts ...grpc.CallOption) (*CancelInvitationResponse, error)
	// EnrichToken allows a session and an access token to be enriched with additional data
	EnrichToken(ctx context.Context, in *EnrichTokenRequest, opts ...grpc.CallOption) (*EnrichTokenResponse, error)
	CreateConsent(ctx context.Context, in *CreateConsentRequest, opts ...grpc.CallOption) (*CreateConsentResponse, error)
	ListConsents(ctx context.Context, in *ListConsentsRequest, opts ...grpc.CallOption) (IdentityManagementAPI_ListConsentsClient, error)
	RevokeConsent(ctx context.Context, in *RevokeConsentRequest, opts ...grpc.CallOption) (*RevokeConsentResponse, error)
	// GetPasswordCredential is Experimental and not implemented yet
	GetPasswordCredential(ctx context.Context, in *GetPasswordCredentialRequest, opts ...grpc.CallOption) (*GetPasswordCredentialResponse, error)
	// GetPasswordCredential is Experimental and not implemented yet
	UpdatePasswordCredential(ctx context.Context, in *UpdatePasswordCredentialRequest, opts ...grpc.CallOption) (*UpdatePasswordCredentialResponse, error)
	// GetAccessToken is Experimental and not implemented yet
	GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error)
	// SessionIntrospect is Experimental and not implemented yet
	SessionIntrospect(ctx context.Context, in *SessionIntrospectRequest, opts ...grpc.CallOption) (*SessionIntrospectResponse, error)
	// CreateCustomLoginToken creates a signed custom authentication token with the specified user ID.
	//
	// The resulting JWT can be used in a IndyKite AuthN SDK to trigger an authentication flow. See
	// https://docs.indykite.com/sdk/authnn/create-custom-tokens#sign_in_using_custom_tokens_on_clients
	// for more details on how to use custom tokens for client authentication.
	CreateCustomLoginToken(ctx context.Context, in *CreateCustomLoginTokenRequest, opts ...grpc.CallOption) (*CreateCustomLoginTokenResponse, error)
}

type identityManagementAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityManagementAPIClient(cc grpc.ClientConnInterface) IdentityManagementAPIClient {
	return &identityManagementAPIClient{cc}
}

func (c *identityManagementAPIClient) TokenIntrospect(ctx context.Context, in *TokenIntrospectRequest, opts ...grpc.CallOption) (*TokenIntrospectResponse, error) {
	out := new(TokenIntrospectResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/TokenIntrospect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) StartForgottenPasswordFlow(ctx context.Context, in *StartForgottenPasswordFlowRequest, opts ...grpc.CallOption) (*StartForgottenPasswordFlowResponse, error) {
	out := new(StartForgottenPasswordFlowResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/StartForgottenPasswordFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) StartDigitalTwinEmailVerification(ctx context.Context, in *StartDigitalTwinEmailVerificationRequest, opts ...grpc.CallOption) (*StartDigitalTwinEmailVerificationResponse, error) {
	out := new(StartDigitalTwinEmailVerificationResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/StartDigitalTwinEmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) VerifyDigitalTwinEmail(ctx context.Context, in *VerifyDigitalTwinEmailRequest, opts ...grpc.CallOption) (*VerifyDigitalTwinEmailResponse, error) {
	out := new(VerifyDigitalTwinEmailResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/VerifyDigitalTwinEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) SelfServiceTerminateSession(ctx context.Context, in *SelfServiceTerminateSessionRequest, opts ...grpc.CallOption) (*SelfServiceTerminateSessionResponse, error) {
	out := new(SelfServiceTerminateSessionResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/SelfServiceTerminateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) ImportDigitalTwins(ctx context.Context, in *ImportDigitalTwinsRequest, opts ...grpc.CallOption) (*ImportDigitalTwinsResponse, error) {
	out := new(ImportDigitalTwinsResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/ImportDigitalTwins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) GetDigitalTwin(ctx context.Context, in *GetDigitalTwinRequest, opts ...grpc.CallOption) (*GetDigitalTwinResponse, error) {
	out := new(GetDigitalTwinResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/GetDigitalTwin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) ListDigitalTwins(ctx context.Context, in *ListDigitalTwinsRequest, opts ...grpc.CallOption) (*ListDigitalTwinsResponse, error) {
	out := new(ListDigitalTwinsResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/ListDigitalTwins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) RegisterDigitalTwinWithoutCredential(ctx context.Context, in *RegisterDigitalTwinWithoutCredentialRequest, opts ...grpc.CallOption) (*RegisterDigitalTwinWithoutCredentialResponse, error) {
	out := new(RegisterDigitalTwinWithoutCredentialResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/RegisterDigitalTwinWithoutCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) PatchDigitalTwin(ctx context.Context, in *PatchDigitalTwinRequest, opts ...grpc.CallOption) (*PatchDigitalTwinResponse, error) {
	out := new(PatchDigitalTwinResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/PatchDigitalTwin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) DeleteDigitalTwin(ctx context.Context, in *DeleteDigitalTwinRequest, opts ...grpc.CallOption) (*DeleteDigitalTwinResponse, error) {
	out := new(DeleteDigitalTwinResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/DeleteDigitalTwin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) CheckOAuth2ConsentChallenge(ctx context.Context, in *CheckOAuth2ConsentChallengeRequest, opts ...grpc.CallOption) (*CheckOAuth2ConsentChallengeResponse, error) {
	out := new(CheckOAuth2ConsentChallengeResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/CheckOAuth2ConsentChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) CreateOAuth2ConsentVerifier(ctx context.Context, in *CreateOAuth2ConsentVerifierRequest, opts ...grpc.CallOption) (*CreateOAuth2ConsentVerifierResponse, error) {
	out := new(CreateOAuth2ConsentVerifierResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/CreateOAuth2ConsentVerifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/CreateInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) CheckInvitationState(ctx context.Context, in *CheckInvitationStateRequest, opts ...grpc.CallOption) (*CheckInvitationStateResponse, error) {
	out := new(CheckInvitationStateResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/CheckInvitationState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) ResendInvitation(ctx context.Context, in *ResendInvitationRequest, opts ...grpc.CallOption) (*ResendInvitationResponse, error) {
	out := new(ResendInvitationResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/ResendInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) CancelInvitation(ctx context.Context, in *CancelInvitationRequest, opts ...grpc.CallOption) (*CancelInvitationResponse, error) {
	out := new(CancelInvitationResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/CancelInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) EnrichToken(ctx context.Context, in *EnrichTokenRequest, opts ...grpc.CallOption) (*EnrichTokenResponse, error) {
	out := new(EnrichTokenResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/EnrichToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) CreateConsent(ctx context.Context, in *CreateConsentRequest, opts ...grpc.CallOption) (*CreateConsentResponse, error) {
	out := new(CreateConsentResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/CreateConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) ListConsents(ctx context.Context, in *ListConsentsRequest, opts ...grpc.CallOption) (IdentityManagementAPI_ListConsentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &IdentityManagementAPI_ServiceDesc.Streams[0], "/indykite.identity.v1beta2.IdentityManagementAPI/ListConsents", opts...)
	if err != nil {
		return nil, err
	}
	x := &identityManagementAPIListConsentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IdentityManagementAPI_ListConsentsClient interface {
	Recv() (*ListConsentsResponse, error)
	grpc.ClientStream
}

type identityManagementAPIListConsentsClient struct {
	grpc.ClientStream
}

func (x *identityManagementAPIListConsentsClient) Recv() (*ListConsentsResponse, error) {
	m := new(ListConsentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *identityManagementAPIClient) RevokeConsent(ctx context.Context, in *RevokeConsentRequest, opts ...grpc.CallOption) (*RevokeConsentResponse, error) {
	out := new(RevokeConsentResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/RevokeConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) GetPasswordCredential(ctx context.Context, in *GetPasswordCredentialRequest, opts ...grpc.CallOption) (*GetPasswordCredentialResponse, error) {
	out := new(GetPasswordCredentialResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/GetPasswordCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) UpdatePasswordCredential(ctx context.Context, in *UpdatePasswordCredentialRequest, opts ...grpc.CallOption) (*UpdatePasswordCredentialResponse, error) {
	out := new(UpdatePasswordCredentialResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/UpdatePasswordCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error) {
	out := new(GetAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/GetAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) SessionIntrospect(ctx context.Context, in *SessionIntrospectRequest, opts ...grpc.CallOption) (*SessionIntrospectResponse, error) {
	out := new(SessionIntrospectResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/SessionIntrospect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementAPIClient) CreateCustomLoginToken(ctx context.Context, in *CreateCustomLoginTokenRequest, opts ...grpc.CallOption) (*CreateCustomLoginTokenResponse, error) {
	out := new(CreateCustomLoginTokenResponse)
	err := c.cc.Invoke(ctx, "/indykite.identity.v1beta2.IdentityManagementAPI/CreateCustomLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityManagementAPIServer is the server API for IdentityManagementAPI service.
// All implementations should embed UnimplementedIdentityManagementAPIServer
// for forward compatibility
type IdentityManagementAPIServer interface {
	// TokenIntrospect function validates the token and returns information about it.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	TokenIntrospect(context.Context, *TokenIntrospectRequest) (*TokenIntrospectResponse, error)
	// StartForgottenPasswordFlow function initiates the flow where systems sends a notification to DigitalTwin
	// with a link to set the new password.
	//
	// The flow checks if the DigitalTwin has primary contact information and if so it sends a message with a link.
	// By opening the link the UI SDK guides the User-Agent through the Authentication Flow where the user is
	// allowed to set a new Password credential.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	StartForgottenPasswordFlow(context.Context, *StartForgottenPasswordFlowRequest) (*StartForgottenPasswordFlowResponse, error)
	// ChangePassword function allows the Application to replace the Password credential of a DigitalTwin.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// StartDigitalTwinEmailVerification function initiates the flow where IndyKite systems sends a
	// notification to DigitalTwin with a link to verify the control over
	// the notification channel (email only for now).
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	StartDigitalTwinEmailVerification(context.Context, *StartDigitalTwinEmailVerificationRequest) (*StartDigitalTwinEmailVerificationResponse, error)
	// VerifyDigitalTwinEmail function confirms to IndyKite system that the message from
	// StartDigitalTwinEmailVerification function was sent and user visited the link.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	VerifyDigitalTwinEmail(context.Context, *VerifyDigitalTwinEmailRequest) (*VerifyDigitalTwinEmailResponse, error)
	// SelfServiceTerminateSession function terminates and invalidates a login session.
	//
	// This is a protected operation and it can be accessed by both credentials,
	// with valid agent or DigitalTwin credential.
	SelfServiceTerminateSession(context.Context, *SelfServiceTerminateSessionRequest) (*SelfServiceTerminateSessionResponse, error)
	// ImportDigitalTwins imports multiple DigitalTwin into the IndyKite database.
	//
	// No more than 1000 users can be imported in a single call.
	ImportDigitalTwins(context.Context, *ImportDigitalTwinsRequest) (*ImportDigitalTwinsResponse, error)
	// GetDigitalTwin gets a DigitalTwin and requested properties.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	GetDigitalTwin(context.Context, *GetDigitalTwinRequest) (*GetDigitalTwinResponse, error)
	// ListDigitalTwins lists DigitalTwins matching the filter.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	ListDigitalTwins(context.Context, *ListDigitalTwinsRequest) (*ListDigitalTwinsResponse, error)
	// RegisterDigitalTwinWithoutCredential creates a DigitalTwin without credentials, but with properties
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	RegisterDigitalTwinWithoutCredential(context.Context, *RegisterDigitalTwinWithoutCredentialRequest) (*RegisterDigitalTwinWithoutCredentialResponse, error)
	// PatchDigitalTwin updates the properties of a DigitalTwin.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	PatchDigitalTwin(context.Context, *PatchDigitalTwinRequest) (*PatchDigitalTwinResponse, error)
	// DeleteDigitalTwin deletes the given DigitalTwin entirely from the system.
	//
	// This operation can't be restored.
	//
	// This is a protected operation and it can be accessed only with valid agent credentials!
	DeleteDigitalTwin(context.Context, *DeleteDigitalTwinRequest) (*DeleteDigitalTwinResponse, error)
	// CheckOAuth2ConsentChallenge read the Consent Challenge from DB.
	CheckOAuth2ConsentChallenge(context.Context, *CheckOAuth2ConsentChallengeRequest) (*CheckOAuth2ConsentChallengeResponse, error)
	// CreateOAuth2ConsentVerifier invalidates the Consent Challenge and creates a new Consent Verifier.
	CreateOAuth2ConsentVerifier(context.Context, *CreateOAuth2ConsentVerifierRequest) (*CreateOAuth2ConsentVerifierResponse, error)
	// CreateInvitation will start invitation workflow
	CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
	// CheckInvitationState returns state of invitation and its data
	CheckInvitationState(context.Context, *CheckInvitationStateRequest) (*CheckInvitationStateResponse, error)
	// ResendInvitation expect reference ID of invitation to send email again
	ResendInvitation(context.Context, *ResendInvitationRequest) (*ResendInvitationResponse, error)
	// CancelInvitation expects reference ID of invitation to cancel
	CancelInvitation(context.Context, *CancelInvitationRequest) (*CancelInvitationResponse, error)
	// EnrichToken allows a session and an access token to be enriched with additional data
	EnrichToken(context.Context, *EnrichTokenRequest) (*EnrichTokenResponse, error)
	CreateConsent(context.Context, *CreateConsentRequest) (*CreateConsentResponse, error)
	ListConsents(*ListConsentsRequest, IdentityManagementAPI_ListConsentsServer) error
	RevokeConsent(context.Context, *RevokeConsentRequest) (*RevokeConsentResponse, error)
	// GetPasswordCredential is Experimental and not implemented yet
	GetPasswordCredential(context.Context, *GetPasswordCredentialRequest) (*GetPasswordCredentialResponse, error)
	// GetPasswordCredential is Experimental and not implemented yet
	UpdatePasswordCredential(context.Context, *UpdatePasswordCredentialRequest) (*UpdatePasswordCredentialResponse, error)
	// GetAccessToken is Experimental and not implemented yet
	GetAccessToken(context.Context, *GetAccessTokenRequest) (*GetAccessTokenResponse, error)
	// SessionIntrospect is Experimental and not implemented yet
	SessionIntrospect(context.Context, *SessionIntrospectRequest) (*SessionIntrospectResponse, error)
	// CreateCustomLoginToken creates a signed custom authentication token with the specified user ID.
	//
	// The resulting JWT can be used in a IndyKite AuthN SDK to trigger an authentication flow. See
	// https://docs.indykite.com/sdk/authnn/create-custom-tokens#sign_in_using_custom_tokens_on_clients
	// for more details on how to use custom tokens for client authentication.
	CreateCustomLoginToken(context.Context, *CreateCustomLoginTokenRequest) (*CreateCustomLoginTokenResponse, error)
}

// UnimplementedIdentityManagementAPIServer should be embedded to have forward compatible implementations.
type UnimplementedIdentityManagementAPIServer struct {
}

func (UnimplementedIdentityManagementAPIServer) TokenIntrospect(context.Context, *TokenIntrospectRequest) (*TokenIntrospectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenIntrospect not implemented")
}
func (UnimplementedIdentityManagementAPIServer) StartForgottenPasswordFlow(context.Context, *StartForgottenPasswordFlowRequest) (*StartForgottenPasswordFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartForgottenPasswordFlow not implemented")
}
func (UnimplementedIdentityManagementAPIServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedIdentityManagementAPIServer) StartDigitalTwinEmailVerification(context.Context, *StartDigitalTwinEmailVerificationRequest) (*StartDigitalTwinEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDigitalTwinEmailVerification not implemented")
}
func (UnimplementedIdentityManagementAPIServer) VerifyDigitalTwinEmail(context.Context, *VerifyDigitalTwinEmailRequest) (*VerifyDigitalTwinEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDigitalTwinEmail not implemented")
}
func (UnimplementedIdentityManagementAPIServer) SelfServiceTerminateSession(context.Context, *SelfServiceTerminateSessionRequest) (*SelfServiceTerminateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfServiceTerminateSession not implemented")
}
func (UnimplementedIdentityManagementAPIServer) ImportDigitalTwins(context.Context, *ImportDigitalTwinsRequest) (*ImportDigitalTwinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDigitalTwins not implemented")
}
func (UnimplementedIdentityManagementAPIServer) GetDigitalTwin(context.Context, *GetDigitalTwinRequest) (*GetDigitalTwinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDigitalTwin not implemented")
}
func (UnimplementedIdentityManagementAPIServer) ListDigitalTwins(context.Context, *ListDigitalTwinsRequest) (*ListDigitalTwinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDigitalTwins not implemented")
}
func (UnimplementedIdentityManagementAPIServer) RegisterDigitalTwinWithoutCredential(context.Context, *RegisterDigitalTwinWithoutCredentialRequest) (*RegisterDigitalTwinWithoutCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDigitalTwinWithoutCredential not implemented")
}
func (UnimplementedIdentityManagementAPIServer) PatchDigitalTwin(context.Context, *PatchDigitalTwinRequest) (*PatchDigitalTwinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDigitalTwin not implemented")
}
func (UnimplementedIdentityManagementAPIServer) DeleteDigitalTwin(context.Context, *DeleteDigitalTwinRequest) (*DeleteDigitalTwinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDigitalTwin not implemented")
}
func (UnimplementedIdentityManagementAPIServer) CheckOAuth2ConsentChallenge(context.Context, *CheckOAuth2ConsentChallengeRequest) (*CheckOAuth2ConsentChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOAuth2ConsentChallenge not implemented")
}
func (UnimplementedIdentityManagementAPIServer) CreateOAuth2ConsentVerifier(context.Context, *CreateOAuth2ConsentVerifierRequest) (*CreateOAuth2ConsentVerifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAuth2ConsentVerifier not implemented")
}
func (UnimplementedIdentityManagementAPIServer) CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (UnimplementedIdentityManagementAPIServer) CheckInvitationState(context.Context, *CheckInvitationStateRequest) (*CheckInvitationStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInvitationState not implemented")
}
func (UnimplementedIdentityManagementAPIServer) ResendInvitation(context.Context, *ResendInvitationRequest) (*ResendInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendInvitation not implemented")
}
func (UnimplementedIdentityManagementAPIServer) CancelInvitation(context.Context, *CancelInvitationRequest) (*CancelInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvitation not implemented")
}
func (UnimplementedIdentityManagementAPIServer) EnrichToken(context.Context, *EnrichTokenRequest) (*EnrichTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrichToken not implemented")
}
func (UnimplementedIdentityManagementAPIServer) CreateConsent(context.Context, *CreateConsentRequest) (*CreateConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsent not implemented")
}
func (UnimplementedIdentityManagementAPIServer) ListConsents(*ListConsentsRequest, IdentityManagementAPI_ListConsentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListConsents not implemented")
}
func (UnimplementedIdentityManagementAPIServer) RevokeConsent(context.Context, *RevokeConsentRequest) (*RevokeConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeConsent not implemented")
}
func (UnimplementedIdentityManagementAPIServer) GetPasswordCredential(context.Context, *GetPasswordCredentialRequest) (*GetPasswordCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordCredential not implemented")
}
func (UnimplementedIdentityManagementAPIServer) UpdatePasswordCredential(context.Context, *UpdatePasswordCredentialRequest) (*UpdatePasswordCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordCredential not implemented")
}
func (UnimplementedIdentityManagementAPIServer) GetAccessToken(context.Context, *GetAccessTokenRequest) (*GetAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedIdentityManagementAPIServer) SessionIntrospect(context.Context, *SessionIntrospectRequest) (*SessionIntrospectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionIntrospect not implemented")
}
func (UnimplementedIdentityManagementAPIServer) CreateCustomLoginToken(context.Context, *CreateCustomLoginTokenRequest) (*CreateCustomLoginTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomLoginToken not implemented")
}

// UnsafeIdentityManagementAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityManagementAPIServer will
// result in compilation errors.
type UnsafeIdentityManagementAPIServer interface {
	mustEmbedUnimplementedIdentityManagementAPIServer()
}

func RegisterIdentityManagementAPIServer(s grpc.ServiceRegistrar, srv IdentityManagementAPIServer) {
	s.RegisterService(&IdentityManagementAPI_ServiceDesc, srv)
}

func _IdentityManagementAPI_TokenIntrospect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenIntrospectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).TokenIntrospect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/TokenIntrospect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).TokenIntrospect(ctx, req.(*TokenIntrospectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_StartForgottenPasswordFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartForgottenPasswordFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).StartForgottenPasswordFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/StartForgottenPasswordFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).StartForgottenPasswordFlow(ctx, req.(*StartForgottenPasswordFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_StartDigitalTwinEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDigitalTwinEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).StartDigitalTwinEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/StartDigitalTwinEmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).StartDigitalTwinEmailVerification(ctx, req.(*StartDigitalTwinEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_VerifyDigitalTwinEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDigitalTwinEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).VerifyDigitalTwinEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/VerifyDigitalTwinEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).VerifyDigitalTwinEmail(ctx, req.(*VerifyDigitalTwinEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_SelfServiceTerminateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfServiceTerminateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).SelfServiceTerminateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/SelfServiceTerminateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).SelfServiceTerminateSession(ctx, req.(*SelfServiceTerminateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_ImportDigitalTwins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDigitalTwinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).ImportDigitalTwins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/ImportDigitalTwins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).ImportDigitalTwins(ctx, req.(*ImportDigitalTwinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_GetDigitalTwin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDigitalTwinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).GetDigitalTwin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/GetDigitalTwin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).GetDigitalTwin(ctx, req.(*GetDigitalTwinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_ListDigitalTwins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDigitalTwinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).ListDigitalTwins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/ListDigitalTwins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).ListDigitalTwins(ctx, req.(*ListDigitalTwinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_RegisterDigitalTwinWithoutCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDigitalTwinWithoutCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).RegisterDigitalTwinWithoutCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/RegisterDigitalTwinWithoutCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).RegisterDigitalTwinWithoutCredential(ctx, req.(*RegisterDigitalTwinWithoutCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_PatchDigitalTwin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDigitalTwinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).PatchDigitalTwin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/PatchDigitalTwin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).PatchDigitalTwin(ctx, req.(*PatchDigitalTwinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_DeleteDigitalTwin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDigitalTwinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).DeleteDigitalTwin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/DeleteDigitalTwin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).DeleteDigitalTwin(ctx, req.(*DeleteDigitalTwinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_CheckOAuth2ConsentChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOAuth2ConsentChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).CheckOAuth2ConsentChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/CheckOAuth2ConsentChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).CheckOAuth2ConsentChallenge(ctx, req.(*CheckOAuth2ConsentChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_CreateOAuth2ConsentVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOAuth2ConsentVerifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).CreateOAuth2ConsentVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/CreateOAuth2ConsentVerifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).CreateOAuth2ConsentVerifier(ctx, req.(*CreateOAuth2ConsentVerifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/CreateInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).CreateInvitation(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_CheckInvitationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInvitationStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).CheckInvitationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/CheckInvitationState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).CheckInvitationState(ctx, req.(*CheckInvitationStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_ResendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).ResendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/ResendInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).ResendInvitation(ctx, req.(*ResendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_CancelInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).CancelInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/CancelInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).CancelInvitation(ctx, req.(*CancelInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_EnrichToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).EnrichToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/EnrichToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).EnrichToken(ctx, req.(*EnrichTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_CreateConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).CreateConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/CreateConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).CreateConsent(ctx, req.(*CreateConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_ListConsents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListConsentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IdentityManagementAPIServer).ListConsents(m, &identityManagementAPIListConsentsServer{stream})
}

type IdentityManagementAPI_ListConsentsServer interface {
	Send(*ListConsentsResponse) error
	grpc.ServerStream
}

type identityManagementAPIListConsentsServer struct {
	grpc.ServerStream
}

func (x *identityManagementAPIListConsentsServer) Send(m *ListConsentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IdentityManagementAPI_RevokeConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).RevokeConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/RevokeConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).RevokeConsent(ctx, req.(*RevokeConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_GetPasswordCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).GetPasswordCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/GetPasswordCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).GetPasswordCredential(ctx, req.(*GetPasswordCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_UpdatePasswordCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).UpdatePasswordCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/UpdatePasswordCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).UpdatePasswordCredential(ctx, req.(*UpdatePasswordCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/GetAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).GetAccessToken(ctx, req.(*GetAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_SessionIntrospect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIntrospectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).SessionIntrospect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/SessionIntrospect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).SessionIntrospect(ctx, req.(*SessionIntrospectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementAPI_CreateCustomLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomLoginTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementAPIServer).CreateCustomLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.identity.v1beta2.IdentityManagementAPI/CreateCustomLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementAPIServer).CreateCustomLoginToken(ctx, req.(*CreateCustomLoginTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityManagementAPI_ServiceDesc is the grpc.ServiceDesc for IdentityManagementAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityManagementAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indykite.identity.v1beta2.IdentityManagementAPI",
	HandlerType: (*IdentityManagementAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenIntrospect",
			Handler:    _IdentityManagementAPI_TokenIntrospect_Handler,
		},
		{
			MethodName: "StartForgottenPasswordFlow",
			Handler:    _IdentityManagementAPI_StartForgottenPasswordFlow_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _IdentityManagementAPI_ChangePassword_Handler,
		},
		{
			MethodName: "StartDigitalTwinEmailVerification",
			Handler:    _IdentityManagementAPI_StartDigitalTwinEmailVerification_Handler,
		},
		{
			MethodName: "VerifyDigitalTwinEmail",
			Handler:    _IdentityManagementAPI_VerifyDigitalTwinEmail_Handler,
		},
		{
			MethodName: "SelfServiceTerminateSession",
			Handler:    _IdentityManagementAPI_SelfServiceTerminateSession_Handler,
		},
		{
			MethodName: "ImportDigitalTwins",
			Handler:    _IdentityManagementAPI_ImportDigitalTwins_Handler,
		},
		{
			MethodName: "GetDigitalTwin",
			Handler:    _IdentityManagementAPI_GetDigitalTwin_Handler,
		},
		{
			MethodName: "ListDigitalTwins",
			Handler:    _IdentityManagementAPI_ListDigitalTwins_Handler,
		},
		{
			MethodName: "RegisterDigitalTwinWithoutCredential",
			Handler:    _IdentityManagementAPI_RegisterDigitalTwinWithoutCredential_Handler,
		},
		{
			MethodName: "PatchDigitalTwin",
			Handler:    _IdentityManagementAPI_PatchDigitalTwin_Handler,
		},
		{
			MethodName: "DeleteDigitalTwin",
			Handler:    _IdentityManagementAPI_DeleteDigitalTwin_Handler,
		},
		{
			MethodName: "CheckOAuth2ConsentChallenge",
			Handler:    _IdentityManagementAPI_CheckOAuth2ConsentChallenge_Handler,
		},
		{
			MethodName: "CreateOAuth2ConsentVerifier",
			Handler:    _IdentityManagementAPI_CreateOAuth2ConsentVerifier_Handler,
		},
		{
			MethodName: "CreateInvitation",
			Handler:    _IdentityManagementAPI_CreateInvitation_Handler,
		},
		{
			MethodName: "CheckInvitationState",
			Handler:    _IdentityManagementAPI_CheckInvitationState_Handler,
		},
		{
			MethodName: "ResendInvitation",
			Handler:    _IdentityManagementAPI_ResendInvitation_Handler,
		},
		{
			MethodName: "CancelInvitation",
			Handler:    _IdentityManagementAPI_CancelInvitation_Handler,
		},
		{
			MethodName: "EnrichToken",
			Handler:    _IdentityManagementAPI_EnrichToken_Handler,
		},
		{
			MethodName: "CreateConsent",
			Handler:    _IdentityManagementAPI_CreateConsent_Handler,
		},
		{
			MethodName: "RevokeConsent",
			Handler:    _IdentityManagementAPI_RevokeConsent_Handler,
		},
		{
			MethodName: "GetPasswordCredential",
			Handler:    _IdentityManagementAPI_GetPasswordCredential_Handler,
		},
		{
			MethodName: "UpdatePasswordCredential",
			Handler:    _IdentityManagementAPI_UpdatePasswordCredential_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _IdentityManagementAPI_GetAccessToken_Handler,
		},
		{
			MethodName: "SessionIntrospect",
			Handler:    _IdentityManagementAPI_SessionIntrospect_Handler,
		},
		{
			MethodName: "CreateCustomLoginToken",
			Handler:    _IdentityManagementAPI_CreateCustomLoginToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListConsents",
			Handler:       _IdentityManagementAPI_ListConsents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "indykite/identity/v1beta2/identity_management_api.proto",
}
