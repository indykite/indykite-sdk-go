// Copyright (c) 2020 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Model contains the messages used in RPC.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: indykite/identity/v1beta2/model.proto

package identityv1beta2

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	v1beta1 "github.com/indykite/jarvis-sdk-go/gen/indykite/objects/v1beta1"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DigitalTwinState represents the state of an digital entity record.
type DigitalTwinState int32

const (
	// Default unset state.
	DigitalTwinState_DIGITAL_TWIN_STATE_INVALID DigitalTwinState = 0
	// Active entity state.
	DigitalTwinState_DIGITAL_TWIN_STATE_ACTIVE DigitalTwinState = 1
	// Temporarily suspended entity state.
	DigitalTwinState_DIGITAL_TWIN_STATE_DISABLED DigitalTwinState = 2
	// Deleted entity state, left in the system for auditing purpose only.
	DigitalTwinState_DIGITAL_TWIN_STATE_TOMBSTONE DigitalTwinState = 4
)

// Enum value maps for DigitalTwinState.
var (
	DigitalTwinState_name = map[int32]string{
		0: "DIGITAL_TWIN_STATE_INVALID",
		1: "DIGITAL_TWIN_STATE_ACTIVE",
		2: "DIGITAL_TWIN_STATE_DISABLED",
		4: "DIGITAL_TWIN_STATE_TOMBSTONE",
	}
	DigitalTwinState_value = map[string]int32{
		"DIGITAL_TWIN_STATE_INVALID":   0,
		"DIGITAL_TWIN_STATE_ACTIVE":    1,
		"DIGITAL_TWIN_STATE_DISABLED":  2,
		"DIGITAL_TWIN_STATE_TOMBSTONE": 4,
	}
)

func (x DigitalTwinState) Enum() *DigitalTwinState {
	p := new(DigitalTwinState)
	*p = x
	return p
}

func (x DigitalTwinState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalTwinState) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_identity_v1beta2_model_proto_enumTypes[0].Descriptor()
}

func (DigitalTwinState) Type() protoreflect.EnumType {
	return &file_indykite_identity_v1beta2_model_proto_enumTypes[0]
}

func (x DigitalTwinState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalTwinState.Descriptor instead.
func (DigitalTwinState) EnumDescriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{0}
}

// DigitalTwinKind represents the kind of digital entity.
type DigitalTwinKind int32

const (
	// Default unset value.
	DigitalTwinKind_DIGITAL_TWIN_KIND_INVALID DigitalTwinKind = 0
	// This is a Person.
	DigitalTwinKind_DIGITAL_TWIN_KIND_PERSON DigitalTwinKind = 1
	// This is a Service Account.
	DigitalTwinKind_DIGITAL_TWIN_KIND_SERVICE DigitalTwinKind = 2
	// This is a non living thing.
	DigitalTwinKind_DIGITAL_TWIN_KIND_THING DigitalTwinKind = 3
)

// Enum value maps for DigitalTwinKind.
var (
	DigitalTwinKind_name = map[int32]string{
		0: "DIGITAL_TWIN_KIND_INVALID",
		1: "DIGITAL_TWIN_KIND_PERSON",
		2: "DIGITAL_TWIN_KIND_SERVICE",
		3: "DIGITAL_TWIN_KIND_THING",
	}
	DigitalTwinKind_value = map[string]int32{
		"DIGITAL_TWIN_KIND_INVALID": 0,
		"DIGITAL_TWIN_KIND_PERSON":  1,
		"DIGITAL_TWIN_KIND_SERVICE": 2,
		"DIGITAL_TWIN_KIND_THING":   3,
	}
)

func (x DigitalTwinKind) Enum() *DigitalTwinKind {
	p := new(DigitalTwinKind)
	*p = x
	return p
}

func (x DigitalTwinKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalTwinKind) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_identity_v1beta2_model_proto_enumTypes[1].Descriptor()
}

func (DigitalTwinKind) Type() protoreflect.EnumType {
	return &file_indykite_identity_v1beta2_model_proto_enumTypes[1]
}

func (x DigitalTwinKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalTwinKind.Descriptor instead.
func (DigitalTwinKind) EnumDescriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{1}
}

type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_INVALID         ErrorCode = 0
	ErrorCode_ERROR_CODE_INVALID_REQUEST ErrorCode = 1
	ErrorCode_ERROR_CODE_UNAUTHORIZED    ErrorCode = 2
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_INVALID",
		1: "ERROR_CODE_INVALID_REQUEST",
		2: "ERROR_CODE_UNAUTHORIZED",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_INVALID":         0,
		"ERROR_CODE_INVALID_REQUEST": 1,
		"ERROR_CODE_UNAUTHORIZED":    2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_identity_v1beta2_model_proto_enumTypes[2].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_indykite_identity_v1beta2_model_proto_enumTypes[2]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{2}
}

type InvitationState int32

const (
	InvitationState_INVITATION_STATE_INVALID   InvitationState = 0
	InvitationState_INVITATION_STATE_IN_FUTURE InvitationState = 1
	InvitationState_INVITATION_STATE_PENDING   InvitationState = 2
	InvitationState_INVITATION_STATE_ACCEPTED  InvitationState = 3
	InvitationState_INVITATION_STATE_EXPIRED   InvitationState = 4
	InvitationState_INVITATION_STATE_CANCELLED InvitationState = 5
)

// Enum value maps for InvitationState.
var (
	InvitationState_name = map[int32]string{
		0: "INVITATION_STATE_INVALID",
		1: "INVITATION_STATE_IN_FUTURE",
		2: "INVITATION_STATE_PENDING",
		3: "INVITATION_STATE_ACCEPTED",
		4: "INVITATION_STATE_EXPIRED",
		5: "INVITATION_STATE_CANCELLED",
	}
	InvitationState_value = map[string]int32{
		"INVITATION_STATE_INVALID":   0,
		"INVITATION_STATE_IN_FUTURE": 1,
		"INVITATION_STATE_PENDING":   2,
		"INVITATION_STATE_ACCEPTED":  3,
		"INVITATION_STATE_EXPIRED":   4,
		"INVITATION_STATE_CANCELLED": 5,
	}
)

func (x InvitationState) Enum() *InvitationState {
	p := new(InvitationState)
	*p = x
	return p
}

func (x InvitationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvitationState) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_identity_v1beta2_model_proto_enumTypes[3].Descriptor()
}

func (InvitationState) Type() protoreflect.EnumType {
	return &file_indykite_identity_v1beta2_model_proto_enumTypes[3]
}

func (x InvitationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvitationState.Descriptor instead.
func (InvitationState) EnumDescriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{3}
}

type ProviderType int32

const (
	ProviderType_PROVIDER_TYPE_INVALID  ProviderType = 0
	ProviderType_PROVIDER_TYPE_PASSWORD ProviderType = 1
	ProviderType_PROVIDER_TYPE_OIDC     ProviderType = 2
	ProviderType_PROVIDER_TYPE_WEBAUTHN ProviderType = 3
	ProviderType_PROVIDER_TYPE_EMAIL    ProviderType = 4
	ProviderType_PROVIDER_TYPE_SMS      ProviderType = 5
)

// Enum value maps for ProviderType.
var (
	ProviderType_name = map[int32]string{
		0: "PROVIDER_TYPE_INVALID",
		1: "PROVIDER_TYPE_PASSWORD",
		2: "PROVIDER_TYPE_OIDC",
		3: "PROVIDER_TYPE_WEBAUTHN",
		4: "PROVIDER_TYPE_EMAIL",
		5: "PROVIDER_TYPE_SMS",
	}
	ProviderType_value = map[string]int32{
		"PROVIDER_TYPE_INVALID":  0,
		"PROVIDER_TYPE_PASSWORD": 1,
		"PROVIDER_TYPE_OIDC":     2,
		"PROVIDER_TYPE_WEBAUTHN": 3,
		"PROVIDER_TYPE_EMAIL":    4,
		"PROVIDER_TYPE_SMS":      5,
	}
)

func (x ProviderType) Enum() *ProviderType {
	p := new(ProviderType)
	*p = x
	return p
}

func (x ProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_identity_v1beta2_model_proto_enumTypes[4].Descriptor()
}

func (ProviderType) Type() protoreflect.EnumType {
	return &file_indykite_identity_v1beta2_model_proto_enumTypes[4]
}

func (x ProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderType.Descriptor instead.
func (ProviderType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{4}
}

// DigitalTwin represents a digital entity.
type DigitalTwin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id the unique credential identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// TenantId the unique identifier of the tenant of Credential.
	TenantId string           `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Kind     DigitalTwinKind  `protobuf:"varint,3,opt,name=kind,proto3,enum=indykite.identity.v1beta2.DigitalTwinKind" json:"kind,omitempty"`
	State    DigitalTwinState `protobuf:"varint,4,opt,name=state,proto3,enum=indykite.identity.v1beta2.DigitalTwinState" json:"state,omitempty"`
	// Tags define semantics for DigitalTwin.
	// First tag is considered as primary tag for use cases, when 1 tag must be extracted from the list.
	//
	// Tags defines more detailed semantic meaning, and are tightly coupled with the properties a DigitalTwin can have.
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DigitalTwin) Reset() {
	*x = DigitalTwin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalTwin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalTwin) ProtoMessage() {}

func (x *DigitalTwin) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalTwin.ProtoReflect.Descriptor instead.
func (*DigitalTwin) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{0}
}

func (x *DigitalTwin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DigitalTwin) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DigitalTwin) GetKind() DigitalTwinKind {
	if x != nil {
		return x.Kind
	}
	return DigitalTwinKind_DIGITAL_TWIN_KIND_INVALID
}

func (x *DigitalTwin) GetState() DigitalTwinState {
	if x != nil {
		return x.State
	}
	return DigitalTwinState_DIGITAL_TWIN_STATE_INVALID
}

func (x *DigitalTwin) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DigitalEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalTwin *DigitalTwin `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3" json:"digital_twin,omitempty"`
	// DigitalTwin created at property
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Properties contains the requested property values.
	Properties []*Property `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *DigitalEntity) Reset() {
	*x = DigitalEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalEntity) ProtoMessage() {}

func (x *DigitalEntity) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalEntity.ProtoReflect.Descriptor instead.
func (*DigitalEntity) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{1}
}

func (x *DigitalEntity) GetDigitalTwin() *DigitalTwin {
	if x != nil {
		return x.DigitalTwin
	}
	return nil
}

func (x *DigitalEntity) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DigitalEntity) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

// ErrorMessage see [Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807)
type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ErrorCode       `protobuf:"varint,1,opt,name=code,proto3,enum=indykite.identity.v1beta2.ErrorCode" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Detail  *structpb.Value `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorMessage) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_INVALID
}

func (x *ErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorMessage) GetDetail() *structpb.Value {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Invitation represents a user invitation object.
type Invitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TenantId specify under which tenant the user is invited
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// ReferenceId is unique external reference identifier to correlate the lifecycle events with.
	ReferenceId string `protobuf:"bytes,2,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// InviteAtTime can be empty to send invitation immediately.
	// Or can specify time in the future to postpone sending invitation message.
	InviteAtTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=invite_at_time,json=inviteAtTime,proto3" json:"invite_at_time,omitempty"`
	// ExpireTime can be empty and default lifetime is used. Or you can specify own expiration time of invitation.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Attributes passed into message sender
	MessageAttributes *v1beta1.MapValue `protobuf:"bytes,5,opt,name=message_attributes,json=messageAttributes,proto3" json:"message_attributes,omitempty"`
	// AcceptedBy specify DigitalTwin who accepted invitation
	AcceptedBy *DigitalTwin `protobuf:"bytes,8,opt,name=accepted_by,json=acceptedBy,proto3" json:"accepted_by,omitempty"`
	// State describe current state of workflow
	State InvitationState `protobuf:"varint,9,opt,name=state,proto3,enum=indykite.identity.v1beta2.InvitationState" json:"state,omitempty"`
	// Types that are assignable to Invitee:
	//	*Invitation_Email
	//	*Invitation_Mobile
	Invitee isInvitation_Invitee `protobuf_oneof:"invitee"`
}

func (x *Invitation) Reset() {
	*x = Invitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invitation) ProtoMessage() {}

func (x *Invitation) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invitation.ProtoReflect.Descriptor instead.
func (*Invitation) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{3}
}

func (x *Invitation) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Invitation) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *Invitation) GetInviteAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InviteAtTime
	}
	return nil
}

func (x *Invitation) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *Invitation) GetMessageAttributes() *v1beta1.MapValue {
	if x != nil {
		return x.MessageAttributes
	}
	return nil
}

func (x *Invitation) GetAcceptedBy() *DigitalTwin {
	if x != nil {
		return x.AcceptedBy
	}
	return nil
}

func (x *Invitation) GetState() InvitationState {
	if x != nil {
		return x.State
	}
	return InvitationState_INVITATION_STATE_INVALID
}

func (m *Invitation) GetInvitee() isInvitation_Invitee {
	if m != nil {
		return m.Invitee
	}
	return nil
}

func (x *Invitation) GetEmail() string {
	if x, ok := x.GetInvitee().(*Invitation_Email); ok {
		return x.Email
	}
	return ""
}

func (x *Invitation) GetMobile() string {
	if x, ok := x.GetInvitee().(*Invitation_Mobile); ok {
		return x.Mobile
	}
	return ""
}

type isInvitation_Invitee interface {
	isInvitation_Invitee()
}

type Invitation_Email struct {
	// Email address where invitation message will be sent.
	Email string `protobuf:"bytes,6,opt,name=email,proto3,oneof"`
}

type Invitation_Mobile struct {
	// Mobile number where sms will be sent.
	Mobile string `protobuf:"bytes,7,opt,name=mobile,proto3,oneof"`
}

func (*Invitation_Email) isInvitation_Invitee() {}

func (*Invitation_Mobile) isInvitation_Invitee() {}

// WellKnown represents important OpenID Connect discovery metadata
//
// It includes links to several endpoints (e.g. /oauth2/token) and exposes information on supported signature algorithms
// among others.
type WellKnown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier.
	// If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned
	// by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
	//
	// required: true
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// URL of the OP's OAuth 2.0 Authorization Endpoint.
	//
	// required: true
	AuthorizationEndpoint string `protobuf:"bytes,2,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	// URL of the OP's Dynamic Client Registration Endpoint.
	RegistrationEndpoint string `protobuf:"bytes,3,opt,name=registration_endpoint,json=registrationEndpoint,proto3" json:"registration_endpoint,omitempty"`
	// URL of the OP's OAuth 2.0 Token Endpoint
	//
	// required: true
	TokenEndpoint string `protobuf:"bytes,4,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	// URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate
	// signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs
	// to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use)
	// parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.
	// Although some algorithms allow the same key to be used for both signatures and encryption, doing so is
	// NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of
	// keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
	//
	// required: true
	JwksUri string `protobuf:"bytes,5,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	// JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include
	// pairwise and public.
	//
	// required: true
	// example:
	//   - public
	//   - pairwise
	SubjectTypesSupported []string `protobuf:"bytes,6,rep,name=subject_types_supported,json=subjectTypesSupported,proto3" json:"subject_types_supported,omitempty"`
	// JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID
	// Providers MUST support the code, id_token, and the token id_token Response Type values.
	//
	// required: true
	ResponseTypesSupported []string `protobuf:"bytes,7,rep,name=response_types_supported,json=responseTypesSupported,proto3" json:"response_types_supported,omitempty"`
	// JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply
	// values for. Note that for privacy or other reasons, this might not be an exhaustive list.
	ClaimsSupported []string `protobuf:"bytes,8,rep,name=claims_supported,json=claimsSupported,proto3" json:"claims_supported,omitempty"`
	// JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
	GrantTypesSupported []string `protobuf:"bytes,9,rep,name=grant_types_supported,json=grantTypesSupported,proto3" json:"grant_types_supported,omitempty"`
	// JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
	ResponseModesSupported []string `protobuf:"bytes,10,rep,name=response_modes_supported,json=responseModesSupported,proto3" json:"response_modes_supported,omitempty"`
	// URL of the OP's UserInfo Endpoint.
	UserinfoEndpoint string `protobuf:"bytes,11,opt,name=userinfo_endpoint,json=userinfoEndpoint,proto3" json:"userinfo_endpoint,omitempty"`
	// SON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST
	// support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used
	ScopesSupported []string `protobuf:"bytes,12,rep,name=scopes_supported,json=scopesSupported,proto3" json:"scopes_supported,omitempty"`
	// JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are
	// client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
	TokenEndpointAuthMethodsSupported []string `protobuf:"bytes,13,rep,name=token_endpoint_auth_methods_supported,json=tokenEndpointAuthMethodsSupported,proto3" json:"token_endpoint_auth_methods_supported,omitempty"`
	// 	JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
	UserinfoSigningAlgValuesSupported []string `protobuf:"bytes,14,rep,name=userinfo_signing_alg_values_supported,json=userinfoSigningAlgValuesSupported,proto3" json:"userinfo_signing_alg_values_supported,omitempty"`
	// JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token
	// to encode the Claims in a JWT.
	//
	// required: true
	IdTokenSigningAlgValuesSupported []string `protobuf:"bytes,15,rep,name=id_token_signing_alg_values_supported,json=idTokenSigningAlgValuesSupported,proto3" json:"id_token_signing_alg_values_supported,omitempty"`
	// 	Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
	RequestParameterSupported bool `protobuf:"varint,16,opt,name=request_parameter_supported,json=requestParameterSupported,proto3" json:"request_parameter_supported,omitempty"`
	// Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
	RequestUriParameterSupported bool `protobuf:"varint,17,opt,name=request_uri_parameter_supported,json=requestUriParameterSupported,proto3" json:"request_uri_parameter_supported,omitempty"`
	// Boolean value specifying whether the OP requires any request_uri values used to be pre-registered
	// using the request_uris registration parameter.
	RequireRequestUriRegistration bool `protobuf:"varint,18,opt,name=require_request_uri_registration,json=requireRequestUriRegistration,proto3" json:"require_request_uri_registration,omitempty"`
	// Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
	ClaimsParameterSupported bool `protobuf:"varint,19,opt,name=claims_parameter_supported,json=claimsParameterSupported,proto3" json:"claims_parameter_supported,omitempty"`
	// URL of the authorization server's OAuth 2.0 revocation endpoint.
	RevocationEndpoint string `protobuf:"bytes,20,opt,name=revocation_endpoint,json=revocationEndpoint,proto3" json:"revocation_endpoint,omitempty"`
	// Boolean value specifying whether the OP supports back-channel logout, with true indicating support.
	BackchannelLogoutSupported bool `protobuf:"varint,21,opt,name=backchannel_logout_supported,json=backchannelLogoutSupported,proto3" json:"backchannel_logout_supported,omitempty"`
	// Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP
	// session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP
	BackchannelLogoutSessionSupported bool `protobuf:"varint,22,opt,name=backchannel_logout_session_supported,json=backchannelLogoutSessionSupported,proto3" json:"backchannel_logout_session_supported,omitempty"`
	// Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
	FrontchannelLogoutSupported bool `protobuf:"varint,23,opt,name=frontchannel_logout_supported,json=frontchannelLogoutSupported,proto3" json:"frontchannel_logout_supported,omitempty"`
	// Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify
	// the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also
	// included in ID Tokens issued by the OP.
	FrontchannelLogoutSessionSupported bool `protobuf:"varint,24,opt,name=frontchannel_logout_session_supported,json=frontchannelLogoutSessionSupported,proto3" json:"frontchannel_logout_session_supported,omitempty"`
	// URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.
	EndSessionEndpoint string `protobuf:"bytes,25,opt,name=end_session_endpoint,json=endSessionEndpoint,proto3" json:"end_session_endpoint,omitempty"`
}

func (x *WellKnown) Reset() {
	*x = WellKnown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnown) ProtoMessage() {}

func (x *WellKnown) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnown.ProtoReflect.Descriptor instead.
func (*WellKnown) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{4}
}

func (x *WellKnown) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *WellKnown) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *WellKnown) GetRegistrationEndpoint() string {
	if x != nil {
		return x.RegistrationEndpoint
	}
	return ""
}

func (x *WellKnown) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *WellKnown) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *WellKnown) GetSubjectTypesSupported() []string {
	if x != nil {
		return x.SubjectTypesSupported
	}
	return nil
}

func (x *WellKnown) GetResponseTypesSupported() []string {
	if x != nil {
		return x.ResponseTypesSupported
	}
	return nil
}

func (x *WellKnown) GetClaimsSupported() []string {
	if x != nil {
		return x.ClaimsSupported
	}
	return nil
}

func (x *WellKnown) GetGrantTypesSupported() []string {
	if x != nil {
		return x.GrantTypesSupported
	}
	return nil
}

func (x *WellKnown) GetResponseModesSupported() []string {
	if x != nil {
		return x.ResponseModesSupported
	}
	return nil
}

func (x *WellKnown) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *WellKnown) GetScopesSupported() []string {
	if x != nil {
		return x.ScopesSupported
	}
	return nil
}

func (x *WellKnown) GetTokenEndpointAuthMethodsSupported() []string {
	if x != nil {
		return x.TokenEndpointAuthMethodsSupported
	}
	return nil
}

func (x *WellKnown) GetUserinfoSigningAlgValuesSupported() []string {
	if x != nil {
		return x.UserinfoSigningAlgValuesSupported
	}
	return nil
}

func (x *WellKnown) GetIdTokenSigningAlgValuesSupported() []string {
	if x != nil {
		return x.IdTokenSigningAlgValuesSupported
	}
	return nil
}

func (x *WellKnown) GetRequestParameterSupported() bool {
	if x != nil {
		return x.RequestParameterSupported
	}
	return false
}

func (x *WellKnown) GetRequestUriParameterSupported() bool {
	if x != nil {
		return x.RequestUriParameterSupported
	}
	return false
}

func (x *WellKnown) GetRequireRequestUriRegistration() bool {
	if x != nil {
		return x.RequireRequestUriRegistration
	}
	return false
}

func (x *WellKnown) GetClaimsParameterSupported() bool {
	if x != nil {
		return x.ClaimsParameterSupported
	}
	return false
}

func (x *WellKnown) GetRevocationEndpoint() string {
	if x != nil {
		return x.RevocationEndpoint
	}
	return ""
}

func (x *WellKnown) GetBackchannelLogoutSupported() bool {
	if x != nil {
		return x.BackchannelLogoutSupported
	}
	return false
}

func (x *WellKnown) GetBackchannelLogoutSessionSupported() bool {
	if x != nil {
		return x.BackchannelLogoutSessionSupported
	}
	return false
}

func (x *WellKnown) GetFrontchannelLogoutSupported() bool {
	if x != nil {
		return x.FrontchannelLogoutSupported
	}
	return false
}

func (x *WellKnown) GetFrontchannelLogoutSessionSupported() bool {
	if x != nil {
		return x.FrontchannelLogoutSessionSupported
	}
	return false
}

func (x *WellKnown) GetEndSessionEndpoint() string {
	if x != nil {
		return x.EndSessionEndpoint
	}
	return ""
}

// The token response
// [Assertion Spec](https://mattrglobal.github.io/oidc-client-bound-assertions-spec/)
type OAuth2TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The lifetime in seconds of the access token.  For
	//  example, the value "3600" denotes that the access token will
	// expire in one hour from the time the response was generated.
	ExpiresIn int64 `protobuf:"varint,1,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	// The scope of the access token
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	// To retrieve a refresh token request the id_token scope.
	IdToken string `protobuf:"bytes,3,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
	// The access token issued by the authorization server.
	AccessToken string `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// The refresh token, which can be used to obtain new
	// access tokens. To retrieve it add the scope "offline" to your access token request.
	RefreshToken string `protobuf:"bytes,5,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	// The type of the token issued
	TokenType string `protobuf:"bytes,6,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
}

func (x *OAuth2TokenResponse) Reset() {
	*x = OAuth2TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2TokenResponse) ProtoMessage() {}

func (x *OAuth2TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2TokenResponse.ProtoReflect.Descriptor instead.
func (*OAuth2TokenResponse) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{5}
}

func (x *OAuth2TokenResponse) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *OAuth2TokenResponse) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *OAuth2TokenResponse) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

func (x *OAuth2TokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *OAuth2TokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *OAuth2TokenResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

type FlushInactiveOAuth2TokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NotAfter sets after which point tokens should not be flushed. This is useful when you want to keep a history
	// of recently issued tokens for auditing.
	NotAfter int64 `protobuf:"varint,1,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
}

func (x *FlushInactiveOAuth2TokensRequest) Reset() {
	*x = FlushInactiveOAuth2TokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushInactiveOAuth2TokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushInactiveOAuth2TokensRequest) ProtoMessage() {}

func (x *FlushInactiveOAuth2TokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushInactiveOAuth2TokensRequest.ProtoReflect.Descriptor instead.
func (*FlushInactiveOAuth2TokensRequest) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{6}
}

func (x *FlushInactiveOAuth2TokensRequest) GetNotAfter() int64 {
	if x != nil {
		return x.NotAfter
	}
	return 0
}

type IdentityTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the top level Customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// UUID of Application Space in Customer.
	AppSpaceId string `protobuf:"bytes,2,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// UUID of Application in Application Space.
	ApplicationId string `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// UUID of the Subject in Application Space.
	Subject *DigitalTwin `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	// DigitalTwin of impersonated subject in Application Space.
	// See: https://datatracker.ietf.org/doc/html/rfc8693
	Impersonated *DigitalTwin `protobuf:"bytes,5,opt,name=impersonated,proto3" json:"impersonated,omitempty"`
	// IssueTime indicating when this token was originally issued.
	IssueTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issue_time,json=issueTime,proto3" json:"issue_time,omitempty"`
	// Expiration time of token
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// AuthenticatedAtTime represents the time of authentication
	AuthenticationTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=authentication_time,json=authenticationTime,proto3" json:"authentication_time,omitempty"`
	// ProviderInfo is the collection of credential providers used to prove.
	ProviderInfo []*ProviderInfo `protobuf:"bytes,9,rep,name=provider_info,json=providerInfo,proto3" json:"provider_info,omitempty"`
	// SessionClaims is a collection of values used to enrich the session.
	SessionClaims *structpb.Struct `protobuf:"bytes,10,opt,name=session_claims,json=sessionClaims,proto3" json:"session_claims,omitempty"`
	// SessionClaims is a collection of values used to enrich the token.
	TokenClaims *structpb.Struct `protobuf:"bytes,11,opt,name=token_claims,json=tokenClaims,proto3" json:"token_claims,omitempty"`
}

func (x *IdentityTokenInfo) Reset() {
	*x = IdentityTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityTokenInfo) ProtoMessage() {}

func (x *IdentityTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityTokenInfo.ProtoReflect.Descriptor instead.
func (*IdentityTokenInfo) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{7}
}

func (x *IdentityTokenInfo) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *IdentityTokenInfo) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *IdentityTokenInfo) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *IdentityTokenInfo) GetSubject() *DigitalTwin {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *IdentityTokenInfo) GetImpersonated() *DigitalTwin {
	if x != nil {
		return x.Impersonated
	}
	return nil
}

func (x *IdentityTokenInfo) GetIssueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueTime
	}
	return nil
}

func (x *IdentityTokenInfo) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *IdentityTokenInfo) GetAuthenticationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AuthenticationTime
	}
	return nil
}

func (x *IdentityTokenInfo) GetProviderInfo() []*ProviderInfo {
	if x != nil {
		return x.ProviderInfo
	}
	return nil
}

func (x *IdentityTokenInfo) GetSessionClaims() *structpb.Struct {
	if x != nil {
		return x.SessionClaims
	}
	return nil
}

func (x *IdentityTokenInfo) GetTokenClaims() *structpb.Struct {
	if x != nil {
		return x.TokenClaims
	}
	return nil
}

type ProviderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type represent the Provider type:
	Type ProviderType `protobuf:"varint,1,opt,name=type,proto3,enum=indykite.identity.v1beta2.ProviderType" json:"type,omitempty"`
	// Issuer is the identifier if available of Provider who verified the possession of credentials and issued a grant.
	//
	// Example: ["indykite.id", "google.com"]
	//
	// [did registries](https://w3c.github.io/did-spec-registries/)
	Issuer string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *ProviderInfo) Reset() {
	*x = ProviderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderInfo) ProtoMessage() {}

func (x *ProviderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderInfo.ProtoReflect.Descriptor instead.
func (*ProviderInfo) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{8}
}

func (x *ProviderInfo) GetType() ProviderType {
	if x != nil {
		return x.Type
	}
	return ProviderType_PROVIDER_TYPE_INVALID
}

func (x *ProviderInfo) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type UserInfoResponsePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subject - Identifier for the End-User at the IssuerURL.
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
	GivenName string `protobuf:"bytes,3,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
	FamilyName string `protobuf:"bytes,4,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
	MiddleName string `protobuf:"bytes,5,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	// Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
	Nickname string `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace.
	PreferredUsername string `protobuf:"bytes,7,opt,name=preferred_username,json=preferredUsername,proto3" json:"preferred_username,omitempty"`
	// URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
	Profile string `protobuf:"bytes,8,opt,name=profile,proto3" json:"profile,omitempty"`
	// URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
	Picture string `protobuf:"bytes,9,opt,name=picture,proto3" json:"picture,omitempty"`
	// URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
	Website string `protobuf:"bytes,10,opt,name=website,proto3" json:"website,omitempty"`
	// End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
	Email string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	// True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
	EmailVerified bool `protobuf:"varint,12,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	// End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
	Gender string `protobuf:"bytes,13,opt,name=gender,proto3" json:"gender,omitempty"`
	// End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
	Birthdate string `protobuf:"bytes,14,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	// String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
	Zoneinfo string `protobuf:"bytes,15,opt,name=zoneinfo,proto3" json:"zoneinfo,omitempty"`
	// End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
	Locale string `protobuf:"bytes,16,opt,name=locale,proto3" json:"locale,omitempty"`
	// End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
	PhoneNumber string `protobuf:"bytes,17,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
	PhoneNumberVerified bool `protobuf:"varint,18,opt,name=phone_number_verified,json=phoneNumberVerified,proto3" json:"phone_number_verified,omitempty"`
	// Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
	UpdatedAt int64 `protobuf:"varint,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UserInfoResponsePayload) Reset() {
	*x = UserInfoResponsePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoResponsePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoResponsePayload) ProtoMessage() {}

func (x *UserInfoResponsePayload) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoResponsePayload.ProtoReflect.Descriptor instead.
func (*UserInfoResponsePayload) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{9}
}

func (x *UserInfoResponsePayload) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *UserInfoResponsePayload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfoResponsePayload) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *UserInfoResponsePayload) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *UserInfoResponsePayload) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *UserInfoResponsePayload) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoResponsePayload) GetPreferredUsername() string {
	if x != nil {
		return x.PreferredUsername
	}
	return ""
}

func (x *UserInfoResponsePayload) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *UserInfoResponsePayload) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *UserInfoResponsePayload) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *UserInfoResponsePayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfoResponsePayload) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfoResponsePayload) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfoResponsePayload) GetBirthdate() string {
	if x != nil {
		return x.Birthdate
	}
	return ""
}

func (x *UserInfoResponsePayload) GetZoneinfo() string {
	if x != nil {
		return x.Zoneinfo
	}
	return ""
}

func (x *UserInfoResponsePayload) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *UserInfoResponsePayload) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserInfoResponsePayload) GetPhoneNumberVerified() bool {
	if x != nil {
		return x.PhoneNumberVerified
	}
	return false
}

func (x *UserInfoResponsePayload) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// PostalAddress message stores the mailing address.
// See more at [PostalAddress](https://schema.org/PostalAddress)
type PostalAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AddressType is not just a free text for home work home preferred work preferred
	AddressType string `protobuf:"bytes,15,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	// AddressCountry is the displayName of the country if available.
	AddressCountry string `protobuf:"bytes,1,opt,name=address_country,json=addressCountry,proto3" json:"address_country,omitempty"`
	// ISO 3166-1 alpha-2 country code.
	AddressCountryCode string `protobuf:"bytes,2,opt,name=address_country_code,json=addressCountryCode,proto3" json:"address_country_code,omitempty"`
	// AddressLocality is the locality in which the street address is, and which is in the region. For example, Mountain View.
	AddressLocality string `protobuf:"bytes,3,opt,name=address_locality,json=addressLocality,proto3" json:"address_locality,omitempty"`
	// AddressRegion is the region in which the locality is, and which is in the country.
	// For example, California or another appropriate first-level Administrative division
	AddressRegion string `protobuf:"bytes,4,opt,name=address_region,json=addressRegion,proto3" json:"address_region,omitempty"`
	// PostOfficeBoxNumber is the post office box number for PO box addresses.
	PostOfficeBoxNumber string `protobuf:"bytes,5,opt,name=post_office_box_number,json=postOfficeBoxNumber,proto3" json:"post_office_box_number,omitempty"`
	// PostalCode is the postal code. For example, 94043.
	PostalCode    string `protobuf:"bytes,6,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	StreetAddress string `protobuf:"bytes,7,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	// formatted postal address
	Formatted string `protobuf:"bytes,8,opt,name=formatted,proto3" json:"formatted,omitempty"`
}

func (x *PostalAddress) Reset() {
	*x = PostalAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostalAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostalAddress) ProtoMessage() {}

func (x *PostalAddress) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostalAddress.ProtoReflect.Descriptor instead.
func (*PostalAddress) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_model_proto_rawDescGZIP(), []int{10}
}

func (x *PostalAddress) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *PostalAddress) GetAddressCountry() string {
	if x != nil {
		return x.AddressCountry
	}
	return ""
}

func (x *PostalAddress) GetAddressCountryCode() string {
	if x != nil {
		return x.AddressCountryCode
	}
	return ""
}

func (x *PostalAddress) GetAddressLocality() string {
	if x != nil {
		return x.AddressLocality
	}
	return ""
}

func (x *PostalAddress) GetAddressRegion() string {
	if x != nil {
		return x.AddressRegion
	}
	return ""
}

func (x *PostalAddress) GetPostOfficeBoxNumber() string {
	if x != nil {
		return x.PostOfficeBoxNumber
	}
	return ""
}

func (x *PostalAddress) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *PostalAddress) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *PostalAddress) GetFormatted() string {
	if x != nil {
		return x.Formatted
	}
	return ""
}

var File_indykite_identity_v1beta2_model_proto protoreflect.FileDescriptor

var file_indykite_identity_v1beta2_model_proto_rawDesc = []byte{
	0x0a, 0x25, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2a, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x02,
	0x0a, 0x0b, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x36, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21,
	0x10, 0x1b, 0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32, 0x37, 0x2c, 0x31, 0x30, 0x30, 0x7d,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x10,
	0x1b, 0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32, 0x37, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x10, 0x20, 0x18, 0x01, 0x22, 0x16, 0x72, 0x14, 0x18,
	0x40, 0x32, 0x10, 0x5e, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b,
	0x29, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0c, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x93, 0x04,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x10, 0x1b, 0x18, 0x64, 0x32, 0x1b, 0x5e, 0x67, 0x69, 0x64,
	0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x32,
	0x37, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54,
	0x77, 0x69, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x22, 0xc4, 0x0b, 0x0a, 0x09, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72, 0x69, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4f,
	0x0a, 0x25, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x20, 0x69,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x3e, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x72, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x55, 0x72, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x1a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a,
	0x13, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x1c, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x4f, 0x0a, 0x24, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21,
	0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x1d, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x25, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x20, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x9a, 0x05, 0x0a, 0x11, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54,
	0x77, 0x69, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0c,
	0x69, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0x63, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0xd6, 0x04, 0x0a,
	0x17, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x7a,
	0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a,
	0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf8, 0x0b, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6c, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xfa,
	0x42, 0x46, 0x72, 0x44, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xfe, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x9e, 0x08, 0x0a, 0x14, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xeb, 0x07, 0xfa, 0x42, 0xe7, 0x07, 0x72, 0xe4,
	0x07, 0x52, 0x02, 0x41, 0x46, 0x52, 0x02, 0x41, 0x58, 0x52, 0x02, 0x41, 0x4c, 0x52, 0x02, 0x44,
	0x5a, 0x52, 0x02, 0x41, 0x53, 0x52, 0x02, 0x41, 0x44, 0x52, 0x02, 0x41, 0x4f, 0x52, 0x02, 0x41,
	0x49, 0x52, 0x02, 0x41, 0x51, 0x52, 0x02, 0x41, 0x47, 0x52, 0x02, 0x41, 0x52, 0x52, 0x02, 0x41,
	0x4d, 0x52, 0x02, 0x41, 0x57, 0x52, 0x02, 0x41, 0x55, 0x52, 0x02, 0x41, 0x54, 0x52, 0x02, 0x41,
	0x5a, 0x52, 0x02, 0x42, 0x53, 0x52, 0x02, 0x42, 0x48, 0x52, 0x02, 0x42, 0x44, 0x52, 0x02, 0x42,
	0x42, 0x52, 0x02, 0x42, 0x59, 0x52, 0x02, 0x42, 0x45, 0x52, 0x02, 0x42, 0x5a, 0x52, 0x02, 0x42,
	0x4a, 0x52, 0x02, 0x42, 0x4d, 0x52, 0x02, 0x42, 0x54, 0x52, 0x02, 0x42, 0x4f, 0x52, 0x02, 0x42,
	0x51, 0x52, 0x02, 0x42, 0x41, 0x52, 0x02, 0x42, 0x57, 0x52, 0x02, 0x42, 0x56, 0x52, 0x02, 0x42,
	0x52, 0x52, 0x02, 0x49, 0x4f, 0x52, 0x02, 0x42, 0x4e, 0x52, 0x02, 0x42, 0x47, 0x52, 0x02, 0x42,
	0x46, 0x52, 0x02, 0x42, 0x49, 0x52, 0x02, 0x4b, 0x48, 0x52, 0x02, 0x43, 0x4d, 0x52, 0x02, 0x43,
	0x41, 0x52, 0x02, 0x43, 0x56, 0x52, 0x02, 0x4b, 0x59, 0x52, 0x02, 0x43, 0x46, 0x52, 0x02, 0x54,
	0x44, 0x52, 0x02, 0x43, 0x4c, 0x52, 0x02, 0x43, 0x4e, 0x52, 0x02, 0x43, 0x58, 0x52, 0x02, 0x43,
	0x43, 0x52, 0x02, 0x43, 0x4f, 0x52, 0x02, 0x4b, 0x4d, 0x52, 0x02, 0x43, 0x47, 0x52, 0x02, 0x43,
	0x44, 0x52, 0x02, 0x43, 0x4b, 0x52, 0x02, 0x43, 0x52, 0x52, 0x02, 0x43, 0x49, 0x52, 0x02, 0x48,
	0x52, 0x52, 0x02, 0x43, 0x55, 0x52, 0x02, 0x43, 0x57, 0x52, 0x02, 0x43, 0x59, 0x52, 0x02, 0x43,
	0x5a, 0x52, 0x02, 0x44, 0x4b, 0x52, 0x02, 0x44, 0x4a, 0x52, 0x02, 0x44, 0x4d, 0x52, 0x02, 0x44,
	0x4f, 0x52, 0x02, 0x45, 0x43, 0x52, 0x02, 0x45, 0x47, 0x52, 0x02, 0x53, 0x56, 0x52, 0x02, 0x47,
	0x51, 0x52, 0x02, 0x45, 0x52, 0x52, 0x02, 0x45, 0x45, 0x52, 0x02, 0x45, 0x54, 0x52, 0x02, 0x46,
	0x4b, 0x52, 0x02, 0x46, 0x4f, 0x52, 0x02, 0x46, 0x4a, 0x52, 0x02, 0x46, 0x49, 0x52, 0x02, 0x46,
	0x52, 0x52, 0x02, 0x47, 0x46, 0x52, 0x02, 0x50, 0x46, 0x52, 0x02, 0x54, 0x46, 0x52, 0x02, 0x47,
	0x41, 0x52, 0x02, 0x47, 0x4d, 0x52, 0x02, 0x47, 0x45, 0x52, 0x02, 0x44, 0x45, 0x52, 0x02, 0x47,
	0x48, 0x52, 0x02, 0x47, 0x49, 0x52, 0x02, 0x47, 0x52, 0x52, 0x02, 0x47, 0x4c, 0x52, 0x02, 0x47,
	0x44, 0x52, 0x02, 0x47, 0x50, 0x52, 0x02, 0x47, 0x55, 0x52, 0x02, 0x47, 0x54, 0x52, 0x02, 0x47,
	0x47, 0x52, 0x02, 0x47, 0x4e, 0x52, 0x02, 0x47, 0x57, 0x52, 0x02, 0x47, 0x59, 0x52, 0x02, 0x48,
	0x54, 0x52, 0x02, 0x48, 0x4d, 0x52, 0x02, 0x56, 0x41, 0x52, 0x02, 0x48, 0x4e, 0x52, 0x02, 0x48,
	0x4b, 0x52, 0x02, 0x48, 0x55, 0x52, 0x02, 0x49, 0x53, 0x52, 0x02, 0x49, 0x4e, 0x52, 0x02, 0x49,
	0x44, 0x52, 0x02, 0x49, 0x52, 0x52, 0x02, 0x49, 0x51, 0x52, 0x02, 0x49, 0x45, 0x52, 0x02, 0x49,
	0x4d, 0x52, 0x02, 0x49, 0x4c, 0x52, 0x02, 0x49, 0x54, 0x52, 0x02, 0x4a, 0x4d, 0x52, 0x02, 0x4a,
	0x50, 0x52, 0x02, 0x4a, 0x45, 0x52, 0x02, 0x4a, 0x4f, 0x52, 0x02, 0x4b, 0x5a, 0x52, 0x02, 0x4b,
	0x45, 0x52, 0x02, 0x4b, 0x49, 0x52, 0x02, 0x4b, 0x50, 0x52, 0x02, 0x4b, 0x52, 0x52, 0x02, 0x4b,
	0x57, 0x52, 0x02, 0x4b, 0x47, 0x52, 0x02, 0x4c, 0x41, 0x52, 0x02, 0x4c, 0x56, 0x52, 0x02, 0x4c,
	0x42, 0x52, 0x02, 0x4c, 0x53, 0x52, 0x02, 0x4c, 0x52, 0x52, 0x02, 0x4c, 0x59, 0x52, 0x02, 0x4c,
	0x49, 0x52, 0x02, 0x4c, 0x54, 0x52, 0x02, 0x4c, 0x55, 0x52, 0x02, 0x4d, 0x4f, 0x52, 0x02, 0x4d,
	0x4b, 0x52, 0x02, 0x4d, 0x47, 0x52, 0x02, 0x4d, 0x57, 0x52, 0x02, 0x4d, 0x59, 0x52, 0x02, 0x4d,
	0x56, 0x52, 0x02, 0x4d, 0x4c, 0x52, 0x02, 0x4d, 0x54, 0x52, 0x02, 0x4d, 0x48, 0x52, 0x02, 0x4d,
	0x51, 0x52, 0x02, 0x4d, 0x52, 0x52, 0x02, 0x4d, 0x55, 0x52, 0x02, 0x59, 0x54, 0x52, 0x02, 0x4d,
	0x58, 0x52, 0x02, 0x46, 0x4d, 0x52, 0x02, 0x4d, 0x44, 0x52, 0x02, 0x4d, 0x43, 0x52, 0x02, 0x4d,
	0x4e, 0x52, 0x02, 0x4d, 0x45, 0x52, 0x02, 0x4d, 0x53, 0x52, 0x02, 0x4d, 0x41, 0x52, 0x02, 0x4d,
	0x5a, 0x52, 0x02, 0x4d, 0x4d, 0x52, 0x02, 0x4e, 0x41, 0x52, 0x02, 0x4e, 0x52, 0x52, 0x02, 0x4e,
	0x50, 0x52, 0x02, 0x4e, 0x4c, 0x52, 0x02, 0x4e, 0x43, 0x52, 0x02, 0x4e, 0x5a, 0x52, 0x02, 0x4e,
	0x49, 0x52, 0x02, 0x4e, 0x45, 0x52, 0x02, 0x4e, 0x47, 0x52, 0x02, 0x4e, 0x55, 0x52, 0x02, 0x4e,
	0x46, 0x52, 0x02, 0x4d, 0x50, 0x52, 0x02, 0x4e, 0x4f, 0x52, 0x02, 0x4f, 0x4d, 0x52, 0x02, 0x50,
	0x4b, 0x52, 0x02, 0x50, 0x57, 0x52, 0x02, 0x50, 0x53, 0x52, 0x02, 0x50, 0x41, 0x52, 0x02, 0x50,
	0x47, 0x52, 0x02, 0x50, 0x59, 0x52, 0x02, 0x50, 0x45, 0x52, 0x02, 0x50, 0x48, 0x52, 0x02, 0x50,
	0x4e, 0x52, 0x02, 0x50, 0x4c, 0x52, 0x02, 0x50, 0x54, 0x52, 0x02, 0x50, 0x52, 0x52, 0x02, 0x51,
	0x41, 0x52, 0x02, 0x52, 0x45, 0x52, 0x02, 0x52, 0x4f, 0x52, 0x02, 0x52, 0x55, 0x52, 0x02, 0x52,
	0x57, 0x52, 0x02, 0x42, 0x4c, 0x52, 0x02, 0x53, 0x48, 0x52, 0x02, 0x4b, 0x4e, 0x52, 0x02, 0x4c,
	0x43, 0x52, 0x02, 0x4d, 0x46, 0x52, 0x02, 0x50, 0x4d, 0x52, 0x02, 0x56, 0x43, 0x52, 0x02, 0x57,
	0x53, 0x52, 0x02, 0x53, 0x4d, 0x52, 0x02, 0x53, 0x54, 0x52, 0x02, 0x53, 0x41, 0x52, 0x02, 0x53,
	0x4e, 0x52, 0x02, 0x52, 0x53, 0x52, 0x02, 0x53, 0x43, 0x52, 0x02, 0x53, 0x4c, 0x52, 0x02, 0x53,
	0x47, 0x52, 0x02, 0x53, 0x58, 0x52, 0x02, 0x53, 0x4b, 0x52, 0x02, 0x53, 0x49, 0x52, 0x02, 0x53,
	0x42, 0x52, 0x02, 0x53, 0x4f, 0x52, 0x02, 0x5a, 0x41, 0x52, 0x02, 0x47, 0x53, 0x52, 0x02, 0x53,
	0x53, 0x52, 0x02, 0x45, 0x53, 0x52, 0x02, 0x4c, 0x4b, 0x52, 0x02, 0x53, 0x44, 0x52, 0x02, 0x53,
	0x52, 0x52, 0x02, 0x53, 0x4a, 0x52, 0x02, 0x53, 0x5a, 0x52, 0x02, 0x53, 0x45, 0x52, 0x02, 0x43,
	0x48, 0x52, 0x02, 0x53, 0x59, 0x52, 0x02, 0x54, 0x57, 0x52, 0x02, 0x54, 0x4a, 0x52, 0x02, 0x54,
	0x5a, 0x52, 0x02, 0x54, 0x48, 0x52, 0x02, 0x54, 0x4c, 0x52, 0x02, 0x54, 0x47, 0x52, 0x02, 0x54,
	0x4b, 0x52, 0x02, 0x54, 0x4f, 0x52, 0x02, 0x54, 0x54, 0x52, 0x02, 0x54, 0x4e, 0x52, 0x02, 0x54,
	0x52, 0x52, 0x02, 0x54, 0x4d, 0x52, 0x02, 0x54, 0x43, 0x52, 0x02, 0x54, 0x56, 0x52, 0x02, 0x55,
	0x47, 0x52, 0x02, 0x55, 0x41, 0x52, 0x02, 0x41, 0x45, 0x52, 0x02, 0x47, 0x42, 0x52, 0x02, 0x55,
	0x53, 0x52, 0x02, 0x55, 0x4d, 0x52, 0x02, 0x55, 0x59, 0x52, 0x02, 0x55, 0x5a, 0x52, 0x02, 0x56,
	0x55, 0x52, 0x02, 0x56, 0x45, 0x52, 0x02, 0x56, 0x4e, 0x52, 0x02, 0x56, 0x47, 0x52, 0x02, 0x56,
	0x49, 0x52, 0x02, 0x57, 0x46, 0x52, 0x02, 0x45, 0x48, 0x52, 0x02, 0x59, 0x45, 0x52, 0x02, 0x5a,
	0x4d, 0x52, 0x02, 0x5a, 0x57, 0x52, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x10, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xfe, 0x01, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2f,
	0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xfe, 0x01,
	0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x62,
	0x6f, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xfe, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x2a, 0x94, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c,
	0x5f, 0x54, 0x57, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c,
	0x5f, 0x54, 0x57, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f,
	0x54, 0x57, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c,
	0x5f, 0x54, 0x57, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4d, 0x42,
	0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x8a, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49,
	0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x47, 0x49,
	0x54, 0x41, 0x4c, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x47, 0x49, 0x54,
	0x41, 0x4c, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x48, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x2a, 0x60, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xca, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x2a, 0xa9, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x49, 0x44,
	0x43, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x41, 0x55, 0x54, 0x48, 0x4e, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x05, 0x42,
	0x82, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x3b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0xca, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xe2, 0x02,
	0x25, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x3a, 0x3a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_identity_v1beta2_model_proto_rawDescOnce sync.Once
	file_indykite_identity_v1beta2_model_proto_rawDescData = file_indykite_identity_v1beta2_model_proto_rawDesc
)

func file_indykite_identity_v1beta2_model_proto_rawDescGZIP() []byte {
	file_indykite_identity_v1beta2_model_proto_rawDescOnce.Do(func() {
		file_indykite_identity_v1beta2_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_identity_v1beta2_model_proto_rawDescData)
	})
	return file_indykite_identity_v1beta2_model_proto_rawDescData
}

var file_indykite_identity_v1beta2_model_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_indykite_identity_v1beta2_model_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_indykite_identity_v1beta2_model_proto_goTypes = []interface{}{
	(DigitalTwinState)(0),                    // 0: indykite.identity.v1beta2.DigitalTwinState
	(DigitalTwinKind)(0),                     // 1: indykite.identity.v1beta2.DigitalTwinKind
	(ErrorCode)(0),                           // 2: indykite.identity.v1beta2.ErrorCode
	(InvitationState)(0),                     // 3: indykite.identity.v1beta2.InvitationState
	(ProviderType)(0),                        // 4: indykite.identity.v1beta2.ProviderType
	(*DigitalTwin)(nil),                      // 5: indykite.identity.v1beta2.DigitalTwin
	(*DigitalEntity)(nil),                    // 6: indykite.identity.v1beta2.DigitalEntity
	(*ErrorMessage)(nil),                     // 7: indykite.identity.v1beta2.ErrorMessage
	(*Invitation)(nil),                       // 8: indykite.identity.v1beta2.Invitation
	(*WellKnown)(nil),                        // 9: indykite.identity.v1beta2.WellKnown
	(*OAuth2TokenResponse)(nil),              // 10: indykite.identity.v1beta2.OAuth2TokenResponse
	(*FlushInactiveOAuth2TokensRequest)(nil), // 11: indykite.identity.v1beta2.FlushInactiveOAuth2TokensRequest
	(*IdentityTokenInfo)(nil),                // 12: indykite.identity.v1beta2.IdentityTokenInfo
	(*ProviderInfo)(nil),                     // 13: indykite.identity.v1beta2.ProviderInfo
	(*UserInfoResponsePayload)(nil),          // 14: indykite.identity.v1beta2.UserInfoResponsePayload
	(*PostalAddress)(nil),                    // 15: indykite.identity.v1beta2.PostalAddress
	(*timestamppb.Timestamp)(nil),            // 16: google.protobuf.Timestamp
	(*Property)(nil),                         // 17: indykite.identity.v1beta2.Property
	(*structpb.Value)(nil),                   // 18: google.protobuf.Value
	(*v1beta1.MapValue)(nil),                 // 19: indykite.objects.v1beta1.MapValue
	(*structpb.Struct)(nil),                  // 20: google.protobuf.Struct
}
var file_indykite_identity_v1beta2_model_proto_depIdxs = []int32{
	1,  // 0: indykite.identity.v1beta2.DigitalTwin.kind:type_name -> indykite.identity.v1beta2.DigitalTwinKind
	0,  // 1: indykite.identity.v1beta2.DigitalTwin.state:type_name -> indykite.identity.v1beta2.DigitalTwinState
	5,  // 2: indykite.identity.v1beta2.DigitalEntity.digital_twin:type_name -> indykite.identity.v1beta2.DigitalTwin
	16, // 3: indykite.identity.v1beta2.DigitalEntity.create_time:type_name -> google.protobuf.Timestamp
	17, // 4: indykite.identity.v1beta2.DigitalEntity.properties:type_name -> indykite.identity.v1beta2.Property
	2,  // 5: indykite.identity.v1beta2.ErrorMessage.code:type_name -> indykite.identity.v1beta2.ErrorCode
	18, // 6: indykite.identity.v1beta2.ErrorMessage.detail:type_name -> google.protobuf.Value
	16, // 7: indykite.identity.v1beta2.Invitation.invite_at_time:type_name -> google.protobuf.Timestamp
	16, // 8: indykite.identity.v1beta2.Invitation.expire_time:type_name -> google.protobuf.Timestamp
	19, // 9: indykite.identity.v1beta2.Invitation.message_attributes:type_name -> indykite.objects.v1beta1.MapValue
	5,  // 10: indykite.identity.v1beta2.Invitation.accepted_by:type_name -> indykite.identity.v1beta2.DigitalTwin
	3,  // 11: indykite.identity.v1beta2.Invitation.state:type_name -> indykite.identity.v1beta2.InvitationState
	5,  // 12: indykite.identity.v1beta2.IdentityTokenInfo.subject:type_name -> indykite.identity.v1beta2.DigitalTwin
	5,  // 13: indykite.identity.v1beta2.IdentityTokenInfo.impersonated:type_name -> indykite.identity.v1beta2.DigitalTwin
	16, // 14: indykite.identity.v1beta2.IdentityTokenInfo.issue_time:type_name -> google.protobuf.Timestamp
	16, // 15: indykite.identity.v1beta2.IdentityTokenInfo.expire_time:type_name -> google.protobuf.Timestamp
	16, // 16: indykite.identity.v1beta2.IdentityTokenInfo.authentication_time:type_name -> google.protobuf.Timestamp
	13, // 17: indykite.identity.v1beta2.IdentityTokenInfo.provider_info:type_name -> indykite.identity.v1beta2.ProviderInfo
	20, // 18: indykite.identity.v1beta2.IdentityTokenInfo.session_claims:type_name -> google.protobuf.Struct
	20, // 19: indykite.identity.v1beta2.IdentityTokenInfo.token_claims:type_name -> google.protobuf.Struct
	4,  // 20: indykite.identity.v1beta2.ProviderInfo.type:type_name -> indykite.identity.v1beta2.ProviderType
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_indykite_identity_v1beta2_model_proto_init() }
func file_indykite_identity_v1beta2_model_proto_init() {
	if File_indykite_identity_v1beta2_model_proto != nil {
		return
	}
	file_indykite_identity_v1beta2_attributes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_indykite_identity_v1beta2_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalTwin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WellKnown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushInactiveOAuth2TokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoResponsePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostalAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_identity_v1beta2_model_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Invitation_Email)(nil),
		(*Invitation_Mobile)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_identity_v1beta2_model_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_identity_v1beta2_model_proto_goTypes,
		DependencyIndexes: file_indykite_identity_v1beta2_model_proto_depIdxs,
		EnumInfos:         file_indykite_identity_v1beta2_model_proto_enumTypes,
		MessageInfos:      file_indykite_identity_v1beta2_model_proto_msgTypes,
	}.Build()
	File_indykite_identity_v1beta2_model_proto = out.File
	file_indykite_identity_v1beta2_model_proto_rawDesc = nil
	file_indykite_identity_v1beta2_model_proto_goTypes = nil
	file_indykite_identity_v1beta2_model_proto_depIdxs = nil
}
