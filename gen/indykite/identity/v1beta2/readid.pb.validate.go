// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/identity/v1beta2/readid.proto

package identityv1beta2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReadIDSession with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadIDSession) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadIDSession with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadIDSessionMultiError, or
// nil if none found.
func (m *ReadIDSession) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadIDSession) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for OpaqueId

	if all {
		switch v := interface{}(m.GetIdentityData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadIDSessionValidationError{
					field:  "IdentityData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadIDSessionValidationError{
					field:  "IdentityData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentityData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadIDSessionValidationError{
				field:  "IdentityData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadIDSessionValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadIDSessionValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadIDSessionValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeviceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadIDSessionValidationError{
					field:  "DeviceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadIDSessionValidationError{
					field:  "DeviceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeviceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadIDSessionValidationError{
				field:  "DeviceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClientId

	// no validation rules for CustomerApp

	// no validation rules for DeviceId

	// no validation rules for ExpiryDate

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return ReadIDSessionMultiError(errors)
	}

	return nil
}

// ReadIDSessionMultiError is an error wrapping multiple validation errors
// returned by ReadIDSession.ValidateAll() if the designated constraints
// aren't met.
type ReadIDSessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadIDSessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadIDSessionMultiError) AllErrors() []error { return m }

// ReadIDSessionValidationError is the validation error returned by
// ReadIDSession.Validate if the designated constraints aren't met.
type ReadIDSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadIDSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadIDSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadIDSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadIDSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadIDSessionValidationError) ErrorName() string { return "ReadIDSessionValidationError" }

// Error satisfies the builtin error interface
func (e ReadIDSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadIDSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadIDSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadIDSessionValidationError{}

// Validate checks the field values on ReadIDConsolidatedIdentityData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadIDConsolidatedIdentityData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadIDConsolidatedIdentityData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadIDConsolidatedIdentityDataMultiError, or nil if none found.
func (m *ReadIDConsolidatedIdentityData) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadIDConsolidatedIdentityData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChipCloneDetection

	// no validation rules for ChipCloneDetectionSource

	// no validation rules for ChipCloneDetectionSourceName

	// no validation rules for ChipVerification

	// no validation rules for ChipVerificationSource

	// no validation rules for ChipVerificationSourceName

	// no validation rules for DateOfBirth

	// no validation rules for DateOfBirthSource

	// no validation rules for DateOfBirthSourceName

	// no validation rules for DateOfExpiry

	// no validation rules for DateOfExpirySource

	// no validation rules for DateOfExpirySourceName

	// no validation rules for DocumentCode

	// no validation rules for DocumentCodeSource

	// no validation rules for DocumentCodeSourceName

	// no validation rules for DocumentNumber

	// no validation rules for DocumentNumberSource

	// no validation rules for DocumentNumberSourceName

	// no validation rules for DocumentType

	// no validation rules for DocumentTypeSource

	// no validation rules for DocumentTypeSourceName

	// no validation rules for Gender

	// no validation rules for GenderSource

	// no validation rules for GenderSourceName

	// no validation rules for IssuingCountry

	// no validation rules for IssuingCountrySource

	// no validation rules for IssuingCountrySourceName

	// no validation rules for NameOfHolder

	// no validation rules for NameOfHolderSource

	// no validation rules for NameOfHolderSourceName

	// no validation rules for Nationality

	// no validation rules for NationalitySource

	// no validation rules for NationalitySourceName

	// no validation rules for PersonalNumber

	// no validation rules for PersonalNumberSource

	// no validation rules for PersonalNumberSourceName

	// no validation rules for PlaceOfBirth

	// no validation rules for PlaceOfBirthSource

	// no validation rules for PlaceOfBirthSourceName

	// no validation rules for PrimaryIdentifier

	// no validation rules for PrimaryIdentifierSource

	// no validation rules for PrimaryIdentifierSourceName

	// no validation rules for SecondaryIdentifier

	// no validation rules for SecondaryIdentifierSource

	// no validation rules for SecondaryIdentifierSourceName

	// no validation rules for SelfieVerificationProfile

	// no validation rules for SelfieVerificationProfileSource

	// no validation rules for SelfieVerificationProfileSourceName

	// no validation rules for SelfieVerificationStatus

	// no validation rules for SelfieVerificationStatusSource

	// no validation rules for SelfieVerificationStatusSourceName

	// no validation rules for VisualVerification

	// no validation rules for VisualVerificationSource

	// no validation rules for VisualVerificationSourceName

	if len(errors) > 0 {
		return ReadIDConsolidatedIdentityDataMultiError(errors)
	}

	return nil
}

// ReadIDConsolidatedIdentityDataMultiError is an error wrapping multiple
// validation errors returned by ReadIDConsolidatedIdentityData.ValidateAll()
// if the designated constraints aren't met.
type ReadIDConsolidatedIdentityDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadIDConsolidatedIdentityDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadIDConsolidatedIdentityDataMultiError) AllErrors() []error { return m }

// ReadIDConsolidatedIdentityDataValidationError is the validation error
// returned by ReadIDConsolidatedIdentityData.Validate if the designated
// constraints aren't met.
type ReadIDConsolidatedIdentityDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadIDConsolidatedIdentityDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadIDConsolidatedIdentityDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadIDConsolidatedIdentityDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadIDConsolidatedIdentityDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadIDConsolidatedIdentityDataValidationError) ErrorName() string {
	return "ReadIDConsolidatedIdentityDataValidationError"
}

// Error satisfies the builtin error interface
func (e ReadIDConsolidatedIdentityDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadIDConsolidatedIdentityData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadIDConsolidatedIdentityDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadIDConsolidatedIdentityDataValidationError{}

// Validate checks the field values on ReadIDApp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadIDApp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadIDApp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadIDAppMultiError, or nil
// if none found.
func (m *ReadIDApp) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadIDApp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppVersion

	// no validation rules for CustomerName

	// no validation rules for PackageName

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ReadIDAppMultiError(errors)
	}

	return nil
}

// ReadIDAppMultiError is an error wrapping multiple validation errors returned
// by ReadIDApp.ValidateAll() if the designated constraints aren't met.
type ReadIDAppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadIDAppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadIDAppMultiError) AllErrors() []error { return m }

// ReadIDAppValidationError is the validation error returned by
// ReadIDApp.Validate if the designated constraints aren't met.
type ReadIDAppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadIDAppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadIDAppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadIDAppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadIDAppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadIDAppValidationError) ErrorName() string { return "ReadIDAppValidationError" }

// Error satisfies the builtin error interface
func (e ReadIDAppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadIDApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadIDAppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadIDAppValidationError{}

// Validate checks the field values on ReadIDDeviceInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadIDDeviceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadIDDeviceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadIDDeviceInfoMultiError, or nil if none found.
func (m *ReadIDDeviceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadIDDeviceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Brand

	// no validation rules for ExtendedLengthApduSupported

	// no validation rules for Manufacturer

	// no validation rules for MaxTransceiveLength

	// no validation rules for Model

	// no validation rules for OsVersion

	// no validation rules for Platform

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ReadIDDeviceInfoMultiError(errors)
	}

	return nil
}

// ReadIDDeviceInfoMultiError is an error wrapping multiple validation errors
// returned by ReadIDDeviceInfo.ValidateAll() if the designated constraints
// aren't met.
type ReadIDDeviceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadIDDeviceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadIDDeviceInfoMultiError) AllErrors() []error { return m }

// ReadIDDeviceInfoValidationError is the validation error returned by
// ReadIDDeviceInfo.Validate if the designated constraints aren't met.
type ReadIDDeviceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadIDDeviceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadIDDeviceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadIDDeviceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadIDDeviceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadIDDeviceInfoValidationError) ErrorName() string { return "ReadIDDeviceInfoValidationError" }

// Error satisfies the builtin error interface
func (e ReadIDDeviceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadIDDeviceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadIDDeviceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadIDDeviceInfoValidationError{}
