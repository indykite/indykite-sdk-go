// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/identity/v1beta2/attributes.proto

package identityv1beta2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SchemaMultiError, or nil if none found.
func (m *Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Context

	// no validation rules for Schema

	// no validation rules for SchemaVersion

	// no validation rules for AttributeName

	if len(errors) > 0 {
		return SchemaMultiError(errors)
	}

	return nil
}

// SchemaMultiError is an error wrapping multiple validation errors returned by
// Schema.ValidateAll() if the designated constraints aren't met.
type SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaMultiError) AllErrors() []error { return m }

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on PropertyDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PropertyDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PropertyDefinitionMultiError, or nil if none found.
func (m *PropertyDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetContext() != "" {

		if uri, err := url.Parse(m.GetContext()); err != nil {
			err = PropertyDefinitionValidationError{
				field:  "Context",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := PropertyDefinitionValidationError{
				field:  "Context",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetType() != "" {

		if len(m.GetType()) > 256 {
			err := PropertyDefinitionValidationError{
				field:  "Type",
				reason: "value length must be at most 256 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_PropertyDefinition_Type_Pattern.MatchString(m.GetType()) {
			err := PropertyDefinitionValidationError{
				field:  "Type",
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetProperty() != "" {

		if len(m.GetProperty()) > 256 {
			err := PropertyDefinitionValidationError{
				field:  "Property",
				reason: "value length must be at most 256 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_PropertyDefinition_Property_Pattern.MatchString(m.GetProperty()) {
			err := PropertyDefinitionValidationError{
				field:  "Property",
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PropertyDefinitionMultiError(errors)
	}

	return nil
}

// PropertyDefinitionMultiError is an error wrapping multiple validation errors
// returned by PropertyDefinition.ValidateAll() if the designated constraints
// aren't met.
type PropertyDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyDefinitionMultiError) AllErrors() []error { return m }

// PropertyDefinitionValidationError is the validation error returned by
// PropertyDefinition.Validate if the designated constraints aren't met.
type PropertyDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyDefinitionValidationError) ErrorName() string {
	return "PropertyDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e PropertyDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyDefinitionValidationError{}

var _PropertyDefinition_Type_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]+$")

var _PropertyDefinition_Property_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]+$")

// Validate checks the field values on PropertyConstraint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PropertyConstraint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyConstraint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PropertyConstraintMultiError, or nil if none found.
func (m *PropertyConstraint) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyConstraint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OnlyPrimary

	if len(errors) > 0 {
		return PropertyConstraintMultiError(errors)
	}

	return nil
}

// PropertyConstraintMultiError is an error wrapping multiple validation errors
// returned by PropertyConstraint.ValidateAll() if the designated constraints
// aren't met.
type PropertyConstraintMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyConstraintMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyConstraintMultiError) AllErrors() []error { return m }

// PropertyConstraintValidationError is the validation error returned by
// PropertyConstraint.Validate if the designated constraints aren't met.
type PropertyConstraintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyConstraintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyConstraintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyConstraintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyConstraintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyConstraintValidationError) ErrorName() string {
	return "PropertyConstraintValidationError"
}

// Error satisfies the builtin error interface
func (e PropertyConstraintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyConstraint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyConstraintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyConstraintValidationError{}

// Validate checks the field values on PropertyMask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PropertyMask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyMask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyMaskMultiError, or
// nil if none found.
func (m *PropertyMask) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyMask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDefinition() == nil {
		err := PropertyMaskValidationError{
			field:  "Definition",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyMaskValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyMaskValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyMaskValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConstraint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyMaskValidationError{
					field:  "Constraint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyMaskValidationError{
					field:  "Constraint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConstraint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyMaskValidationError{
				field:  "Constraint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PropertyMaskMultiError(errors)
	}

	return nil
}

// PropertyMaskMultiError is an error wrapping multiple validation errors
// returned by PropertyMask.ValidateAll() if the designated constraints aren't met.
type PropertyMaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyMaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyMaskMultiError) AllErrors() []error { return m }

// PropertyMaskValidationError is the validation error returned by
// PropertyMask.Validate if the designated constraints aren't met.
type PropertyMaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyMaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyMaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyMaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyMaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyMaskValidationError) ErrorName() string { return "PropertyMaskValidationError" }

// Error satisfies the builtin error interface
func (e PropertyMaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyMask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyMaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyMaskValidationError{}

// Validate checks the field values on PropertyFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PropertyFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyFilterMultiError,
// or nil if none found.
func (m *PropertyFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetType()); l < 2 || l > 20 {
		err := PropertyFilterValidationError{
			field:  "Type",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetValue() == nil {
		err := PropertyFilterValidationError{
			field:  "Value",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyFilterValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyFilterValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyFilterValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTenantId() != "" {

		if l := utf8.RuneCountInString(m.GetTenantId()); l < 27 || l > 100 {
			err := PropertyFilterValidationError{
				field:  "TenantId",
				reason: "value length must be between 27 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_PropertyFilter_TenantId_Pattern.MatchString(m.GetTenantId()) {
			err := PropertyFilterValidationError{
				field:  "TenantId",
				reason: "value does not match regex pattern \"^gid:[A-Za-z0-9-_]{27,100}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PropertyFilterMultiError(errors)
	}

	return nil
}

// PropertyFilterMultiError is an error wrapping multiple validation errors
// returned by PropertyFilter.ValidateAll() if the designated constraints
// aren't met.
type PropertyFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyFilterMultiError) AllErrors() []error { return m }

// PropertyFilterValidationError is the validation error returned by
// PropertyFilter.Validate if the designated constraints aren't met.
type PropertyFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyFilterValidationError) ErrorName() string { return "PropertyFilterValidationError" }

// Error satisfies the builtin error interface
func (e PropertyFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyFilterValidationError{}

var _PropertyFilter_TenantId_Pattern = regexp.MustCompile("^gid:[A-Za-z0-9-_]{27,100}$")

// Validate checks the field values on PropertyMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PropertyMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PropertyMetadataMultiError, or nil if none found.
func (m *PropertyMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Primary

	// no validation rules for AssuranceLevel

	// no validation rules for Issuer

	if all {
		switch v := interface{}(m.GetVerificationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyMetadataValidationError{
					field:  "VerificationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyMetadataValidationError{
					field:  "VerificationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVerificationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyMetadataValidationError{
				field:  "VerificationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Verifier

	if len(errors) > 0 {
		return PropertyMetadataMultiError(errors)
	}

	return nil
}

// PropertyMetadataMultiError is an error wrapping multiple validation errors
// returned by PropertyMetadata.ValidateAll() if the designated constraints
// aren't met.
type PropertyMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyMetadataMultiError) AllErrors() []error { return m }

// PropertyMetadataValidationError is the validation error returned by
// PropertyMetadata.Validate if the designated constraints aren't met.
type PropertyMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyMetadataValidationError) ErrorName() string { return "PropertyMetadataValidationError" }

// Error satisfies the builtin error interface
func (e PropertyMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyMetadataValidationError{}

// Validate checks the field values on Property with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Property) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Property with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyMultiError, or nil
// if none found.
func (m *Property) ValidateAll() error {
	return m.validate(true)
}

func (m *Property) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if !_Property_Id_Pattern.MatchString(m.GetId()) {
			err := PropertyValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[0-9a-f]{1,16}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Value.(type) {

	case *Property_ObjectValue:

		if all {
			switch v := interface{}(m.GetObjectValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PropertyValidationError{
						field:  "ObjectValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PropertyValidationError{
						field:  "ObjectValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObjectValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PropertyValidationError{
					field:  "ObjectValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Property_ReferenceValue:
		// no validation rules for ReferenceValue

	}

	if len(errors) > 0 {
		return PropertyMultiError(errors)
	}

	return nil
}

// PropertyMultiError is an error wrapping multiple validation errors returned
// by Property.ValidateAll() if the designated constraints aren't met.
type PropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyMultiError) AllErrors() []error { return m }

// PropertyValidationError is the validation error returned by
// Property.Validate if the designated constraints aren't met.
type PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyValidationError) ErrorName() string { return "PropertyValidationError" }

// Error satisfies the builtin error interface
func (e PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyValidationError{}

var _Property_Id_Pattern = regexp.MustCompile("^[0-9a-f]{1,16}$")

// Validate checks the field values on PropertyBatchOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PropertyBatchOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyBatchOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PropertyBatchOperationMultiError, or nil if none found.
func (m *PropertyBatchOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyBatchOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Operation.(type) {

	case *PropertyBatchOperation_Add:

		if m.GetAdd() == nil {
			err := PropertyBatchOperationValidationError{
				field:  "Add",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAdd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PropertyBatchOperationValidationError{
						field:  "Add",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PropertyBatchOperationValidationError{
						field:  "Add",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PropertyBatchOperationValidationError{
					field:  "Add",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PropertyBatchOperation_Replace:

		if m.GetReplace() == nil {
			err := PropertyBatchOperationValidationError{
				field:  "Replace",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReplace()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PropertyBatchOperationValidationError{
						field:  "Replace",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PropertyBatchOperationValidationError{
						field:  "Replace",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReplace()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PropertyBatchOperationValidationError{
					field:  "Replace",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PropertyBatchOperation_Remove:

		if m.GetRemove() == nil {
			err := PropertyBatchOperationValidationError{
				field:  "Remove",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemove()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PropertyBatchOperationValidationError{
						field:  "Remove",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PropertyBatchOperationValidationError{
						field:  "Remove",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemove()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PropertyBatchOperationValidationError{
					field:  "Remove",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := PropertyBatchOperationValidationError{
			field:  "Operation",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return PropertyBatchOperationMultiError(errors)
	}

	return nil
}

// PropertyBatchOperationMultiError is an error wrapping multiple validation
// errors returned by PropertyBatchOperation.ValidateAll() if the designated
// constraints aren't met.
type PropertyBatchOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyBatchOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyBatchOperationMultiError) AllErrors() []error { return m }

// PropertyBatchOperationValidationError is the validation error returned by
// PropertyBatchOperation.Validate if the designated constraints aren't met.
type PropertyBatchOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyBatchOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyBatchOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyBatchOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyBatchOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyBatchOperationValidationError) ErrorName() string {
	return "PropertyBatchOperationValidationError"
}

// Error satisfies the builtin error interface
func (e PropertyBatchOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyBatchOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyBatchOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyBatchOperationValidationError{}

// Validate checks the field values on BatchOperationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchOperationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchOperationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchOperationResultMultiError, or nil if none found.
func (m *BatchOperationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchOperationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	switch m.Result.(type) {

	case *BatchOperationResult_Success:

		if all {
			switch v := interface{}(m.GetSuccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchOperationResultValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchOperationResultValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchOperationResultValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BatchOperationResult_Error:

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchOperationResultValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchOperationResultValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchOperationResultValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := BatchOperationResultValidationError{
			field:  "Result",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return BatchOperationResultMultiError(errors)
	}

	return nil
}

// BatchOperationResultMultiError is an error wrapping multiple validation
// errors returned by BatchOperationResult.ValidateAll() if the designated
// constraints aren't met.
type BatchOperationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchOperationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchOperationResultMultiError) AllErrors() []error { return m }

// BatchOperationResultValidationError is the validation error returned by
// BatchOperationResult.Validate if the designated constraints aren't met.
type BatchOperationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchOperationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchOperationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchOperationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchOperationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchOperationResultValidationError) ErrorName() string {
	return "BatchOperationResultValidationError"
}

// Error satisfies the builtin error interface
func (e BatchOperationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchOperationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchOperationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchOperationResultValidationError{}

// Validate checks the field values on BatchOperationResultSuccess with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchOperationResultSuccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchOperationResultSuccess with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchOperationResultSuccessMultiError, or nil if none found.
func (m *BatchOperationResultSuccess) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchOperationResultSuccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatchOperationResultSuccess_PropertyId_Pattern.MatchString(m.GetPropertyId()) {
		err := BatchOperationResultSuccessValidationError{
			field:  "PropertyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{1,16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatchOperationResultSuccessMultiError(errors)
	}

	return nil
}

// BatchOperationResultSuccessMultiError is an error wrapping multiple
// validation errors returned by BatchOperationResultSuccess.ValidateAll() if
// the designated constraints aren't met.
type BatchOperationResultSuccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchOperationResultSuccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchOperationResultSuccessMultiError) AllErrors() []error { return m }

// BatchOperationResultSuccessValidationError is the validation error returned
// by BatchOperationResultSuccess.Validate if the designated constraints
// aren't met.
type BatchOperationResultSuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchOperationResultSuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchOperationResultSuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchOperationResultSuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchOperationResultSuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchOperationResultSuccessValidationError) ErrorName() string {
	return "BatchOperationResultSuccessValidationError"
}

// Error satisfies the builtin error interface
func (e BatchOperationResultSuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchOperationResultSuccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchOperationResultSuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchOperationResultSuccessValidationError{}

var _BatchOperationResultSuccess_PropertyId_Pattern = regexp.MustCompile("^[0-9a-f]{1,16}$")

// Validate checks the field values on BatchOperationResultError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchOperationResultError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchOperationResultError with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchOperationResultErrorMultiError, or nil if none found.
func (m *BatchOperationResultError) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchOperationResultError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchOperationResultErrorMultiError(errors)
	}

	return nil
}

// BatchOperationResultErrorMultiError is an error wrapping multiple validation
// errors returned by BatchOperationResultError.ValidateAll() if the
// designated constraints aren't met.
type BatchOperationResultErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchOperationResultErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchOperationResultErrorMultiError) AllErrors() []error { return m }

// BatchOperationResultErrorValidationError is the validation error returned by
// BatchOperationResultError.Validate if the designated constraints aren't met.
type BatchOperationResultErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchOperationResultErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchOperationResultErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchOperationResultErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchOperationResultErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchOperationResultErrorValidationError) ErrorName() string {
	return "BatchOperationResultErrorValidationError"
}

// Error satisfies the builtin error interface
func (e BatchOperationResultErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchOperationResultError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchOperationResultErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchOperationResultErrorValidationError{}
