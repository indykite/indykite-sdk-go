// Copyright (c) 2020 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: indykite/identity/v1beta2/attributes.proto

package identityv1beta2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1beta1 "github.com/indykite/jarvis-sdk-go/gen/indykite/objects/v1beta1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AssuranceLevel of Identity Proofing Requirements (NIST 800-63)
type AssuranceLevel int32

const (
	AssuranceLevel_ASSURANCE_LEVEL_INVALID AssuranceLevel = 0
	// Little or no confidence exists in the asserted identity; usually self-asserted; essentially a persistent identifier
	// ASSURANCE_LEVEL_NONE = 1;
	// Confidence exists that the asserted identity is accurate; used frequently for self service applications
	// if any, are self-asserted or should be treated as self-asserted; there is no proofing process.
	AssuranceLevel_ASSURANCE_LEVEL_LOW AssuranceLevel = 1
	// High confidence in the asserted identity’s accuracy; used to access restricted data
	// Either remote or in-person identity proofing is required using, at a minimum, the procedures given in SP 800-63A.
	AssuranceLevel_ASSURANCE_LEVEL_SUBSTANTIAL AssuranceLevel = 2
	// Very high confidence in the asserted identity’s accuracy; used to access highly restricted data.
	// In-person or supervised-remote identity proofing is required. Identifying attributes must be verified through
	// examination of physical documentation as described in SP 800-63A.
	AssuranceLevel_ASSURANCE_LEVEL_HIGH AssuranceLevel = 3
)

// Enum value maps for AssuranceLevel.
var (
	AssuranceLevel_name = map[int32]string{
		0: "ASSURANCE_LEVEL_INVALID",
		1: "ASSURANCE_LEVEL_LOW",
		2: "ASSURANCE_LEVEL_SUBSTANTIAL",
		3: "ASSURANCE_LEVEL_HIGH",
	}
	AssuranceLevel_value = map[string]int32{
		"ASSURANCE_LEVEL_INVALID":     0,
		"ASSURANCE_LEVEL_LOW":         1,
		"ASSURANCE_LEVEL_SUBSTANTIAL": 2,
		"ASSURANCE_LEVEL_HIGH":        3,
	}
)

func (x AssuranceLevel) Enum() *AssuranceLevel {
	p := new(AssuranceLevel)
	*p = x
	return p
}

func (x AssuranceLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssuranceLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_identity_v1beta2_attributes_proto_enumTypes[0].Descriptor()
}

func (AssuranceLevel) Type() protoreflect.EnumType {
	return &file_indykite_identity_v1beta2_attributes_proto_enumTypes[0]
}

func (x AssuranceLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssuranceLevel.Descriptor instead.
func (AssuranceLevel) EnumDescriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{0}
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context       map[string]string `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Schema        string            `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	SchemaVersion string            `protobuf:"bytes,2,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	AttributeName string            `protobuf:"bytes,3,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{0}
}

func (x *Schema) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Schema) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Schema) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *Schema) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

// PropertyDefinition identifies the location of property schema and type definition.
//
// The location consist of three component:
// 1. Schema namespace where the property is defined.
// Some examples like:
//  "schema": "http://schema.org/",
//  "bibo": "http://purl.org/ontology/bibo/",
//  "dc": "http://purl.org/dc/elements/1.1/",
//  "dcat": "http://www.w3.org/ns/dcat#",
//  "dct": "http://purl.org/dc/terms/",
//  "dcterms": "http://purl.org/dc/terms/",
//  "dctype": "http://purl.org/dc/dcmitype/",
//  "eli": "http://data.europa.eu/eli/ontology#",
//  "foaf": "http://xmlns.com/foaf/0.1/",
//  "owl": "http://www.w3.org/2002/07/owl#",
//  "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
//  "rdfa": "http://www.w3.org/ns/rdfa#",
//  "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
//  "skos": "http://www.w3.org/2004/02/skos/core#",
//  "snomed": "http://purl.bioontology.org/ontology/SNOMEDCT/",
//  "void": "http://rdfs.org/ns/void#",
//  "xsd": "http://www.w3.org/2001/XMLSchema#",
//  "xsd1": "hhttp://www.w3.org/2001/XMLSchema#"
//
// 2. Type definition withing the names space.
// 3. Exact property name, it may be unambiguous if there is one definition but ambiguous without
// knowing exactly which Object Type defines this property.
type PropertyDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context defines the namespace in which the type and property are defined.
	// Example: http://schema.org/
	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Type is the name of type definition in context.
	//
	// Either type or property must be defined in request!
	// Example: Person
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Property is the name the property definition in context and relation to type.
	//
	// Either type or property must be defined in request!
	// Example: email
	Property string `protobuf:"bytes,3,opt,name=property,proto3" json:"property,omitempty"`
}

func (x *PropertyDefinition) Reset() {
	*x = PropertyDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyDefinition) ProtoMessage() {}

func (x *PropertyDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyDefinition.ProtoReflect.Descriptor instead.
func (*PropertyDefinition) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{1}
}

func (x *PropertyDefinition) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *PropertyDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PropertyDefinition) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

// PropertyConstraint represent a conditions to find the property with expected meta-data.
type PropertyConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Issuers used to limit the source of property.
	Issuers []string `protobuf:"bytes,1,rep,name=issuers,proto3" json:"issuers,omitempty"`
	// Subset used to specify which property to return if value is an object.
	Subset []string `protobuf:"bytes,2,rep,name=subset,proto3" json:"subset,omitempty"`
	// Get on primary properties
	OnlyPrimary bool `protobuf:"varint,3,opt,name=only_primary,json=onlyPrimary,proto3" json:"only_primary,omitempty"`
}

func (x *PropertyConstraint) Reset() {
	*x = PropertyConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyConstraint) ProtoMessage() {}

func (x *PropertyConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyConstraint.ProtoReflect.Descriptor instead.
func (*PropertyConstraint) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{2}
}

func (x *PropertyConstraint) GetIssuers() []string {
	if x != nil {
		return x.Issuers
	}
	return nil
}

func (x *PropertyConstraint) GetSubset() []string {
	if x != nil {
		return x.Subset
	}
	return nil
}

func (x *PropertyConstraint) GetOnlyPrimary() bool {
	if x != nil {
		return x.OnlyPrimary
	}
	return false
}

// PropertyMask used to define which property to read.
type PropertyMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definition *PropertyDefinition `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	Constraint *PropertyConstraint `protobuf:"bytes,2,opt,name=constraint,proto3" json:"constraint,omitempty"`
}

func (x *PropertyMask) Reset() {
	*x = PropertyMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyMask) ProtoMessage() {}

func (x *PropertyMask) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyMask.ProtoReflect.Descriptor instead.
func (*PropertyMask) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{3}
}

func (x *PropertyMask) GetDefinition() *PropertyDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *PropertyMask) GetConstraint() *PropertyConstraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

type PropertyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary is true if this instance of a multi-value property is the default to pick from array at first.
	Primary bool `protobuf:"varint,1,opt,name=primary,proto3" json:"primary,omitempty"`
	// AssuranceLevel shows the level of assurance of the property value.
	AssuranceLevel AssuranceLevel `protobuf:"varint,2,opt,name=assurance_level,json=assuranceLevel,proto3,enum=indykite.identity.v1beta2.AssuranceLevel" json:"assurance_level,omitempty"`
	// Issuer is the identifier of the source of property value.
	// Must starts with 'app:' or 'asp:' followed by trimmed base64URL UUID
	// or starts with 'raw:' followed by name with minimum length of 3 characters
	//
	// Example: ["raw:indykite.id", "app:aW5keWtpRGWAAAIPAAAAAA"]
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// VerificationTime represent the time when AssuranceLevel was changed for Verifier.
	VerificationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=verification_time,json=verificationTime,proto3" json:"verification_time,omitempty"`
	// Verifier is the identifier of provider carried out the verification process.
	//
	// Example: ["indykite.id", "aW5keWtpRGWAAAIPAAAAAA"]
	Verifier string `protobuf:"bytes,5,opt,name=verifier,proto3" json:"verifier,omitempty"`
}

func (x *PropertyMetadata) Reset() {
	*x = PropertyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyMetadata) ProtoMessage() {}

func (x *PropertyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyMetadata.ProtoReflect.Descriptor instead.
func (*PropertyMetadata) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{4}
}

func (x *PropertyMetadata) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *PropertyMetadata) GetAssuranceLevel() AssuranceLevel {
	if x != nil {
		return x.AssuranceLevel
	}
	return AssuranceLevel_ASSURANCE_LEVEL_INVALID
}

func (x *PropertyMetadata) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *PropertyMetadata) GetVerificationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VerificationTime
	}
	return nil
}

func (x *PropertyMetadata) GetVerifier() string {
	if x != nil {
		return x.Verifier
	}
	return ""
}

// Property represents a property stored in database.
//
// It contains the ID, Definition, Metadata and Value together.
type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id represents the identifier of this property in hex
	// max value is 7FFFFFFFFFFFFFFF in case of signed in64
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Definition represents the property type definition.
	Definition *PropertyDefinition `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// Meta represent the meta-information of this property.
	// One of Meta or Value must be set
	Meta *PropertyMetadata `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// Types that are assignable to Value:
	//	*Property_ObjectValue
	//	*Property_ReferenceValue
	Value isProperty_Value `protobuf_oneof:"value"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{5}
}

func (x *Property) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Property) GetDefinition() *PropertyDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *Property) GetMeta() *PropertyMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (m *Property) GetValue() isProperty_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Property) GetObjectValue() *v1beta1.Value {
	if x, ok := x.GetValue().(*Property_ObjectValue); ok {
		return x.ObjectValue
	}
	return nil
}

func (x *Property) GetReferenceValue() string {
	if x, ok := x.GetValue().(*Property_ReferenceValue); ok {
		return x.ReferenceValue
	}
	return ""
}

type isProperty_Value interface {
	isProperty_Value()
}

type Property_ObjectValue struct {
	// ObjectValue is the actual value of the property.
	//
	// This can have many different types and it can also be encrypted and clear as well.
	ObjectValue *v1beta1.Value `protobuf:"bytes,4,opt,name=object_value,json=objectValue,proto3,oneof"`
}

type Property_ReferenceValue struct {
	// ReferenceValue used to set the value reference to a document.
	//
	// Format: `databases/{application_id}/documents/{document_path}`.
	ReferenceValue string `protobuf:"bytes,5,opt,name=reference_value,json=referenceValue,proto3,oneof"`
}

func (*Property_ObjectValue) isProperty_Value() {}

func (*Property_ReferenceValue) isProperty_Value() {}

// PropertyBatchOperation represents a single Property value operation.
type PropertyBatchOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//	*PropertyBatchOperation_Add
	//	*PropertyBatchOperation_Replace
	//	*PropertyBatchOperation_Remove
	Operation isPropertyBatchOperation_Operation `protobuf_oneof:"operation"`
}

func (x *PropertyBatchOperation) Reset() {
	*x = PropertyBatchOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyBatchOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyBatchOperation) ProtoMessage() {}

func (x *PropertyBatchOperation) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyBatchOperation.ProtoReflect.Descriptor instead.
func (*PropertyBatchOperation) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{6}
}

func (m *PropertyBatchOperation) GetOperation() isPropertyBatchOperation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *PropertyBatchOperation) GetAdd() *Property {
	if x, ok := x.GetOperation().(*PropertyBatchOperation_Add); ok {
		return x.Add
	}
	return nil
}

func (x *PropertyBatchOperation) GetReplace() *Property {
	if x, ok := x.GetOperation().(*PropertyBatchOperation_Replace); ok {
		return x.Replace
	}
	return nil
}

func (x *PropertyBatchOperation) GetRemove() *Property {
	if x, ok := x.GetOperation().(*PropertyBatchOperation_Remove); ok {
		return x.Remove
	}
	return nil
}

type isPropertyBatchOperation_Operation interface {
	isPropertyBatchOperation_Operation()
}

type PropertyBatchOperation_Add struct {
	Add *Property `protobuf:"bytes,1,opt,name=add,proto3,oneof"`
}

type PropertyBatchOperation_Replace struct {
	Replace *Property `protobuf:"bytes,2,opt,name=replace,proto3,oneof"`
}

type PropertyBatchOperation_Remove struct {
	Remove *Property `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*PropertyBatchOperation_Add) isPropertyBatchOperation_Operation() {}

func (*PropertyBatchOperation_Replace) isPropertyBatchOperation_Operation() {}

func (*PropertyBatchOperation_Remove) isPropertyBatchOperation_Operation() {}

// BatchPropertyOperationResult represents the result of an BatchUpdate call.
type BatchOperationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to Result:
	//	*BatchOperationResult_Success
	//	*BatchOperationResult_Error
	Result isBatchOperationResult_Result `protobuf_oneof:"result"`
}

func (x *BatchOperationResult) Reset() {
	*x = BatchOperationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationResult) ProtoMessage() {}

func (x *BatchOperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationResult.ProtoReflect.Descriptor instead.
func (*BatchOperationResult) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{7}
}

func (x *BatchOperationResult) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (m *BatchOperationResult) GetResult() isBatchOperationResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *BatchOperationResult) GetSuccess() *BatchOperationResultSuccess {
	if x, ok := x.GetResult().(*BatchOperationResult_Success); ok {
		return x.Success
	}
	return nil
}

func (x *BatchOperationResult) GetError() *BatchOperationResultError {
	if x, ok := x.GetResult().(*BatchOperationResult_Error); ok {
		return x.Error
	}
	return nil
}

type isBatchOperationResult_Result interface {
	isBatchOperationResult_Result()
}

type BatchOperationResult_Success struct {
	Success *BatchOperationResultSuccess `protobuf:"bytes,5,opt,name=success,proto3,oneof"`
}

type BatchOperationResult_Error struct {
	Error *BatchOperationResultError `protobuf:"bytes,6,opt,name=error,proto3,oneof"`
}

func (*BatchOperationResult_Success) isBatchOperationResult_Result() {}

func (*BatchOperationResult_Error) isBatchOperationResult_Result() {}

// BatchOperationResultSuccess represents the result of an successful BatchOperation call.
type BatchOperationResultSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyId string `protobuf:"bytes,1,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
}

func (x *BatchOperationResultSuccess) Reset() {
	*x = BatchOperationResultSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperationResultSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationResultSuccess) ProtoMessage() {}

func (x *BatchOperationResultSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationResultSuccess.ProtoReflect.Descriptor instead.
func (*BatchOperationResultSuccess) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{8}
}

func (x *BatchOperationResultSuccess) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

// BatchOperationResultError represents an error encountered while executing a batch operation.
type BatchOperationResultError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []string `protobuf:"bytes,1,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *BatchOperationResultError) Reset() {
	*x = BatchOperationResultError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperationResultError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationResultError) ProtoMessage() {}

func (x *BatchOperationResultError) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_identity_v1beta2_attributes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationResultError.ProtoReflect.Descriptor instead.
func (*BatchOperationResultError) Descriptor() ([]byte, []int) {
	return file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP(), []int{9}
}

func (x *BatchOperationResultError) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

var File_indykite_identity_v1beta2_attributes_proto protoreflect.FileDescriptor

var file_indykite_identity_v1beta2_attributes_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb9, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01,
	0x01, 0x88, 0x01, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xfa, 0x42, 0x22,
	0x72, 0x20, 0x28, 0x80, 0x02, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f,
	0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0xd0,
	0x01, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xfa, 0x42, 0x22, 0x72,
	0x20, 0x28, 0x80, 0x02, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0xd0, 0x01,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0x69, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x57, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22,
	0xfd, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x52,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0xc0, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32,
	0x10, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x36, 0x7d,
	0x24, 0xd0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x64,
	0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x42, 0x10, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x57, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x32, 0x10, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x2c, 0x31,
	0x36, 0x7d, 0x24, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x35, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x81, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x53, 0x53,
	0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x53, 0x53, 0x55, 0x52, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x53, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x42, 0x87, 0x02, 0x0a, 0x1d, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x42, 0x0f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x3b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0xca, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xe2, 0x02,
	0x25, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x3a, 0x3a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_identity_v1beta2_attributes_proto_rawDescOnce sync.Once
	file_indykite_identity_v1beta2_attributes_proto_rawDescData = file_indykite_identity_v1beta2_attributes_proto_rawDesc
)

func file_indykite_identity_v1beta2_attributes_proto_rawDescGZIP() []byte {
	file_indykite_identity_v1beta2_attributes_proto_rawDescOnce.Do(func() {
		file_indykite_identity_v1beta2_attributes_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_identity_v1beta2_attributes_proto_rawDescData)
	})
	return file_indykite_identity_v1beta2_attributes_proto_rawDescData
}

var file_indykite_identity_v1beta2_attributes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_indykite_identity_v1beta2_attributes_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_indykite_identity_v1beta2_attributes_proto_goTypes = []interface{}{
	(AssuranceLevel)(0),                 // 0: indykite.identity.v1beta2.AssuranceLevel
	(*Schema)(nil),                      // 1: indykite.identity.v1beta2.Schema
	(*PropertyDefinition)(nil),          // 2: indykite.identity.v1beta2.PropertyDefinition
	(*PropertyConstraint)(nil),          // 3: indykite.identity.v1beta2.PropertyConstraint
	(*PropertyMask)(nil),                // 4: indykite.identity.v1beta2.PropertyMask
	(*PropertyMetadata)(nil),            // 5: indykite.identity.v1beta2.PropertyMetadata
	(*Property)(nil),                    // 6: indykite.identity.v1beta2.Property
	(*PropertyBatchOperation)(nil),      // 7: indykite.identity.v1beta2.PropertyBatchOperation
	(*BatchOperationResult)(nil),        // 8: indykite.identity.v1beta2.BatchOperationResult
	(*BatchOperationResultSuccess)(nil), // 9: indykite.identity.v1beta2.BatchOperationResultSuccess
	(*BatchOperationResultError)(nil),   // 10: indykite.identity.v1beta2.BatchOperationResultError
	nil,                                 // 11: indykite.identity.v1beta2.Schema.ContextEntry
	(*timestamppb.Timestamp)(nil),       // 12: google.protobuf.Timestamp
	(*v1beta1.Value)(nil),               // 13: indykite.objects.v1beta1.Value
}
var file_indykite_identity_v1beta2_attributes_proto_depIdxs = []int32{
	11, // 0: indykite.identity.v1beta2.Schema.context:type_name -> indykite.identity.v1beta2.Schema.ContextEntry
	2,  // 1: indykite.identity.v1beta2.PropertyMask.definition:type_name -> indykite.identity.v1beta2.PropertyDefinition
	3,  // 2: indykite.identity.v1beta2.PropertyMask.constraint:type_name -> indykite.identity.v1beta2.PropertyConstraint
	0,  // 3: indykite.identity.v1beta2.PropertyMetadata.assurance_level:type_name -> indykite.identity.v1beta2.AssuranceLevel
	12, // 4: indykite.identity.v1beta2.PropertyMetadata.verification_time:type_name -> google.protobuf.Timestamp
	2,  // 5: indykite.identity.v1beta2.Property.definition:type_name -> indykite.identity.v1beta2.PropertyDefinition
	5,  // 6: indykite.identity.v1beta2.Property.meta:type_name -> indykite.identity.v1beta2.PropertyMetadata
	13, // 7: indykite.identity.v1beta2.Property.object_value:type_name -> indykite.objects.v1beta1.Value
	6,  // 8: indykite.identity.v1beta2.PropertyBatchOperation.add:type_name -> indykite.identity.v1beta2.Property
	6,  // 9: indykite.identity.v1beta2.PropertyBatchOperation.replace:type_name -> indykite.identity.v1beta2.Property
	6,  // 10: indykite.identity.v1beta2.PropertyBatchOperation.remove:type_name -> indykite.identity.v1beta2.Property
	9,  // 11: indykite.identity.v1beta2.BatchOperationResult.success:type_name -> indykite.identity.v1beta2.BatchOperationResultSuccess
	10, // 12: indykite.identity.v1beta2.BatchOperationResult.error:type_name -> indykite.identity.v1beta2.BatchOperationResultError
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_indykite_identity_v1beta2_attributes_proto_init() }
func file_indykite_identity_v1beta2_attributes_proto_init() {
	if File_indykite_identity_v1beta2_attributes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyBatchOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOperationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOperationResultSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_identity_v1beta2_attributes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOperationResultError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_identity_v1beta2_attributes_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Property_ObjectValue)(nil),
		(*Property_ReferenceValue)(nil),
	}
	file_indykite_identity_v1beta2_attributes_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*PropertyBatchOperation_Add)(nil),
		(*PropertyBatchOperation_Replace)(nil),
		(*PropertyBatchOperation_Remove)(nil),
	}
	file_indykite_identity_v1beta2_attributes_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*BatchOperationResult_Success)(nil),
		(*BatchOperationResult_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_identity_v1beta2_attributes_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_identity_v1beta2_attributes_proto_goTypes,
		DependencyIndexes: file_indykite_identity_v1beta2_attributes_proto_depIdxs,
		EnumInfos:         file_indykite_identity_v1beta2_attributes_proto_enumTypes,
		MessageInfos:      file_indykite_identity_v1beta2_attributes_proto_msgTypes,
	}.Build()
	File_indykite_identity_v1beta2_attributes_proto = out.File
	file_indykite_identity_v1beta2_attributes_proto_rawDesc = nil
	file_indykite_identity_v1beta2_attributes_proto_goTypes = nil
	file_indykite_identity_v1beta2_attributes_proto_depIdxs = nil
}
