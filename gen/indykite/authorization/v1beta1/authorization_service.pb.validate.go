// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/authorization/v1beta1/authorization_service.proto

package authorizationv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IsAuthorizedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorizedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorizedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAuthorizedRequestMultiError, or nil if none found.
func (m *IsAuthorizedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorizedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSubject() == nil {
		err := IsAuthorizedRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsAuthorizedRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsAuthorizedRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsAuthorizedRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetResources()); l < 1 || l > 32 {
		err := IsAuthorizedRequestValidationError{
			field:  "Resources",
			reason: "value must contain between 1 and 32 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IsAuthorizedRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IsAuthorizedRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IsAuthorizedRequestValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetOptions()) > 0 {

		for idx, item := range m.GetOptions() {
			_, _ = idx, item

			if all {
				switch v := interface{}(item).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, IsAuthorizedRequestValidationError{
							field:  fmt.Sprintf("Options[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, IsAuthorizedRequestValidationError{
							field:  fmt.Sprintf("Options[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return IsAuthorizedRequestValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}

	}

	if len(errors) > 0 {
		return IsAuthorizedRequestMultiError(errors)
	}

	return nil
}

// IsAuthorizedRequestMultiError is an error wrapping multiple validation
// errors returned by IsAuthorizedRequest.ValidateAll() if the designated
// constraints aren't met.
type IsAuthorizedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorizedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorizedRequestMultiError) AllErrors() []error { return m }

// IsAuthorizedRequestValidationError is the validation error returned by
// IsAuthorizedRequest.Validate if the designated constraints aren't met.
type IsAuthorizedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedRequestValidationError) ErrorName() string {
	return "IsAuthorizedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorizedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorizedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedRequestValidationError{}

// Validate checks the field values on IsAuthorizedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorizedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorizedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAuthorizedResponseMultiError, or nil if none found.
func (m *IsAuthorizedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorizedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDecisionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsAuthorizedResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsAuthorizedResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecisionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsAuthorizedResponseValidationError{
				field:  "DecisionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetDecisions()))
		i := 0
		for key := range m.GetDecisions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDecisions()[key]
			_ = val

			// no validation rules for Decisions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, IsAuthorizedResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, IsAuthorizedResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return IsAuthorizedResponseValidationError{
						field:  fmt.Sprintf("Decisions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return IsAuthorizedResponseMultiError(errors)
	}

	return nil
}

// IsAuthorizedResponseMultiError is an error wrapping multiple validation
// errors returned by IsAuthorizedResponse.ValidateAll() if the designated
// constraints aren't met.
type IsAuthorizedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorizedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorizedResponseMultiError) AllErrors() []error { return m }

// IsAuthorizedResponseValidationError is the validation error returned by
// IsAuthorizedResponse.Validate if the designated constraints aren't met.
type IsAuthorizedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedResponseValidationError) ErrorName() string {
	return "IsAuthorizedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorizedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorizedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedResponseValidationError{}

// Validate checks the field values on WhatAuthorizedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhatAuthorizedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorizedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WhatAuthorizedRequestMultiError, or nil if none found.
func (m *WhatAuthorizedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorizedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSubject() == nil {
		err := WhatAuthorizedRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhatAuthorizedRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhatAuthorizedRequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhatAuthorizedRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetResourceTypes()); l < 1 || l > 10 {
		err := WhatAuthorizedRequestValidationError{
			field:  "ResourceTypes",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetResourceTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WhatAuthorizedRequestValidationError{
						field:  fmt.Sprintf("ResourceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WhatAuthorizedRequestValidationError{
						field:  fmt.Sprintf("ResourceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhatAuthorizedRequestValidationError{
					field:  fmt.Sprintf("ResourceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetOptions()) > 0 {

		for idx, item := range m.GetOptions() {
			_, _ = idx, item

			if all {
				switch v := interface{}(item).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WhatAuthorizedRequestValidationError{
							field:  fmt.Sprintf("Options[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WhatAuthorizedRequestValidationError{
							field:  fmt.Sprintf("Options[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WhatAuthorizedRequestValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}

	}

	if len(errors) > 0 {
		return WhatAuthorizedRequestMultiError(errors)
	}

	return nil
}

// WhatAuthorizedRequestMultiError is an error wrapping multiple validation
// errors returned by WhatAuthorizedRequest.ValidateAll() if the designated
// constraints aren't met.
type WhatAuthorizedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorizedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorizedRequestMultiError) AllErrors() []error { return m }

// WhatAuthorizedRequestValidationError is the validation error returned by
// WhatAuthorizedRequest.Validate if the designated constraints aren't met.
type WhatAuthorizedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorizedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorizedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorizedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorizedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorizedRequestValidationError) ErrorName() string {
	return "WhatAuthorizedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorizedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorizedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorizedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorizedRequestValidationError{}

// Validate checks the field values on WhatAuthorizedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhatAuthorizedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorizedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WhatAuthorizedResponseMultiError, or nil if none found.
func (m *WhatAuthorizedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorizedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDecisionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhatAuthorizedResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhatAuthorizedResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecisionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhatAuthorizedResponseValidationError{
				field:  "DecisionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetDecisions()))
		i := 0
		for key := range m.GetDecisions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDecisions()[key]
			_ = val

			// no validation rules for Decisions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WhatAuthorizedResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WhatAuthorizedResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WhatAuthorizedResponseValidationError{
						field:  fmt.Sprintf("Decisions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WhatAuthorizedResponseMultiError(errors)
	}

	return nil
}

// WhatAuthorizedResponseMultiError is an error wrapping multiple validation
// errors returned by WhatAuthorizedResponse.ValidateAll() if the designated
// constraints aren't met.
type WhatAuthorizedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorizedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorizedResponseMultiError) AllErrors() []error { return m }

// WhatAuthorizedResponseValidationError is the validation error returned by
// WhatAuthorizedResponse.Validate if the designated constraints aren't met.
type WhatAuthorizedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorizedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorizedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorizedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorizedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorizedResponseValidationError) ErrorName() string {
	return "WhatAuthorizedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorizedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorizedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorizedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorizedResponseValidationError{}

// Validate checks the field values on IsAuthorizedRequest_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorizedRequest_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorizedRequest_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAuthorizedRequest_ResourceMultiError, or nil if none found.
func (m *IsAuthorizedRequest_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorizedRequest_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 2 || l > 50 {
		err := IsAuthorizedRequest_ResourceValidationError{
			field:  "Id",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 2 || l > 50 {
		err := IsAuthorizedRequest_ResourceValidationError{
			field:  "Type",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_IsAuthorizedRequest_Resource_Type_Pattern.MatchString(m.GetType()) {
		err := IsAuthorizedRequest_ResourceValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^(?:[A-Z][a-z]+)+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetActions()); l < 1 || l > 5 {
		err := IsAuthorizedRequest_ResourceValidationError{
			field:  "Actions",
			reason: "value must contain between 1 and 5 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 2 || l > 50 {
			err := IsAuthorizedRequest_ResourceValidationError{
				field:  fmt.Sprintf("Actions[%v]", idx),
				reason: "value length must be between 2 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_IsAuthorizedRequest_Resource_Actions_Pattern.MatchString(item) {
			err := IsAuthorizedRequest_ResourceValidationError{
				field:  fmt.Sprintf("Actions[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z0-9.:_\\\\-\\\\/]{2,}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return IsAuthorizedRequest_ResourceMultiError(errors)
	}

	return nil
}

// IsAuthorizedRequest_ResourceMultiError is an error wrapping multiple
// validation errors returned by IsAuthorizedRequest_Resource.ValidateAll() if
// the designated constraints aren't met.
type IsAuthorizedRequest_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorizedRequest_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorizedRequest_ResourceMultiError) AllErrors() []error { return m }

// IsAuthorizedRequest_ResourceValidationError is the validation error returned
// by IsAuthorizedRequest_Resource.Validate if the designated constraints
// aren't met.
type IsAuthorizedRequest_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedRequest_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedRequest_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedRequest_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedRequest_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedRequest_ResourceValidationError) ErrorName() string {
	return "IsAuthorizedRequest_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorizedRequest_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorizedRequest_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedRequest_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedRequest_ResourceValidationError{}

var _IsAuthorizedRequest_Resource_Type_Pattern = regexp.MustCompile("^(?:[A-Z][a-z]+)+$")

var _IsAuthorizedRequest_Resource_Actions_Pattern = regexp.MustCompile("^[a-zA-Z0-9.:_\\-\\/]{2,}$")

// Validate checks the field values on IsAuthorizedResponse_Action with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorizedResponse_Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorizedResponse_Action with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAuthorizedResponse_ActionMultiError, or nil if none found.
func (m *IsAuthorizedResponse_Action) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorizedResponse_Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allow

	if len(errors) > 0 {
		return IsAuthorizedResponse_ActionMultiError(errors)
	}

	return nil
}

// IsAuthorizedResponse_ActionMultiError is an error wrapping multiple
// validation errors returned by IsAuthorizedResponse_Action.ValidateAll() if
// the designated constraints aren't met.
type IsAuthorizedResponse_ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorizedResponse_ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorizedResponse_ActionMultiError) AllErrors() []error { return m }

// IsAuthorizedResponse_ActionValidationError is the validation error returned
// by IsAuthorizedResponse_Action.Validate if the designated constraints
// aren't met.
type IsAuthorizedResponse_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedResponse_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedResponse_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedResponse_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedResponse_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedResponse_ActionValidationError) ErrorName() string {
	return "IsAuthorizedResponse_ActionValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorizedResponse_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorizedResponse_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedResponse_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedResponse_ActionValidationError{}

// Validate checks the field values on IsAuthorizedResponse_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorizedResponse_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorizedResponse_Resource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsAuthorizedResponse_ResourceMultiError, or nil if none found.
func (m *IsAuthorizedResponse_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorizedResponse_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetActions()))
		i := 0
		for key := range m.GetActions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActions()[key]
			_ = val

			// no validation rules for Actions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, IsAuthorizedResponse_ResourceValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, IsAuthorizedResponse_ResourceValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return IsAuthorizedResponse_ResourceValidationError{
						field:  fmt.Sprintf("Actions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return IsAuthorizedResponse_ResourceMultiError(errors)
	}

	return nil
}

// IsAuthorizedResponse_ResourceMultiError is an error wrapping multiple
// validation errors returned by IsAuthorizedResponse_Resource.ValidateAll()
// if the designated constraints aren't met.
type IsAuthorizedResponse_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorizedResponse_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorizedResponse_ResourceMultiError) AllErrors() []error { return m }

// IsAuthorizedResponse_ResourceValidationError is the validation error
// returned by IsAuthorizedResponse_Resource.Validate if the designated
// constraints aren't met.
type IsAuthorizedResponse_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedResponse_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedResponse_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedResponse_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedResponse_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedResponse_ResourceValidationError) ErrorName() string {
	return "IsAuthorizedResponse_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorizedResponse_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorizedResponse_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedResponse_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedResponse_ResourceValidationError{}

// Validate checks the field values on IsAuthorizedResponse_ResourceType with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IsAuthorizedResponse_ResourceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorizedResponse_ResourceType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IsAuthorizedResponse_ResourceTypeMultiError, or nil if none found.
func (m *IsAuthorizedResponse_ResourceType) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorizedResponse_ResourceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetResources()))
		i := 0
		for key := range m.GetResources() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResources()[key]
			_ = val

			// no validation rules for Resources[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, IsAuthorizedResponse_ResourceTypeValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, IsAuthorizedResponse_ResourceTypeValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return IsAuthorizedResponse_ResourceTypeValidationError{
						field:  fmt.Sprintf("Resources[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return IsAuthorizedResponse_ResourceTypeMultiError(errors)
	}

	return nil
}

// IsAuthorizedResponse_ResourceTypeMultiError is an error wrapping multiple
// validation errors returned by
// IsAuthorizedResponse_ResourceType.ValidateAll() if the designated
// constraints aren't met.
type IsAuthorizedResponse_ResourceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorizedResponse_ResourceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorizedResponse_ResourceTypeMultiError) AllErrors() []error { return m }

// IsAuthorizedResponse_ResourceTypeValidationError is the validation error
// returned by IsAuthorizedResponse_ResourceType.Validate if the designated
// constraints aren't met.
type IsAuthorizedResponse_ResourceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedResponse_ResourceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedResponse_ResourceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedResponse_ResourceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedResponse_ResourceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedResponse_ResourceTypeValidationError) ErrorName() string {
	return "IsAuthorizedResponse_ResourceTypeValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorizedResponse_ResourceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorizedResponse_ResourceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedResponse_ResourceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedResponse_ResourceTypeValidationError{}

// Validate checks the field values on WhatAuthorizedResponse_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhatAuthorizedResponse_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorizedResponse_Resource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WhatAuthorizedResponse_ResourceMultiError, or nil if none found.
func (m *WhatAuthorizedResponse_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorizedResponse_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WhatAuthorizedResponse_ResourceValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WhatAuthorizedResponse_ResourceValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhatAuthorizedResponse_ResourceValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WhatAuthorizedResponse_ResourceMultiError(errors)
	}

	return nil
}

// WhatAuthorizedResponse_ResourceMultiError is an error wrapping multiple
// validation errors returned by WhatAuthorizedResponse_Resource.ValidateAll()
// if the designated constraints aren't met.
type WhatAuthorizedResponse_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorizedResponse_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorizedResponse_ResourceMultiError) AllErrors() []error { return m }

// WhatAuthorizedResponse_ResourceValidationError is the validation error
// returned by WhatAuthorizedResponse_Resource.Validate if the designated
// constraints aren't met.
type WhatAuthorizedResponse_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorizedResponse_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorizedResponse_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorizedResponse_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorizedResponse_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorizedResponse_ResourceValidationError) ErrorName() string {
	return "WhatAuthorizedResponse_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorizedResponse_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorizedResponse_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorizedResponse_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorizedResponse_ResourceValidationError{}

// Validate checks the field values on WhatAuthorizedResponse_Resources with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WhatAuthorizedResponse_Resources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorizedResponse_Resources with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WhatAuthorizedResponse_ResourcesMultiError, or nil if none found.
func (m *WhatAuthorizedResponse_Resources) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorizedResponse_Resources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WhatAuthorizedResponse_ResourcesValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WhatAuthorizedResponse_ResourcesValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhatAuthorizedResponse_ResourcesValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WhatAuthorizedResponse_ResourcesMultiError(errors)
	}

	return nil
}

// WhatAuthorizedResponse_ResourcesMultiError is an error wrapping multiple
// validation errors returned by
// WhatAuthorizedResponse_Resources.ValidateAll() if the designated
// constraints aren't met.
type WhatAuthorizedResponse_ResourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorizedResponse_ResourcesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorizedResponse_ResourcesMultiError) AllErrors() []error { return m }

// WhatAuthorizedResponse_ResourcesValidationError is the validation error
// returned by WhatAuthorizedResponse_Resources.Validate if the designated
// constraints aren't met.
type WhatAuthorizedResponse_ResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorizedResponse_ResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorizedResponse_ResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorizedResponse_ResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorizedResponse_ResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorizedResponse_ResourcesValidationError) ErrorName() string {
	return "WhatAuthorizedResponse_ResourcesValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorizedResponse_ResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorizedResponse_Resources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorizedResponse_ResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorizedResponse_ResourcesValidationError{}
