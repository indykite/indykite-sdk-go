// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Authorization Service Description.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: indykite/authorization/v1beta1/authorization_service.proto

package authorizationv1beta1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IsAuthorizedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject to check if is authorized to perform given actions.
	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// A list of resources to authorize against.
	Resources []*IsAuthorizedRequest_Resource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// Policy input params
	InputParams map[string]*InputParam `protobuf:"bytes,3,rep,name=input_params,json=inputParams,proto3" json:"input_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Only evaluate polices containing provided tags
	PolicyTags    []string `protobuf:"bytes,4,rep,name=policy_tags,json=policyTags,proto3" json:"policy_tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuthorizedRequest) Reset() {
	*x = IsAuthorizedRequest{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorizedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedRequest) ProtoMessage() {}

func (x *IsAuthorizedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedRequest.ProtoReflect.Descriptor instead.
func (*IsAuthorizedRequest) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{0}
}

func (x *IsAuthorizedRequest) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *IsAuthorizedRequest) GetResources() []*IsAuthorizedRequest_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *IsAuthorizedRequest) GetInputParams() map[string]*InputParam {
	if x != nil {
		return x.InputParams
	}
	return nil
}

func (x *IsAuthorizedRequest) GetPolicyTags() []string {
	if x != nil {
		return x.PolicyTags
	}
	return nil
}

type IsAuthorizedResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time the decision was made.
	DecisionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=decision_time,json=decisionTime,proto3" json:"decision_time,omitempty"`
	// Map with resource type as key.
	Decisions     map[string]*IsAuthorizedResponse_ResourceType `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuthorizedResponse) Reset() {
	*x = IsAuthorizedResponse{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorizedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedResponse) ProtoMessage() {}

func (x *IsAuthorizedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedResponse.ProtoReflect.Descriptor instead.
func (*IsAuthorizedResponse) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{1}
}

func (x *IsAuthorizedResponse) GetDecisionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DecisionTime
	}
	return nil
}

func (x *IsAuthorizedResponse) GetDecisions() map[string]*IsAuthorizedResponse_ResourceType {
	if x != nil {
		return x.Decisions
	}
	return nil
}

type WhatAuthorizedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject to check if is authorized to perform given actions.
	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// A list of resources types that should be checked against.
	ResourceTypes []*WhatAuthorizedRequest_ResourceType `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
	// Policy input params
	InputParams map[string]*InputParam `protobuf:"bytes,3,rep,name=input_params,json=inputParams,proto3" json:"input_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Only evaluate polices containing provided tags
	PolicyTags    []string `protobuf:"bytes,4,rep,name=policy_tags,json=policyTags,proto3" json:"policy_tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhatAuthorizedRequest) Reset() {
	*x = WhatAuthorizedRequest{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorizedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorizedRequest) ProtoMessage() {}

func (x *WhatAuthorizedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorizedRequest.ProtoReflect.Descriptor instead.
func (*WhatAuthorizedRequest) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{2}
}

func (x *WhatAuthorizedRequest) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *WhatAuthorizedRequest) GetResourceTypes() []*WhatAuthorizedRequest_ResourceType {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

func (x *WhatAuthorizedRequest) GetInputParams() map[string]*InputParam {
	if x != nil {
		return x.InputParams
	}
	return nil
}

func (x *WhatAuthorizedRequest) GetPolicyTags() []string {
	if x != nil {
		return x.PolicyTags
	}
	return nil
}

type WhatAuthorizedResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time the decision was made
	DecisionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=decision_time,json=decisionTime,proto3" json:"decision_time,omitempty"`
	// Map with resource type as key
	Decisions     map[string]*WhatAuthorizedResponse_ResourceType `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhatAuthorizedResponse) Reset() {
	*x = WhatAuthorizedResponse{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorizedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorizedResponse) ProtoMessage() {}

func (x *WhatAuthorizedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorizedResponse.ProtoReflect.Descriptor instead.
func (*WhatAuthorizedResponse) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{3}
}

func (x *WhatAuthorizedResponse) GetDecisionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DecisionTime
	}
	return nil
}

func (x *WhatAuthorizedResponse) GetDecisions() map[string]*WhatAuthorizedResponse_ResourceType {
	if x != nil {
		return x.Decisions
	}
	return nil
}

type WhoAuthorizedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of resources to authorize against.
	Resources []*WhoAuthorizedRequest_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	// Policy input params
	InputParams map[string]*InputParam `protobuf:"bytes,2,rep,name=input_params,json=inputParams,proto3" json:"input_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Only evaluate polices containing provided tags
	PolicyTags    []string `protobuf:"bytes,3,rep,name=policy_tags,json=policyTags,proto3" json:"policy_tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoAuthorizedRequest) Reset() {
	*x = WhoAuthorizedRequest{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorizedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorizedRequest) ProtoMessage() {}

func (x *WhoAuthorizedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorizedRequest.ProtoReflect.Descriptor instead.
func (*WhoAuthorizedRequest) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{4}
}

func (x *WhoAuthorizedRequest) GetResources() []*WhoAuthorizedRequest_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *WhoAuthorizedRequest) GetInputParams() map[string]*InputParam {
	if x != nil {
		return x.InputParams
	}
	return nil
}

func (x *WhoAuthorizedRequest) GetPolicyTags() []string {
	if x != nil {
		return x.PolicyTags
	}
	return nil
}

type WhoAuthorizedResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time the decision was made.
	DecisionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=decision_time,json=decisionTime,proto3" json:"decision_time,omitempty"`
	// Map with resource type as key.
	Decisions     map[string]*WhoAuthorizedResponse_ResourceType `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoAuthorizedResponse) Reset() {
	*x = WhoAuthorizedResponse{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorizedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorizedResponse) ProtoMessage() {}

func (x *WhoAuthorizedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorizedResponse.ProtoReflect.Descriptor instead.
func (*WhoAuthorizedResponse) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{5}
}

func (x *WhoAuthorizedResponse) GetDecisionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DecisionTime
	}
	return nil
}

func (x *WhoAuthorizedResponse) GetDecisions() map[string]*WhoAuthorizedResponse_ResourceType {
	if x != nil {
		return x.Decisions
	}
	return nil
}

// Resource to authorize against.
type IsAuthorizedRequest_Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource external id.
	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Resource type.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// A list of actions the subject want to perform.
	Actions       []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuthorizedRequest_Resource) Reset() {
	*x = IsAuthorizedRequest_Resource{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorizedRequest_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedRequest_Resource) ProtoMessage() {}

func (x *IsAuthorizedRequest_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedRequest_Resource.ProtoReflect.Descriptor instead.
func (*IsAuthorizedRequest_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *IsAuthorizedRequest_Resource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *IsAuthorizedRequest_Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IsAuthorizedRequest_Resource) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type IsAuthorizedResponse_Advice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error code (e.g. `"insufficient_user_authentication"`)
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// error description (e.g. `"A different authentication level is required"`)
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// map of additional values (e.g. `{"acr_values":"ACR1 ACR2"}`)
	Values        map[string]string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuthorizedResponse_Advice) Reset() {
	*x = IsAuthorizedResponse_Advice{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorizedResponse_Advice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedResponse_Advice) ProtoMessage() {}

func (x *IsAuthorizedResponse_Advice) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedResponse_Advice.ProtoReflect.Descriptor instead.
func (*IsAuthorizedResponse_Advice) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *IsAuthorizedResponse_Advice) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *IsAuthorizedResponse_Advice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IsAuthorizedResponse_Advice) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type IsAuthorizedResponse_Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Decision if action is allowed.
	Allow bool `protobuf:"varint,1,opt,name=allow,proto3" json:"allow,omitempty"`
	// List of Advice.
	Advices       []*IsAuthorizedResponse_Advice `protobuf:"bytes,2,rep,name=advices,proto3" json:"advices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuthorizedResponse_Action) Reset() {
	*x = IsAuthorizedResponse_Action{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorizedResponse_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedResponse_Action) ProtoMessage() {}

func (x *IsAuthorizedResponse_Action) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedResponse_Action.ProtoReflect.Descriptor instead.
func (*IsAuthorizedResponse_Action) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *IsAuthorizedResponse_Action) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *IsAuthorizedResponse_Action) GetAdvices() []*IsAuthorizedResponse_Advice {
	if x != nil {
		return x.Advices
	}
	return nil
}

type IsAuthorizedResponse_Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map with action as key.
	Actions       map[string]*IsAuthorizedResponse_Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuthorizedResponse_Resource) Reset() {
	*x = IsAuthorizedResponse_Resource{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorizedResponse_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedResponse_Resource) ProtoMessage() {}

func (x *IsAuthorizedResponse_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedResponse_Resource.ProtoReflect.Descriptor instead.
func (*IsAuthorizedResponse_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *IsAuthorizedResponse_Resource) GetActions() map[string]*IsAuthorizedResponse_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type IsAuthorizedResponse_ResourceType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map with resource external id as key.
	Resources     map[string]*IsAuthorizedResponse_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuthorizedResponse_ResourceType) Reset() {
	*x = IsAuthorizedResponse_ResourceType{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorizedResponse_ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedResponse_ResourceType) ProtoMessage() {}

func (x *IsAuthorizedResponse_ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedResponse_ResourceType.ProtoReflect.Descriptor instead.
func (*IsAuthorizedResponse_ResourceType) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{1, 3}
}

func (x *IsAuthorizedResponse_ResourceType) GetResources() map[string]*IsAuthorizedResponse_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Resource type to authorize against.
type WhatAuthorizedRequest_ResourceType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Optional - A list of actions the subject want to perform.
	Actions       []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhatAuthorizedRequest_ResourceType) Reset() {
	*x = WhatAuthorizedRequest_ResourceType{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorizedRequest_ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorizedRequest_ResourceType) ProtoMessage() {}

func (x *WhatAuthorizedRequest_ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorizedRequest_ResourceType.ProtoReflect.Descriptor instead.
func (*WhatAuthorizedRequest_ResourceType) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *WhatAuthorizedRequest_ResourceType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WhatAuthorizedRequest_ResourceType) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type WhatAuthorizedResponse_Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource external identifier
	ExternalId    string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhatAuthorizedResponse_Resource) Reset() {
	*x = WhatAuthorizedResponse_Resource{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorizedResponse_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorizedResponse_Resource) ProtoMessage() {}

func (x *WhatAuthorizedResponse_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorizedResponse_Resource.ProtoReflect.Descriptor instead.
func (*WhatAuthorizedResponse_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *WhatAuthorizedResponse_Resource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type WhatAuthorizedResponse_Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of resources
	Resources     []*WhatAuthorizedResponse_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhatAuthorizedResponse_Action) Reset() {
	*x = WhatAuthorizedResponse_Action{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorizedResponse_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorizedResponse_Action) ProtoMessage() {}

func (x *WhatAuthorizedResponse_Action) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorizedResponse_Action.ProtoReflect.Descriptor instead.
func (*WhatAuthorizedResponse_Action) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{3, 1}
}

func (x *WhatAuthorizedResponse_Action) GetResources() []*WhatAuthorizedResponse_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type WhatAuthorizedResponse_ResourceType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map with action as key
	Actions       map[string]*WhatAuthorizedResponse_Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhatAuthorizedResponse_ResourceType) Reset() {
	*x = WhatAuthorizedResponse_ResourceType{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorizedResponse_ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorizedResponse_ResourceType) ProtoMessage() {}

func (x *WhatAuthorizedResponse_ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorizedResponse_ResourceType.ProtoReflect.Descriptor instead.
func (*WhatAuthorizedResponse_ResourceType) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{3, 2}
}

func (x *WhatAuthorizedResponse_ResourceType) GetActions() map[string]*WhatAuthorizedResponse_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Resource to authorize against.
type WhoAuthorizedRequest_Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource external id.
	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Resource type.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// A list of actions the subject want to perform.
	Actions       []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoAuthorizedRequest_Resource) Reset() {
	*x = WhoAuthorizedRequest_Resource{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorizedRequest_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorizedRequest_Resource) ProtoMessage() {}

func (x *WhoAuthorizedRequest_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorizedRequest_Resource.ProtoReflect.Descriptor instead.
func (*WhoAuthorizedRequest_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *WhoAuthorizedRequest_Resource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *WhoAuthorizedRequest_Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WhoAuthorizedRequest_Resource) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type WhoAuthorizedResponse_Subject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// External identifier.
	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Subject type.
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoAuthorizedResponse_Subject) Reset() {
	*x = WhoAuthorizedResponse_Subject{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorizedResponse_Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorizedResponse_Subject) ProtoMessage() {}

func (x *WhoAuthorizedResponse_Subject) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorizedResponse_Subject.ProtoReflect.Descriptor instead.
func (*WhoAuthorizedResponse_Subject) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *WhoAuthorizedResponse_Subject) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *WhoAuthorizedResponse_Subject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type WhoAuthorizedResponse_Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of subjects.
	Subjects      []*WhoAuthorizedResponse_Subject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoAuthorizedResponse_Action) Reset() {
	*x = WhoAuthorizedResponse_Action{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorizedResponse_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorizedResponse_Action) ProtoMessage() {}

func (x *WhoAuthorizedResponse_Action) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorizedResponse_Action.ProtoReflect.Descriptor instead.
func (*WhoAuthorizedResponse_Action) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{5, 1}
}

func (x *WhoAuthorizedResponse_Action) GetSubjects() []*WhoAuthorizedResponse_Subject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type WhoAuthorizedResponse_Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map with actions as key.
	Actions       map[string]*WhoAuthorizedResponse_Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoAuthorizedResponse_Resource) Reset() {
	*x = WhoAuthorizedResponse_Resource{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorizedResponse_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorizedResponse_Resource) ProtoMessage() {}

func (x *WhoAuthorizedResponse_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorizedResponse_Resource.ProtoReflect.Descriptor instead.
func (*WhoAuthorizedResponse_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{5, 2}
}

func (x *WhoAuthorizedResponse_Resource) GetActions() map[string]*WhoAuthorizedResponse_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type WhoAuthorizedResponse_ResourceType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map with resource external id as key.
	Resources     map[string]*WhoAuthorizedResponse_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoAuthorizedResponse_ResourceType) Reset() {
	*x = WhoAuthorizedResponse_ResourceType{}
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorizedResponse_ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorizedResponse_ResourceType) ProtoMessage() {}

func (x *WhoAuthorizedResponse_ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorizedResponse_ResourceType.ProtoReflect.Descriptor instead.
func (*WhoAuthorizedResponse_ResourceType) Descriptor() ([]byte, []int) {
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP(), []int{5, 3}
}

func (x *WhoAuthorizedResponse_ResourceType) GetResources() map[string]*WhoAuthorizedResponse_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

var File_indykite_authorization_v1beta1_authorization_service_proto protoreflect.FileDescriptor

var file_indykite_authorization_v1beta1_authorization_service_proto_rawDesc = string([]byte{
	0x0a, 0x3a, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcb, 0x05, 0x0a, 0x13, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x66, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x20, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x99, 0x01, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x30, 0xfa, 0x42,
	0x2d, 0x9a, 0x01, 0x2a, 0x08, 0x00, 0x10, 0x14, 0x22, 0x24, 0x72, 0x22, 0x10, 0x01, 0x18, 0x14,
	0x32, 0x1c, 0x5e, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x18, 0x01, 0x22, 0x16, 0x72, 0x14, 0x10, 0x01,
	0x18, 0x14, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d,
	0x2b, 0x24, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x67, 0x73,
	0x1a, 0xb1, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x32, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42, 0x1a, 0x72, 0x18, 0x10, 0x02,
	0x18, 0x32, 0x32, 0x12, 0x5e, 0x28, 0x3f, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2c, 0xfa,
	0x42, 0x29, 0x92, 0x01, 0x26, 0x08, 0x01, 0x10, 0x05, 0x22, 0x20, 0x72, 0x1e, 0x10, 0x02, 0x18,
	0x32, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x3a,
	0x5f, 0x5c, 0x2d, 0x5c, 0x2f, 0x5d, 0x7b, 0x32, 0x2c, 0x7d, 0x24, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6a, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xfb, 0x08, 0x0a, 0x14, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xdc, 0x01,
	0x0a, 0x06, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x75, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x55, 0x0a, 0x07,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x61, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0xe9, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x64, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x77, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xfb, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x6e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x1a, 0x7b, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7f, 0x0a,
	0x0e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8,
	0x05, 0x0a, 0x15, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x75, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57,
	0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a,
	0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x30, 0xfa, 0x42, 0x2d,
	0x9a, 0x01, 0x2a, 0x08, 0x00, 0x10, 0x14, 0x22, 0x24, 0x72, 0x22, 0x10, 0x01, 0x18, 0x14, 0x32,
	0x1c, 0x5e, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x0b, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x18, 0x01, 0x22, 0x16, 0x72, 0x14, 0x10, 0x01, 0x18,
	0x14, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b,
	0x24, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x67, 0x73, 0x1a,
	0x8b, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0xfa, 0x42, 0x1a, 0x72, 0x18, 0x10, 0x02, 0x18, 0x32, 0x32, 0x12, 0x5e, 0x28, 0x3f, 0x3a, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x42, 0x2b, 0x92, 0x01, 0x28, 0x08, 0x01, 0x10, 0x05,
	0x22, 0x20, 0x72, 0x1e, 0x10, 0x02, 0x18, 0x32, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x3a, 0x5f, 0x5c, 0x2d, 0x5c, 0x2f, 0x5d, 0x7b, 0x32, 0x2c,
	0x7d, 0x24, 0x28, 0x01, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6a, 0x0a,
	0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x05, 0x0a, 0x16, 0x57, 0x68,
	0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2b, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x1a, 0x67, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x1a, 0xf5, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x6a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x79, 0x0a,
	0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x81, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x59, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68,
	0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x05, 0x0a,
	0x14, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x20, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x9a,
	0x01, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x30, 0xfa, 0x42,
	0x2d, 0x9a, 0x01, 0x2a, 0x08, 0x00, 0x10, 0x14, 0x22, 0x24, 0x72, 0x22, 0x10, 0x01, 0x18, 0x14,
	0x32, 0x1c, 0x5e, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x18, 0x01, 0x22, 0x16, 0x72, 0x14, 0x10, 0x01,
	0x18, 0x14, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d,
	0x2b, 0x24, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x67, 0x73,
	0x1a, 0xb3, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x32, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42, 0x1a, 0x72, 0x18, 0x10, 0x02,
	0x18, 0x32, 0x32, 0x12, 0x5e, 0x28, 0x3f, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2e, 0xfa,
	0x42, 0x2b, 0x92, 0x01, 0x28, 0x08, 0x01, 0x10, 0x05, 0x22, 0x20, 0x72, 0x1e, 0x10, 0x02, 0x18,
	0x32, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x3a,
	0x5f, 0x5c, 0x2d, 0x5c, 0x2f, 0x5d, 0x7b, 0x32, 0x2c, 0x7d, 0x24, 0x28, 0x01, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6a, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd2, 0x07, 0x0a, 0x15, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x3e, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0x63, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57,
	0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0xeb, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x78, 0x0a, 0x0c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xfd, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x7c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x80, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x8c, 0x03, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x50, 0x49, 0x12, 0x79, 0x0a, 0x0c,
	0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x57, 0x68, 0x61, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0d, 0x57, 0x68, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xb6, 0x02, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x19, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x41, 0x58, 0xaa, 0x02, 0x1e,
	0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02,
	0x1e, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2,
	0x02, 0x2a, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x49,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_indykite_authorization_v1beta1_authorization_service_proto_rawDescOnce sync.Once
	file_indykite_authorization_v1beta1_authorization_service_proto_rawDescData []byte
)

func file_indykite_authorization_v1beta1_authorization_service_proto_rawDescGZIP() []byte {
	file_indykite_authorization_v1beta1_authorization_service_proto_rawDescOnce.Do(func() {
		file_indykite_authorization_v1beta1_authorization_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_indykite_authorization_v1beta1_authorization_service_proto_rawDesc), len(file_indykite_authorization_v1beta1_authorization_service_proto_rawDesc)))
	})
	return file_indykite_authorization_v1beta1_authorization_service_proto_rawDescData
}

var file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_indykite_authorization_v1beta1_authorization_service_proto_goTypes = []any{
	(*IsAuthorizedRequest)(nil),               // 0: indykite.authorization.v1beta1.IsAuthorizedRequest
	(*IsAuthorizedResponse)(nil),              // 1: indykite.authorization.v1beta1.IsAuthorizedResponse
	(*WhatAuthorizedRequest)(nil),             // 2: indykite.authorization.v1beta1.WhatAuthorizedRequest
	(*WhatAuthorizedResponse)(nil),            // 3: indykite.authorization.v1beta1.WhatAuthorizedResponse
	(*WhoAuthorizedRequest)(nil),              // 4: indykite.authorization.v1beta1.WhoAuthorizedRequest
	(*WhoAuthorizedResponse)(nil),             // 5: indykite.authorization.v1beta1.WhoAuthorizedResponse
	(*IsAuthorizedRequest_Resource)(nil),      // 6: indykite.authorization.v1beta1.IsAuthorizedRequest.Resource
	nil,                                       // 7: indykite.authorization.v1beta1.IsAuthorizedRequest.InputParamsEntry
	(*IsAuthorizedResponse_Advice)(nil),       // 8: indykite.authorization.v1beta1.IsAuthorizedResponse.Advice
	(*IsAuthorizedResponse_Action)(nil),       // 9: indykite.authorization.v1beta1.IsAuthorizedResponse.Action
	(*IsAuthorizedResponse_Resource)(nil),     // 10: indykite.authorization.v1beta1.IsAuthorizedResponse.Resource
	(*IsAuthorizedResponse_ResourceType)(nil), // 11: indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType
	nil, // 12: indykite.authorization.v1beta1.IsAuthorizedResponse.DecisionsEntry
	nil, // 13: indykite.authorization.v1beta1.IsAuthorizedResponse.Advice.ValuesEntry
	nil, // 14: indykite.authorization.v1beta1.IsAuthorizedResponse.Resource.ActionsEntry
	nil, // 15: indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType.ResourcesEntry
	(*WhatAuthorizedRequest_ResourceType)(nil), // 16: indykite.authorization.v1beta1.WhatAuthorizedRequest.ResourceType
	nil,                                     // 17: indykite.authorization.v1beta1.WhatAuthorizedRequest.InputParamsEntry
	(*WhatAuthorizedResponse_Resource)(nil), // 18: indykite.authorization.v1beta1.WhatAuthorizedResponse.Resource
	(*WhatAuthorizedResponse_Action)(nil),   // 19: indykite.authorization.v1beta1.WhatAuthorizedResponse.Action
	(*WhatAuthorizedResponse_ResourceType)(nil), // 20: indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType
	nil,                                    // 21: indykite.authorization.v1beta1.WhatAuthorizedResponse.DecisionsEntry
	nil,                                    // 22: indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType.ActionsEntry
	(*WhoAuthorizedRequest_Resource)(nil),  // 23: indykite.authorization.v1beta1.WhoAuthorizedRequest.Resource
	nil,                                    // 24: indykite.authorization.v1beta1.WhoAuthorizedRequest.InputParamsEntry
	(*WhoAuthorizedResponse_Subject)(nil),  // 25: indykite.authorization.v1beta1.WhoAuthorizedResponse.Subject
	(*WhoAuthorizedResponse_Action)(nil),   // 26: indykite.authorization.v1beta1.WhoAuthorizedResponse.Action
	(*WhoAuthorizedResponse_Resource)(nil), // 27: indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource
	(*WhoAuthorizedResponse_ResourceType)(nil), // 28: indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType
	nil,                           // 29: indykite.authorization.v1beta1.WhoAuthorizedResponse.DecisionsEntry
	nil,                           // 30: indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource.ActionsEntry
	nil,                           // 31: indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType.ResourcesEntry
	(*Subject)(nil),               // 32: indykite.authorization.v1beta1.Subject
	(*timestamppb.Timestamp)(nil), // 33: google.protobuf.Timestamp
	(*InputParam)(nil),            // 34: indykite.authorization.v1beta1.InputParam
}
var file_indykite_authorization_v1beta1_authorization_service_proto_depIdxs = []int32{
	32, // 0: indykite.authorization.v1beta1.IsAuthorizedRequest.subject:type_name -> indykite.authorization.v1beta1.Subject
	6,  // 1: indykite.authorization.v1beta1.IsAuthorizedRequest.resources:type_name -> indykite.authorization.v1beta1.IsAuthorizedRequest.Resource
	7,  // 2: indykite.authorization.v1beta1.IsAuthorizedRequest.input_params:type_name -> indykite.authorization.v1beta1.IsAuthorizedRequest.InputParamsEntry
	33, // 3: indykite.authorization.v1beta1.IsAuthorizedResponse.decision_time:type_name -> google.protobuf.Timestamp
	12, // 4: indykite.authorization.v1beta1.IsAuthorizedResponse.decisions:type_name -> indykite.authorization.v1beta1.IsAuthorizedResponse.DecisionsEntry
	32, // 5: indykite.authorization.v1beta1.WhatAuthorizedRequest.subject:type_name -> indykite.authorization.v1beta1.Subject
	16, // 6: indykite.authorization.v1beta1.WhatAuthorizedRequest.resource_types:type_name -> indykite.authorization.v1beta1.WhatAuthorizedRequest.ResourceType
	17, // 7: indykite.authorization.v1beta1.WhatAuthorizedRequest.input_params:type_name -> indykite.authorization.v1beta1.WhatAuthorizedRequest.InputParamsEntry
	33, // 8: indykite.authorization.v1beta1.WhatAuthorizedResponse.decision_time:type_name -> google.protobuf.Timestamp
	21, // 9: indykite.authorization.v1beta1.WhatAuthorizedResponse.decisions:type_name -> indykite.authorization.v1beta1.WhatAuthorizedResponse.DecisionsEntry
	23, // 10: indykite.authorization.v1beta1.WhoAuthorizedRequest.resources:type_name -> indykite.authorization.v1beta1.WhoAuthorizedRequest.Resource
	24, // 11: indykite.authorization.v1beta1.WhoAuthorizedRequest.input_params:type_name -> indykite.authorization.v1beta1.WhoAuthorizedRequest.InputParamsEntry
	33, // 12: indykite.authorization.v1beta1.WhoAuthorizedResponse.decision_time:type_name -> google.protobuf.Timestamp
	29, // 13: indykite.authorization.v1beta1.WhoAuthorizedResponse.decisions:type_name -> indykite.authorization.v1beta1.WhoAuthorizedResponse.DecisionsEntry
	34, // 14: indykite.authorization.v1beta1.IsAuthorizedRequest.InputParamsEntry.value:type_name -> indykite.authorization.v1beta1.InputParam
	13, // 15: indykite.authorization.v1beta1.IsAuthorizedResponse.Advice.values:type_name -> indykite.authorization.v1beta1.IsAuthorizedResponse.Advice.ValuesEntry
	8,  // 16: indykite.authorization.v1beta1.IsAuthorizedResponse.Action.advices:type_name -> indykite.authorization.v1beta1.IsAuthorizedResponse.Advice
	14, // 17: indykite.authorization.v1beta1.IsAuthorizedResponse.Resource.actions:type_name -> indykite.authorization.v1beta1.IsAuthorizedResponse.Resource.ActionsEntry
	15, // 18: indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType.resources:type_name -> indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType.ResourcesEntry
	11, // 19: indykite.authorization.v1beta1.IsAuthorizedResponse.DecisionsEntry.value:type_name -> indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType
	9,  // 20: indykite.authorization.v1beta1.IsAuthorizedResponse.Resource.ActionsEntry.value:type_name -> indykite.authorization.v1beta1.IsAuthorizedResponse.Action
	10, // 21: indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType.ResourcesEntry.value:type_name -> indykite.authorization.v1beta1.IsAuthorizedResponse.Resource
	34, // 22: indykite.authorization.v1beta1.WhatAuthorizedRequest.InputParamsEntry.value:type_name -> indykite.authorization.v1beta1.InputParam
	18, // 23: indykite.authorization.v1beta1.WhatAuthorizedResponse.Action.resources:type_name -> indykite.authorization.v1beta1.WhatAuthorizedResponse.Resource
	22, // 24: indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType.actions:type_name -> indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType.ActionsEntry
	20, // 25: indykite.authorization.v1beta1.WhatAuthorizedResponse.DecisionsEntry.value:type_name -> indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType
	19, // 26: indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType.ActionsEntry.value:type_name -> indykite.authorization.v1beta1.WhatAuthorizedResponse.Action
	34, // 27: indykite.authorization.v1beta1.WhoAuthorizedRequest.InputParamsEntry.value:type_name -> indykite.authorization.v1beta1.InputParam
	25, // 28: indykite.authorization.v1beta1.WhoAuthorizedResponse.Action.subjects:type_name -> indykite.authorization.v1beta1.WhoAuthorizedResponse.Subject
	30, // 29: indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource.actions:type_name -> indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource.ActionsEntry
	31, // 30: indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType.resources:type_name -> indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType.ResourcesEntry
	28, // 31: indykite.authorization.v1beta1.WhoAuthorizedResponse.DecisionsEntry.value:type_name -> indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType
	26, // 32: indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource.ActionsEntry.value:type_name -> indykite.authorization.v1beta1.WhoAuthorizedResponse.Action
	27, // 33: indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType.ResourcesEntry.value:type_name -> indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource
	0,  // 34: indykite.authorization.v1beta1.AuthorizationAPI.IsAuthorized:input_type -> indykite.authorization.v1beta1.IsAuthorizedRequest
	2,  // 35: indykite.authorization.v1beta1.AuthorizationAPI.WhatAuthorized:input_type -> indykite.authorization.v1beta1.WhatAuthorizedRequest
	4,  // 36: indykite.authorization.v1beta1.AuthorizationAPI.WhoAuthorized:input_type -> indykite.authorization.v1beta1.WhoAuthorizedRequest
	1,  // 37: indykite.authorization.v1beta1.AuthorizationAPI.IsAuthorized:output_type -> indykite.authorization.v1beta1.IsAuthorizedResponse
	3,  // 38: indykite.authorization.v1beta1.AuthorizationAPI.WhatAuthorized:output_type -> indykite.authorization.v1beta1.WhatAuthorizedResponse
	5,  // 39: indykite.authorization.v1beta1.AuthorizationAPI.WhoAuthorized:output_type -> indykite.authorization.v1beta1.WhoAuthorizedResponse
	37, // [37:40] is the sub-list for method output_type
	34, // [34:37] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_indykite_authorization_v1beta1_authorization_service_proto_init() }
func file_indykite_authorization_v1beta1_authorization_service_proto_init() {
	if File_indykite_authorization_v1beta1_authorization_service_proto != nil {
		return
	}
	file_indykite_authorization_v1beta1_model_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_indykite_authorization_v1beta1_authorization_service_proto_rawDesc), len(file_indykite_authorization_v1beta1_authorization_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indykite_authorization_v1beta1_authorization_service_proto_goTypes,
		DependencyIndexes: file_indykite_authorization_v1beta1_authorization_service_proto_depIdxs,
		MessageInfos:      file_indykite_authorization_v1beta1_authorization_service_proto_msgTypes,
	}.Build()
	File_indykite_authorization_v1beta1_authorization_service_proto = out.File
	file_indykite_authorization_v1beta1_authorization_service_proto_goTypes = nil
	file_indykite_authorization_v1beta1_authorization_service_proto_depIdxs = nil
}
