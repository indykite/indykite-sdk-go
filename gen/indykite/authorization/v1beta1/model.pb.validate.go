// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/authorization/v1beta1/model.proto

package authorizationv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SubjectMultiError, or nil if none found.
func (m *Subject) ValidateAll() error {
	return m.validate(true)
}

func (m *Subject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofSubjectPresent := false
	switch v := m.Subject.(type) {
	case *Subject_DigitalTwinId:
		if v == nil {
			err := SubjectValidationError{
				field:  "Subject",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSubjectPresent = true

		if m.GetDigitalTwinId() == nil {
			err := SubjectValidationError{
				field:  "DigitalTwinId",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDigitalTwinId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "DigitalTwinId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "DigitalTwinId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDigitalTwinId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectValidationError{
					field:  "DigitalTwinId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Subject_DigitalTwinProperty:
		if v == nil {
			err := SubjectValidationError{
				field:  "Subject",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSubjectPresent = true

		if m.GetDigitalTwinProperty() == nil {
			err := SubjectValidationError{
				field:  "DigitalTwinProperty",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDigitalTwinProperty()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "DigitalTwinProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "DigitalTwinProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDigitalTwinProperty()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectValidationError{
					field:  "DigitalTwinProperty",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Subject_AccessToken:
		if v == nil {
			err := SubjectValidationError{
				field:  "Subject",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSubjectPresent = true

		if utf8.RuneCountInString(m.GetAccessToken()) < 20 {
			err := SubjectValidationError{
				field:  "AccessToken",
				reason: "value length must be at least 20 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *Subject_ExternalId:
		if v == nil {
			err := SubjectValidationError{
				field:  "Subject",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSubjectPresent = true

		if m.GetExternalId() == nil {
			err := SubjectValidationError{
				field:  "ExternalId",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "ExternalId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectValidationError{
						field:  "ExternalId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectValidationError{
					field:  "ExternalId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofSubjectPresent {
		err := SubjectValidationError{
			field:  "Subject",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SubjectMultiError(errors)
	}

	return nil
}

// SubjectMultiError is an error wrapping multiple validation errors returned
// by Subject.ValidateAll() if the designated constraints aren't met.
type SubjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectMultiError) AllErrors() []error { return m }

// SubjectValidationError is the validation error returned by Subject.Validate
// if the designated constraints aren't met.
type SubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectValidationError) ErrorName() string { return "SubjectValidationError" }

// Error satisfies the builtin error interface
func (e SubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectValidationError{}

// Validate checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DigitalTwin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DigitalTwinMultiError, or
// nil if none found.
func (m *DigitalTwin) ValidateAll() error {
	return m.validate(true)
}

func (m *DigitalTwin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 27 || l > 100 {
		err := DigitalTwinValidationError{
			field:  "Id",
			reason: "value length must be between 27 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DigitalTwin_Id_Pattern.MatchString(m.GetId()) {
		err := DigitalTwinValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^gid:[A-Za-z0-9-_]{27,100}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DigitalTwinMultiError(errors)
	}

	return nil
}

// DigitalTwinMultiError is an error wrapping multiple validation errors
// returned by DigitalTwin.ValidateAll() if the designated constraints aren't met.
type DigitalTwinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DigitalTwinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DigitalTwinMultiError) AllErrors() []error { return m }

// DigitalTwinValidationError is the validation error returned by
// DigitalTwin.Validate if the designated constraints aren't met.
type DigitalTwinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DigitalTwinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DigitalTwinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DigitalTwinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DigitalTwinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DigitalTwinValidationError) ErrorName() string { return "DigitalTwinValidationError" }

// Error satisfies the builtin error interface
func (e DigitalTwinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDigitalTwin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DigitalTwinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DigitalTwinValidationError{}

var _DigitalTwin_Id_Pattern = regexp.MustCompile("^gid:[A-Za-z0-9-_]{27,100}$")

// Validate checks the field values on Property with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Property) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Property with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyMultiError, or nil
// if none found.
func (m *Property) ValidateAll() error {
	return m.validate(true)
}

func (m *Property) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetType()); l < 2 || l > 20 {
		err := PropertyValidationError{
			field:  "Type",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetValue() == nil {
		err := PropertyValidationError{
			field:  "Value",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropertyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropertyValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PropertyMultiError(errors)
	}

	return nil
}

// PropertyMultiError is an error wrapping multiple validation errors returned
// by Property.ValidateAll() if the designated constraints aren't met.
type PropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyMultiError) AllErrors() []error { return m }

// PropertyValidationError is the validation error returned by
// Property.Validate if the designated constraints aren't met.
type PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyValidationError) ErrorName() string { return "PropertyValidationError" }

// Error satisfies the builtin error interface
func (e PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyValidationError{}

// Validate checks the field values on ExternalID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExternalID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExternalIDMultiError, or
// nil if none found.
func (m *ExternalID) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetType()) > 64 {
		err := ExternalIDValidationError{
			field:  "Type",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ExternalID_Type_Pattern.MatchString(m.GetType()) {
		err := ExternalIDValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[a-zA-Z]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExternalId()) < 1 {
		err := ExternalIDValidationError{
			field:  "ExternalId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExternalIDMultiError(errors)
	}

	return nil
}

// ExternalIDMultiError is an error wrapping multiple validation errors
// returned by ExternalID.ValidateAll() if the designated constraints aren't met.
type ExternalIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalIDMultiError) AllErrors() []error { return m }

// ExternalIDValidationError is the validation error returned by
// ExternalID.Validate if the designated constraints aren't met.
type ExternalIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalIDValidationError) ErrorName() string { return "ExternalIDValidationError" }

// Error satisfies the builtin error interface
func (e ExternalIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalIDValidationError{}

var _ExternalID_Type_Pattern = regexp.MustCompile("^[a-zA-Z]*$")

// Validate checks the field values on InputParam with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InputParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InputParam with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InputParamMultiError, or
// nil if none found.
func (m *InputParam) ValidateAll() error {
	return m.validate(true)
}

func (m *InputParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofValuePresent := false
	switch v := m.Value.(type) {
	case *InputParam_StringValue:
		if v == nil {
			err := InputParamValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValuePresent = true

		if l := utf8.RuneCountInString(m.GetStringValue()); l < 1 || l > 50 {
			err := InputParamValidationError{
				field:  "StringValue",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *InputParam_BoolValue:
		if v == nil {
			err := InputParamValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValuePresent = true
		// no validation rules for BoolValue
	case *InputParam_IntegerValue:
		if v == nil {
			err := InputParamValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValuePresent = true
		// no validation rules for IntegerValue
	case *InputParam_DoubleValue:
		if v == nil {
			err := InputParamValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValuePresent = true
		// no validation rules for DoubleValue
	case *InputParam_TimeValue:
		if v == nil {
			err := InputParamValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValuePresent = true

		if all {
			switch v := interface{}(m.GetTimeValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputParamValidationError{
						field:  "TimeValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputParamValidationError{
						field:  "TimeValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputParamValidationError{
					field:  "TimeValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InputParam_DurationValue:
		if v == nil {
			err := InputParamValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValuePresent = true

		if all {
			switch v := interface{}(m.GetDurationValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputParamValidationError{
						field:  "DurationValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputParamValidationError{
						field:  "DurationValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDurationValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputParamValidationError{
					field:  "DurationValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InputParam_ArrayValue:
		if v == nil {
			err := InputParamValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValuePresent = true

		if all {
			switch v := interface{}(m.GetArrayValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputParamValidationError{
						field:  "ArrayValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputParamValidationError{
						field:  "ArrayValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArrayValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputParamValidationError{
					field:  "ArrayValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InputParam_MapValue:
		if v == nil {
			err := InputParamValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValuePresent = true

		if all {
			switch v := interface{}(m.GetMapValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputParamValidationError{
						field:  "MapValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputParamValidationError{
						field:  "MapValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMapValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputParamValidationError{
					field:  "MapValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofValuePresent {
		err := InputParamValidationError{
			field:  "Value",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InputParamMultiError(errors)
	}

	return nil
}

// InputParamMultiError is an error wrapping multiple validation errors
// returned by InputParam.ValidateAll() if the designated constraints aren't met.
type InputParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputParamMultiError) AllErrors() []error { return m }

// InputParamValidationError is the validation error returned by
// InputParam.Validate if the designated constraints aren't met.
type InputParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputParamValidationError) ErrorName() string { return "InputParamValidationError" }

// Error satisfies the builtin error interface
func (e InputParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputParamValidationError{}
