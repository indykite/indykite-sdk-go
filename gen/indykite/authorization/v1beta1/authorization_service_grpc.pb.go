// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: indykite/authorization/v1beta1/authorization_service.proto

package authorizationv1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationAPIClient is the client API for AuthorizationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationAPIClient interface {
	IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error)
}

type authorizationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationAPIClient(cc grpc.ClientConnInterface) AuthorizationAPIClient {
	return &authorizationAPIClient{cc}
}

func (c *authorizationAPIClient) IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error) {
	out := new(IsAuthorizedResponse)
	err := c.cc.Invoke(ctx, "/indykite.authorization.v1beta1.AuthorizationAPI/IsAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationAPIServer is the server API for AuthorizationAPI service.
// All implementations should embed UnimplementedAuthorizationAPIServer
// for forward compatibility
type AuthorizationAPIServer interface {
	IsAuthorized(context.Context, *IsAuthorizedRequest) (*IsAuthorizedResponse, error)
}

// UnimplementedAuthorizationAPIServer should be embedded to have forward compatible implementations.
type UnimplementedAuthorizationAPIServer struct {
}

func (UnimplementedAuthorizationAPIServer) IsAuthorized(context.Context, *IsAuthorizedRequest) (*IsAuthorizedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorized not implemented")
}

// UnsafeAuthorizationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationAPIServer will
// result in compilation errors.
type UnsafeAuthorizationAPIServer interface {
	mustEmbedUnimplementedAuthorizationAPIServer()
}

func RegisterAuthorizationAPIServer(s grpc.ServiceRegistrar, srv AuthorizationAPIServer) {
	s.RegisterService(&AuthorizationAPI_ServiceDesc, srv)
}

func _AuthorizationAPI_IsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorizedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationAPIServer).IsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indykite.authorization.v1beta1.AuthorizationAPI/IsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationAPIServer).IsAuthorized(ctx, req.(*IsAuthorizedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationAPI_ServiceDesc is the grpc.ServiceDesc for AuthorizationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indykite.authorization.v1beta1.AuthorizationAPI",
	HandlerType: (*AuthorizationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthorized",
			Handler:    _AuthorizationAPI_IsAuthorized_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indykite/authorization/v1beta1/authorization_service.proto",
}
