// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/auditsink/v1beta1/ciq.proto

package auditsinkv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExecuteKnowledgeQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteKnowledgeQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteKnowledgeQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteKnowledgeQueryMultiError, or nil if none found.
func (m *ExecuteKnowledgeQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteKnowledgeQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteKnowledgeQueryValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteKnowledgeQueryValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteKnowledgeQueryValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Authorized

	if len(errors) > 0 {
		return ExecuteKnowledgeQueryMultiError(errors)
	}

	return nil
}

// ExecuteKnowledgeQueryMultiError is an error wrapping multiple validation
// errors returned by ExecuteKnowledgeQuery.ValidateAll() if the designated
// constraints aren't met.
type ExecuteKnowledgeQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteKnowledgeQueryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteKnowledgeQueryMultiError) AllErrors() []error { return m }

// ExecuteKnowledgeQueryValidationError is the validation error returned by
// ExecuteKnowledgeQuery.Validate if the designated constraints aren't met.
type ExecuteKnowledgeQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteKnowledgeQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteKnowledgeQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteKnowledgeQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteKnowledgeQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteKnowledgeQueryValidationError) ErrorName() string {
	return "ExecuteKnowledgeQueryValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteKnowledgeQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteKnowledgeQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteKnowledgeQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteKnowledgeQueryValidationError{}

// Validate checks the field values on ExecuteKnowledgeQuery_Query with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteKnowledgeQuery_Query) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteKnowledgeQuery_Query with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteKnowledgeQuery_QueryMultiError, or nil if none found.
func (m *ExecuteKnowledgeQuery_Query) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteKnowledgeQuery_Query) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	// no validation rules for Query

	if len(errors) > 0 {
		return ExecuteKnowledgeQuery_QueryMultiError(errors)
	}

	return nil
}

// ExecuteKnowledgeQuery_QueryMultiError is an error wrapping multiple
// validation errors returned by ExecuteKnowledgeQuery_Query.ValidateAll() if
// the designated constraints aren't met.
type ExecuteKnowledgeQuery_QueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteKnowledgeQuery_QueryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteKnowledgeQuery_QueryMultiError) AllErrors() []error { return m }

// ExecuteKnowledgeQuery_QueryValidationError is the validation error returned
// by ExecuteKnowledgeQuery_Query.Validate if the designated constraints
// aren't met.
type ExecuteKnowledgeQuery_QueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteKnowledgeQuery_QueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteKnowledgeQuery_QueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteKnowledgeQuery_QueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteKnowledgeQuery_QueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteKnowledgeQuery_QueryValidationError) ErrorName() string {
	return "ExecuteKnowledgeQuery_QueryValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteKnowledgeQuery_QueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteKnowledgeQuery_Query.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteKnowledgeQuery_QueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteKnowledgeQuery_QueryValidationError{}

// Validate checks the field values on ExecuteKnowledgeQuery_Policy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteKnowledgeQuery_Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteKnowledgeQuery_Policy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteKnowledgeQuery_PolicyMultiError, or nil if none found.
func (m *ExecuteKnowledgeQuery_Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteKnowledgeQuery_Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	// no validation rules for Policy

	if len(errors) > 0 {
		return ExecuteKnowledgeQuery_PolicyMultiError(errors)
	}

	return nil
}

// ExecuteKnowledgeQuery_PolicyMultiError is an error wrapping multiple
// validation errors returned by ExecuteKnowledgeQuery_Policy.ValidateAll() if
// the designated constraints aren't met.
type ExecuteKnowledgeQuery_PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteKnowledgeQuery_PolicyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteKnowledgeQuery_PolicyMultiError) AllErrors() []error { return m }

// ExecuteKnowledgeQuery_PolicyValidationError is the validation error returned
// by ExecuteKnowledgeQuery_Policy.Validate if the designated constraints
// aren't met.
type ExecuteKnowledgeQuery_PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteKnowledgeQuery_PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteKnowledgeQuery_PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteKnowledgeQuery_PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteKnowledgeQuery_PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteKnowledgeQuery_PolicyValidationError) ErrorName() string {
	return "ExecuteKnowledgeQuery_PolicyValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteKnowledgeQuery_PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteKnowledgeQuery_Policy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteKnowledgeQuery_PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteKnowledgeQuery_PolicyValidationError{}

// Validate checks the field values on ExecuteKnowledgeQuery_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteKnowledgeQuery_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteKnowledgeQuery_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExecuteKnowledgeQuery_RequestMultiError, or nil if none found.
func (m *ExecuteKnowledgeQuery_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteKnowledgeQuery_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteKnowledgeQuery_RequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteKnowledgeQuery_RequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteKnowledgeQuery_RequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteKnowledgeQuery_RequestValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteKnowledgeQuery_RequestValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteKnowledgeQuery_RequestValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetInputParams()))
		i := 0
		for key := range m.GetInputParams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetInputParams()[key]
			_ = val

			// no validation rules for InputParams[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ExecuteKnowledgeQuery_RequestValidationError{
							field:  fmt.Sprintf("InputParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ExecuteKnowledgeQuery_RequestValidationError{
							field:  fmt.Sprintf("InputParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ExecuteKnowledgeQuery_RequestValidationError{
						field:  fmt.Sprintf("InputParams[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ExecuteKnowledgeQuery_RequestMultiError(errors)
	}

	return nil
}

// ExecuteKnowledgeQuery_RequestMultiError is an error wrapping multiple
// validation errors returned by ExecuteKnowledgeQuery_Request.ValidateAll()
// if the designated constraints aren't met.
type ExecuteKnowledgeQuery_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteKnowledgeQuery_RequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteKnowledgeQuery_RequestMultiError) AllErrors() []error { return m }

// ExecuteKnowledgeQuery_RequestValidationError is the validation error
// returned by ExecuteKnowledgeQuery_Request.Validate if the designated
// constraints aren't met.
type ExecuteKnowledgeQuery_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteKnowledgeQuery_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteKnowledgeQuery_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteKnowledgeQuery_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteKnowledgeQuery_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteKnowledgeQuery_RequestValidationError) ErrorName() string {
	return "ExecuteKnowledgeQuery_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteKnowledgeQuery_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteKnowledgeQuery_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteKnowledgeQuery_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteKnowledgeQuery_RequestValidationError{}
