// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: indykite/auditsink/v1beta1/authorization.proto

package auditsinkv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	v1beta1 "github.com/indykite/indykite-sdk-go/gen/indykite/objects/v1beta1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthorizationSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Subject:
	//
	//	*AuthorizationSubject_DigitalTwin
	//	*AuthorizationSubject_DigitalTwinProperty
	//	*AuthorizationSubject_AccessToken
	//	*AuthorizationSubject_ExternalId
	Subject isAuthorizationSubject_Subject `protobuf_oneof:"subject"`
}

func (x *AuthorizationSubject) Reset() {
	*x = AuthorizationSubject{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationSubject) ProtoMessage() {}

func (x *AuthorizationSubject) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationSubject.ProtoReflect.Descriptor instead.
func (*AuthorizationSubject) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{0}
}

func (m *AuthorizationSubject) GetSubject() isAuthorizationSubject_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (x *AuthorizationSubject) GetDigitalTwin() *AuthorizationDigitalTwin {
	if x, ok := x.GetSubject().(*AuthorizationSubject_DigitalTwin); ok {
		return x.DigitalTwin
	}
	return nil
}

func (x *AuthorizationSubject) GetDigitalTwinProperty() *AuthorizationSubject_Property {
	if x, ok := x.GetSubject().(*AuthorizationSubject_DigitalTwinProperty); ok {
		return x.DigitalTwinProperty
	}
	return nil
}

func (x *AuthorizationSubject) GetAccessToken() string {
	if x, ok := x.GetSubject().(*AuthorizationSubject_AccessToken); ok {
		return x.AccessToken
	}
	return ""
}

func (x *AuthorizationSubject) GetExternalId() *AuthorizationSubject_ExternalID {
	if x, ok := x.GetSubject().(*AuthorizationSubject_ExternalId); ok {
		return x.ExternalId
	}
	return nil
}

type isAuthorizationSubject_Subject interface {
	isAuthorizationSubject_Subject()
}

type AuthorizationSubject_DigitalTwin struct {
	DigitalTwin *AuthorizationDigitalTwin `protobuf:"bytes,1,opt,name=digital_twin,json=digitalTwin,proto3,oneof"`
}

type AuthorizationSubject_DigitalTwinProperty struct {
	DigitalTwinProperty *AuthorizationSubject_Property `protobuf:"bytes,2,opt,name=digital_twin_property,json=digitalTwinProperty,proto3,oneof"`
}

type AuthorizationSubject_AccessToken struct {
	AccessToken string `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3,oneof"`
}

type AuthorizationSubject_ExternalId struct {
	ExternalId *AuthorizationSubject_ExternalID `protobuf:"bytes,4,opt,name=external_id,json=externalId,proto3,oneof"`
}

func (*AuthorizationSubject_DigitalTwin) isAuthorizationSubject_Subject() {}

func (*AuthorizationSubject_DigitalTwinProperty) isAuthorizationSubject_Subject() {}

func (*AuthorizationSubject_AccessToken) isAuthorizationSubject_Subject() {}

func (*AuthorizationSubject_ExternalId) isAuthorizationSubject_Subject() {}

type AuthorizationDigitalTwin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AuthorizationDigitalTwin) Reset() {
	*x = AuthorizationDigitalTwin{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationDigitalTwin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationDigitalTwin) ProtoMessage() {}

func (x *AuthorizationDigitalTwin) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationDigitalTwin.ProtoReflect.Descriptor instead.
func (*AuthorizationDigitalTwin) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{1}
}

func (x *AuthorizationDigitalTwin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AuthorizationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AuthorizationPolicy) Reset() {
	*x = AuthorizationPolicy{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicy) ProtoMessage() {}

func (x *AuthorizationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicy.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicy) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{2}
}

func (x *AuthorizationPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthorizationPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AuthorizationDenyReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AuthorizationDenyReason) Reset() {
	*x = AuthorizationDenyReason{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationDenyReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationDenyReason) ProtoMessage() {}

func (x *AuthorizationDenyReason) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationDenyReason.ProtoReflect.Descriptor instead.
func (*AuthorizationDenyReason) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{3}
}

func (x *AuthorizationDenyReason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type IsAuthorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request             *IsAuthorized_Request     `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	ResolvedDigitalTwin *AuthorizationDigitalTwin `protobuf:"bytes,2,opt,name=resolved_digital_twin,json=resolvedDigitalTwin,proto3" json:"resolved_digital_twin,omitempty"`
	Response            *IsAuthorized_Response    `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	PoliciesFound       []*AuthorizationPolicy    `protobuf:"bytes,4,rep,name=policies_found,json=policiesFound,proto3" json:"policies_found,omitempty"`
	DenyReason          *AuthorizationDenyReason  `protobuf:"bytes,5,opt,name=deny_reason,json=denyReason,proto3" json:"deny_reason,omitempty"`
	EvaluationTime      *durationpb.Duration      `protobuf:"bytes,6,opt,name=evaluation_time,json=evaluationTime,proto3" json:"evaluation_time,omitempty"`
	ErrorMessage        string                    `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *IsAuthorized) Reset() {
	*x = IsAuthorized{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorized) ProtoMessage() {}

func (x *IsAuthorized) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorized.ProtoReflect.Descriptor instead.
func (*IsAuthorized) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{4}
}

func (x *IsAuthorized) GetRequest() *IsAuthorized_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *IsAuthorized) GetResolvedDigitalTwin() *AuthorizationDigitalTwin {
	if x != nil {
		return x.ResolvedDigitalTwin
	}
	return nil
}

func (x *IsAuthorized) GetResponse() *IsAuthorized_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *IsAuthorized) GetPoliciesFound() []*AuthorizationPolicy {
	if x != nil {
		return x.PoliciesFound
	}
	return nil
}

func (x *IsAuthorized) GetDenyReason() *AuthorizationDenyReason {
	if x != nil {
		return x.DenyReason
	}
	return nil
}

func (x *IsAuthorized) GetEvaluationTime() *durationpb.Duration {
	if x != nil {
		return x.EvaluationTime
	}
	return nil
}

func (x *IsAuthorized) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type WhatAuthorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request             *WhatAuthorized_Request   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	ResolvedDigitalTwin *AuthorizationDigitalTwin `protobuf:"bytes,2,opt,name=resolved_digital_twin,json=resolvedDigitalTwin,proto3" json:"resolved_digital_twin,omitempty"`
	Response            *WhatAuthorized_Response  `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	PoliciesFound       []*AuthorizationPolicy    `protobuf:"bytes,4,rep,name=policies_found,json=policiesFound,proto3" json:"policies_found,omitempty"`
	DenyReason          *AuthorizationDenyReason  `protobuf:"bytes,5,opt,name=deny_reason,json=denyReason,proto3" json:"deny_reason,omitempty"`
	EvaluationTime      *durationpb.Duration      `protobuf:"bytes,6,opt,name=evaluation_time,json=evaluationTime,proto3" json:"evaluation_time,omitempty"`
	ErrorMessage        string                    `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *WhatAuthorized) Reset() {
	*x = WhatAuthorized{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorized) ProtoMessage() {}

func (x *WhatAuthorized) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorized.ProtoReflect.Descriptor instead.
func (*WhatAuthorized) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{5}
}

func (x *WhatAuthorized) GetRequest() *WhatAuthorized_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *WhatAuthorized) GetResolvedDigitalTwin() *AuthorizationDigitalTwin {
	if x != nil {
		return x.ResolvedDigitalTwin
	}
	return nil
}

func (x *WhatAuthorized) GetResponse() *WhatAuthorized_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *WhatAuthorized) GetPoliciesFound() []*AuthorizationPolicy {
	if x != nil {
		return x.PoliciesFound
	}
	return nil
}

func (x *WhatAuthorized) GetDenyReason() *AuthorizationDenyReason {
	if x != nil {
		return x.DenyReason
	}
	return nil
}

func (x *WhatAuthorized) GetEvaluationTime() *durationpb.Duration {
	if x != nil {
		return x.EvaluationTime
	}
	return nil
}

func (x *WhatAuthorized) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type WhoAuthorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request             *WhoAuthorized_Request    `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	ResolvedDigitalTwin *AuthorizationDigitalTwin `protobuf:"bytes,2,opt,name=resolved_digital_twin,json=resolvedDigitalTwin,proto3" json:"resolved_digital_twin,omitempty"`
	Response            *WhoAuthorized_Response   `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	PoliciesFound       []*AuthorizationPolicy    `protobuf:"bytes,4,rep,name=policies_found,json=policiesFound,proto3" json:"policies_found,omitempty"`
	DenyReason          *AuthorizationDenyReason  `protobuf:"bytes,5,opt,name=deny_reason,json=denyReason,proto3" json:"deny_reason,omitempty"`
	EvaluationTime      *durationpb.Duration      `protobuf:"bytes,6,opt,name=evaluation_time,json=evaluationTime,proto3" json:"evaluation_time,omitempty"`
	ErrorMessage        string                    `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *WhoAuthorized) Reset() {
	*x = WhoAuthorized{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorized) ProtoMessage() {}

func (x *WhoAuthorized) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorized.ProtoReflect.Descriptor instead.
func (*WhoAuthorized) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{6}
}

func (x *WhoAuthorized) GetRequest() *WhoAuthorized_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *WhoAuthorized) GetResolvedDigitalTwin() *AuthorizationDigitalTwin {
	if x != nil {
		return x.ResolvedDigitalTwin
	}
	return nil
}

func (x *WhoAuthorized) GetResponse() *WhoAuthorized_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *WhoAuthorized) GetPoliciesFound() []*AuthorizationPolicy {
	if x != nil {
		return x.PoliciesFound
	}
	return nil
}

func (x *WhoAuthorized) GetDenyReason() *AuthorizationDenyReason {
	if x != nil {
		return x.DenyReason
	}
	return nil
}

func (x *WhoAuthorized) GetEvaluationTime() *durationpb.Duration {
	if x != nil {
		return x.EvaluationTime
	}
	return nil
}

func (x *WhoAuthorized) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type AuthorizationSubject_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value *v1beta1.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AuthorizationSubject_Property) Reset() {
	*x = AuthorizationSubject_Property{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationSubject_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationSubject_Property) ProtoMessage() {}

func (x *AuthorizationSubject_Property) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationSubject_Property.ProtoReflect.Descriptor instead.
func (*AuthorizationSubject_Property) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AuthorizationSubject_Property) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuthorizationSubject_Property) GetValue() *v1beta1.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type AuthorizationSubject_ExternalID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *AuthorizationSubject_ExternalID) Reset() {
	*x = AuthorizationSubject_ExternalID{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationSubject_ExternalID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationSubject_ExternalID) ProtoMessage() {}

func (x *AuthorizationSubject_ExternalID) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationSubject_ExternalID.ProtoReflect.Descriptor instead.
func (*AuthorizationSubject_ExternalID) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AuthorizationSubject_ExternalID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuthorizationSubject_ExternalID) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type IsAuthorized_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AuthorizationSubject to check if is authorized to perform given actions.
	Subject *AuthorizationSubject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// A list of resources to authorize against.
	Resources []*IsAuthorized_Request_Resource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// Policy input params
	InputParams map[string]*v1beta1.Value `protobuf:"bytes,3,rep,name=input_params,json=inputParams,proto3" json:"input_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Only evaluate polices containing provided tags
	PolicyTags []string `protobuf:"bytes,4,rep,name=policy_tags,json=policyTags,proto3" json:"policy_tags,omitempty"`
}

func (x *IsAuthorized_Request) Reset() {
	*x = IsAuthorized_Request{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorized_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorized_Request) ProtoMessage() {}

func (x *IsAuthorized_Request) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorized_Request.ProtoReflect.Descriptor instead.
func (*IsAuthorized_Request) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{4, 0}
}

func (x *IsAuthorized_Request) GetSubject() *AuthorizationSubject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *IsAuthorized_Request) GetResources() []*IsAuthorized_Request_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *IsAuthorized_Request) GetInputParams() map[string]*v1beta1.Value {
	if x != nil {
		return x.InputParams
	}
	return nil
}

func (x *IsAuthorized_Request) GetPolicyTags() []string {
	if x != nil {
		return x.PolicyTags
	}
	return nil
}

type IsAuthorized_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time the decision was made.
	DecisionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=decision_time,json=decisionTime,proto3" json:"decision_time,omitempty"`
	// Map with resource type as key.
	Decisions map[string]*IsAuthorized_Response_ResourceType `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IsAuthorized_Response) Reset() {
	*x = IsAuthorized_Response{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorized_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorized_Response) ProtoMessage() {}

func (x *IsAuthorized_Response) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorized_Response.ProtoReflect.Descriptor instead.
func (*IsAuthorized_Response) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{4, 1}
}

func (x *IsAuthorized_Response) GetDecisionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DecisionTime
	}
	return nil
}

func (x *IsAuthorized_Response) GetDecisions() map[string]*IsAuthorized_Response_ResourceType {
	if x != nil {
		return x.Decisions
	}
	return nil
}

type IsAuthorized_Request_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Resource type.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// A list of actions the subject want to perform.
	Actions []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *IsAuthorized_Request_Resource) Reset() {
	*x = IsAuthorized_Request_Resource{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorized_Request_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorized_Request_Resource) ProtoMessage() {}

func (x *IsAuthorized_Request_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorized_Request_Resource.ProtoReflect.Descriptor instead.
func (*IsAuthorized_Request_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *IsAuthorized_Request_Resource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *IsAuthorized_Request_Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IsAuthorized_Request_Resource) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type IsAuthorized_Response_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allow bool `protobuf:"varint,1,opt,name=allow,proto3" json:"allow,omitempty"`
}

func (x *IsAuthorized_Response_Action) Reset() {
	*x = IsAuthorized_Response_Action{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorized_Response_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorized_Response_Action) ProtoMessage() {}

func (x *IsAuthorized_Response_Action) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorized_Response_Action.ProtoReflect.Descriptor instead.
func (*IsAuthorized_Response_Action) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *IsAuthorized_Response_Action) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

type IsAuthorized_Response_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map with action as key.
	Actions map[string]*IsAuthorized_Response_Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IsAuthorized_Response_Resource) Reset() {
	*x = IsAuthorized_Response_Resource{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorized_Response_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorized_Response_Resource) ProtoMessage() {}

func (x *IsAuthorized_Response_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorized_Response_Resource.ProtoReflect.Descriptor instead.
func (*IsAuthorized_Response_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{4, 1, 1}
}

func (x *IsAuthorized_Response_Resource) GetActions() map[string]*IsAuthorized_Response_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type IsAuthorized_Response_ResourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map with resource id as key.
	Resources map[string]*IsAuthorized_Response_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IsAuthorized_Response_ResourceType) Reset() {
	*x = IsAuthorized_Response_ResourceType{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuthorized_Response_ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorized_Response_ResourceType) ProtoMessage() {}

func (x *IsAuthorized_Response_ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorized_Response_ResourceType.ProtoReflect.Descriptor instead.
func (*IsAuthorized_Response_ResourceType) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{4, 1, 2}
}

func (x *IsAuthorized_Response_ResourceType) GetResources() map[string]*IsAuthorized_Response_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type WhatAuthorized_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AuthorizationSubject to check if is authorized to perform given actions.
	Subject *AuthorizationSubject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// A list of resources to authorize against.
	ResourceTypes []*WhatAuthorized_Request_ResourceType `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
	// Policy input params
	InputParams map[string]*v1beta1.Value `protobuf:"bytes,3,rep,name=input_params,json=inputParams,proto3" json:"input_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Only evaluate polices containing provided tags
	PolicyTags []string `protobuf:"bytes,4,rep,name=policy_tags,json=policyTags,proto3" json:"policy_tags,omitempty"`
}

func (x *WhatAuthorized_Request) Reset() {
	*x = WhatAuthorized_Request{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorized_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorized_Request) ProtoMessage() {}

func (x *WhatAuthorized_Request) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorized_Request.ProtoReflect.Descriptor instead.
func (*WhatAuthorized_Request) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{5, 0}
}

func (x *WhatAuthorized_Request) GetSubject() *AuthorizationSubject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *WhatAuthorized_Request) GetResourceTypes() []*WhatAuthorized_Request_ResourceType {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

func (x *WhatAuthorized_Request) GetInputParams() map[string]*v1beta1.Value {
	if x != nil {
		return x.InputParams
	}
	return nil
}

func (x *WhatAuthorized_Request) GetPolicyTags() []string {
	if x != nil {
		return x.PolicyTags
	}
	return nil
}

type WhatAuthorized_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time the decision was made
	DecisionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=decision_time,json=decisionTime,proto3" json:"decision_time,omitempty"`
	// Map with resource type as key
	Decisions map[string]*WhatAuthorized_Response_ResourceType `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WhatAuthorized_Response) Reset() {
	*x = WhatAuthorized_Response{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorized_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorized_Response) ProtoMessage() {}

func (x *WhatAuthorized_Response) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorized_Response.ProtoReflect.Descriptor instead.
func (*WhatAuthorized_Response) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{5, 1}
}

func (x *WhatAuthorized_Response) GetDecisionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DecisionTime
	}
	return nil
}

func (x *WhatAuthorized_Response) GetDecisions() map[string]*WhatAuthorized_Response_ResourceType {
	if x != nil {
		return x.Decisions
	}
	return nil
}

type WhatAuthorized_Request_ResourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource type.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// A list of actions the subject want to perform.
	Actions []string `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *WhatAuthorized_Request_ResourceType) Reset() {
	*x = WhatAuthorized_Request_ResourceType{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorized_Request_ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorized_Request_ResourceType) ProtoMessage() {}

func (x *WhatAuthorized_Request_ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorized_Request_ResourceType.ProtoReflect.Descriptor instead.
func (*WhatAuthorized_Request_ResourceType) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *WhatAuthorized_Request_ResourceType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WhatAuthorized_Request_ResourceType) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type WhatAuthorized_Response_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource external identifier
	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *WhatAuthorized_Response_Resource) Reset() {
	*x = WhatAuthorized_Response_Resource{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorized_Response_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorized_Response_Resource) ProtoMessage() {}

func (x *WhatAuthorized_Response_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorized_Response_Resource.ProtoReflect.Descriptor instead.
func (*WhatAuthorized_Response_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{5, 1, 0}
}

func (x *WhatAuthorized_Response_Resource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type WhatAuthorized_Response_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of resources
	Resources []*WhatAuthorized_Response_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *WhatAuthorized_Response_Action) Reset() {
	*x = WhatAuthorized_Response_Action{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorized_Response_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorized_Response_Action) ProtoMessage() {}

func (x *WhatAuthorized_Response_Action) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorized_Response_Action.ProtoReflect.Descriptor instead.
func (*WhatAuthorized_Response_Action) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{5, 1, 1}
}

func (x *WhatAuthorized_Response_Action) GetResources() []*WhatAuthorized_Response_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type WhatAuthorized_Response_ResourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map with action as key
	Actions map[string]*WhatAuthorized_Response_Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WhatAuthorized_Response_ResourceType) Reset() {
	*x = WhatAuthorized_Response_ResourceType{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhatAuthorized_Response_ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatAuthorized_Response_ResourceType) ProtoMessage() {}

func (x *WhatAuthorized_Response_ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatAuthorized_Response_ResourceType.ProtoReflect.Descriptor instead.
func (*WhatAuthorized_Response_ResourceType) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{5, 1, 2}
}

func (x *WhatAuthorized_Response_ResourceType) GetActions() map[string]*WhatAuthorized_Response_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type WhoAuthorized_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of resources to authorize against.
	Resources []*WhoAuthorized_Request_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	// Policy input params
	InputParams map[string]*v1beta1.Value `protobuf:"bytes,2,rep,name=input_params,json=inputParams,proto3" json:"input_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Only evaluate polices containing provided tags
	PolicyTags []string `protobuf:"bytes,3,rep,name=policy_tags,json=policyTags,proto3" json:"policy_tags,omitempty"`
}

func (x *WhoAuthorized_Request) Reset() {
	*x = WhoAuthorized_Request{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorized_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorized_Request) ProtoMessage() {}

func (x *WhoAuthorized_Request) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorized_Request.ProtoReflect.Descriptor instead.
func (*WhoAuthorized_Request) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{6, 0}
}

func (x *WhoAuthorized_Request) GetResources() []*WhoAuthorized_Request_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *WhoAuthorized_Request) GetInputParams() map[string]*v1beta1.Value {
	if x != nil {
		return x.InputParams
	}
	return nil
}

func (x *WhoAuthorized_Request) GetPolicyTags() []string {
	if x != nil {
		return x.PolicyTags
	}
	return nil
}

type WhoAuthorized_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time the decision was made.
	DecisionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=decision_time,json=decisionTime,proto3" json:"decision_time,omitempty"`
	// Map with resource type as key.
	Decisions map[string]*WhoAuthorized_Response_ResourceType `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WhoAuthorized_Response) Reset() {
	*x = WhoAuthorized_Response{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorized_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorized_Response) ProtoMessage() {}

func (x *WhoAuthorized_Response) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorized_Response.ProtoReflect.Descriptor instead.
func (*WhoAuthorized_Response) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{6, 1}
}

func (x *WhoAuthorized_Response) GetDecisionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DecisionTime
	}
	return nil
}

func (x *WhoAuthorized_Response) GetDecisions() map[string]*WhoAuthorized_Response_ResourceType {
	if x != nil {
		return x.Decisions
	}
	return nil
}

type WhoAuthorized_Request_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Resource type.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// A list of actions the subject want to perform.
	Actions []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *WhoAuthorized_Request_Resource) Reset() {
	*x = WhoAuthorized_Request_Resource{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorized_Request_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorized_Request_Resource) ProtoMessage() {}

func (x *WhoAuthorized_Request_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorized_Request_Resource.ProtoReflect.Descriptor instead.
func (*WhoAuthorized_Request_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *WhoAuthorized_Request_Resource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *WhoAuthorized_Request_Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WhoAuthorized_Request_Resource) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type WhoAuthorized_Response_Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource external identifier.
	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *WhoAuthorized_Response_Subject) Reset() {
	*x = WhoAuthorized_Response_Subject{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorized_Response_Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorized_Response_Subject) ProtoMessage() {}

func (x *WhoAuthorized_Response_Subject) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorized_Response_Subject.ProtoReflect.Descriptor instead.
func (*WhoAuthorized_Response_Subject) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{6, 1, 0}
}

func (x *WhoAuthorized_Response_Subject) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type WhoAuthorized_Response_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of subjects.
	Subjects []*WhoAuthorized_Response_Subject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *WhoAuthorized_Response_Action) Reset() {
	*x = WhoAuthorized_Response_Action{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorized_Response_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorized_Response_Action) ProtoMessage() {}

func (x *WhoAuthorized_Response_Action) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorized_Response_Action.ProtoReflect.Descriptor instead.
func (*WhoAuthorized_Response_Action) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{6, 1, 1}
}

func (x *WhoAuthorized_Response_Action) GetSubjects() []*WhoAuthorized_Response_Subject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type WhoAuthorized_Response_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map with actions as key.
	Actions map[string]*WhoAuthorized_Response_Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WhoAuthorized_Response_Resource) Reset() {
	*x = WhoAuthorized_Response_Resource{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorized_Response_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorized_Response_Resource) ProtoMessage() {}

func (x *WhoAuthorized_Response_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorized_Response_Resource.ProtoReflect.Descriptor instead.
func (*WhoAuthorized_Response_Resource) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{6, 1, 2}
}

func (x *WhoAuthorized_Response_Resource) GetActions() map[string]*WhoAuthorized_Response_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type WhoAuthorized_Response_ResourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map with resource id as key.
	Resources map[string]*WhoAuthorized_Response_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WhoAuthorized_Response_ResourceType) Reset() {
	*x = WhoAuthorized_Response_ResourceType{}
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAuthorized_Response_ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAuthorized_Response_ResourceType) ProtoMessage() {}

func (x *WhoAuthorized_Response_ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAuthorized_Response_ResourceType.ProtoReflect.Descriptor instead.
func (*WhoAuthorized_Response_ResourceType) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP(), []int{6, 1, 3}
}

func (x *WhoAuthorized_Response_ResourceType) GetResources() map[string]*WhoAuthorized_Response_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

var File_indykite_auditsink_v1beta1_authorization_proto protoreflect.FileDescriptor

var file_indykite_auditsink_v1beta1_authorization_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x04, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x59, 0x0a,
	0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x6f, 0x0a, 0x15, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5e,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44,
	0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x1a, 0x55,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x41, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x2a, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x39, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x79, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xc8, 0x0e, 0x0a, 0x0c, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x15,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69,
	0x6e, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x54, 0x0a,
	0x0b, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e,
	0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x6e, 0x79, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xf1, 0x03, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a,
	0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x61, 0x67, 0x73, 0x1a, 0x59, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x5f, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xa7, 0x06, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1e,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x1a, 0xe3,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x74,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xf5, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x1a, 0x78, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x0e,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x0d, 0x0a, 0x0e, 0x57,
	0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x4c, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x15, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e,
	0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x54, 0x77, 0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x54,
	0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6e, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x6e, 0x79, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xe5, 0x03,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x66, 0x0a,
	0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5f, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb2, 0x05, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2b, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x1a, 0x64, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0xef, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x76, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x57, 0x68, 0x61, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7e, 0x0a, 0x0e, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x56,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x61, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x0e, 0x0a, 0x0d, 0x57,
	0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x15, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x52, 0x13,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54,
	0x77, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x64,
	0x65, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x79, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x6e, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xa7, 0x03, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x65, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x59, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x5f, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9b, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x1a,
	0x60, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x1a, 0xe5, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x62,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x75, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xf7, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x79, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x7d, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x57, 0x68, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x93, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x12, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x53, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xa2, 0x02, 0x03, 0x49, 0x41, 0x58, 0xaa, 0x02, 0x1a, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0xca, 0x02, 0x1a, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xe2, 0x02, 0x26, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x49, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_auditsink_v1beta1_authorization_proto_rawDescOnce sync.Once
	file_indykite_auditsink_v1beta1_authorization_proto_rawDescData = file_indykite_auditsink_v1beta1_authorization_proto_rawDesc
)

func file_indykite_auditsink_v1beta1_authorization_proto_rawDescGZIP() []byte {
	file_indykite_auditsink_v1beta1_authorization_proto_rawDescOnce.Do(func() {
		file_indykite_auditsink_v1beta1_authorization_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_auditsink_v1beta1_authorization_proto_rawDescData)
	})
	return file_indykite_auditsink_v1beta1_authorization_proto_rawDescData
}

var file_indykite_auditsink_v1beta1_authorization_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_indykite_auditsink_v1beta1_authorization_proto_goTypes = []any{
	(*AuthorizationSubject)(nil),               // 0: indykite.auditsink.v1beta1.AuthorizationSubject
	(*AuthorizationDigitalTwin)(nil),           // 1: indykite.auditsink.v1beta1.AuthorizationDigitalTwin
	(*AuthorizationPolicy)(nil),                // 2: indykite.auditsink.v1beta1.AuthorizationPolicy
	(*AuthorizationDenyReason)(nil),            // 3: indykite.auditsink.v1beta1.AuthorizationDenyReason
	(*IsAuthorized)(nil),                       // 4: indykite.auditsink.v1beta1.IsAuthorized
	(*WhatAuthorized)(nil),                     // 5: indykite.auditsink.v1beta1.WhatAuthorized
	(*WhoAuthorized)(nil),                      // 6: indykite.auditsink.v1beta1.WhoAuthorized
	(*AuthorizationSubject_Property)(nil),      // 7: indykite.auditsink.v1beta1.AuthorizationSubject.Property
	(*AuthorizationSubject_ExternalID)(nil),    // 8: indykite.auditsink.v1beta1.AuthorizationSubject.ExternalID
	(*IsAuthorized_Request)(nil),               // 9: indykite.auditsink.v1beta1.IsAuthorized.Request
	(*IsAuthorized_Response)(nil),              // 10: indykite.auditsink.v1beta1.IsAuthorized.Response
	(*IsAuthorized_Request_Resource)(nil),      // 11: indykite.auditsink.v1beta1.IsAuthorized.Request.Resource
	nil,                                        // 12: indykite.auditsink.v1beta1.IsAuthorized.Request.InputParamsEntry
	(*IsAuthorized_Response_Action)(nil),       // 13: indykite.auditsink.v1beta1.IsAuthorized.Response.Action
	(*IsAuthorized_Response_Resource)(nil),     // 14: indykite.auditsink.v1beta1.IsAuthorized.Response.Resource
	(*IsAuthorized_Response_ResourceType)(nil), // 15: indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType
	nil,                             // 16: indykite.auditsink.v1beta1.IsAuthorized.Response.DecisionsEntry
	nil,                             // 17: indykite.auditsink.v1beta1.IsAuthorized.Response.Resource.ActionsEntry
	nil,                             // 18: indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType.ResourcesEntry
	(*WhatAuthorized_Request)(nil),  // 19: indykite.auditsink.v1beta1.WhatAuthorized.Request
	(*WhatAuthorized_Response)(nil), // 20: indykite.auditsink.v1beta1.WhatAuthorized.Response
	(*WhatAuthorized_Request_ResourceType)(nil), // 21: indykite.auditsink.v1beta1.WhatAuthorized.Request.ResourceType
	nil,                                      // 22: indykite.auditsink.v1beta1.WhatAuthorized.Request.InputParamsEntry
	(*WhatAuthorized_Response_Resource)(nil), // 23: indykite.auditsink.v1beta1.WhatAuthorized.Response.Resource
	(*WhatAuthorized_Response_Action)(nil),   // 24: indykite.auditsink.v1beta1.WhatAuthorized.Response.Action
	(*WhatAuthorized_Response_ResourceType)(nil), // 25: indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType
	nil,                                     // 26: indykite.auditsink.v1beta1.WhatAuthorized.Response.DecisionsEntry
	nil,                                     // 27: indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType.ActionsEntry
	(*WhoAuthorized_Request)(nil),           // 28: indykite.auditsink.v1beta1.WhoAuthorized.Request
	(*WhoAuthorized_Response)(nil),          // 29: indykite.auditsink.v1beta1.WhoAuthorized.Response
	(*WhoAuthorized_Request_Resource)(nil),  // 30: indykite.auditsink.v1beta1.WhoAuthorized.Request.Resource
	nil,                                     // 31: indykite.auditsink.v1beta1.WhoAuthorized.Request.InputParamsEntry
	(*WhoAuthorized_Response_Subject)(nil),  // 32: indykite.auditsink.v1beta1.WhoAuthorized.Response.Subject
	(*WhoAuthorized_Response_Action)(nil),   // 33: indykite.auditsink.v1beta1.WhoAuthorized.Response.Action
	(*WhoAuthorized_Response_Resource)(nil), // 34: indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource
	(*WhoAuthorized_Response_ResourceType)(nil), // 35: indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType
	nil,                           // 36: indykite.auditsink.v1beta1.WhoAuthorized.Response.DecisionsEntry
	nil,                           // 37: indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource.ActionsEntry
	nil,                           // 38: indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType.ResourcesEntry
	(*durationpb.Duration)(nil),   // 39: google.protobuf.Duration
	(*v1beta1.Value)(nil),         // 40: indykite.objects.v1beta1.Value
	(*timestamppb.Timestamp)(nil), // 41: google.protobuf.Timestamp
}
var file_indykite_auditsink_v1beta1_authorization_proto_depIdxs = []int32{
	1,  // 0: indykite.auditsink.v1beta1.AuthorizationSubject.digital_twin:type_name -> indykite.auditsink.v1beta1.AuthorizationDigitalTwin
	7,  // 1: indykite.auditsink.v1beta1.AuthorizationSubject.digital_twin_property:type_name -> indykite.auditsink.v1beta1.AuthorizationSubject.Property
	8,  // 2: indykite.auditsink.v1beta1.AuthorizationSubject.external_id:type_name -> indykite.auditsink.v1beta1.AuthorizationSubject.ExternalID
	9,  // 3: indykite.auditsink.v1beta1.IsAuthorized.request:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Request
	1,  // 4: indykite.auditsink.v1beta1.IsAuthorized.resolved_digital_twin:type_name -> indykite.auditsink.v1beta1.AuthorizationDigitalTwin
	10, // 5: indykite.auditsink.v1beta1.IsAuthorized.response:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Response
	2,  // 6: indykite.auditsink.v1beta1.IsAuthorized.policies_found:type_name -> indykite.auditsink.v1beta1.AuthorizationPolicy
	3,  // 7: indykite.auditsink.v1beta1.IsAuthorized.deny_reason:type_name -> indykite.auditsink.v1beta1.AuthorizationDenyReason
	39, // 8: indykite.auditsink.v1beta1.IsAuthorized.evaluation_time:type_name -> google.protobuf.Duration
	19, // 9: indykite.auditsink.v1beta1.WhatAuthorized.request:type_name -> indykite.auditsink.v1beta1.WhatAuthorized.Request
	1,  // 10: indykite.auditsink.v1beta1.WhatAuthorized.resolved_digital_twin:type_name -> indykite.auditsink.v1beta1.AuthorizationDigitalTwin
	20, // 11: indykite.auditsink.v1beta1.WhatAuthorized.response:type_name -> indykite.auditsink.v1beta1.WhatAuthorized.Response
	2,  // 12: indykite.auditsink.v1beta1.WhatAuthorized.policies_found:type_name -> indykite.auditsink.v1beta1.AuthorizationPolicy
	3,  // 13: indykite.auditsink.v1beta1.WhatAuthorized.deny_reason:type_name -> indykite.auditsink.v1beta1.AuthorizationDenyReason
	39, // 14: indykite.auditsink.v1beta1.WhatAuthorized.evaluation_time:type_name -> google.protobuf.Duration
	28, // 15: indykite.auditsink.v1beta1.WhoAuthorized.request:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Request
	1,  // 16: indykite.auditsink.v1beta1.WhoAuthorized.resolved_digital_twin:type_name -> indykite.auditsink.v1beta1.AuthorizationDigitalTwin
	29, // 17: indykite.auditsink.v1beta1.WhoAuthorized.response:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Response
	2,  // 18: indykite.auditsink.v1beta1.WhoAuthorized.policies_found:type_name -> indykite.auditsink.v1beta1.AuthorizationPolicy
	3,  // 19: indykite.auditsink.v1beta1.WhoAuthorized.deny_reason:type_name -> indykite.auditsink.v1beta1.AuthorizationDenyReason
	39, // 20: indykite.auditsink.v1beta1.WhoAuthorized.evaluation_time:type_name -> google.protobuf.Duration
	40, // 21: indykite.auditsink.v1beta1.AuthorizationSubject.Property.value:type_name -> indykite.objects.v1beta1.Value
	0,  // 22: indykite.auditsink.v1beta1.IsAuthorized.Request.subject:type_name -> indykite.auditsink.v1beta1.AuthorizationSubject
	11, // 23: indykite.auditsink.v1beta1.IsAuthorized.Request.resources:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Request.Resource
	12, // 24: indykite.auditsink.v1beta1.IsAuthorized.Request.input_params:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Request.InputParamsEntry
	41, // 25: indykite.auditsink.v1beta1.IsAuthorized.Response.decision_time:type_name -> google.protobuf.Timestamp
	16, // 26: indykite.auditsink.v1beta1.IsAuthorized.Response.decisions:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Response.DecisionsEntry
	40, // 27: indykite.auditsink.v1beta1.IsAuthorized.Request.InputParamsEntry.value:type_name -> indykite.objects.v1beta1.Value
	17, // 28: indykite.auditsink.v1beta1.IsAuthorized.Response.Resource.actions:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Response.Resource.ActionsEntry
	18, // 29: indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType.resources:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType.ResourcesEntry
	15, // 30: indykite.auditsink.v1beta1.IsAuthorized.Response.DecisionsEntry.value:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType
	13, // 31: indykite.auditsink.v1beta1.IsAuthorized.Response.Resource.ActionsEntry.value:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Response.Action
	14, // 32: indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType.ResourcesEntry.value:type_name -> indykite.auditsink.v1beta1.IsAuthorized.Response.Resource
	0,  // 33: indykite.auditsink.v1beta1.WhatAuthorized.Request.subject:type_name -> indykite.auditsink.v1beta1.AuthorizationSubject
	21, // 34: indykite.auditsink.v1beta1.WhatAuthorized.Request.resource_types:type_name -> indykite.auditsink.v1beta1.WhatAuthorized.Request.ResourceType
	22, // 35: indykite.auditsink.v1beta1.WhatAuthorized.Request.input_params:type_name -> indykite.auditsink.v1beta1.WhatAuthorized.Request.InputParamsEntry
	41, // 36: indykite.auditsink.v1beta1.WhatAuthorized.Response.decision_time:type_name -> google.protobuf.Timestamp
	26, // 37: indykite.auditsink.v1beta1.WhatAuthorized.Response.decisions:type_name -> indykite.auditsink.v1beta1.WhatAuthorized.Response.DecisionsEntry
	40, // 38: indykite.auditsink.v1beta1.WhatAuthorized.Request.InputParamsEntry.value:type_name -> indykite.objects.v1beta1.Value
	23, // 39: indykite.auditsink.v1beta1.WhatAuthorized.Response.Action.resources:type_name -> indykite.auditsink.v1beta1.WhatAuthorized.Response.Resource
	27, // 40: indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType.actions:type_name -> indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType.ActionsEntry
	25, // 41: indykite.auditsink.v1beta1.WhatAuthorized.Response.DecisionsEntry.value:type_name -> indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType
	24, // 42: indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType.ActionsEntry.value:type_name -> indykite.auditsink.v1beta1.WhatAuthorized.Response.Action
	30, // 43: indykite.auditsink.v1beta1.WhoAuthorized.Request.resources:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Request.Resource
	31, // 44: indykite.auditsink.v1beta1.WhoAuthorized.Request.input_params:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Request.InputParamsEntry
	41, // 45: indykite.auditsink.v1beta1.WhoAuthorized.Response.decision_time:type_name -> google.protobuf.Timestamp
	36, // 46: indykite.auditsink.v1beta1.WhoAuthorized.Response.decisions:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Response.DecisionsEntry
	40, // 47: indykite.auditsink.v1beta1.WhoAuthorized.Request.InputParamsEntry.value:type_name -> indykite.objects.v1beta1.Value
	32, // 48: indykite.auditsink.v1beta1.WhoAuthorized.Response.Action.subjects:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Response.Subject
	37, // 49: indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource.actions:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource.ActionsEntry
	38, // 50: indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType.resources:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType.ResourcesEntry
	35, // 51: indykite.auditsink.v1beta1.WhoAuthorized.Response.DecisionsEntry.value:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType
	33, // 52: indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource.ActionsEntry.value:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Response.Action
	34, // 53: indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType.ResourcesEntry.value:type_name -> indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_indykite_auditsink_v1beta1_authorization_proto_init() }
func file_indykite_auditsink_v1beta1_authorization_proto_init() {
	if File_indykite_auditsink_v1beta1_authorization_proto != nil {
		return
	}
	file_indykite_auditsink_v1beta1_authorization_proto_msgTypes[0].OneofWrappers = []any{
		(*AuthorizationSubject_DigitalTwin)(nil),
		(*AuthorizationSubject_DigitalTwinProperty)(nil),
		(*AuthorizationSubject_AccessToken)(nil),
		(*AuthorizationSubject_ExternalId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_auditsink_v1beta1_authorization_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_auditsink_v1beta1_authorization_proto_goTypes,
		DependencyIndexes: file_indykite_auditsink_v1beta1_authorization_proto_depIdxs,
		MessageInfos:      file_indykite_auditsink_v1beta1_authorization_proto_msgTypes,
	}.Build()
	File_indykite_auditsink_v1beta1_authorization_proto = out.File
	file_indykite_auditsink_v1beta1_authorization_proto_rawDesc = nil
	file_indykite_auditsink_v1beta1_authorization_proto_goTypes = nil
	file_indykite_auditsink_v1beta1_authorization_proto_depIdxs = nil
}
