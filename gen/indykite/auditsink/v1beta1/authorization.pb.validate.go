// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/auditsink/v1beta1/authorization.proto

package auditsinkv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthorizationSubject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationSubject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationSubject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizationSubjectMultiError, or nil if none found.
func (m *AuthorizationSubject) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationSubject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Subject.(type) {
	case *AuthorizationSubject_DigitalTwin:
		if v == nil {
			err := AuthorizationSubjectValidationError{
				field:  "Subject",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDigitalTwin()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthorizationSubjectValidationError{
						field:  "DigitalTwin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthorizationSubjectValidationError{
						field:  "DigitalTwin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDigitalTwin()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthorizationSubjectValidationError{
					field:  "DigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthorizationSubject_DigitalTwinProperty:
		if v == nil {
			err := AuthorizationSubjectValidationError{
				field:  "Subject",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDigitalTwinProperty()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthorizationSubjectValidationError{
						field:  "DigitalTwinProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthorizationSubjectValidationError{
						field:  "DigitalTwinProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDigitalTwinProperty()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthorizationSubjectValidationError{
					field:  "DigitalTwinProperty",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthorizationSubject_AccessToken:
		if v == nil {
			err := AuthorizationSubjectValidationError{
				field:  "Subject",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for AccessToken
	case *AuthorizationSubject_ExternalId:
		if v == nil {
			err := AuthorizationSubjectValidationError{
				field:  "Subject",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthorizationSubjectValidationError{
						field:  "ExternalId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthorizationSubjectValidationError{
						field:  "ExternalId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthorizationSubjectValidationError{
					field:  "ExternalId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AuthorizationSubjectMultiError(errors)
	}

	return nil
}

// AuthorizationSubjectMultiError is an error wrapping multiple validation
// errors returned by AuthorizationSubject.ValidateAll() if the designated
// constraints aren't met.
type AuthorizationSubjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationSubjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationSubjectMultiError) AllErrors() []error { return m }

// AuthorizationSubjectValidationError is the validation error returned by
// AuthorizationSubject.Validate if the designated constraints aren't met.
type AuthorizationSubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationSubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationSubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationSubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationSubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationSubjectValidationError) ErrorName() string {
	return "AuthorizationSubjectValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationSubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationSubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationSubjectValidationError{}

// Validate checks the field values on AuthorizationDigitalTwin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationDigitalTwin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationDigitalTwin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizationDigitalTwinMultiError, or nil if none found.
func (m *AuthorizationDigitalTwin) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationDigitalTwin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AuthorizationDigitalTwinMultiError(errors)
	}

	return nil
}

// AuthorizationDigitalTwinMultiError is an error wrapping multiple validation
// errors returned by AuthorizationDigitalTwin.ValidateAll() if the designated
// constraints aren't met.
type AuthorizationDigitalTwinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationDigitalTwinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationDigitalTwinMultiError) AllErrors() []error { return m }

// AuthorizationDigitalTwinValidationError is the validation error returned by
// AuthorizationDigitalTwin.Validate if the designated constraints aren't met.
type AuthorizationDigitalTwinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationDigitalTwinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationDigitalTwinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationDigitalTwinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationDigitalTwinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationDigitalTwinValidationError) ErrorName() string {
	return "AuthorizationDigitalTwinValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationDigitalTwinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationDigitalTwin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationDigitalTwinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationDigitalTwinValidationError{}

// Validate checks the field values on AuthorizationPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizationPolicyMultiError, or nil if none found.
func (m *AuthorizationPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return AuthorizationPolicyMultiError(errors)
	}

	return nil
}

// AuthorizationPolicyMultiError is an error wrapping multiple validation
// errors returned by AuthorizationPolicy.ValidateAll() if the designated
// constraints aren't met.
type AuthorizationPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationPolicyMultiError) AllErrors() []error { return m }

// AuthorizationPolicyValidationError is the validation error returned by
// AuthorizationPolicy.Validate if the designated constraints aren't met.
type AuthorizationPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationPolicyValidationError) ErrorName() string {
	return "AuthorizationPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationPolicyValidationError{}

// Validate checks the field values on AuthorizationDenyReason with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationDenyReason) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationDenyReason with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizationDenyReasonMultiError, or nil if none found.
func (m *AuthorizationDenyReason) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationDenyReason) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AuthorizationDenyReasonMultiError(errors)
	}

	return nil
}

// AuthorizationDenyReasonMultiError is an error wrapping multiple validation
// errors returned by AuthorizationDenyReason.ValidateAll() if the designated
// constraints aren't met.
type AuthorizationDenyReasonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationDenyReasonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationDenyReasonMultiError) AllErrors() []error { return m }

// AuthorizationDenyReasonValidationError is the validation error returned by
// AuthorizationDenyReason.Validate if the designated constraints aren't met.
type AuthorizationDenyReasonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationDenyReasonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationDenyReasonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationDenyReasonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationDenyReasonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationDenyReasonValidationError) ErrorName() string {
	return "AuthorizationDenyReasonValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationDenyReasonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationDenyReason.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationDenyReasonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationDenyReasonValidationError{}

// Validate checks the field values on IsAuthorized with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsAuthorized) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorized with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsAuthorizedMultiError, or
// nil if none found.
func (m *IsAuthorized) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorized) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsAuthorizedValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResolvedDigitalTwin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "ResolvedDigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "ResolvedDigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResolvedDigitalTwin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsAuthorizedValidationError{
				field:  "ResolvedDigitalTwin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsAuthorizedValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPoliciesFound() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IsAuthorizedValidationError{
						field:  fmt.Sprintf("PoliciesFound[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IsAuthorizedValidationError{
						field:  fmt.Sprintf("PoliciesFound[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IsAuthorizedValidationError{
					field:  fmt.Sprintf("PoliciesFound[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDenyReason()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "DenyReason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "DenyReason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDenyReason()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsAuthorizedValidationError{
				field:  "DenyReason",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEvaluationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "EvaluationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsAuthorizedValidationError{
					field:  "EvaluationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvaluationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsAuthorizedValidationError{
				field:  "EvaluationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IsAuthorizedMultiError(errors)
	}

	return nil
}

// IsAuthorizedMultiError is an error wrapping multiple validation errors
// returned by IsAuthorized.ValidateAll() if the designated constraints aren't met.
type IsAuthorizedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorizedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorizedMultiError) AllErrors() []error { return m }

// IsAuthorizedValidationError is the validation error returned by
// IsAuthorized.Validate if the designated constraints aren't met.
type IsAuthorizedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedValidationError) ErrorName() string { return "IsAuthorizedValidationError" }

// Error satisfies the builtin error interface
func (e IsAuthorizedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorized.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedValidationError{}

// Validate checks the field values on WhatAuthorized with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WhatAuthorized) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorized with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WhatAuthorizedMultiError,
// or nil if none found.
func (m *WhatAuthorized) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorized) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhatAuthorizedValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResolvedDigitalTwin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "ResolvedDigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "ResolvedDigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResolvedDigitalTwin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhatAuthorizedValidationError{
				field:  "ResolvedDigitalTwin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhatAuthorizedValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPoliciesFound() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WhatAuthorizedValidationError{
						field:  fmt.Sprintf("PoliciesFound[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WhatAuthorizedValidationError{
						field:  fmt.Sprintf("PoliciesFound[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhatAuthorizedValidationError{
					field:  fmt.Sprintf("PoliciesFound[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDenyReason()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "DenyReason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "DenyReason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDenyReason()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhatAuthorizedValidationError{
				field:  "DenyReason",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEvaluationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "EvaluationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhatAuthorizedValidationError{
					field:  "EvaluationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvaluationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhatAuthorizedValidationError{
				field:  "EvaluationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WhatAuthorizedMultiError(errors)
	}

	return nil
}

// WhatAuthorizedMultiError is an error wrapping multiple validation errors
// returned by WhatAuthorized.ValidateAll() if the designated constraints
// aren't met.
type WhatAuthorizedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorizedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorizedMultiError) AllErrors() []error { return m }

// WhatAuthorizedValidationError is the validation error returned by
// WhatAuthorized.Validate if the designated constraints aren't met.
type WhatAuthorizedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorizedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorizedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorizedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorizedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorizedValidationError) ErrorName() string { return "WhatAuthorizedValidationError" }

// Error satisfies the builtin error interface
func (e WhatAuthorizedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorized.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorizedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorizedValidationError{}

// Validate checks the field values on WhoAuthorized with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WhoAuthorized) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAuthorized with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WhoAuthorizedMultiError, or
// nil if none found.
func (m *WhoAuthorized) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAuthorized) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhoAuthorizedValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResolvedDigitalTwin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "ResolvedDigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "ResolvedDigitalTwin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResolvedDigitalTwin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhoAuthorizedValidationError{
				field:  "ResolvedDigitalTwin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhoAuthorizedValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPoliciesFound() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WhoAuthorizedValidationError{
						field:  fmt.Sprintf("PoliciesFound[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WhoAuthorizedValidationError{
						field:  fmt.Sprintf("PoliciesFound[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhoAuthorizedValidationError{
					field:  fmt.Sprintf("PoliciesFound[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDenyReason()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "DenyReason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "DenyReason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDenyReason()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhoAuthorizedValidationError{
				field:  "DenyReason",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEvaluationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "EvaluationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhoAuthorizedValidationError{
					field:  "EvaluationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvaluationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhoAuthorizedValidationError{
				field:  "EvaluationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WhoAuthorizedMultiError(errors)
	}

	return nil
}

// WhoAuthorizedMultiError is an error wrapping multiple validation errors
// returned by WhoAuthorized.ValidateAll() if the designated constraints
// aren't met.
type WhoAuthorizedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAuthorizedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAuthorizedMultiError) AllErrors() []error { return m }

// WhoAuthorizedValidationError is the validation error returned by
// WhoAuthorized.Validate if the designated constraints aren't met.
type WhoAuthorizedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAuthorizedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAuthorizedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAuthorizedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAuthorizedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAuthorizedValidationError) ErrorName() string { return "WhoAuthorizedValidationError" }

// Error satisfies the builtin error interface
func (e WhoAuthorizedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAuthorized.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAuthorizedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAuthorizedValidationError{}

// Validate checks the field values on AuthorizationSubject_Property with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationSubject_Property) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationSubject_Property with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthorizationSubject_PropertyMultiError, or nil if none found.
func (m *AuthorizationSubject_Property) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationSubject_Property) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizationSubject_PropertyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizationSubject_PropertyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizationSubject_PropertyValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthorizationSubject_PropertyMultiError(errors)
	}

	return nil
}

// AuthorizationSubject_PropertyMultiError is an error wrapping multiple
// validation errors returned by AuthorizationSubject_Property.ValidateAll()
// if the designated constraints aren't met.
type AuthorizationSubject_PropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationSubject_PropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationSubject_PropertyMultiError) AllErrors() []error { return m }

// AuthorizationSubject_PropertyValidationError is the validation error
// returned by AuthorizationSubject_Property.Validate if the designated
// constraints aren't met.
type AuthorizationSubject_PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationSubject_PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationSubject_PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationSubject_PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationSubject_PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationSubject_PropertyValidationError) ErrorName() string {
	return "AuthorizationSubject_PropertyValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationSubject_PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationSubject_Property.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationSubject_PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationSubject_PropertyValidationError{}

// Validate checks the field values on AuthorizationSubject_ExternalID with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationSubject_ExternalID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationSubject_ExternalID with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthorizationSubject_ExternalIDMultiError, or nil if none found.
func (m *AuthorizationSubject_ExternalID) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationSubject_ExternalID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for ExternalId

	if len(errors) > 0 {
		return AuthorizationSubject_ExternalIDMultiError(errors)
	}

	return nil
}

// AuthorizationSubject_ExternalIDMultiError is an error wrapping multiple
// validation errors returned by AuthorizationSubject_ExternalID.ValidateAll()
// if the designated constraints aren't met.
type AuthorizationSubject_ExternalIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationSubject_ExternalIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationSubject_ExternalIDMultiError) AllErrors() []error { return m }

// AuthorizationSubject_ExternalIDValidationError is the validation error
// returned by AuthorizationSubject_ExternalID.Validate if the designated
// constraints aren't met.
type AuthorizationSubject_ExternalIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationSubject_ExternalIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationSubject_ExternalIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationSubject_ExternalIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationSubject_ExternalIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationSubject_ExternalIDValidationError) ErrorName() string {
	return "AuthorizationSubject_ExternalIDValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationSubject_ExternalIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationSubject_ExternalID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationSubject_ExternalIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationSubject_ExternalIDValidationError{}

// Validate checks the field values on IsAuthorized_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorized_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorized_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAuthorized_RequestMultiError, or nil if none found.
func (m *IsAuthorized_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorized_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsAuthorized_RequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsAuthorized_RequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsAuthorized_RequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IsAuthorized_RequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IsAuthorized_RequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IsAuthorized_RequestValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetInputParams()))
		i := 0
		for key := range m.GetInputParams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetInputParams()[key]
			_ = val

			// no validation rules for InputParams[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, IsAuthorized_RequestValidationError{
							field:  fmt.Sprintf("InputParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, IsAuthorized_RequestValidationError{
							field:  fmt.Sprintf("InputParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return IsAuthorized_RequestValidationError{
						field:  fmt.Sprintf("InputParams[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return IsAuthorized_RequestMultiError(errors)
	}

	return nil
}

// IsAuthorized_RequestMultiError is an error wrapping multiple validation
// errors returned by IsAuthorized_Request.ValidateAll() if the designated
// constraints aren't met.
type IsAuthorized_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorized_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorized_RequestMultiError) AllErrors() []error { return m }

// IsAuthorized_RequestValidationError is the validation error returned by
// IsAuthorized_Request.Validate if the designated constraints aren't met.
type IsAuthorized_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorized_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorized_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorized_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorized_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorized_RequestValidationError) ErrorName() string {
	return "IsAuthorized_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorized_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorized_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorized_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorized_RequestValidationError{}

// Validate checks the field values on IsAuthorized_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorized_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorized_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAuthorized_ResponseMultiError, or nil if none found.
func (m *IsAuthorized_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorized_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDecisionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsAuthorized_ResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsAuthorized_ResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecisionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsAuthorized_ResponseValidationError{
				field:  "DecisionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetDecisions()))
		i := 0
		for key := range m.GetDecisions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDecisions()[key]
			_ = val

			// no validation rules for Decisions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, IsAuthorized_ResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, IsAuthorized_ResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return IsAuthorized_ResponseValidationError{
						field:  fmt.Sprintf("Decisions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return IsAuthorized_ResponseMultiError(errors)
	}

	return nil
}

// IsAuthorized_ResponseMultiError is an error wrapping multiple validation
// errors returned by IsAuthorized_Response.ValidateAll() if the designated
// constraints aren't met.
type IsAuthorized_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorized_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorized_ResponseMultiError) AllErrors() []error { return m }

// IsAuthorized_ResponseValidationError is the validation error returned by
// IsAuthorized_Response.Validate if the designated constraints aren't met.
type IsAuthorized_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorized_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorized_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorized_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorized_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorized_ResponseValidationError) ErrorName() string {
	return "IsAuthorized_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorized_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorized_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorized_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorized_ResponseValidationError{}

// Validate checks the field values on IsAuthorized_Request_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorized_Request_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorized_Request_Resource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsAuthorized_Request_ResourceMultiError, or nil if none found.
func (m *IsAuthorized_Request_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorized_Request_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Type

	if len(errors) > 0 {
		return IsAuthorized_Request_ResourceMultiError(errors)
	}

	return nil
}

// IsAuthorized_Request_ResourceMultiError is an error wrapping multiple
// validation errors returned by IsAuthorized_Request_Resource.ValidateAll()
// if the designated constraints aren't met.
type IsAuthorized_Request_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorized_Request_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorized_Request_ResourceMultiError) AllErrors() []error { return m }

// IsAuthorized_Request_ResourceValidationError is the validation error
// returned by IsAuthorized_Request_Resource.Validate if the designated
// constraints aren't met.
type IsAuthorized_Request_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorized_Request_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorized_Request_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorized_Request_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorized_Request_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorized_Request_ResourceValidationError) ErrorName() string {
	return "IsAuthorized_Request_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorized_Request_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorized_Request_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorized_Request_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorized_Request_ResourceValidationError{}

// Validate checks the field values on IsAuthorized_Response_Action with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorized_Response_Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorized_Response_Action with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAuthorized_Response_ActionMultiError, or nil if none found.
func (m *IsAuthorized_Response_Action) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorized_Response_Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allow

	if len(errors) > 0 {
		return IsAuthorized_Response_ActionMultiError(errors)
	}

	return nil
}

// IsAuthorized_Response_ActionMultiError is an error wrapping multiple
// validation errors returned by IsAuthorized_Response_Action.ValidateAll() if
// the designated constraints aren't met.
type IsAuthorized_Response_ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorized_Response_ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorized_Response_ActionMultiError) AllErrors() []error { return m }

// IsAuthorized_Response_ActionValidationError is the validation error returned
// by IsAuthorized_Response_Action.Validate if the designated constraints
// aren't met.
type IsAuthorized_Response_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorized_Response_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorized_Response_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorized_Response_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorized_Response_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorized_Response_ActionValidationError) ErrorName() string {
	return "IsAuthorized_Response_ActionValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorized_Response_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorized_Response_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorized_Response_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorized_Response_ActionValidationError{}

// Validate checks the field values on IsAuthorized_Response_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorized_Response_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorized_Response_Resource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsAuthorized_Response_ResourceMultiError, or nil if none found.
func (m *IsAuthorized_Response_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorized_Response_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetActions()))
		i := 0
		for key := range m.GetActions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActions()[key]
			_ = val

			// no validation rules for Actions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, IsAuthorized_Response_ResourceValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, IsAuthorized_Response_ResourceValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return IsAuthorized_Response_ResourceValidationError{
						field:  fmt.Sprintf("Actions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return IsAuthorized_Response_ResourceMultiError(errors)
	}

	return nil
}

// IsAuthorized_Response_ResourceMultiError is an error wrapping multiple
// validation errors returned by IsAuthorized_Response_Resource.ValidateAll()
// if the designated constraints aren't met.
type IsAuthorized_Response_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorized_Response_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorized_Response_ResourceMultiError) AllErrors() []error { return m }

// IsAuthorized_Response_ResourceValidationError is the validation error
// returned by IsAuthorized_Response_Resource.Validate if the designated
// constraints aren't met.
type IsAuthorized_Response_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorized_Response_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorized_Response_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorized_Response_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorized_Response_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorized_Response_ResourceValidationError) ErrorName() string {
	return "IsAuthorized_Response_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorized_Response_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorized_Response_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorized_Response_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorized_Response_ResourceValidationError{}

// Validate checks the field values on IsAuthorized_Response_ResourceType with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IsAuthorized_Response_ResourceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorized_Response_ResourceType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IsAuthorized_Response_ResourceTypeMultiError, or nil if none found.
func (m *IsAuthorized_Response_ResourceType) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorized_Response_ResourceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetResources()))
		i := 0
		for key := range m.GetResources() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResources()[key]
			_ = val

			// no validation rules for Resources[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, IsAuthorized_Response_ResourceTypeValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, IsAuthorized_Response_ResourceTypeValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return IsAuthorized_Response_ResourceTypeValidationError{
						field:  fmt.Sprintf("Resources[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return IsAuthorized_Response_ResourceTypeMultiError(errors)
	}

	return nil
}

// IsAuthorized_Response_ResourceTypeMultiError is an error wrapping multiple
// validation errors returned by
// IsAuthorized_Response_ResourceType.ValidateAll() if the designated
// constraints aren't met.
type IsAuthorized_Response_ResourceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorized_Response_ResourceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorized_Response_ResourceTypeMultiError) AllErrors() []error { return m }

// IsAuthorized_Response_ResourceTypeValidationError is the validation error
// returned by IsAuthorized_Response_ResourceType.Validate if the designated
// constraints aren't met.
type IsAuthorized_Response_ResourceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorized_Response_ResourceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorized_Response_ResourceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorized_Response_ResourceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorized_Response_ResourceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorized_Response_ResourceTypeValidationError) ErrorName() string {
	return "IsAuthorized_Response_ResourceTypeValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorized_Response_ResourceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorized_Response_ResourceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorized_Response_ResourceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorized_Response_ResourceTypeValidationError{}

// Validate checks the field values on WhatAuthorized_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhatAuthorized_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorized_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WhatAuthorized_RequestMultiError, or nil if none found.
func (m *WhatAuthorized_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorized_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhatAuthorized_RequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhatAuthorized_RequestValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhatAuthorized_RequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResourceTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WhatAuthorized_RequestValidationError{
						field:  fmt.Sprintf("ResourceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WhatAuthorized_RequestValidationError{
						field:  fmt.Sprintf("ResourceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhatAuthorized_RequestValidationError{
					field:  fmt.Sprintf("ResourceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetInputParams()))
		i := 0
		for key := range m.GetInputParams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetInputParams()[key]
			_ = val

			// no validation rules for InputParams[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WhatAuthorized_RequestValidationError{
							field:  fmt.Sprintf("InputParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WhatAuthorized_RequestValidationError{
							field:  fmt.Sprintf("InputParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WhatAuthorized_RequestValidationError{
						field:  fmt.Sprintf("InputParams[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WhatAuthorized_RequestMultiError(errors)
	}

	return nil
}

// WhatAuthorized_RequestMultiError is an error wrapping multiple validation
// errors returned by WhatAuthorized_Request.ValidateAll() if the designated
// constraints aren't met.
type WhatAuthorized_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorized_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorized_RequestMultiError) AllErrors() []error { return m }

// WhatAuthorized_RequestValidationError is the validation error returned by
// WhatAuthorized_Request.Validate if the designated constraints aren't met.
type WhatAuthorized_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorized_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorized_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorized_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorized_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorized_RequestValidationError) ErrorName() string {
	return "WhatAuthorized_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorized_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorized_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorized_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorized_RequestValidationError{}

// Validate checks the field values on WhatAuthorized_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhatAuthorized_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorized_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WhatAuthorized_ResponseMultiError, or nil if none found.
func (m *WhatAuthorized_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorized_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDecisionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhatAuthorized_ResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhatAuthorized_ResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecisionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhatAuthorized_ResponseValidationError{
				field:  "DecisionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetDecisions()))
		i := 0
		for key := range m.GetDecisions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDecisions()[key]
			_ = val

			// no validation rules for Decisions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WhatAuthorized_ResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WhatAuthorized_ResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WhatAuthorized_ResponseValidationError{
						field:  fmt.Sprintf("Decisions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WhatAuthorized_ResponseMultiError(errors)
	}

	return nil
}

// WhatAuthorized_ResponseMultiError is an error wrapping multiple validation
// errors returned by WhatAuthorized_Response.ValidateAll() if the designated
// constraints aren't met.
type WhatAuthorized_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorized_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorized_ResponseMultiError) AllErrors() []error { return m }

// WhatAuthorized_ResponseValidationError is the validation error returned by
// WhatAuthorized_Response.Validate if the designated constraints aren't met.
type WhatAuthorized_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorized_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorized_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorized_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorized_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorized_ResponseValidationError) ErrorName() string {
	return "WhatAuthorized_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorized_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorized_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorized_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorized_ResponseValidationError{}

// Validate checks the field values on WhatAuthorized_Request_ResourceType with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WhatAuthorized_Request_ResourceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorized_Request_ResourceType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WhatAuthorized_Request_ResourceTypeMultiError, or nil if none found.
func (m *WhatAuthorized_Request_ResourceType) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorized_Request_ResourceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return WhatAuthorized_Request_ResourceTypeMultiError(errors)
	}

	return nil
}

// WhatAuthorized_Request_ResourceTypeMultiError is an error wrapping multiple
// validation errors returned by
// WhatAuthorized_Request_ResourceType.ValidateAll() if the designated
// constraints aren't met.
type WhatAuthorized_Request_ResourceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorized_Request_ResourceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorized_Request_ResourceTypeMultiError) AllErrors() []error { return m }

// WhatAuthorized_Request_ResourceTypeValidationError is the validation error
// returned by WhatAuthorized_Request_ResourceType.Validate if the designated
// constraints aren't met.
type WhatAuthorized_Request_ResourceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorized_Request_ResourceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorized_Request_ResourceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorized_Request_ResourceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorized_Request_ResourceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorized_Request_ResourceTypeValidationError) ErrorName() string {
	return "WhatAuthorized_Request_ResourceTypeValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorized_Request_ResourceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorized_Request_ResourceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorized_Request_ResourceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorized_Request_ResourceTypeValidationError{}

// Validate checks the field values on WhatAuthorized_Response_Resource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WhatAuthorized_Response_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorized_Response_Resource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WhatAuthorized_Response_ResourceMultiError, or nil if none found.
func (m *WhatAuthorized_Response_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorized_Response_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	if len(errors) > 0 {
		return WhatAuthorized_Response_ResourceMultiError(errors)
	}

	return nil
}

// WhatAuthorized_Response_ResourceMultiError is an error wrapping multiple
// validation errors returned by
// WhatAuthorized_Response_Resource.ValidateAll() if the designated
// constraints aren't met.
type WhatAuthorized_Response_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorized_Response_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorized_Response_ResourceMultiError) AllErrors() []error { return m }

// WhatAuthorized_Response_ResourceValidationError is the validation error
// returned by WhatAuthorized_Response_Resource.Validate if the designated
// constraints aren't met.
type WhatAuthorized_Response_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorized_Response_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorized_Response_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorized_Response_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorized_Response_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorized_Response_ResourceValidationError) ErrorName() string {
	return "WhatAuthorized_Response_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorized_Response_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorized_Response_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorized_Response_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorized_Response_ResourceValidationError{}

// Validate checks the field values on WhatAuthorized_Response_Action with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhatAuthorized_Response_Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorized_Response_Action with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WhatAuthorized_Response_ActionMultiError, or nil if none found.
func (m *WhatAuthorized_Response_Action) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorized_Response_Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WhatAuthorized_Response_ActionValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WhatAuthorized_Response_ActionValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhatAuthorized_Response_ActionValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WhatAuthorized_Response_ActionMultiError(errors)
	}

	return nil
}

// WhatAuthorized_Response_ActionMultiError is an error wrapping multiple
// validation errors returned by WhatAuthorized_Response_Action.ValidateAll()
// if the designated constraints aren't met.
type WhatAuthorized_Response_ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorized_Response_ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorized_Response_ActionMultiError) AllErrors() []error { return m }

// WhatAuthorized_Response_ActionValidationError is the validation error
// returned by WhatAuthorized_Response_Action.Validate if the designated
// constraints aren't met.
type WhatAuthorized_Response_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorized_Response_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorized_Response_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorized_Response_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorized_Response_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorized_Response_ActionValidationError) ErrorName() string {
	return "WhatAuthorized_Response_ActionValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorized_Response_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorized_Response_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorized_Response_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorized_Response_ActionValidationError{}

// Validate checks the field values on WhatAuthorized_Response_ResourceType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WhatAuthorized_Response_ResourceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhatAuthorized_Response_ResourceType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WhatAuthorized_Response_ResourceTypeMultiError, or nil if none found.
func (m *WhatAuthorized_Response_ResourceType) ValidateAll() error {
	return m.validate(true)
}

func (m *WhatAuthorized_Response_ResourceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetActions()))
		i := 0
		for key := range m.GetActions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActions()[key]
			_ = val

			// no validation rules for Actions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WhatAuthorized_Response_ResourceTypeValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WhatAuthorized_Response_ResourceTypeValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WhatAuthorized_Response_ResourceTypeValidationError{
						field:  fmt.Sprintf("Actions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WhatAuthorized_Response_ResourceTypeMultiError(errors)
	}

	return nil
}

// WhatAuthorized_Response_ResourceTypeMultiError is an error wrapping multiple
// validation errors returned by
// WhatAuthorized_Response_ResourceType.ValidateAll() if the designated
// constraints aren't met.
type WhatAuthorized_Response_ResourceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhatAuthorized_Response_ResourceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhatAuthorized_Response_ResourceTypeMultiError) AllErrors() []error { return m }

// WhatAuthorized_Response_ResourceTypeValidationError is the validation error
// returned by WhatAuthorized_Response_ResourceType.Validate if the designated
// constraints aren't met.
type WhatAuthorized_Response_ResourceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhatAuthorized_Response_ResourceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhatAuthorized_Response_ResourceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhatAuthorized_Response_ResourceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhatAuthorized_Response_ResourceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhatAuthorized_Response_ResourceTypeValidationError) ErrorName() string {
	return "WhatAuthorized_Response_ResourceTypeValidationError"
}

// Error satisfies the builtin error interface
func (e WhatAuthorized_Response_ResourceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhatAuthorized_Response_ResourceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhatAuthorized_Response_ResourceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhatAuthorized_Response_ResourceTypeValidationError{}

// Validate checks the field values on WhoAuthorized_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhoAuthorized_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAuthorized_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WhoAuthorized_RequestMultiError, or nil if none found.
func (m *WhoAuthorized_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAuthorized_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WhoAuthorized_RequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WhoAuthorized_RequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhoAuthorized_RequestValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetInputParams()))
		i := 0
		for key := range m.GetInputParams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetInputParams()[key]
			_ = val

			// no validation rules for InputParams[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WhoAuthorized_RequestValidationError{
							field:  fmt.Sprintf("InputParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WhoAuthorized_RequestValidationError{
							field:  fmt.Sprintf("InputParams[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WhoAuthorized_RequestValidationError{
						field:  fmt.Sprintf("InputParams[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WhoAuthorized_RequestMultiError(errors)
	}

	return nil
}

// WhoAuthorized_RequestMultiError is an error wrapping multiple validation
// errors returned by WhoAuthorized_Request.ValidateAll() if the designated
// constraints aren't met.
type WhoAuthorized_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAuthorized_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAuthorized_RequestMultiError) AllErrors() []error { return m }

// WhoAuthorized_RequestValidationError is the validation error returned by
// WhoAuthorized_Request.Validate if the designated constraints aren't met.
type WhoAuthorized_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAuthorized_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAuthorized_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAuthorized_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAuthorized_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAuthorized_RequestValidationError) ErrorName() string {
	return "WhoAuthorized_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e WhoAuthorized_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAuthorized_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAuthorized_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAuthorized_RequestValidationError{}

// Validate checks the field values on WhoAuthorized_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhoAuthorized_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAuthorized_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WhoAuthorized_ResponseMultiError, or nil if none found.
func (m *WhoAuthorized_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAuthorized_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDecisionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WhoAuthorized_ResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WhoAuthorized_ResponseValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecisionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhoAuthorized_ResponseValidationError{
				field:  "DecisionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetDecisions()))
		i := 0
		for key := range m.GetDecisions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDecisions()[key]
			_ = val

			// no validation rules for Decisions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WhoAuthorized_ResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WhoAuthorized_ResponseValidationError{
							field:  fmt.Sprintf("Decisions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WhoAuthorized_ResponseValidationError{
						field:  fmt.Sprintf("Decisions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WhoAuthorized_ResponseMultiError(errors)
	}

	return nil
}

// WhoAuthorized_ResponseMultiError is an error wrapping multiple validation
// errors returned by WhoAuthorized_Response.ValidateAll() if the designated
// constraints aren't met.
type WhoAuthorized_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAuthorized_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAuthorized_ResponseMultiError) AllErrors() []error { return m }

// WhoAuthorized_ResponseValidationError is the validation error returned by
// WhoAuthorized_Response.Validate if the designated constraints aren't met.
type WhoAuthorized_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAuthorized_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAuthorized_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAuthorized_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAuthorized_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAuthorized_ResponseValidationError) ErrorName() string {
	return "WhoAuthorized_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WhoAuthorized_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAuthorized_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAuthorized_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAuthorized_ResponseValidationError{}

// Validate checks the field values on WhoAuthorized_Request_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhoAuthorized_Request_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAuthorized_Request_Resource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WhoAuthorized_Request_ResourceMultiError, or nil if none found.
func (m *WhoAuthorized_Request_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAuthorized_Request_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Type

	if len(errors) > 0 {
		return WhoAuthorized_Request_ResourceMultiError(errors)
	}

	return nil
}

// WhoAuthorized_Request_ResourceMultiError is an error wrapping multiple
// validation errors returned by WhoAuthorized_Request_Resource.ValidateAll()
// if the designated constraints aren't met.
type WhoAuthorized_Request_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAuthorized_Request_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAuthorized_Request_ResourceMultiError) AllErrors() []error { return m }

// WhoAuthorized_Request_ResourceValidationError is the validation error
// returned by WhoAuthorized_Request_Resource.Validate if the designated
// constraints aren't met.
type WhoAuthorized_Request_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAuthorized_Request_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAuthorized_Request_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAuthorized_Request_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAuthorized_Request_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAuthorized_Request_ResourceValidationError) ErrorName() string {
	return "WhoAuthorized_Request_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e WhoAuthorized_Request_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAuthorized_Request_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAuthorized_Request_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAuthorized_Request_ResourceValidationError{}

// Validate checks the field values on WhoAuthorized_Response_Subject with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhoAuthorized_Response_Subject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAuthorized_Response_Subject with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WhoAuthorized_Response_SubjectMultiError, or nil if none found.
func (m *WhoAuthorized_Response_Subject) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAuthorized_Response_Subject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	if len(errors) > 0 {
		return WhoAuthorized_Response_SubjectMultiError(errors)
	}

	return nil
}

// WhoAuthorized_Response_SubjectMultiError is an error wrapping multiple
// validation errors returned by WhoAuthorized_Response_Subject.ValidateAll()
// if the designated constraints aren't met.
type WhoAuthorized_Response_SubjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAuthorized_Response_SubjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAuthorized_Response_SubjectMultiError) AllErrors() []error { return m }

// WhoAuthorized_Response_SubjectValidationError is the validation error
// returned by WhoAuthorized_Response_Subject.Validate if the designated
// constraints aren't met.
type WhoAuthorized_Response_SubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAuthorized_Response_SubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAuthorized_Response_SubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAuthorized_Response_SubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAuthorized_Response_SubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAuthorized_Response_SubjectValidationError) ErrorName() string {
	return "WhoAuthorized_Response_SubjectValidationError"
}

// Error satisfies the builtin error interface
func (e WhoAuthorized_Response_SubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAuthorized_Response_Subject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAuthorized_Response_SubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAuthorized_Response_SubjectValidationError{}

// Validate checks the field values on WhoAuthorized_Response_Action with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhoAuthorized_Response_Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAuthorized_Response_Action with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WhoAuthorized_Response_ActionMultiError, or nil if none found.
func (m *WhoAuthorized_Response_Action) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAuthorized_Response_Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WhoAuthorized_Response_ActionValidationError{
						field:  fmt.Sprintf("Subjects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WhoAuthorized_Response_ActionValidationError{
						field:  fmt.Sprintf("Subjects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhoAuthorized_Response_ActionValidationError{
					field:  fmt.Sprintf("Subjects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WhoAuthorized_Response_ActionMultiError(errors)
	}

	return nil
}

// WhoAuthorized_Response_ActionMultiError is an error wrapping multiple
// validation errors returned by WhoAuthorized_Response_Action.ValidateAll()
// if the designated constraints aren't met.
type WhoAuthorized_Response_ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAuthorized_Response_ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAuthorized_Response_ActionMultiError) AllErrors() []error { return m }

// WhoAuthorized_Response_ActionValidationError is the validation error
// returned by WhoAuthorized_Response_Action.Validate if the designated
// constraints aren't met.
type WhoAuthorized_Response_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAuthorized_Response_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAuthorized_Response_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAuthorized_Response_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAuthorized_Response_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAuthorized_Response_ActionValidationError) ErrorName() string {
	return "WhoAuthorized_Response_ActionValidationError"
}

// Error satisfies the builtin error interface
func (e WhoAuthorized_Response_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAuthorized_Response_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAuthorized_Response_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAuthorized_Response_ActionValidationError{}

// Validate checks the field values on WhoAuthorized_Response_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WhoAuthorized_Response_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAuthorized_Response_Resource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WhoAuthorized_Response_ResourceMultiError, or nil if none found.
func (m *WhoAuthorized_Response_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAuthorized_Response_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetActions()))
		i := 0
		for key := range m.GetActions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActions()[key]
			_ = val

			// no validation rules for Actions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WhoAuthorized_Response_ResourceValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WhoAuthorized_Response_ResourceValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WhoAuthorized_Response_ResourceValidationError{
						field:  fmt.Sprintf("Actions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WhoAuthorized_Response_ResourceMultiError(errors)
	}

	return nil
}

// WhoAuthorized_Response_ResourceMultiError is an error wrapping multiple
// validation errors returned by WhoAuthorized_Response_Resource.ValidateAll()
// if the designated constraints aren't met.
type WhoAuthorized_Response_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAuthorized_Response_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAuthorized_Response_ResourceMultiError) AllErrors() []error { return m }

// WhoAuthorized_Response_ResourceValidationError is the validation error
// returned by WhoAuthorized_Response_Resource.Validate if the designated
// constraints aren't met.
type WhoAuthorized_Response_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAuthorized_Response_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAuthorized_Response_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAuthorized_Response_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAuthorized_Response_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAuthorized_Response_ResourceValidationError) ErrorName() string {
	return "WhoAuthorized_Response_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e WhoAuthorized_Response_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAuthorized_Response_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAuthorized_Response_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAuthorized_Response_ResourceValidationError{}

// Validate checks the field values on WhoAuthorized_Response_ResourceType with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WhoAuthorized_Response_ResourceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAuthorized_Response_ResourceType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WhoAuthorized_Response_ResourceTypeMultiError, or nil if none found.
func (m *WhoAuthorized_Response_ResourceType) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAuthorized_Response_ResourceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetResources()))
		i := 0
		for key := range m.GetResources() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResources()[key]
			_ = val

			// no validation rules for Resources[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WhoAuthorized_Response_ResourceTypeValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WhoAuthorized_Response_ResourceTypeValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WhoAuthorized_Response_ResourceTypeValidationError{
						field:  fmt.Sprintf("Resources[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WhoAuthorized_Response_ResourceTypeMultiError(errors)
	}

	return nil
}

// WhoAuthorized_Response_ResourceTypeMultiError is an error wrapping multiple
// validation errors returned by
// WhoAuthorized_Response_ResourceType.ValidateAll() if the designated
// constraints aren't met.
type WhoAuthorized_Response_ResourceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAuthorized_Response_ResourceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAuthorized_Response_ResourceTypeMultiError) AllErrors() []error { return m }

// WhoAuthorized_Response_ResourceTypeValidationError is the validation error
// returned by WhoAuthorized_Response_ResourceType.Validate if the designated
// constraints aren't met.
type WhoAuthorized_Response_ResourceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAuthorized_Response_ResourceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAuthorized_Response_ResourceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAuthorized_Response_ResourceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAuthorized_Response_ResourceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAuthorized_Response_ResourceTypeValidationError) ErrorName() string {
	return "WhoAuthorized_Response_ResourceTypeValidationError"
}

// Error satisfies the builtin error interface
func (e WhoAuthorized_Response_ResourceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAuthorized_Response_ResourceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAuthorized_Response_ResourceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAuthorized_Response_ResourceTypeValidationError{}
