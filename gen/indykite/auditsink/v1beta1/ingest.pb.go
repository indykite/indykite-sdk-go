// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: indykite/auditsink/v1beta1/ingest.proto

package auditsinkv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchUpsertNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *BatchUpsertNodes) Reset() {
	*x = BatchUpsertNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpsertNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpsertNodes) ProtoMessage() {}

func (x *BatchUpsertNodes) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpsertNodes.ProtoReflect.Descriptor instead.
func (*BatchUpsertNodes) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{0}
}

func (x *BatchUpsertNodes) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type BatchUpsertRelationships struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationships []*Relationship `protobuf:"bytes,1,rep,name=relationships,proto3" json:"relationships,omitempty"`
}

func (x *BatchUpsertRelationships) Reset() {
	*x = BatchUpsertRelationships{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpsertRelationships) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpsertRelationships) ProtoMessage() {}

func (x *BatchUpsertRelationships) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpsertRelationships.ProtoReflect.Descriptor instead.
func (*BatchUpsertRelationships) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{1}
}

func (x *BatchUpsertRelationships) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

type BatchDeleteNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeMatch `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *BatchDeleteNodes) Reset() {
	*x = BatchDeleteNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteNodes) ProtoMessage() {}

func (x *BatchDeleteNodes) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteNodes.ProtoReflect.Descriptor instead.
func (*BatchDeleteNodes) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{2}
}

func (x *BatchDeleteNodes) GetNodes() []*NodeMatch {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type BatchDeleteRelationships struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationships []*Relationship `protobuf:"bytes,1,rep,name=relationships,proto3" json:"relationships,omitempty"`
}

func (x *BatchDeleteRelationships) Reset() {
	*x = BatchDeleteRelationships{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteRelationships) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRelationships) ProtoMessage() {}

func (x *BatchDeleteRelationships) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRelationships.ProtoReflect.Descriptor instead.
func (*BatchDeleteRelationships) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{3}
}

func (x *BatchDeleteRelationships) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

type BatchDeleteNodeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeProperties []*DeleteData_NodePropertyMatch `protobuf:"bytes,1,rep,name=node_properties,json=nodeProperties,proto3" json:"node_properties,omitempty"`
}

func (x *BatchDeleteNodeProperties) Reset() {
	*x = BatchDeleteNodeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteNodeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteNodeProperties) ProtoMessage() {}

func (x *BatchDeleteNodeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteNodeProperties.ProtoReflect.Descriptor instead.
func (*BatchDeleteNodeProperties) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{4}
}

func (x *BatchDeleteNodeProperties) GetNodeProperties() []*DeleteData_NodePropertyMatch {
	if x != nil {
		return x.NodeProperties
	}
	return nil
}

type BatchDeleteRelationshipProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationshipProperties []*DeleteData_RelationshipPropertyMatch `protobuf:"bytes,1,rep,name=relationship_properties,json=relationshipProperties,proto3" json:"relationship_properties,omitempty"`
}

func (x *BatchDeleteRelationshipProperties) Reset() {
	*x = BatchDeleteRelationshipProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteRelationshipProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRelationshipProperties) ProtoMessage() {}

func (x *BatchDeleteRelationshipProperties) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRelationshipProperties.ProtoReflect.Descriptor instead.
func (*BatchDeleteRelationshipProperties) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{5}
}

func (x *BatchDeleteRelationshipProperties) GetRelationshipProperties() []*DeleteData_RelationshipPropertyMatch {
	if x != nil {
		return x.RelationshipProperties
	}
	return nil
}

type BatchDeleteNodeTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeTags []*DeleteData_NodeTagMatch `protobuf:"bytes,1,rep,name=node_tags,json=nodeTags,proto3" json:"node_tags,omitempty"`
}

func (x *BatchDeleteNodeTags) Reset() {
	*x = BatchDeleteNodeTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteNodeTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteNodeTags) ProtoMessage() {}

func (x *BatchDeleteNodeTags) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteNodeTags.ProtoReflect.Descriptor instead.
func (*BatchDeleteNodeTags) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{6}
}

func (x *BatchDeleteNodeTags) GetNodeTags() []*DeleteData_NodeTagMatch {
	if x != nil {
		return x.NodeTags
	}
	return nil
}

type UpsertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*UpsertData_Node
	//	*UpsertData_Relationship
	Data isUpsertData_Data `protobuf_oneof:"data"`
}

func (x *UpsertData) Reset() {
	*x = UpsertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertData) ProtoMessage() {}

func (x *UpsertData) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertData.ProtoReflect.Descriptor instead.
func (*UpsertData) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{7}
}

func (m *UpsertData) GetData() isUpsertData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UpsertData) GetNode() *Node {
	if x, ok := x.GetData().(*UpsertData_Node); ok {
		return x.Node
	}
	return nil
}

func (x *UpsertData) GetRelationship() *Relationship {
	if x, ok := x.GetData().(*UpsertData_Relationship); ok {
		return x.Relationship
	}
	return nil
}

type isUpsertData_Data interface {
	isUpsertData_Data()
}

type UpsertData_Node struct {
	Node *Node `protobuf:"bytes,1,opt,name=node,proto3,oneof"`
}

type UpsertData_Relationship struct {
	Relationship *Relationship `protobuf:"bytes,2,opt,name=relationship,proto3,oneof"`
}

func (*UpsertData_Node) isUpsertData_Data() {}

func (*UpsertData_Relationship) isUpsertData_Data() {}

type DeleteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*DeleteData_Node
	//	*DeleteData_Relationship
	//	*DeleteData_NodeProperty
	//	*DeleteData_RelationshipProperty
	//	*DeleteData_NodeTags
	Data isDeleteData_Data `protobuf_oneof:"data"`
}

func (x *DeleteData) Reset() {
	*x = DeleteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteData) ProtoMessage() {}

func (x *DeleteData) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteData.ProtoReflect.Descriptor instead.
func (*DeleteData) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{8}
}

func (m *DeleteData) GetData() isDeleteData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DeleteData) GetNode() *NodeMatch {
	if x, ok := x.GetData().(*DeleteData_Node); ok {
		return x.Node
	}
	return nil
}

func (x *DeleteData) GetRelationship() *Relationship {
	if x, ok := x.GetData().(*DeleteData_Relationship); ok {
		return x.Relationship
	}
	return nil
}

func (x *DeleteData) GetNodeProperty() *DeleteData_NodePropertyMatch {
	if x, ok := x.GetData().(*DeleteData_NodeProperty); ok {
		return x.NodeProperty
	}
	return nil
}

func (x *DeleteData) GetRelationshipProperty() *DeleteData_RelationshipPropertyMatch {
	if x, ok := x.GetData().(*DeleteData_RelationshipProperty); ok {
		return x.RelationshipProperty
	}
	return nil
}

func (x *DeleteData) GetNodeTags() *DeleteData_NodeTagMatch {
	if x, ok := x.GetData().(*DeleteData_NodeTags); ok {
		return x.NodeTags
	}
	return nil
}

type isDeleteData_Data interface {
	isDeleteData_Data()
}

type DeleteData_Node struct {
	Node *NodeMatch `protobuf:"bytes,1,opt,name=node,proto3,oneof"`
}

type DeleteData_Relationship struct {
	Relationship *Relationship `protobuf:"bytes,2,opt,name=relationship,proto3,oneof"`
}

type DeleteData_NodeProperty struct {
	NodeProperty *DeleteData_NodePropertyMatch `protobuf:"bytes,3,opt,name=node_property,json=nodeProperty,proto3,oneof"`
}

type DeleteData_RelationshipProperty struct {
	RelationshipProperty *DeleteData_RelationshipPropertyMatch `protobuf:"bytes,4,opt,name=relationship_property,json=relationshipProperty,proto3,oneof"`
}

type DeleteData_NodeTags struct {
	NodeTags *DeleteData_NodeTagMatch `protobuf:"bytes,5,opt,name=node_tags,json=nodeTags,proto3,oneof"`
}

func (*DeleteData_Node) isDeleteData_Data() {}

func (*DeleteData_Relationship) isDeleteData_Data() {}

func (*DeleteData_NodeProperty) isDeleteData_Data() {}

func (*DeleteData_RelationshipProperty) isDeleteData_Data() {}

func (*DeleteData_NodeTags) isDeleteData_Data() {}

type DigitalTwin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	TenantId   string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *DigitalTwin) Reset() {
	*x = DigitalTwin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalTwin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalTwin) ProtoMessage() {}

func (x *DigitalTwin) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalTwin.ProtoReflect.Descriptor instead.
func (*DigitalTwin) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{9}
}

func (x *DigitalTwin) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *DigitalTwin) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DigitalTwin) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{10}
}

func (x *Resource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	IsIdentity bool   `protobuf:"varint,4,opt,name=is_identity,json=isIdentity,proto3" json:"is_identity,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{11}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Node) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Node) GetIsIdentity() bool {
	if x != nil {
		return x.IsIdentity
	}
	return false
}

type Relationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Source *NodeMatch `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target *NodeMatch `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Relationship) Reset() {
	*x = Relationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relationship) ProtoMessage() {}

func (x *Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relationship.ProtoReflect.Descriptor instead.
func (*Relationship) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{12}
}

func (x *Relationship) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Relationship) GetSource() *NodeMatch {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Relationship) GetTarget() *NodeMatch {
	if x != nil {
		return x.Target
	}
	return nil
}

type NodeMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *NodeMatch) Reset() {
	*x = NodeMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMatch) ProtoMessage() {}

func (x *NodeMatch) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMatch.ProtoReflect.Descriptor instead.
func (*NodeMatch) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{13}
}

func (x *NodeMatch) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *NodeMatch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DeleteData_NodeTagMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *NodeMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Tags  []string   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DeleteData_NodeTagMatch) Reset() {
	*x = DeleteData_NodeTagMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteData_NodeTagMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteData_NodeTagMatch) ProtoMessage() {}

func (x *DeleteData_NodeTagMatch) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteData_NodeTagMatch.ProtoReflect.Descriptor instead.
func (*DeleteData_NodeTagMatch) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DeleteData_NodeTagMatch) GetMatch() *NodeMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *DeleteData_NodeTagMatch) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DeleteData_NodePropertyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match        *NodeMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	PropertyType string     `protobuf:"bytes,2,opt,name=property_type,json=propertyType,proto3" json:"property_type,omitempty"`
}

func (x *DeleteData_NodePropertyMatch) Reset() {
	*x = DeleteData_NodePropertyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteData_NodePropertyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteData_NodePropertyMatch) ProtoMessage() {}

func (x *DeleteData_NodePropertyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteData_NodePropertyMatch.ProtoReflect.Descriptor instead.
func (*DeleteData_NodePropertyMatch) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{8, 1}
}

func (x *DeleteData_NodePropertyMatch) GetMatch() *NodeMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *DeleteData_NodePropertyMatch) GetPropertyType() string {
	if x != nil {
		return x.PropertyType
	}
	return ""
}

type DeleteData_RelationshipPropertyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Source       *NodeMatch `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target       *NodeMatch `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	PropertyType string     `protobuf:"bytes,4,opt,name=property_type,json=propertyType,proto3" json:"property_type,omitempty"`
}

func (x *DeleteData_RelationshipPropertyMatch) Reset() {
	*x = DeleteData_RelationshipPropertyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteData_RelationshipPropertyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteData_RelationshipPropertyMatch) ProtoMessage() {}

func (x *DeleteData_RelationshipPropertyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteData_RelationshipPropertyMatch.ProtoReflect.Descriptor instead.
func (*DeleteData_RelationshipPropertyMatch) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP(), []int{8, 2}
}

func (x *DeleteData_RelationshipPropertyMatch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteData_RelationshipPropertyMatch) GetSource() *NodeMatch {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DeleteData_RelationshipPropertyMatch) GetTarget() *NodeMatch {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DeleteData_RelationshipPropertyMatch) GetPropertyType() string {
	if x != nil {
		return x.PropertyType
	}
	return ""
}

var File_indykite_auditsink_v1beta1_ingest_proto protoreflect.FileDescriptor

var file_indykite_auditsink_v1beta1_ingest_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x22, 0x4a, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x6a, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x4e, 0x0a,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x4f, 0x0a,
	0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x6a,
	0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x7e, 0x0a, 0x19, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x21, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x79, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x13, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xfc, 0x06, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x4e, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x5f, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x77, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x5f, 0x0a,
	0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3b, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x75,
	0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xd2, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x5f, 0x0a, 0x0b, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x77, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x8c, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0b, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02,
	0x03, 0x49, 0x41, 0x58, 0xaa, 0x02, 0x1a, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0xca, 0x02, 0x1a, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02,
	0x26, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73,
	0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_auditsink_v1beta1_ingest_proto_rawDescOnce sync.Once
	file_indykite_auditsink_v1beta1_ingest_proto_rawDescData = file_indykite_auditsink_v1beta1_ingest_proto_rawDesc
)

func file_indykite_auditsink_v1beta1_ingest_proto_rawDescGZIP() []byte {
	file_indykite_auditsink_v1beta1_ingest_proto_rawDescOnce.Do(func() {
		file_indykite_auditsink_v1beta1_ingest_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_auditsink_v1beta1_ingest_proto_rawDescData)
	})
	return file_indykite_auditsink_v1beta1_ingest_proto_rawDescData
}

var file_indykite_auditsink_v1beta1_ingest_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_indykite_auditsink_v1beta1_ingest_proto_goTypes = []any{
	(*BatchUpsertNodes)(nil),                     // 0: indykite.auditsink.v1beta1.BatchUpsertNodes
	(*BatchUpsertRelationships)(nil),             // 1: indykite.auditsink.v1beta1.BatchUpsertRelationships
	(*BatchDeleteNodes)(nil),                     // 2: indykite.auditsink.v1beta1.BatchDeleteNodes
	(*BatchDeleteRelationships)(nil),             // 3: indykite.auditsink.v1beta1.BatchDeleteRelationships
	(*BatchDeleteNodeProperties)(nil),            // 4: indykite.auditsink.v1beta1.BatchDeleteNodeProperties
	(*BatchDeleteRelationshipProperties)(nil),    // 5: indykite.auditsink.v1beta1.BatchDeleteRelationshipProperties
	(*BatchDeleteNodeTags)(nil),                  // 6: indykite.auditsink.v1beta1.BatchDeleteNodeTags
	(*UpsertData)(nil),                           // 7: indykite.auditsink.v1beta1.UpsertData
	(*DeleteData)(nil),                           // 8: indykite.auditsink.v1beta1.DeleteData
	(*DigitalTwin)(nil),                          // 9: indykite.auditsink.v1beta1.DigitalTwin
	(*Resource)(nil),                             // 10: indykite.auditsink.v1beta1.Resource
	(*Node)(nil),                                 // 11: indykite.auditsink.v1beta1.Node
	(*Relationship)(nil),                         // 12: indykite.auditsink.v1beta1.Relationship
	(*NodeMatch)(nil),                            // 13: indykite.auditsink.v1beta1.NodeMatch
	(*DeleteData_NodeTagMatch)(nil),              // 14: indykite.auditsink.v1beta1.DeleteData.NodeTagMatch
	(*DeleteData_NodePropertyMatch)(nil),         // 15: indykite.auditsink.v1beta1.DeleteData.NodePropertyMatch
	(*DeleteData_RelationshipPropertyMatch)(nil), // 16: indykite.auditsink.v1beta1.DeleteData.RelationshipPropertyMatch
}
var file_indykite_auditsink_v1beta1_ingest_proto_depIdxs = []int32{
	11, // 0: indykite.auditsink.v1beta1.BatchUpsertNodes.nodes:type_name -> indykite.auditsink.v1beta1.Node
	12, // 1: indykite.auditsink.v1beta1.BatchUpsertRelationships.relationships:type_name -> indykite.auditsink.v1beta1.Relationship
	13, // 2: indykite.auditsink.v1beta1.BatchDeleteNodes.nodes:type_name -> indykite.auditsink.v1beta1.NodeMatch
	12, // 3: indykite.auditsink.v1beta1.BatchDeleteRelationships.relationships:type_name -> indykite.auditsink.v1beta1.Relationship
	15, // 4: indykite.auditsink.v1beta1.BatchDeleteNodeProperties.node_properties:type_name -> indykite.auditsink.v1beta1.DeleteData.NodePropertyMatch
	16, // 5: indykite.auditsink.v1beta1.BatchDeleteRelationshipProperties.relationship_properties:type_name -> indykite.auditsink.v1beta1.DeleteData.RelationshipPropertyMatch
	14, // 6: indykite.auditsink.v1beta1.BatchDeleteNodeTags.node_tags:type_name -> indykite.auditsink.v1beta1.DeleteData.NodeTagMatch
	11, // 7: indykite.auditsink.v1beta1.UpsertData.node:type_name -> indykite.auditsink.v1beta1.Node
	12, // 8: indykite.auditsink.v1beta1.UpsertData.relationship:type_name -> indykite.auditsink.v1beta1.Relationship
	13, // 9: indykite.auditsink.v1beta1.DeleteData.node:type_name -> indykite.auditsink.v1beta1.NodeMatch
	12, // 10: indykite.auditsink.v1beta1.DeleteData.relationship:type_name -> indykite.auditsink.v1beta1.Relationship
	15, // 11: indykite.auditsink.v1beta1.DeleteData.node_property:type_name -> indykite.auditsink.v1beta1.DeleteData.NodePropertyMatch
	16, // 12: indykite.auditsink.v1beta1.DeleteData.relationship_property:type_name -> indykite.auditsink.v1beta1.DeleteData.RelationshipPropertyMatch
	14, // 13: indykite.auditsink.v1beta1.DeleteData.node_tags:type_name -> indykite.auditsink.v1beta1.DeleteData.NodeTagMatch
	13, // 14: indykite.auditsink.v1beta1.Relationship.source:type_name -> indykite.auditsink.v1beta1.NodeMatch
	13, // 15: indykite.auditsink.v1beta1.Relationship.target:type_name -> indykite.auditsink.v1beta1.NodeMatch
	13, // 16: indykite.auditsink.v1beta1.DeleteData.NodeTagMatch.match:type_name -> indykite.auditsink.v1beta1.NodeMatch
	13, // 17: indykite.auditsink.v1beta1.DeleteData.NodePropertyMatch.match:type_name -> indykite.auditsink.v1beta1.NodeMatch
	13, // 18: indykite.auditsink.v1beta1.DeleteData.RelationshipPropertyMatch.source:type_name -> indykite.auditsink.v1beta1.NodeMatch
	13, // 19: indykite.auditsink.v1beta1.DeleteData.RelationshipPropertyMatch.target:type_name -> indykite.auditsink.v1beta1.NodeMatch
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_indykite_auditsink_v1beta1_ingest_proto_init() }
func file_indykite_auditsink_v1beta1_ingest_proto_init() {
	if File_indykite_auditsink_v1beta1_ingest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpsertNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpsertRelationships); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteRelationships); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteNodeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteRelationshipProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteNodeTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DigitalTwin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Relationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*NodeMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteData_NodeTagMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteData_NodePropertyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteData_RelationshipPropertyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[7].OneofWrappers = []any{
		(*UpsertData_Node)(nil),
		(*UpsertData_Relationship)(nil),
	}
	file_indykite_auditsink_v1beta1_ingest_proto_msgTypes[8].OneofWrappers = []any{
		(*DeleteData_Node)(nil),
		(*DeleteData_Relationship)(nil),
		(*DeleteData_NodeProperty)(nil),
		(*DeleteData_RelationshipProperty)(nil),
		(*DeleteData_NodeTags)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_auditsink_v1beta1_ingest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_auditsink_v1beta1_ingest_proto_goTypes,
		DependencyIndexes: file_indykite_auditsink_v1beta1_ingest_proto_depIdxs,
		MessageInfos:      file_indykite_auditsink_v1beta1_ingest_proto_msgTypes,
	}.Build()
	File_indykite_auditsink_v1beta1_ingest_proto = out.File
	file_indykite_auditsink_v1beta1_ingest_proto_rawDesc = nil
	file_indykite_auditsink_v1beta1_ingest_proto_goTypes = nil
	file_indykite_auditsink_v1beta1_ingest_proto_depIdxs = nil
}
