// Copyright (c) 2025 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: indykite/auditsink/v1beta1/credentials.proto

package auditsinkv1beta1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TokenIntrospected struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ResolvedDigitalTwinId is filled only when resolved happened. ID is in GID format.
	ResolvedDigitalTwinId string `protobuf:"bytes,1,opt,name=resolved_digital_twin_id,json=resolvedDigitalTwinId,proto3" json:"resolved_digital_twin_id,omitempty"`
	// ConfigId is the ID of the configuration used to resolve the token.
	ConfigId string `protobuf:"bytes,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// Issuer claim from token or userinfo endpoint if present.
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Subject claim or alternative configured claim from token or userinfo endpoint if present.
	Subject string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	// JTI claim from token if present.
	Jti           string `protobuf:"bytes,5,opt,name=jti,proto3" json:"jti,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenIntrospected) Reset() {
	*x = TokenIntrospected{}
	mi := &file_indykite_auditsink_v1beta1_credentials_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenIntrospected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospected) ProtoMessage() {}

func (x *TokenIntrospected) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_credentials_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospected.ProtoReflect.Descriptor instead.
func (*TokenIntrospected) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_credentials_proto_rawDescGZIP(), []int{0}
}

func (x *TokenIntrospected) GetResolvedDigitalTwinId() string {
	if x != nil {
		return x.ResolvedDigitalTwinId
	}
	return ""
}

func (x *TokenIntrospected) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *TokenIntrospected) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *TokenIntrospected) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *TokenIntrospected) GetJti() string {
	if x != nil {
		return x.Jti
	}
	return ""
}

var File_indykite_auditsink_v1beta1_credentials_proto protoreflect.FileDescriptor

const file_indykite_auditsink_v1beta1_credentials_proto_rawDesc = "" +
	"\n" +
	",indykite/auditsink/v1beta1/credentials.proto\x12\x1aindykite.auditsink.v1beta1\"\xad\x01\n" +
	"\x11TokenIntrospected\x127\n" +
	"\x18resolved_digital_twin_id\x18\x01 \x01(\tR\x15resolvedDigitalTwinId\x12\x1b\n" +
	"\tconfig_id\x18\x02 \x01(\tR\bconfigId\x12\x16\n" +
	"\x06issuer\x18\x03 \x01(\tR\x06issuer\x12\x18\n" +
	"\asubject\x18\x04 \x01(\tR\asubject\x12\x10\n" +
	"\x03jti\x18\x05 \x01(\tR\x03jtiB\x91\x02\n" +
	"\x1ecom.indykite.auditsink.v1beta1B\x10CredentialsProtoP\x01ZSgithub.com/indykite/indykite-sdk-go/gen/indykite/auditsink/v1beta1;auditsinkv1beta1\xa2\x02\x03IAX\xaa\x02\x1aIndykite.Auditsink.V1beta1\xca\x02\x1aIndykite\\Auditsink\\V1beta1\xe2\x02&Indykite\\Auditsink\\V1beta1\\GPBMetadata\xea\x02\x1cIndykite::Auditsink::V1beta1b\x06proto3"

var (
	file_indykite_auditsink_v1beta1_credentials_proto_rawDescOnce sync.Once
	file_indykite_auditsink_v1beta1_credentials_proto_rawDescData []byte
)

func file_indykite_auditsink_v1beta1_credentials_proto_rawDescGZIP() []byte {
	file_indykite_auditsink_v1beta1_credentials_proto_rawDescOnce.Do(func() {
		file_indykite_auditsink_v1beta1_credentials_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_indykite_auditsink_v1beta1_credentials_proto_rawDesc), len(file_indykite_auditsink_v1beta1_credentials_proto_rawDesc)))
	})
	return file_indykite_auditsink_v1beta1_credentials_proto_rawDescData
}

var file_indykite_auditsink_v1beta1_credentials_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_indykite_auditsink_v1beta1_credentials_proto_goTypes = []any{
	(*TokenIntrospected)(nil), // 0: indykite.auditsink.v1beta1.TokenIntrospected
}
var file_indykite_auditsink_v1beta1_credentials_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_indykite_auditsink_v1beta1_credentials_proto_init() }
func file_indykite_auditsink_v1beta1_credentials_proto_init() {
	if File_indykite_auditsink_v1beta1_credentials_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_indykite_auditsink_v1beta1_credentials_proto_rawDesc), len(file_indykite_auditsink_v1beta1_credentials_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_auditsink_v1beta1_credentials_proto_goTypes,
		DependencyIndexes: file_indykite_auditsink_v1beta1_credentials_proto_depIdxs,
		MessageInfos:      file_indykite_auditsink_v1beta1_credentials_proto_msgTypes,
	}.Build()
	File_indykite_auditsink_v1beta1_credentials_proto = out.File
	file_indykite_auditsink_v1beta1_credentials_proto_goTypes = nil
	file_indykite_auditsink_v1beta1_credentials_proto_depIdxs = nil
}
