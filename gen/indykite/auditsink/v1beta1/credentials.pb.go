// Copyright (c) 2025 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: indykite/auditsink/v1beta1/credentials.proto

package auditsinkv1beta1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TokenIntrospected struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ResolvedDigitalTwinId is filled only when resolved happened. ID is in GID format.
	ResolvedDigitalTwinId string `protobuf:"bytes,1,opt,name=resolved_digital_twin_id,json=resolvedDigitalTwinId,proto3" json:"resolved_digital_twin_id,omitempty"`
	// ConfigId is the ID of the configuration used to resolve the token.
	ConfigId string `protobuf:"bytes,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// Issuer claim from token or userinfo endpoint if present.
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Subject claim or alternative configured claim from token or userinfo endpoint if present.
	Subject string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	// JTI claim from token if present.
	Jti           string `protobuf:"bytes,5,opt,name=jti,proto3" json:"jti,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenIntrospected) Reset() {
	*x = TokenIntrospected{}
	mi := &file_indykite_auditsink_v1beta1_credentials_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenIntrospected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospected) ProtoMessage() {}

func (x *TokenIntrospected) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_credentials_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospected.ProtoReflect.Descriptor instead.
func (*TokenIntrospected) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_credentials_proto_rawDescGZIP(), []int{0}
}

func (x *TokenIntrospected) GetResolvedDigitalTwinId() string {
	if x != nil {
		return x.ResolvedDigitalTwinId
	}
	return ""
}

func (x *TokenIntrospected) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *TokenIntrospected) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *TokenIntrospected) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *TokenIntrospected) GetJti() string {
	if x != nil {
		return x.Jti
	}
	return ""
}

var File_indykite_auditsink_v1beta1_credentials_proto protoreflect.FileDescriptor

var file_indykite_auditsink_v1beta1_credentials_proto_rawDesc = string([]byte{
	0x0a, 0x2c, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x74, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x74, 0x69, 0x42, 0x91, 0x02, 0x0a, 0x1e, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x10, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2d,
	0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x41, 0x58, 0xaa, 0x02, 0x1a, 0x49,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x1a, 0x49, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5c, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x26, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1c, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_indykite_auditsink_v1beta1_credentials_proto_rawDescOnce sync.Once
	file_indykite_auditsink_v1beta1_credentials_proto_rawDescData []byte
)

func file_indykite_auditsink_v1beta1_credentials_proto_rawDescGZIP() []byte {
	file_indykite_auditsink_v1beta1_credentials_proto_rawDescOnce.Do(func() {
		file_indykite_auditsink_v1beta1_credentials_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_indykite_auditsink_v1beta1_credentials_proto_rawDesc), len(file_indykite_auditsink_v1beta1_credentials_proto_rawDesc)))
	})
	return file_indykite_auditsink_v1beta1_credentials_proto_rawDescData
}

var file_indykite_auditsink_v1beta1_credentials_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_indykite_auditsink_v1beta1_credentials_proto_goTypes = []any{
	(*TokenIntrospected)(nil), // 0: indykite.auditsink.v1beta1.TokenIntrospected
}
var file_indykite_auditsink_v1beta1_credentials_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_indykite_auditsink_v1beta1_credentials_proto_init() }
func file_indykite_auditsink_v1beta1_credentials_proto_init() {
	if File_indykite_auditsink_v1beta1_credentials_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_indykite_auditsink_v1beta1_credentials_proto_rawDesc), len(file_indykite_auditsink_v1beta1_credentials_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_auditsink_v1beta1_credentials_proto_goTypes,
		DependencyIndexes: file_indykite_auditsink_v1beta1_credentials_proto_depIdxs,
		MessageInfos:      file_indykite_auditsink_v1beta1_credentials_proto_msgTypes,
	}.Build()
	File_indykite_auditsink_v1beta1_credentials_proto = out.File
	file_indykite_auditsink_v1beta1_credentials_proto_goTypes = nil
	file_indykite_auditsink_v1beta1_credentials_proto_depIdxs = nil
}
