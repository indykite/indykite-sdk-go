// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: indykite/auditsink/v1beta1/config.proto

package auditsinkv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	v1beta1 "github.com/indykite/indykite-sdk-go/gen/indykite/config/v1beta1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConfigType is equivalent to internal DocumentType, for easier maintenance keep same numbers.
type ConfigType int32

const (
	ConfigType_CONFIG_TYPE_INVALID              ConfigType = 0
	ConfigType_CONFIG_TYPE_CUSTOMER             ConfigType = 1
	ConfigType_CONFIG_TYPE_APPLICATION_SPACE    ConfigType = 2
	ConfigType_CONFIG_TYPE_ISSUER               ConfigType = 15
	ConfigType_CONFIG_TYPE_APPLICATION          ConfigType = 4
	ConfigType_CONFIG_TYPE_APP_AGENT            ConfigType = 5
	ConfigType_CONFIG_TYPE_APP_AGENT_CREDENTIAL ConfigType = 6
	ConfigType_CONFIG_TYPE_SERVICE_ACCOUNT      ConfigType = 18
	ConfigType_CONFIG_TYPE_SERVICE_CREDENTIAL   ConfigType = 19
	ConfigType_CONFIG_TYPE_DIGITAL_TWIN         ConfigType = 21
	ConfigType_CONFIG_TYPE_AUDIT_SINK           ConfigType = 27
	ConfigType_CONFIG_TYPE_TOKEN_INTROSPECT     ConfigType = 30
	ConfigType_CONFIG_TYPE_AUTHORIZATION_POLICY ConfigType = 22
	// CONFIG_TYPE_RESOURCE = 25; // Not use in Config API, but in Ingest/IKG
	// CONFIG_TYPE_RELATION = 26; // Not use in Config API, but in Ingest/IKG
	ConfigType_CONFIG_TYPE_CONSENT         ConfigType = 29
	ConfigType_CONFIG_TYPE_INGEST_PIPELINE ConfigType = 31
)

// Enum value maps for ConfigType.
var (
	ConfigType_name = map[int32]string{
		0:  "CONFIG_TYPE_INVALID",
		1:  "CONFIG_TYPE_CUSTOMER",
		2:  "CONFIG_TYPE_APPLICATION_SPACE",
		15: "CONFIG_TYPE_ISSUER",
		4:  "CONFIG_TYPE_APPLICATION",
		5:  "CONFIG_TYPE_APP_AGENT",
		6:  "CONFIG_TYPE_APP_AGENT_CREDENTIAL",
		18: "CONFIG_TYPE_SERVICE_ACCOUNT",
		19: "CONFIG_TYPE_SERVICE_CREDENTIAL",
		21: "CONFIG_TYPE_DIGITAL_TWIN",
		27: "CONFIG_TYPE_AUDIT_SINK",
		30: "CONFIG_TYPE_TOKEN_INTROSPECT",
		22: "CONFIG_TYPE_AUTHORIZATION_POLICY",
		29: "CONFIG_TYPE_CONSENT",
		31: "CONFIG_TYPE_INGEST_PIPELINE",
	}
	ConfigType_value = map[string]int32{
		"CONFIG_TYPE_INVALID":              0,
		"CONFIG_TYPE_CUSTOMER":             1,
		"CONFIG_TYPE_APPLICATION_SPACE":    2,
		"CONFIG_TYPE_ISSUER":               15,
		"CONFIG_TYPE_APPLICATION":          4,
		"CONFIG_TYPE_APP_AGENT":            5,
		"CONFIG_TYPE_APP_AGENT_CREDENTIAL": 6,
		"CONFIG_TYPE_SERVICE_ACCOUNT":      18,
		"CONFIG_TYPE_SERVICE_CREDENTIAL":   19,
		"CONFIG_TYPE_DIGITAL_TWIN":         21,
		"CONFIG_TYPE_AUDIT_SINK":           27,
		"CONFIG_TYPE_TOKEN_INTROSPECT":     30,
		"CONFIG_TYPE_AUTHORIZATION_POLICY": 22,
		"CONFIG_TYPE_CONSENT":              29,
		"CONFIG_TYPE_INGEST_PIPELINE":      31,
	}
)

func (x ConfigType) Enum() *ConfigType {
	p := new(ConfigType)
	*p = x
	return p
}

func (x ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[0].Descriptor()
}

func (ConfigType) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[0]
}

func (x ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigType.Descriptor instead.
func (ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{0}
}

type AuthorizationPolicyConfig_Status int32

const (
	AuthorizationPolicyConfig_STATUS_INVALID  AuthorizationPolicyConfig_Status = 0
	AuthorizationPolicyConfig_STATUS_ACTIVE   AuthorizationPolicyConfig_Status = 1
	AuthorizationPolicyConfig_STATUS_INACTIVE AuthorizationPolicyConfig_Status = 2
	AuthorizationPolicyConfig_STATUS_DRAFT    AuthorizationPolicyConfig_Status = 3
)

// Enum value maps for AuthorizationPolicyConfig_Status.
var (
	AuthorizationPolicyConfig_Status_name = map[int32]string{
		0: "STATUS_INVALID",
		1: "STATUS_ACTIVE",
		2: "STATUS_INACTIVE",
		3: "STATUS_DRAFT",
	}
	AuthorizationPolicyConfig_Status_value = map[string]int32{
		"STATUS_INVALID":  0,
		"STATUS_ACTIVE":   1,
		"STATUS_INACTIVE": 2,
		"STATUS_DRAFT":    3,
	}
)

func (x AuthorizationPolicyConfig_Status) Enum() *AuthorizationPolicyConfig_Status {
	p := new(AuthorizationPolicyConfig_Status)
	*p = x
	return p
}

func (x AuthorizationPolicyConfig_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizationPolicyConfig_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[1].Descriptor()
}

func (AuthorizationPolicyConfig_Status) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[1]
}

func (x AuthorizationPolicyConfig_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizationPolicyConfig_Status.Descriptor instead.
func (AuthorizationPolicyConfig_Status) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{9, 0}
}

type ContainersPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId         string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ApplicationSpaceId string `protobuf:"bytes,2,opt,name=application_space_id,json=applicationSpaceId,proto3" json:"application_space_id,omitempty"`
}

func (x *ContainersPath) Reset() {
	*x = ContainersPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainersPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainersPath) ProtoMessage() {}

func (x *ContainersPath) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainersPath.ProtoReflect.Descriptor instead.
func (*ContainersPath) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{0}
}

func (x *ContainersPath) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ContainersPath) GetApplicationSpaceId() string {
	if x != nil {
		return x.ApplicationSpaceId
	}
	return ""
}

type CreatedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           ConfigType              `protobuf:"varint,2,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
	Location       *CreatedConfig_Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	ContainersPath *ContainersPath         `protobuf:"bytes,5,opt,name=containers_path,json=containersPath,proto3" json:"containers_path,omitempty"`
	Detail         *ConfigDetail           `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CreatedConfig) Reset() {
	*x = CreatedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedConfig) ProtoMessage() {}

func (x *CreatedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedConfig.ProtoReflect.Descriptor instead.
func (*CreatedConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{1}
}

func (x *CreatedConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreatedConfig) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *CreatedConfig) GetLocation() *CreatedConfig_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreatedConfig) GetContainersPath() *ContainersPath {
	if x != nil {
		return x.ContainersPath
	}
	return nil
}

func (x *CreatedConfig) GetDetail() *ConfigDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type ReadConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*ReadConfig_Id
	//	*ReadConfig_Name
	Identifier     isReadConfig_Identifier `protobuf_oneof:"identifier"`
	ContainersPath *ContainersPath         `protobuf:"bytes,4,opt,name=containers_path,json=containersPath,proto3" json:"containers_path,omitempty"`
	Type           ConfigType              `protobuf:"varint,3,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
}

func (x *ReadConfig) Reset() {
	*x = ReadConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConfig) ProtoMessage() {}

func (x *ReadConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConfig.ProtoReflect.Descriptor instead.
func (*ReadConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{2}
}

func (m *ReadConfig) GetIdentifier() isReadConfig_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *ReadConfig) GetId() string {
	if x, ok := x.GetIdentifier().(*ReadConfig_Id); ok {
		return x.Id
	}
	return ""
}

func (x *ReadConfig) GetName() *ReadConfig_NameIdentifier {
	if x, ok := x.GetIdentifier().(*ReadConfig_Name); ok {
		return x.Name
	}
	return nil
}

func (x *ReadConfig) GetContainersPath() *ContainersPath {
	if x != nil {
		return x.ContainersPath
	}
	return nil
}

func (x *ReadConfig) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

type isReadConfig_Identifier interface {
	isReadConfig_Identifier()
}

type ReadConfig_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadConfig_Name struct {
	Name *ReadConfig_NameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadConfig_Id) isReadConfig_Identifier() {}

func (*ReadConfig_Name) isReadConfig_Identifier() {}

type UpdatedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           ConfigType      `protobuf:"varint,2,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
	ContainersPath *ContainersPath `protobuf:"bytes,5,opt,name=containers_path,json=containersPath,proto3" json:"containers_path,omitempty"`
	Before         *ConfigDetail   `protobuf:"bytes,3,opt,name=before,proto3" json:"before,omitempty"`
	After          *ConfigDetail   `protobuf:"bytes,4,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *UpdatedConfig) Reset() {
	*x = UpdatedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedConfig) ProtoMessage() {}

func (x *UpdatedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedConfig.ProtoReflect.Descriptor instead.
func (*UpdatedConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{3}
}

func (x *UpdatedConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatedConfig) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *UpdatedConfig) GetContainersPath() *ContainersPath {
	if x != nil {
		return x.ContainersPath
	}
	return nil
}

func (x *UpdatedConfig) GetBefore() *ConfigDetail {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *UpdatedConfig) GetAfter() *ConfigDetail {
	if x != nil {
		return x.After
	}
	return nil
}

type DeletedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           ConfigType      `protobuf:"varint,2,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
	ContainersPath *ContainersPath `protobuf:"bytes,3,opt,name=containers_path,json=containersPath,proto3" json:"containers_path,omitempty"`
}

func (x *DeletedConfig) Reset() {
	*x = DeletedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedConfig) ProtoMessage() {}

func (x *DeletedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedConfig.ProtoReflect.Descriptor instead.
func (*DeletedConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{4}
}

func (x *DeletedConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeletedConfig) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *DeletedConfig) GetContainersPath() *ContainersPath {
	if x != nil {
		return x.ContainersPath
	}
	return nil
}

type ConfigDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Version     int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to Configuration:
	//
	//	*ConfigDetail_ApplicationAgentCredential
	//	*ConfigDetail_ServiceAccountCredential
	//	*ConfigDetail_AuditSinkConfig
	//	*ConfigDetail_AuthorizationPolicyConfig
	//	*ConfigDetail_TokenIntrospectConfig
	//	*ConfigDetail_ConsentConfig
	//	*ConfigDetail_IngestPipelineConfig
	Configuration isConfigDetail_Configuration `protobuf_oneof:"configuration"`
}

func (x *ConfigDetail) Reset() {
	*x = ConfigDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDetail) ProtoMessage() {}

func (x *ConfigDetail) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDetail.ProtoReflect.Descriptor instead.
func (*ConfigDetail) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ConfigDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigDetail) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *ConfigDetail) GetConfiguration() isConfigDetail_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (x *ConfigDetail) GetApplicationAgentCredential() *ApplicationAgentCredentialConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_ApplicationAgentCredential); ok {
		return x.ApplicationAgentCredential
	}
	return nil
}

func (x *ConfigDetail) GetServiceAccountCredential() *ServiceAccountCredentialConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_ServiceAccountCredential); ok {
		return x.ServiceAccountCredential
	}
	return nil
}

func (x *ConfigDetail) GetAuditSinkConfig() *AuditSinkConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_AuditSinkConfig); ok {
		return x.AuditSinkConfig
	}
	return nil
}

func (x *ConfigDetail) GetAuthorizationPolicyConfig() *AuthorizationPolicyConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_AuthorizationPolicyConfig); ok {
		return x.AuthorizationPolicyConfig
	}
	return nil
}

func (x *ConfigDetail) GetTokenIntrospectConfig() *TokenIntrospectConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_TokenIntrospectConfig); ok {
		return x.TokenIntrospectConfig
	}
	return nil
}

func (x *ConfigDetail) GetConsentConfig() *v1beta1.ConsentConfiguration {
	if x, ok := x.GetConfiguration().(*ConfigDetail_ConsentConfig); ok {
		return x.ConsentConfig
	}
	return nil
}

func (x *ConfigDetail) GetIngestPipelineConfig() *v1beta1.IngestPipelineConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_IngestPipelineConfig); ok {
		return x.IngestPipelineConfig
	}
	return nil
}

type isConfigDetail_Configuration interface {
	isConfigDetail_Configuration()
}

type ConfigDetail_ApplicationAgentCredential struct {
	ApplicationAgentCredential *ApplicationAgentCredentialConfig `protobuf:"bytes,8,opt,name=application_agent_credential,json=applicationAgentCredential,proto3,oneof"`
}

type ConfigDetail_ServiceAccountCredential struct {
	ServiceAccountCredential *ServiceAccountCredentialConfig `protobuf:"bytes,9,opt,name=service_account_credential,json=serviceAccountCredential,proto3,oneof"`
}

type ConfigDetail_AuditSinkConfig struct {
	AuditSinkConfig *AuditSinkConfig `protobuf:"bytes,12,opt,name=audit_sink_config,json=auditSinkConfig,proto3,oneof"`
}

type ConfigDetail_AuthorizationPolicyConfig struct {
	AuthorizationPolicyConfig *AuthorizationPolicyConfig `protobuf:"bytes,15,opt,name=authorization_policy_config,json=authorizationPolicyConfig,proto3,oneof"`
}

type ConfigDetail_TokenIntrospectConfig struct {
	TokenIntrospectConfig *TokenIntrospectConfig `protobuf:"bytes,19,opt,name=token_introspect_config,json=tokenIntrospectConfig,proto3,oneof"`
}

type ConfigDetail_ConsentConfig struct {
	ConsentConfig *v1beta1.ConsentConfiguration `protobuf:"bytes,18,opt,name=consent_config,json=consentConfig,proto3,oneof"`
}

type ConfigDetail_IngestPipelineConfig struct {
	IngestPipelineConfig *v1beta1.IngestPipelineConfig `protobuf:"bytes,20,opt,name=ingest_pipeline_config,json=ingestPipelineConfig,proto3,oneof"`
}

func (*ConfigDetail_ApplicationAgentCredential) isConfigDetail_Configuration() {}

func (*ConfigDetail_ServiceAccountCredential) isConfigDetail_Configuration() {}

func (*ConfigDetail_AuditSinkConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_AuthorizationPolicyConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_TokenIntrospectConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_ConsentConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_IngestPipelineConfig) isConfigDetail_Configuration() {}

type ApplicationAgentCredentialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kid string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"`
	// KeyFormat specify in which format the public key was provided.
	// Could by empty, if no public key was provided.
	KeyFormat   string                 `protobuf:"bytes,2,opt,name=key_format,json=keyFormat,proto3" json:"key_format,omitempty"`
	OriginalKid string                 `protobuf:"bytes,3,opt,name=original_kid,json=originalKid,proto3" json:"original_kid,omitempty"`
	ExpireTime  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *ApplicationAgentCredentialConfig) Reset() {
	*x = ApplicationAgentCredentialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationAgentCredentialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationAgentCredentialConfig) ProtoMessage() {}

func (x *ApplicationAgentCredentialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationAgentCredentialConfig.ProtoReflect.Descriptor instead.
func (*ApplicationAgentCredentialConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationAgentCredentialConfig) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *ApplicationAgentCredentialConfig) GetKeyFormat() string {
	if x != nil {
		return x.KeyFormat
	}
	return ""
}

func (x *ApplicationAgentCredentialConfig) GetOriginalKid() string {
	if x != nil {
		return x.OriginalKid
	}
	return ""
}

func (x *ApplicationAgentCredentialConfig) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

type ServiceAccountCredentialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kid string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"`
	// KeyFormat specify in which format the public key was provided.
	// Could by empty, if no public key was provided.
	KeyFormat   string                 `protobuf:"bytes,2,opt,name=key_format,json=keyFormat,proto3" json:"key_format,omitempty"`
	OriginalKid string                 `protobuf:"bytes,3,opt,name=original_kid,json=originalKid,proto3" json:"original_kid,omitempty"`
	ExpireTime  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *ServiceAccountCredentialConfig) Reset() {
	*x = ServiceAccountCredentialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccountCredentialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccountCredentialConfig) ProtoMessage() {}

func (x *ServiceAccountCredentialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccountCredentialConfig.ProtoReflect.Descriptor instead.
func (*ServiceAccountCredentialConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceAccountCredentialConfig) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *ServiceAccountCredentialConfig) GetKeyFormat() string {
	if x != nil {
		return x.KeyFormat
	}
	return ""
}

func (x *ServiceAccountCredentialConfig) GetOriginalKid() string {
	if x != nil {
		return x.OriginalKid
	}
	return ""
}

func (x *ServiceAccountCredentialConfig) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

type AuditSinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Provider:
	//
	//	*AuditSinkConfig_Kafka_
	Provider isAuditSinkConfig_Provider `protobuf_oneof:"provider"`
}

func (x *AuditSinkConfig) Reset() {
	*x = AuditSinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditSinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditSinkConfig) ProtoMessage() {}

func (x *AuditSinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditSinkConfig.ProtoReflect.Descriptor instead.
func (*AuditSinkConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{8}
}

func (m *AuditSinkConfig) GetProvider() isAuditSinkConfig_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *AuditSinkConfig) GetKafka() *AuditSinkConfig_Kafka {
	if x, ok := x.GetProvider().(*AuditSinkConfig_Kafka_); ok {
		return x.Kafka
	}
	return nil
}

type isAuditSinkConfig_Provider interface {
	isAuditSinkConfig_Provider()
}

type AuditSinkConfig_Kafka_ struct {
	Kafka *AuditSinkConfig_Kafka `protobuf:"bytes,1,opt,name=kafka,proto3,oneof"`
}

func (*AuditSinkConfig_Kafka_) isAuditSinkConfig_Provider() {}

type AuthorizationPolicyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policy in JSON string format.
	Policy string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// Policy status.
	Status AuthorizationPolicyConfig_Status `protobuf:"varint,2,opt,name=status,proto3,enum=indykite.auditsink.v1beta1.AuthorizationPolicyConfig_Status" json:"status,omitempty"`
	// Optional policy tags
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AuthorizationPolicyConfig) Reset() {
	*x = AuthorizationPolicyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyConfig) ProtoMessage() {}

func (x *AuthorizationPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyConfig.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{9}
}

func (x *AuthorizationPolicyConfig) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *AuthorizationPolicyConfig) GetStatus() AuthorizationPolicyConfig_Status {
	if x != nil {
		return x.Status
	}
	return AuthorizationPolicyConfig_STATUS_INVALID
}

func (x *AuthorizationPolicyConfig) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AssignConfigPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TargetIdentifier is gid identifier of Service Account or DigitalTwin.
	TargetIdentifier string `protobuf:"bytes,1,opt,name=target_identifier,json=targetIdentifier,proto3" json:"target_identifier,omitempty"`
	// TargetType is type of TargetIdentifier.
	TargetType ConfigType `protobuf:"varint,2,opt,name=target_type,json=targetType,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"target_type,omitempty"`
	// Permission role id to be assigned.
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// CustomerId under which to assign permissions.
	CustomerId string `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Object to which Permission will be linked to. Can be Customer, AppSpace or Tenant.
	ObjectId string `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Object type is type of object_id.
	ObjectType ConfigType `protobuf:"varint,6,opt,name=object_type,json=objectType,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"object_type,omitempty"`
}

func (x *AssignConfigPermissions) Reset() {
	*x = AssignConfigPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignConfigPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignConfigPermissions) ProtoMessage() {}

func (x *AssignConfigPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignConfigPermissions.ProtoReflect.Descriptor instead.
func (*AssignConfigPermissions) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{10}
}

func (x *AssignConfigPermissions) GetTargetIdentifier() string {
	if x != nil {
		return x.TargetIdentifier
	}
	return ""
}

func (x *AssignConfigPermissions) GetTargetType() ConfigType {
	if x != nil {
		return x.TargetType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *AssignConfigPermissions) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *AssignConfigPermissions) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *AssignConfigPermissions) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *AssignConfigPermissions) GetObjectType() ConfigType {
	if x != nil {
		return x.ObjectType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

type RevokeConfigPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TargetIdentifier is gid identifier of Service Account or DigitalTwin.
	TargetIdentifier string `protobuf:"bytes,1,opt,name=target_identifier,json=targetIdentifier,proto3" json:"target_identifier,omitempty"`
	// TargetType is type of TargetIdentifier.
	TargetType ConfigType `protobuf:"varint,2,opt,name=target_type,json=targetType,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"target_type,omitempty"`
	// Permission role id to be assigned.
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// CustomerId under which to assign permissions.
	CustomerId string `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Object to which Permission will be linked to. Can be Customer, AppSpace or Tenant.
	ObjectId string `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Object type is type of object_id.
	ObjectType ConfigType `protobuf:"varint,6,opt,name=object_type,json=objectType,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"object_type,omitempty"`
}

func (x *RevokeConfigPermissions) Reset() {
	*x = RevokeConfigPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeConfigPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConfigPermissions) ProtoMessage() {}

func (x *RevokeConfigPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConfigPermissions.ProtoReflect.Descriptor instead.
func (*RevokeConfigPermissions) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{11}
}

func (x *RevokeConfigPermissions) GetTargetIdentifier() string {
	if x != nil {
		return x.TargetIdentifier
	}
	return ""
}

func (x *RevokeConfigPermissions) GetTargetType() ConfigType {
	if x != nil {
		return x.TargetType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *RevokeConfigPermissions) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RevokeConfigPermissions) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *RevokeConfigPermissions) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *RevokeConfigPermissions) GetObjectType() ConfigType {
	if x != nil {
		return x.ObjectType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

// Token Introspect configuration for AppSpace.
type TokenIntrospectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token matcher specify for which token this configuration applies.
	// Currently only JWT issuer is supported, regexp for opaque tokens will be implemented later.
	//
	// Types that are assignable to TokenMatcher:
	//
	//	*TokenIntrospectConfig_Jwt
	TokenMatcher isTokenIntrospectConfig_TokenMatcher `protobuf_oneof:"token_matcher"`
	// Types that are assignable to Validation:
	//
	//	*TokenIntrospectConfig_Offline_
	Validation isTokenIntrospectConfig_Validation `protobuf_oneof:"validation"`
	// ClaimsMapping specify which claims from the token should be mapped to IKG Property with given name.
	// Remember, that 'email' claim is always extracted if exists and stored under 'email' key in IKG.
	//
	// Key specify name of property in IKG.
	// Value specify which claim to map and how.
	ClaimsMapping map[string]*TokenIntrospectConfig_Claim `protobuf:"bytes,7,rep,name=claims_mapping,json=claimsMapping,proto3" json:"claims_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Node type in IKG to which we will try to match sub claim with DT external_id.
	IkgNodeType string `protobuf:"bytes,5,opt,name=ikg_node_type,json=ikgNodeType,proto3" json:"ikg_node_type,omitempty"`
	// Perform Upsert specify, if we should create and/or update DigitalTwin in IKG if it doesn't exist with.
	// In future this will perform upsert also on properties that are derived from token.
	PerformUpsert bool `protobuf:"varint,6,opt,name=perform_upsert,json=performUpsert,proto3" json:"perform_upsert,omitempty"`
}

func (x *TokenIntrospectConfig) Reset() {
	*x = TokenIntrospectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig) ProtoMessage() {}

func (x *TokenIntrospectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{12}
}

func (m *TokenIntrospectConfig) GetTokenMatcher() isTokenIntrospectConfig_TokenMatcher {
	if m != nil {
		return m.TokenMatcher
	}
	return nil
}

func (x *TokenIntrospectConfig) GetJwt() *TokenIntrospectConfig_JWT {
	if x, ok := x.GetTokenMatcher().(*TokenIntrospectConfig_Jwt); ok {
		return x.Jwt
	}
	return nil
}

func (m *TokenIntrospectConfig) GetValidation() isTokenIntrospectConfig_Validation {
	if m != nil {
		return m.Validation
	}
	return nil
}

func (x *TokenIntrospectConfig) GetOffline() *TokenIntrospectConfig_Offline {
	if x, ok := x.GetValidation().(*TokenIntrospectConfig_Offline_); ok {
		return x.Offline
	}
	return nil
}

func (x *TokenIntrospectConfig) GetClaimsMapping() map[string]*TokenIntrospectConfig_Claim {
	if x != nil {
		return x.ClaimsMapping
	}
	return nil
}

func (x *TokenIntrospectConfig) GetIkgNodeType() string {
	if x != nil {
		return x.IkgNodeType
	}
	return ""
}

func (x *TokenIntrospectConfig) GetPerformUpsert() bool {
	if x != nil {
		return x.PerformUpsert
	}
	return false
}

type isTokenIntrospectConfig_TokenMatcher interface {
	isTokenIntrospectConfig_TokenMatcher()
}

type TokenIntrospectConfig_Jwt struct {
	Jwt *TokenIntrospectConfig_JWT `protobuf:"bytes,1,opt,name=jwt,proto3,oneof"`
}

func (*TokenIntrospectConfig_Jwt) isTokenIntrospectConfig_TokenMatcher() {}

type isTokenIntrospectConfig_Validation interface {
	isTokenIntrospectConfig_Validation()
}

type TokenIntrospectConfig_Offline_ struct {
	Offline *TokenIntrospectConfig_Offline `protobuf:"bytes,3,opt,name=offline,proto3,oneof"`
}

func (*TokenIntrospectConfig_Offline_) isTokenIntrospectConfig_Validation() {}

type CreatedConfig_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type ConfigType `protobuf:"varint,2,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
}

func (x *CreatedConfig_Location) Reset() {
	*x = CreatedConfig_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedConfig_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedConfig_Location) ProtoMessage() {}

func (x *CreatedConfig_Location) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedConfig_Location.ProtoReflect.Descriptor instead.
func (*CreatedConfig_Location) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CreatedConfig_Location) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreatedConfig_Location) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

type ReadConfig_NameIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LocationId specify under which container the name search happen. Might be empty if searching customer.
	LocationId string `protobuf:"bytes,1,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// LocationType specify under which container type the name search happen. Might be empty if searching customer.
	LocationType *ConfigType `protobuf:"varint,2,opt,name=location_type,json=locationType,proto3,enum=indykite.auditsink.v1beta1.ConfigType,oneof" json:"location_type,omitempty"`
	Name         string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ReadConfig_NameIdentifier) Reset() {
	*x = ReadConfig_NameIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadConfig_NameIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConfig_NameIdentifier) ProtoMessage() {}

func (x *ReadConfig_NameIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConfig_NameIdentifier.ProtoReflect.Descriptor instead.
func (*ReadConfig_NameIdentifier) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ReadConfig_NameIdentifier) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *ReadConfig_NameIdentifier) GetLocationType() ConfigType {
	if x != nil && x.LocationType != nil {
		return *x.LocationType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *ReadConfig_NameIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AuditSinkConfig_Kafka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Brokers specify Kafka destinations to connect to.
	Brokers []string `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	// Topic name must be valid based on source code:
	// https://github.com/apache/kafka/blob/0.10.2/core/src/main/scala/kafka/common/Topic.scala#L29-L30
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// DisableTLS can force using non-secure connection.
	DisableTls bool `protobuf:"varint,3,opt,name=disable_tls,json=disableTls,proto3" json:"disable_tls,omitempty"`
	// TLSSkipVerify defines whenever not to verify TLS certificate. Ignored if TLS is disabled.
	TlsSkipVerify bool   `protobuf:"varint,4,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty"`
	Username      string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password      string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuditSinkConfig_Kafka) Reset() {
	*x = AuditSinkConfig_Kafka{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditSinkConfig_Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditSinkConfig_Kafka) ProtoMessage() {}

func (x *AuditSinkConfig_Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditSinkConfig_Kafka.ProtoReflect.Descriptor instead.
func (*AuditSinkConfig_Kafka) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{8, 0}
}

func (x *AuditSinkConfig_Kafka) GetBrokers() []string {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *AuditSinkConfig_Kafka) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *AuditSinkConfig_Kafka) GetDisableTls() bool {
	if x != nil {
		return x.DisableTls
	}
	return false
}

func (x *AuditSinkConfig_Kafka) GetTlsSkipVerify() bool {
	if x != nil {
		return x.TlsSkipVerify
	}
	return false
}

func (x *AuditSinkConfig_Kafka) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuditSinkConfig_Kafka) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// JWT specifies all attributes to match with received token.
type TokenIntrospectConfig_JWT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Issuer is used to exact match based on `iss` claim in JWT.
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Audience is used to exact match based on `aud` claim in JWT.
	Audience string `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
}

func (x *TokenIntrospectConfig_JWT) Reset() {
	*x = TokenIntrospectConfig_JWT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig_JWT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig_JWT) ProtoMessage() {}

func (x *TokenIntrospectConfig_JWT) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig_JWT.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig_JWT) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{12, 0}
}

func (x *TokenIntrospectConfig_JWT) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *TokenIntrospectConfig_JWT) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

// Offline validation works only with JWT.
type TokenIntrospectConfig_Offline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public JWK to validate signature of JWT.
	// If there are no public keys specified, they will be fetched and cached from
	// jwks_uri at https://jwt-issuer.tld/.well-known/openid-configuration
	PublicJwks [][]byte `protobuf:"bytes,1,rep,name=public_jwks,json=publicJwks,proto3" json:"public_jwks,omitempty"`
}

func (x *TokenIntrospectConfig_Offline) Reset() {
	*x = TokenIntrospectConfig_Offline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig_Offline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig_Offline) ProtoMessage() {}

func (x *TokenIntrospectConfig_Offline) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig_Offline.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig_Offline) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{12, 1}
}

func (x *TokenIntrospectConfig_Offline) GetPublicJwks() [][]byte {
	if x != nil {
		return x.PublicJwks
	}
	return nil
}

// Claim specify details about claim that will be mapped to IKG.
type TokenIntrospectConfig_Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON selector of property in token claims. Currently just name in top-level object is supported.
	//
	// By default we support all standard claims from OpenID specification https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims,
	// and mapping will fail if claim and data type will not match the standard.
	//
	// For non-standard claims the type will be derived from the JSON.
	Selector string `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *TokenIntrospectConfig_Claim) Reset() {
	*x = TokenIntrospectConfig_Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig_Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig_Claim) ProtoMessage() {}

func (x *TokenIntrospectConfig_Claim) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig_Claim.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig_Claim) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{12, 2}
}

func (x *TokenIntrospectConfig_Claim) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

var File_indykite_auditsink_v1beta1_config_proto protoreflect.FileDescriptor

var file_indykite_auditsink_v1beta1_config_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x9a, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x56, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb2, 0x02, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x40, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x3e, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x22, 0xb0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x22, 0xb5, 0x07, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x1c, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x7a, 0x0a, 0x1a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x18, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x77, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x17, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x15, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x65, 0x0a, 0x16, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x14, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04,
	0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f,
	0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x22, 0xb3, 0x01, 0x0a,
	0x20, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6b,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x4b, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4b, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x48, 0x00, 0x52, 0x05,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x1a, 0xb8, 0x01, 0x0a, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x6c, 0x73, 0x53, 0x6b,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xf5, 0x01, 0x0a,
	0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x56, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x03, 0x22, 0xaa, 0x02, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xaa, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3,
	0x05, 0x0a, 0x15, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4a, 0x57, 0x54, 0x48, 0x00, 0x52, 0x03,
	0x6a, 0x77, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x48,
	0x01, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6b, 0x67, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6b, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x1a, 0x39, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x2a, 0x0a,
	0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6a, 0x77, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4a, 0x77, 0x6b, 0x73, 0x1a, 0x23, 0x0a, 0x05, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x79,
	0x0a, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x2a, 0xa7, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x45, 0x52, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x10,
	0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x06, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x12,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x57, 0x49, 0x4e,
	0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x10, 0x1b, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x10, 0x1e,
	0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x1d, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x1f,
	0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x07, 0x10, 0x07, 0x22, 0x04, 0x08, 0x08,
	0x10, 0x08, 0x22, 0x04, 0x08, 0x09, 0x10, 0x09, 0x22, 0x04, 0x08, 0x0a, 0x10, 0x0a, 0x22, 0x04,
	0x08, 0x0b, 0x10, 0x0b, 0x22, 0x04, 0x08, 0x0c, 0x10, 0x0c, 0x22, 0x04, 0x08, 0x0d, 0x10, 0x0d,
	0x22, 0x04, 0x08, 0x0e, 0x10, 0x0e, 0x22, 0x04, 0x08, 0x10, 0x10, 0x10, 0x22, 0x04, 0x08, 0x11,
	0x10, 0x11, 0x22, 0x04, 0x08, 0x18, 0x10, 0x18, 0x22, 0x04, 0x08, 0x17, 0x10, 0x17, 0x42, 0x8c,
	0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x41, 0x58, 0xaa, 0x02, 0x1a, 0x49, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x1a, 0x49, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x26, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1c, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_auditsink_v1beta1_config_proto_rawDescOnce sync.Once
	file_indykite_auditsink_v1beta1_config_proto_rawDescData = file_indykite_auditsink_v1beta1_config_proto_rawDesc
)

func file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP() []byte {
	file_indykite_auditsink_v1beta1_config_proto_rawDescOnce.Do(func() {
		file_indykite_auditsink_v1beta1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_auditsink_v1beta1_config_proto_rawDescData)
	})
	return file_indykite_auditsink_v1beta1_config_proto_rawDescData
}

var file_indykite_auditsink_v1beta1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_indykite_auditsink_v1beta1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_indykite_auditsink_v1beta1_config_proto_goTypes = []any{
	(ConfigType)(0),                          // 0: indykite.auditsink.v1beta1.ConfigType
	(AuthorizationPolicyConfig_Status)(0),    // 1: indykite.auditsink.v1beta1.AuthorizationPolicyConfig.Status
	(*ContainersPath)(nil),                   // 2: indykite.auditsink.v1beta1.ContainersPath
	(*CreatedConfig)(nil),                    // 3: indykite.auditsink.v1beta1.CreatedConfig
	(*ReadConfig)(nil),                       // 4: indykite.auditsink.v1beta1.ReadConfig
	(*UpdatedConfig)(nil),                    // 5: indykite.auditsink.v1beta1.UpdatedConfig
	(*DeletedConfig)(nil),                    // 6: indykite.auditsink.v1beta1.DeletedConfig
	(*ConfigDetail)(nil),                     // 7: indykite.auditsink.v1beta1.ConfigDetail
	(*ApplicationAgentCredentialConfig)(nil), // 8: indykite.auditsink.v1beta1.ApplicationAgentCredentialConfig
	(*ServiceAccountCredentialConfig)(nil),   // 9: indykite.auditsink.v1beta1.ServiceAccountCredentialConfig
	(*AuditSinkConfig)(nil),                  // 10: indykite.auditsink.v1beta1.AuditSinkConfig
	(*AuthorizationPolicyConfig)(nil),        // 11: indykite.auditsink.v1beta1.AuthorizationPolicyConfig
	(*AssignConfigPermissions)(nil),          // 12: indykite.auditsink.v1beta1.AssignConfigPermissions
	(*RevokeConfigPermissions)(nil),          // 13: indykite.auditsink.v1beta1.RevokeConfigPermissions
	(*TokenIntrospectConfig)(nil),            // 14: indykite.auditsink.v1beta1.TokenIntrospectConfig
	(*CreatedConfig_Location)(nil),           // 15: indykite.auditsink.v1beta1.CreatedConfig.Location
	(*ReadConfig_NameIdentifier)(nil),        // 16: indykite.auditsink.v1beta1.ReadConfig.NameIdentifier
	(*AuditSinkConfig_Kafka)(nil),            // 17: indykite.auditsink.v1beta1.AuditSinkConfig.Kafka
	(*TokenIntrospectConfig_JWT)(nil),        // 18: indykite.auditsink.v1beta1.TokenIntrospectConfig.JWT
	(*TokenIntrospectConfig_Offline)(nil),    // 19: indykite.auditsink.v1beta1.TokenIntrospectConfig.Offline
	(*TokenIntrospectConfig_Claim)(nil),      // 20: indykite.auditsink.v1beta1.TokenIntrospectConfig.Claim
	nil,                                      // 21: indykite.auditsink.v1beta1.TokenIntrospectConfig.ClaimsMappingEntry
	(*v1beta1.ConsentConfiguration)(nil),     // 22: indykite.config.v1beta1.ConsentConfiguration
	(*v1beta1.IngestPipelineConfig)(nil),     // 23: indykite.config.v1beta1.IngestPipelineConfig
	(*timestamppb.Timestamp)(nil),            // 24: google.protobuf.Timestamp
}
var file_indykite_auditsink_v1beta1_config_proto_depIdxs = []int32{
	0,  // 0: indykite.auditsink.v1beta1.CreatedConfig.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	15, // 1: indykite.auditsink.v1beta1.CreatedConfig.location:type_name -> indykite.auditsink.v1beta1.CreatedConfig.Location
	2,  // 2: indykite.auditsink.v1beta1.CreatedConfig.containers_path:type_name -> indykite.auditsink.v1beta1.ContainersPath
	7,  // 3: indykite.auditsink.v1beta1.CreatedConfig.detail:type_name -> indykite.auditsink.v1beta1.ConfigDetail
	16, // 4: indykite.auditsink.v1beta1.ReadConfig.name:type_name -> indykite.auditsink.v1beta1.ReadConfig.NameIdentifier
	2,  // 5: indykite.auditsink.v1beta1.ReadConfig.containers_path:type_name -> indykite.auditsink.v1beta1.ContainersPath
	0,  // 6: indykite.auditsink.v1beta1.ReadConfig.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 7: indykite.auditsink.v1beta1.UpdatedConfig.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	2,  // 8: indykite.auditsink.v1beta1.UpdatedConfig.containers_path:type_name -> indykite.auditsink.v1beta1.ContainersPath
	7,  // 9: indykite.auditsink.v1beta1.UpdatedConfig.before:type_name -> indykite.auditsink.v1beta1.ConfigDetail
	7,  // 10: indykite.auditsink.v1beta1.UpdatedConfig.after:type_name -> indykite.auditsink.v1beta1.ConfigDetail
	0,  // 11: indykite.auditsink.v1beta1.DeletedConfig.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	2,  // 12: indykite.auditsink.v1beta1.DeletedConfig.containers_path:type_name -> indykite.auditsink.v1beta1.ContainersPath
	8,  // 13: indykite.auditsink.v1beta1.ConfigDetail.application_agent_credential:type_name -> indykite.auditsink.v1beta1.ApplicationAgentCredentialConfig
	9,  // 14: indykite.auditsink.v1beta1.ConfigDetail.service_account_credential:type_name -> indykite.auditsink.v1beta1.ServiceAccountCredentialConfig
	10, // 15: indykite.auditsink.v1beta1.ConfigDetail.audit_sink_config:type_name -> indykite.auditsink.v1beta1.AuditSinkConfig
	11, // 16: indykite.auditsink.v1beta1.ConfigDetail.authorization_policy_config:type_name -> indykite.auditsink.v1beta1.AuthorizationPolicyConfig
	14, // 17: indykite.auditsink.v1beta1.ConfigDetail.token_introspect_config:type_name -> indykite.auditsink.v1beta1.TokenIntrospectConfig
	22, // 18: indykite.auditsink.v1beta1.ConfigDetail.consent_config:type_name -> indykite.config.v1beta1.ConsentConfiguration
	23, // 19: indykite.auditsink.v1beta1.ConfigDetail.ingest_pipeline_config:type_name -> indykite.config.v1beta1.IngestPipelineConfig
	24, // 20: indykite.auditsink.v1beta1.ApplicationAgentCredentialConfig.expire_time:type_name -> google.protobuf.Timestamp
	24, // 21: indykite.auditsink.v1beta1.ServiceAccountCredentialConfig.expire_time:type_name -> google.protobuf.Timestamp
	17, // 22: indykite.auditsink.v1beta1.AuditSinkConfig.kafka:type_name -> indykite.auditsink.v1beta1.AuditSinkConfig.Kafka
	1,  // 23: indykite.auditsink.v1beta1.AuthorizationPolicyConfig.status:type_name -> indykite.auditsink.v1beta1.AuthorizationPolicyConfig.Status
	0,  // 24: indykite.auditsink.v1beta1.AssignConfigPermissions.target_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 25: indykite.auditsink.v1beta1.AssignConfigPermissions.object_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 26: indykite.auditsink.v1beta1.RevokeConfigPermissions.target_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 27: indykite.auditsink.v1beta1.RevokeConfigPermissions.object_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	18, // 28: indykite.auditsink.v1beta1.TokenIntrospectConfig.jwt:type_name -> indykite.auditsink.v1beta1.TokenIntrospectConfig.JWT
	19, // 29: indykite.auditsink.v1beta1.TokenIntrospectConfig.offline:type_name -> indykite.auditsink.v1beta1.TokenIntrospectConfig.Offline
	21, // 30: indykite.auditsink.v1beta1.TokenIntrospectConfig.claims_mapping:type_name -> indykite.auditsink.v1beta1.TokenIntrospectConfig.ClaimsMappingEntry
	0,  // 31: indykite.auditsink.v1beta1.CreatedConfig.Location.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 32: indykite.auditsink.v1beta1.ReadConfig.NameIdentifier.location_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	20, // 33: indykite.auditsink.v1beta1.TokenIntrospectConfig.ClaimsMappingEntry.value:type_name -> indykite.auditsink.v1beta1.TokenIntrospectConfig.Claim
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_indykite_auditsink_v1beta1_config_proto_init() }
func file_indykite_auditsink_v1beta1_config_proto_init() {
	if File_indykite_auditsink_v1beta1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ContainersPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreatedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ReadConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeletedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ApplicationAgentCredentialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ServiceAccountCredentialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AuditSinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizationPolicyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AssignConfigPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RevokeConfigPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CreatedConfig_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ReadConfig_NameIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AuditSinkConfig_Kafka); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig_JWT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig_Offline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig_Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[2].OneofWrappers = []any{
		(*ReadConfig_Id)(nil),
		(*ReadConfig_Name)(nil),
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[5].OneofWrappers = []any{
		(*ConfigDetail_ApplicationAgentCredential)(nil),
		(*ConfigDetail_ServiceAccountCredential)(nil),
		(*ConfigDetail_AuditSinkConfig)(nil),
		(*ConfigDetail_AuthorizationPolicyConfig)(nil),
		(*ConfigDetail_TokenIntrospectConfig)(nil),
		(*ConfigDetail_ConsentConfig)(nil),
		(*ConfigDetail_IngestPipelineConfig)(nil),
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[8].OneofWrappers = []any{
		(*AuditSinkConfig_Kafka_)(nil),
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[12].OneofWrappers = []any{
		(*TokenIntrospectConfig_Jwt)(nil),
		(*TokenIntrospectConfig_Offline_)(nil),
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_auditsink_v1beta1_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_auditsink_v1beta1_config_proto_goTypes,
		DependencyIndexes: file_indykite_auditsink_v1beta1_config_proto_depIdxs,
		EnumInfos:         file_indykite_auditsink_v1beta1_config_proto_enumTypes,
		MessageInfos:      file_indykite_auditsink_v1beta1_config_proto_msgTypes,
	}.Build()
	File_indykite_auditsink_v1beta1_config_proto = out.File
	file_indykite_auditsink_v1beta1_config_proto_rawDesc = nil
	file_indykite_auditsink_v1beta1_config_proto_goTypes = nil
	file_indykite_auditsink_v1beta1_config_proto_depIdxs = nil
}
