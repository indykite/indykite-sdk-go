// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: indykite/auditsink/v1beta1/config.proto

package auditsinkv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	v1beta1 "github.com/indykite/indykite-sdk-go/gen/indykite/config/v1beta1"
	v1beta11 "github.com/indykite/indykite-sdk-go/gen/indykite/objects/v1beta1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConfigType is equivalent to internal DocumentType, for easier maintenance keep same numbers.
type ConfigType int32

const (
	ConfigType_CONFIG_TYPE_INVALID              ConfigType = 0
	ConfigType_CONFIG_TYPE_CUSTOMER             ConfigType = 1
	ConfigType_CONFIG_TYPE_APPLICATION_SPACE    ConfigType = 2
	ConfigType_CONFIG_TYPE_ISSUER               ConfigType = 15
	ConfigType_CONFIG_TYPE_TENANT               ConfigType = 3
	ConfigType_CONFIG_TYPE_APPLICATION          ConfigType = 4
	ConfigType_CONFIG_TYPE_APP_AGENT            ConfigType = 5
	ConfigType_CONFIG_TYPE_APP_AGENT_CREDENTIAL ConfigType = 6
	ConfigType_CONFIG_TYPE_SERVICE_ACCOUNT      ConfigType = 18
	ConfigType_CONFIG_TYPE_SERVICE_CREDENTIAL   ConfigType = 19
	ConfigType_CONFIG_TYPE_DIGITAL_TWIN         ConfigType = 21
	ConfigType_CONFIG_TYPE_AUTH_FLOW            ConfigType = 7
	ConfigType_CONFIG_TYPE_EMAIL_SERVICE        ConfigType = 8
	ConfigType_CONFIG_TYPE_SMS_SERVICE          ConfigType = 9
	ConfigType_CONFIG_TYPE_AUDIT_SINK           ConfigType = 27
	ConfigType_CONFIG_TYPE_OAUTH2_CLIENT        ConfigType = 10
	ConfigType_CONFIG_TYPE_OAUTH2_APPLICATION   ConfigType = 11
	ConfigType_CONFIG_TYPE_OAUTH2_PROVIDER      ConfigType = 17
	ConfigType_CONFIG_TYPE_PASSWORD_PROVIDER    ConfigType = 12
	ConfigType_CONFIG_TYPE_WEBAUTHN_PROVIDER    ConfigType = 13
	ConfigType_CONFIG_TYPE_SAFR_PROVIDER        ConfigType = 16
	ConfigType_CONFIG_TYPE_AUTHORIZATION_POLICY ConfigType = 22
	// CONFIG_TYPE_RESOURCE = 25; // Not use in Config API, but in Ingest/IKG
	// CONFIG_TYPE_RELATION = 26; // Not use in Config API, but in Ingest/IKG
	ConfigType_CONFIG_TYPE_CONSENT ConfigType = 29
)

// Enum value maps for ConfigType.
var (
	ConfigType_name = map[int32]string{
		0:  "CONFIG_TYPE_INVALID",
		1:  "CONFIG_TYPE_CUSTOMER",
		2:  "CONFIG_TYPE_APPLICATION_SPACE",
		15: "CONFIG_TYPE_ISSUER",
		3:  "CONFIG_TYPE_TENANT",
		4:  "CONFIG_TYPE_APPLICATION",
		5:  "CONFIG_TYPE_APP_AGENT",
		6:  "CONFIG_TYPE_APP_AGENT_CREDENTIAL",
		18: "CONFIG_TYPE_SERVICE_ACCOUNT",
		19: "CONFIG_TYPE_SERVICE_CREDENTIAL",
		21: "CONFIG_TYPE_DIGITAL_TWIN",
		7:  "CONFIG_TYPE_AUTH_FLOW",
		8:  "CONFIG_TYPE_EMAIL_SERVICE",
		9:  "CONFIG_TYPE_SMS_SERVICE",
		27: "CONFIG_TYPE_AUDIT_SINK",
		10: "CONFIG_TYPE_OAUTH2_CLIENT",
		11: "CONFIG_TYPE_OAUTH2_APPLICATION",
		17: "CONFIG_TYPE_OAUTH2_PROVIDER",
		12: "CONFIG_TYPE_PASSWORD_PROVIDER",
		13: "CONFIG_TYPE_WEBAUTHN_PROVIDER",
		16: "CONFIG_TYPE_SAFR_PROVIDER",
		22: "CONFIG_TYPE_AUTHORIZATION_POLICY",
		29: "CONFIG_TYPE_CONSENT",
	}
	ConfigType_value = map[string]int32{
		"CONFIG_TYPE_INVALID":              0,
		"CONFIG_TYPE_CUSTOMER":             1,
		"CONFIG_TYPE_APPLICATION_SPACE":    2,
		"CONFIG_TYPE_ISSUER":               15,
		"CONFIG_TYPE_TENANT":               3,
		"CONFIG_TYPE_APPLICATION":          4,
		"CONFIG_TYPE_APP_AGENT":            5,
		"CONFIG_TYPE_APP_AGENT_CREDENTIAL": 6,
		"CONFIG_TYPE_SERVICE_ACCOUNT":      18,
		"CONFIG_TYPE_SERVICE_CREDENTIAL":   19,
		"CONFIG_TYPE_DIGITAL_TWIN":         21,
		"CONFIG_TYPE_AUTH_FLOW":            7,
		"CONFIG_TYPE_EMAIL_SERVICE":        8,
		"CONFIG_TYPE_SMS_SERVICE":          9,
		"CONFIG_TYPE_AUDIT_SINK":           27,
		"CONFIG_TYPE_OAUTH2_CLIENT":        10,
		"CONFIG_TYPE_OAUTH2_APPLICATION":   11,
		"CONFIG_TYPE_OAUTH2_PROVIDER":      17,
		"CONFIG_TYPE_PASSWORD_PROVIDER":    12,
		"CONFIG_TYPE_WEBAUTHN_PROVIDER":    13,
		"CONFIG_TYPE_SAFR_PROVIDER":        16,
		"CONFIG_TYPE_AUTHORIZATION_POLICY": 22,
		"CONFIG_TYPE_CONSENT":              29,
	}
)

func (x ConfigType) Enum() *ConfigType {
	p := new(ConfigType)
	*p = x
	return p
}

func (x ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[0].Descriptor()
}

func (ConfigType) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[0]
}

func (x ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigType.Descriptor instead.
func (ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{0}
}

type OAuth2GrantType int32

const (
	OAuth2GrantType_O_AUTH2_GRANT_TYPE_INVALID            OAuth2GrantType = 0
	OAuth2GrantType_O_AUTH2_GRANT_TYPE_AUTHORIZATION_CODE OAuth2GrantType = 1
	OAuth2GrantType_O_AUTH2_GRANT_TYPE_IMPLICIT           OAuth2GrantType = 2
	OAuth2GrantType_O_AUTH2_GRANT_TYPE_PASSWORD           OAuth2GrantType = 3
	OAuth2GrantType_O_AUTH2_GRANT_TYPE_CLIENT_CREDENTIALS OAuth2GrantType = 4
	OAuth2GrantType_O_AUTH2_GRANT_TYPE_REFRESH_TOKEN      OAuth2GrantType = 5
)

// Enum value maps for OAuth2GrantType.
var (
	OAuth2GrantType_name = map[int32]string{
		0: "O_AUTH2_GRANT_TYPE_INVALID",
		1: "O_AUTH2_GRANT_TYPE_AUTHORIZATION_CODE",
		2: "O_AUTH2_GRANT_TYPE_IMPLICIT",
		3: "O_AUTH2_GRANT_TYPE_PASSWORD",
		4: "O_AUTH2_GRANT_TYPE_CLIENT_CREDENTIALS",
		5: "O_AUTH2_GRANT_TYPE_REFRESH_TOKEN",
	}
	OAuth2GrantType_value = map[string]int32{
		"O_AUTH2_GRANT_TYPE_INVALID":            0,
		"O_AUTH2_GRANT_TYPE_AUTHORIZATION_CODE": 1,
		"O_AUTH2_GRANT_TYPE_IMPLICIT":           2,
		"O_AUTH2_GRANT_TYPE_PASSWORD":           3,
		"O_AUTH2_GRANT_TYPE_CLIENT_CREDENTIALS": 4,
		"O_AUTH2_GRANT_TYPE_REFRESH_TOKEN":      5,
	}
)

func (x OAuth2GrantType) Enum() *OAuth2GrantType {
	p := new(OAuth2GrantType)
	*p = x
	return p
}

func (x OAuth2GrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuth2GrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[1].Descriptor()
}

func (OAuth2GrantType) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[1]
}

func (x OAuth2GrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuth2GrantType.Descriptor instead.
func (OAuth2GrantType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{1}
}

type OAuth2ResponseType int32

const (
	OAuth2ResponseType_O_AUTH2_RESPONSE_TYPE_INVALID  OAuth2ResponseType = 0
	OAuth2ResponseType_O_AUTH2_RESPONSE_TYPE_TOKEN    OAuth2ResponseType = 1
	OAuth2ResponseType_O_AUTH2_RESPONSE_TYPE_CODE     OAuth2ResponseType = 2
	OAuth2ResponseType_O_AUTH2_RESPONSE_TYPE_ID_TOKEN OAuth2ResponseType = 3
)

// Enum value maps for OAuth2ResponseType.
var (
	OAuth2ResponseType_name = map[int32]string{
		0: "O_AUTH2_RESPONSE_TYPE_INVALID",
		1: "O_AUTH2_RESPONSE_TYPE_TOKEN",
		2: "O_AUTH2_RESPONSE_TYPE_CODE",
		3: "O_AUTH2_RESPONSE_TYPE_ID_TOKEN",
	}
	OAuth2ResponseType_value = map[string]int32{
		"O_AUTH2_RESPONSE_TYPE_INVALID":  0,
		"O_AUTH2_RESPONSE_TYPE_TOKEN":    1,
		"O_AUTH2_RESPONSE_TYPE_CODE":     2,
		"O_AUTH2_RESPONSE_TYPE_ID_TOKEN": 3,
	}
)

func (x OAuth2ResponseType) Enum() *OAuth2ResponseType {
	p := new(OAuth2ResponseType)
	*p = x
	return p
}

func (x OAuth2ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuth2ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[2].Descriptor()
}

func (OAuth2ResponseType) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[2]
}

func (x OAuth2ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuth2ResponseType.Descriptor instead.
func (OAuth2ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{2}
}

type OAuth2TokenEndpointAuthMethod int32

const (
	OAuth2TokenEndpointAuthMethod_O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_INVALID             OAuth2TokenEndpointAuthMethod = 0
	OAuth2TokenEndpointAuthMethod_O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC OAuth2TokenEndpointAuthMethod = 1
	OAuth2TokenEndpointAuthMethod_O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST  OAuth2TokenEndpointAuthMethod = 2
	OAuth2TokenEndpointAuthMethod_O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT     OAuth2TokenEndpointAuthMethod = 3
	OAuth2TokenEndpointAuthMethod_O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_NONE                OAuth2TokenEndpointAuthMethod = 4
)

// Enum value maps for OAuth2TokenEndpointAuthMethod.
var (
	OAuth2TokenEndpointAuthMethod_name = map[int32]string{
		0: "O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_INVALID",
		1: "O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC",
		2: "O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST",
		3: "O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT",
		4: "O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_NONE",
	}
	OAuth2TokenEndpointAuthMethod_value = map[string]int32{
		"O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_INVALID":             0,
		"O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC": 1,
		"O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST":  2,
		"O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT":     3,
		"O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_NONE":                4,
	}
)

func (x OAuth2TokenEndpointAuthMethod) Enum() *OAuth2TokenEndpointAuthMethod {
	p := new(OAuth2TokenEndpointAuthMethod)
	*p = x
	return p
}

func (x OAuth2TokenEndpointAuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuth2TokenEndpointAuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[3].Descriptor()
}

func (OAuth2TokenEndpointAuthMethod) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[3]
}

func (x OAuth2TokenEndpointAuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuth2TokenEndpointAuthMethod.Descriptor instead.
func (OAuth2TokenEndpointAuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{3}
}

// TODO: prepare properly
type AuthFlowConfig_Format int32

const (
	AuthFlowConfig_FORMAT_INVALID   AuthFlowConfig_Format = 0
	AuthFlowConfig_FORMAT_BARE_YAML AuthFlowConfig_Format = 1
	AuthFlowConfig_FORMAT_BARE_JSON AuthFlowConfig_Format = 2
	AuthFlowConfig_FORMAT_RICH_JSON AuthFlowConfig_Format = 3
)

// Enum value maps for AuthFlowConfig_Format.
var (
	AuthFlowConfig_Format_name = map[int32]string{
		0: "FORMAT_INVALID",
		1: "FORMAT_BARE_YAML",
		2: "FORMAT_BARE_JSON",
		3: "FORMAT_RICH_JSON",
	}
	AuthFlowConfig_Format_value = map[string]int32{
		"FORMAT_INVALID":   0,
		"FORMAT_BARE_YAML": 1,
		"FORMAT_BARE_JSON": 2,
		"FORMAT_RICH_JSON": 3,
	}
)

func (x AuthFlowConfig_Format) Enum() *AuthFlowConfig_Format {
	p := new(AuthFlowConfig_Format)
	*p = x
	return p
}

func (x AuthFlowConfig_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthFlowConfig_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[4].Descriptor()
}

func (AuthFlowConfig_Format) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[4]
}

func (x AuthFlowConfig_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthFlowConfig_Format.Descriptor instead.
func (AuthFlowConfig_Format) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{12, 0}
}

// ProviderType is a list of supported OAuth2 providers.
type OAuth2ClientConfig_ProviderType int32

const (
	OAuth2ClientConfig_PROVIDER_TYPE_INVALID               OAuth2ClientConfig_ProviderType = 0
	OAuth2ClientConfig_PROVIDER_TYPE_AMAZON_COM            OAuth2ClientConfig_ProviderType = 1
	OAuth2ClientConfig_PROVIDER_TYPE_AMAZONCOGNITO_COM     OAuth2ClientConfig_ProviderType = 34
	OAuth2ClientConfig_PROVIDER_TYPE_APPLE_COM             OAuth2ClientConfig_ProviderType = 41
	OAuth2ClientConfig_PROVIDER_TYPE_AUTHENTEQ_COM         OAuth2ClientConfig_ProviderType = 33
	OAuth2ClientConfig_PROVIDER_TYPE_BANKID_COM            OAuth2ClientConfig_ProviderType = 38
	OAuth2ClientConfig_PROVIDER_TYPE_BANKID_NO             OAuth2ClientConfig_ProviderType = 37
	OAuth2ClientConfig_PROVIDER_TYPE_BITBUCKET             OAuth2ClientConfig_ProviderType = 2
	OAuth2ClientConfig_PROVIDER_TYPE_CERN_CH               OAuth2ClientConfig_ProviderType = 3
	OAuth2ClientConfig_PROVIDER_TYPE_CUSTOM                OAuth2ClientConfig_ProviderType = 39
	OAuth2ClientConfig_PROVIDER_TYPE_FACEBOOK_COM          OAuth2ClientConfig_ProviderType = 4
	OAuth2ClientConfig_PROVIDER_TYPE_FITBIT_COM            OAuth2ClientConfig_ProviderType = 5
	OAuth2ClientConfig_PROVIDER_TYPE_FOURSQUARE_COM        OAuth2ClientConfig_ProviderType = 6
	OAuth2ClientConfig_PROVIDER_TYPE_GITHUB_COM            OAuth2ClientConfig_ProviderType = 7
	OAuth2ClientConfig_PROVIDER_TYPE_GITLAB_COM            OAuth2ClientConfig_ProviderType = 8
	OAuth2ClientConfig_PROVIDER_TYPE_GOOGLE_COM            OAuth2ClientConfig_ProviderType = 9
	OAuth2ClientConfig_PROVIDER_TYPE_HEROKU_COM            OAuth2ClientConfig_ProviderType = 10
	OAuth2ClientConfig_PROVIDER_TYPE_HIPCHAT_COM           OAuth2ClientConfig_ProviderType = 11
	OAuth2ClientConfig_PROVIDER_TYPE_INDYKITE_ID           OAuth2ClientConfig_ProviderType = 35
	OAuth2ClientConfig_PROVIDER_TYPE_INDYKITE_ME           OAuth2ClientConfig_ProviderType = 36
	OAuth2ClientConfig_PROVIDER_TYPE_INSTAGRAM_COM         OAuth2ClientConfig_ProviderType = 12
	OAuth2ClientConfig_PROVIDER_TYPE_KAKAO_COM             OAuth2ClientConfig_ProviderType = 13
	OAuth2ClientConfig_PROVIDER_TYPE_LINKEDIN_COM          OAuth2ClientConfig_ProviderType = 14
	OAuth2ClientConfig_PROVIDER_TYPE_MAILCHIMP_COM         OAuth2ClientConfig_ProviderType = 15
	OAuth2ClientConfig_PROVIDER_TYPE_MAIL_RU               OAuth2ClientConfig_ProviderType = 16
	OAuth2ClientConfig_PROVIDER_TYPE_MEDIAMATH_COM         OAuth2ClientConfig_ProviderType = 17
	OAuth2ClientConfig_PROVIDER_TYPE_SANDBOX_MEDIAMATH_COM OAuth2ClientConfig_ProviderType = 18
	OAuth2ClientConfig_PROVIDER_TYPE_LIVE_COM              OAuth2ClientConfig_ProviderType = 32
	OAuth2ClientConfig_PROVIDER_TYPE_MICROSOFT_COM         OAuth2ClientConfig_ProviderType = 19
	OAuth2ClientConfig_PROVIDER_TYPE_HEALTH_NOKIA_COM      OAuth2ClientConfig_ProviderType = 20
	OAuth2ClientConfig_PROVIDER_TYPE_ODNOKLASSNIKI_RU      OAuth2ClientConfig_ProviderType = 21
	OAuth2ClientConfig_PROVIDER_TYPE_PAYPAL_COM            OAuth2ClientConfig_ProviderType = 22
	OAuth2ClientConfig_PROVIDER_TYPE_SANDBOX_PAYPAL_COM    OAuth2ClientConfig_ProviderType = 23
	OAuth2ClientConfig_PROVIDER_TYPE_SLACK_COM             OAuth2ClientConfig_ProviderType = 24
	OAuth2ClientConfig_PROVIDER_TYPE_SPOTIFY_COM           OAuth2ClientConfig_ProviderType = 25
	OAuth2ClientConfig_PROVIDER_TYPE_STACKOVERFLOW_COM     OAuth2ClientConfig_ProviderType = 26
	OAuth2ClientConfig_PROVIDER_TYPE_TWITCH_TV             OAuth2ClientConfig_ProviderType = 27
	OAuth2ClientConfig_PROVIDER_TYPE_UBER_COM              OAuth2ClientConfig_ProviderType = 28
	OAuth2ClientConfig_PROVIDER_TYPE_VIPPS_NO              OAuth2ClientConfig_ProviderType = 40
	OAuth2ClientConfig_PROVIDER_TYPE_VK_COM                OAuth2ClientConfig_ProviderType = 29
	OAuth2ClientConfig_PROVIDER_TYPE_YAHOO_COM             OAuth2ClientConfig_ProviderType = 30
	OAuth2ClientConfig_PROVIDER_TYPE_YANDEX_COM            OAuth2ClientConfig_ProviderType = 31
)

// Enum value maps for OAuth2ClientConfig_ProviderType.
var (
	OAuth2ClientConfig_ProviderType_name = map[int32]string{
		0:  "PROVIDER_TYPE_INVALID",
		1:  "PROVIDER_TYPE_AMAZON_COM",
		34: "PROVIDER_TYPE_AMAZONCOGNITO_COM",
		41: "PROVIDER_TYPE_APPLE_COM",
		33: "PROVIDER_TYPE_AUTHENTEQ_COM",
		38: "PROVIDER_TYPE_BANKID_COM",
		37: "PROVIDER_TYPE_BANKID_NO",
		2:  "PROVIDER_TYPE_BITBUCKET",
		3:  "PROVIDER_TYPE_CERN_CH",
		39: "PROVIDER_TYPE_CUSTOM",
		4:  "PROVIDER_TYPE_FACEBOOK_COM",
		5:  "PROVIDER_TYPE_FITBIT_COM",
		6:  "PROVIDER_TYPE_FOURSQUARE_COM",
		7:  "PROVIDER_TYPE_GITHUB_COM",
		8:  "PROVIDER_TYPE_GITLAB_COM",
		9:  "PROVIDER_TYPE_GOOGLE_COM",
		10: "PROVIDER_TYPE_HEROKU_COM",
		11: "PROVIDER_TYPE_HIPCHAT_COM",
		35: "PROVIDER_TYPE_INDYKITE_ID",
		36: "PROVIDER_TYPE_INDYKITE_ME",
		12: "PROVIDER_TYPE_INSTAGRAM_COM",
		13: "PROVIDER_TYPE_KAKAO_COM",
		14: "PROVIDER_TYPE_LINKEDIN_COM",
		15: "PROVIDER_TYPE_MAILCHIMP_COM",
		16: "PROVIDER_TYPE_MAIL_RU",
		17: "PROVIDER_TYPE_MEDIAMATH_COM",
		18: "PROVIDER_TYPE_SANDBOX_MEDIAMATH_COM",
		32: "PROVIDER_TYPE_LIVE_COM",
		19: "PROVIDER_TYPE_MICROSOFT_COM",
		20: "PROVIDER_TYPE_HEALTH_NOKIA_COM",
		21: "PROVIDER_TYPE_ODNOKLASSNIKI_RU",
		22: "PROVIDER_TYPE_PAYPAL_COM",
		23: "PROVIDER_TYPE_SANDBOX_PAYPAL_COM",
		24: "PROVIDER_TYPE_SLACK_COM",
		25: "PROVIDER_TYPE_SPOTIFY_COM",
		26: "PROVIDER_TYPE_STACKOVERFLOW_COM",
		27: "PROVIDER_TYPE_TWITCH_TV",
		28: "PROVIDER_TYPE_UBER_COM",
		40: "PROVIDER_TYPE_VIPPS_NO",
		29: "PROVIDER_TYPE_VK_COM",
		30: "PROVIDER_TYPE_YAHOO_COM",
		31: "PROVIDER_TYPE_YANDEX_COM",
	}
	OAuth2ClientConfig_ProviderType_value = map[string]int32{
		"PROVIDER_TYPE_INVALID":               0,
		"PROVIDER_TYPE_AMAZON_COM":            1,
		"PROVIDER_TYPE_AMAZONCOGNITO_COM":     34,
		"PROVIDER_TYPE_APPLE_COM":             41,
		"PROVIDER_TYPE_AUTHENTEQ_COM":         33,
		"PROVIDER_TYPE_BANKID_COM":            38,
		"PROVIDER_TYPE_BANKID_NO":             37,
		"PROVIDER_TYPE_BITBUCKET":             2,
		"PROVIDER_TYPE_CERN_CH":               3,
		"PROVIDER_TYPE_CUSTOM":                39,
		"PROVIDER_TYPE_FACEBOOK_COM":          4,
		"PROVIDER_TYPE_FITBIT_COM":            5,
		"PROVIDER_TYPE_FOURSQUARE_COM":        6,
		"PROVIDER_TYPE_GITHUB_COM":            7,
		"PROVIDER_TYPE_GITLAB_COM":            8,
		"PROVIDER_TYPE_GOOGLE_COM":            9,
		"PROVIDER_TYPE_HEROKU_COM":            10,
		"PROVIDER_TYPE_HIPCHAT_COM":           11,
		"PROVIDER_TYPE_INDYKITE_ID":           35,
		"PROVIDER_TYPE_INDYKITE_ME":           36,
		"PROVIDER_TYPE_INSTAGRAM_COM":         12,
		"PROVIDER_TYPE_KAKAO_COM":             13,
		"PROVIDER_TYPE_LINKEDIN_COM":          14,
		"PROVIDER_TYPE_MAILCHIMP_COM":         15,
		"PROVIDER_TYPE_MAIL_RU":               16,
		"PROVIDER_TYPE_MEDIAMATH_COM":         17,
		"PROVIDER_TYPE_SANDBOX_MEDIAMATH_COM": 18,
		"PROVIDER_TYPE_LIVE_COM":              32,
		"PROVIDER_TYPE_MICROSOFT_COM":         19,
		"PROVIDER_TYPE_HEALTH_NOKIA_COM":      20,
		"PROVIDER_TYPE_ODNOKLASSNIKI_RU":      21,
		"PROVIDER_TYPE_PAYPAL_COM":            22,
		"PROVIDER_TYPE_SANDBOX_PAYPAL_COM":    23,
		"PROVIDER_TYPE_SLACK_COM":             24,
		"PROVIDER_TYPE_SPOTIFY_COM":           25,
		"PROVIDER_TYPE_STACKOVERFLOW_COM":     26,
		"PROVIDER_TYPE_TWITCH_TV":             27,
		"PROVIDER_TYPE_UBER_COM":              28,
		"PROVIDER_TYPE_VIPPS_NO":              40,
		"PROVIDER_TYPE_VK_COM":                29,
		"PROVIDER_TYPE_YAHOO_COM":             30,
		"PROVIDER_TYPE_YANDEX_COM":            31,
	}
)

func (x OAuth2ClientConfig_ProviderType) Enum() *OAuth2ClientConfig_ProviderType {
	p := new(OAuth2ClientConfig_ProviderType)
	*p = x
	return p
}

func (x OAuth2ClientConfig_ProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuth2ClientConfig_ProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[5].Descriptor()
}

func (OAuth2ClientConfig_ProviderType) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[5]
}

func (x OAuth2ClientConfig_ProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuth2ClientConfig_ProviderType.Descriptor instead.
func (OAuth2ClientConfig_ProviderType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{21, 0}
}

// AuthStyle represents how requests for tokens are authenticated
// to the server.
type OAuth2ClientConfig_AuthStyle int32

const (
	OAuth2ClientConfig_AUTH_STYLE_INVALID OAuth2ClientConfig_AuthStyle = 0
	// AuthStyleAutoDetect means to auto-detect which authentication
	// style the provider wants by trying both ways and caching
	// the successful way for the future.
	OAuth2ClientConfig_AUTH_STYLE_AUTO_DETECT OAuth2ClientConfig_AuthStyle = 1
	// AuthStyleInParams sends the "client_id" and "client_secret"
	// in the POST body as application/x-www-form-urlencoded parameters.
	OAuth2ClientConfig_AUTH_STYLE_IN_PARAMS OAuth2ClientConfig_AuthStyle = 2
	// AuthStyleInHeader sends the client_id and client_password
	// using HTTP Basic Authorization. This is an optional style
	// described in the OAuth2 RFC 6749 section 2.3.1.
	OAuth2ClientConfig_AUTH_STYLE_IN_HEADER OAuth2ClientConfig_AuthStyle = 3
)

// Enum value maps for OAuth2ClientConfig_AuthStyle.
var (
	OAuth2ClientConfig_AuthStyle_name = map[int32]string{
		0: "AUTH_STYLE_INVALID",
		1: "AUTH_STYLE_AUTO_DETECT",
		2: "AUTH_STYLE_IN_PARAMS",
		3: "AUTH_STYLE_IN_HEADER",
	}
	OAuth2ClientConfig_AuthStyle_value = map[string]int32{
		"AUTH_STYLE_INVALID":     0,
		"AUTH_STYLE_AUTO_DETECT": 1,
		"AUTH_STYLE_IN_PARAMS":   2,
		"AUTH_STYLE_IN_HEADER":   3,
	}
)

func (x OAuth2ClientConfig_AuthStyle) Enum() *OAuth2ClientConfig_AuthStyle {
	p := new(OAuth2ClientConfig_AuthStyle)
	*p = x
	return p
}

func (x OAuth2ClientConfig_AuthStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuth2ClientConfig_AuthStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[6].Descriptor()
}

func (OAuth2ClientConfig_AuthStyle) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[6]
}

func (x OAuth2ClientConfig_AuthStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuth2ClientConfig_AuthStyle.Descriptor instead.
func (OAuth2ClientConfig_AuthStyle) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{21, 1}
}

type OAuth2ApplicationConfig_ClientSubjectType int32

const (
	OAuth2ApplicationConfig_CLIENT_SUBJECT_TYPE_INVALID  OAuth2ApplicationConfig_ClientSubjectType = 0
	OAuth2ApplicationConfig_CLIENT_SUBJECT_TYPE_PUBLIC   OAuth2ApplicationConfig_ClientSubjectType = 1
	OAuth2ApplicationConfig_CLIENT_SUBJECT_TYPE_PAIRWISE OAuth2ApplicationConfig_ClientSubjectType = 2
)

// Enum value maps for OAuth2ApplicationConfig_ClientSubjectType.
var (
	OAuth2ApplicationConfig_ClientSubjectType_name = map[int32]string{
		0: "CLIENT_SUBJECT_TYPE_INVALID",
		1: "CLIENT_SUBJECT_TYPE_PUBLIC",
		2: "CLIENT_SUBJECT_TYPE_PAIRWISE",
	}
	OAuth2ApplicationConfig_ClientSubjectType_value = map[string]int32{
		"CLIENT_SUBJECT_TYPE_INVALID":  0,
		"CLIENT_SUBJECT_TYPE_PUBLIC":   1,
		"CLIENT_SUBJECT_TYPE_PAIRWISE": 2,
	}
)

func (x OAuth2ApplicationConfig_ClientSubjectType) Enum() *OAuth2ApplicationConfig_ClientSubjectType {
	p := new(OAuth2ApplicationConfig_ClientSubjectType)
	*p = x
	return p
}

func (x OAuth2ApplicationConfig_ClientSubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuth2ApplicationConfig_ClientSubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[7].Descriptor()
}

func (OAuth2ApplicationConfig_ClientSubjectType) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[7]
}

func (x OAuth2ApplicationConfig_ClientSubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuth2ApplicationConfig_ClientSubjectType.Descriptor instead.
func (OAuth2ApplicationConfig_ClientSubjectType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{23, 0}
}

type WebAuthnProviderConfig_ConveyancePreference int32

const (
	WebAuthnProviderConfig_CONVEYANCE_PREFERENCE_INVALID  WebAuthnProviderConfig_ConveyancePreference = 0
	WebAuthnProviderConfig_CONVEYANCE_PREFERENCE_NONE     WebAuthnProviderConfig_ConveyancePreference = 1
	WebAuthnProviderConfig_CONVEYANCE_PREFERENCE_INDIRECT WebAuthnProviderConfig_ConveyancePreference = 2
	WebAuthnProviderConfig_CONVEYANCE_PREFERENCE_DIRECT   WebAuthnProviderConfig_ConveyancePreference = 3
)

// Enum value maps for WebAuthnProviderConfig_ConveyancePreference.
var (
	WebAuthnProviderConfig_ConveyancePreference_name = map[int32]string{
		0: "CONVEYANCE_PREFERENCE_INVALID",
		1: "CONVEYANCE_PREFERENCE_NONE",
		2: "CONVEYANCE_PREFERENCE_INDIRECT",
		3: "CONVEYANCE_PREFERENCE_DIRECT",
	}
	WebAuthnProviderConfig_ConveyancePreference_value = map[string]int32{
		"CONVEYANCE_PREFERENCE_INVALID":  0,
		"CONVEYANCE_PREFERENCE_NONE":     1,
		"CONVEYANCE_PREFERENCE_INDIRECT": 2,
		"CONVEYANCE_PREFERENCE_DIRECT":   3,
	}
)

func (x WebAuthnProviderConfig_ConveyancePreference) Enum() *WebAuthnProviderConfig_ConveyancePreference {
	p := new(WebAuthnProviderConfig_ConveyancePreference)
	*p = x
	return p
}

func (x WebAuthnProviderConfig_ConveyancePreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebAuthnProviderConfig_ConveyancePreference) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[8].Descriptor()
}

func (WebAuthnProviderConfig_ConveyancePreference) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[8]
}

func (x WebAuthnProviderConfig_ConveyancePreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebAuthnProviderConfig_ConveyancePreference.Descriptor instead.
func (WebAuthnProviderConfig_ConveyancePreference) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{24, 0}
}

type WebAuthnProviderConfig_AuthenticatorAttachment int32

const (
	WebAuthnProviderConfig_AUTHENTICATOR_ATTACHMENT_INVALID        WebAuthnProviderConfig_AuthenticatorAttachment = 0
	WebAuthnProviderConfig_AUTHENTICATOR_ATTACHMENT_DEFAULT        WebAuthnProviderConfig_AuthenticatorAttachment = 1
	WebAuthnProviderConfig_AUTHENTICATOR_ATTACHMENT_PLATFORM       WebAuthnProviderConfig_AuthenticatorAttachment = 2
	WebAuthnProviderConfig_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM WebAuthnProviderConfig_AuthenticatorAttachment = 3
)

// Enum value maps for WebAuthnProviderConfig_AuthenticatorAttachment.
var (
	WebAuthnProviderConfig_AuthenticatorAttachment_name = map[int32]string{
		0: "AUTHENTICATOR_ATTACHMENT_INVALID",
		1: "AUTHENTICATOR_ATTACHMENT_DEFAULT",
		2: "AUTHENTICATOR_ATTACHMENT_PLATFORM",
		3: "AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM",
	}
	WebAuthnProviderConfig_AuthenticatorAttachment_value = map[string]int32{
		"AUTHENTICATOR_ATTACHMENT_INVALID":        0,
		"AUTHENTICATOR_ATTACHMENT_DEFAULT":        1,
		"AUTHENTICATOR_ATTACHMENT_PLATFORM":       2,
		"AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM": 3,
	}
)

func (x WebAuthnProviderConfig_AuthenticatorAttachment) Enum() *WebAuthnProviderConfig_AuthenticatorAttachment {
	p := new(WebAuthnProviderConfig_AuthenticatorAttachment)
	*p = x
	return p
}

func (x WebAuthnProviderConfig_AuthenticatorAttachment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebAuthnProviderConfig_AuthenticatorAttachment) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[9].Descriptor()
}

func (WebAuthnProviderConfig_AuthenticatorAttachment) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[9]
}

func (x WebAuthnProviderConfig_AuthenticatorAttachment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebAuthnProviderConfig_AuthenticatorAttachment.Descriptor instead.
func (WebAuthnProviderConfig_AuthenticatorAttachment) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{24, 1}
}

type WebAuthnProviderConfig_UserVerificationRequirement int32

const (
	WebAuthnProviderConfig_USER_VERIFICATION_REQUIREMENT_INVALID     WebAuthnProviderConfig_UserVerificationRequirement = 0
	WebAuthnProviderConfig_USER_VERIFICATION_REQUIREMENT_PREFERRED   WebAuthnProviderConfig_UserVerificationRequirement = 1
	WebAuthnProviderConfig_USER_VERIFICATION_REQUIREMENT_REQUIRED    WebAuthnProviderConfig_UserVerificationRequirement = 2
	WebAuthnProviderConfig_USER_VERIFICATION_REQUIREMENT_DISCOURAGED WebAuthnProviderConfig_UserVerificationRequirement = 3
)

// Enum value maps for WebAuthnProviderConfig_UserVerificationRequirement.
var (
	WebAuthnProviderConfig_UserVerificationRequirement_name = map[int32]string{
		0: "USER_VERIFICATION_REQUIREMENT_INVALID",
		1: "USER_VERIFICATION_REQUIREMENT_PREFERRED",
		2: "USER_VERIFICATION_REQUIREMENT_REQUIRED",
		3: "USER_VERIFICATION_REQUIREMENT_DISCOURAGED",
	}
	WebAuthnProviderConfig_UserVerificationRequirement_value = map[string]int32{
		"USER_VERIFICATION_REQUIREMENT_INVALID":     0,
		"USER_VERIFICATION_REQUIREMENT_PREFERRED":   1,
		"USER_VERIFICATION_REQUIREMENT_REQUIRED":    2,
		"USER_VERIFICATION_REQUIREMENT_DISCOURAGED": 3,
	}
)

func (x WebAuthnProviderConfig_UserVerificationRequirement) Enum() *WebAuthnProviderConfig_UserVerificationRequirement {
	p := new(WebAuthnProviderConfig_UserVerificationRequirement)
	*p = x
	return p
}

func (x WebAuthnProviderConfig_UserVerificationRequirement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebAuthnProviderConfig_UserVerificationRequirement) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[10].Descriptor()
}

func (WebAuthnProviderConfig_UserVerificationRequirement) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[10]
}

func (x WebAuthnProviderConfig_UserVerificationRequirement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebAuthnProviderConfig_UserVerificationRequirement.Descriptor instead.
func (WebAuthnProviderConfig_UserVerificationRequirement) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{24, 2}
}

type AuthorizationPolicyConfig_Status int32

const (
	AuthorizationPolicyConfig_STATUS_INVALID  AuthorizationPolicyConfig_Status = 0
	AuthorizationPolicyConfig_STATUS_ACTIVE   AuthorizationPolicyConfig_Status = 1
	AuthorizationPolicyConfig_STATUS_INACTIVE AuthorizationPolicyConfig_Status = 2
	AuthorizationPolicyConfig_STATUS_DRAFT    AuthorizationPolicyConfig_Status = 3
)

// Enum value maps for AuthorizationPolicyConfig_Status.
var (
	AuthorizationPolicyConfig_Status_name = map[int32]string{
		0: "STATUS_INVALID",
		1: "STATUS_ACTIVE",
		2: "STATUS_INACTIVE",
		3: "STATUS_DRAFT",
	}
	AuthorizationPolicyConfig_Status_value = map[string]int32{
		"STATUS_INVALID":  0,
		"STATUS_ACTIVE":   1,
		"STATUS_INACTIVE": 2,
		"STATUS_DRAFT":    3,
	}
)

func (x AuthorizationPolicyConfig_Status) Enum() *AuthorizationPolicyConfig_Status {
	p := new(AuthorizationPolicyConfig_Status)
	*p = x
	return p
}

func (x AuthorizationPolicyConfig_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizationPolicyConfig_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_auditsink_v1beta1_config_proto_enumTypes[11].Descriptor()
}

func (AuthorizationPolicyConfig_Status) Type() protoreflect.EnumType {
	return &file_indykite_auditsink_v1beta1_config_proto_enumTypes[11]
}

func (x AuthorizationPolicyConfig_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizationPolicyConfig_Status.Descriptor instead.
func (AuthorizationPolicyConfig_Status) EnumDescriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{25, 0}
}

type ContainersPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId         string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ApplicationSpaceId string `protobuf:"bytes,2,opt,name=application_space_id,json=applicationSpaceId,proto3" json:"application_space_id,omitempty"`
	TenantId           string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *ContainersPath) Reset() {
	*x = ContainersPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainersPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainersPath) ProtoMessage() {}

func (x *ContainersPath) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainersPath.ProtoReflect.Descriptor instead.
func (*ContainersPath) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{0}
}

func (x *ContainersPath) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ContainersPath) GetApplicationSpaceId() string {
	if x != nil {
		return x.ApplicationSpaceId
	}
	return ""
}

func (x *ContainersPath) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type CreatedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           ConfigType              `protobuf:"varint,2,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
	Location       *CreatedConfig_Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	ContainersPath *ContainersPath         `protobuf:"bytes,5,opt,name=containers_path,json=containersPath,proto3" json:"containers_path,omitempty"`
	Detail         *ConfigDetail           `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CreatedConfig) Reset() {
	*x = CreatedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedConfig) ProtoMessage() {}

func (x *CreatedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedConfig.ProtoReflect.Descriptor instead.
func (*CreatedConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{1}
}

func (x *CreatedConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreatedConfig) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *CreatedConfig) GetLocation() *CreatedConfig_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreatedConfig) GetContainersPath() *ContainersPath {
	if x != nil {
		return x.ContainersPath
	}
	return nil
}

func (x *CreatedConfig) GetDetail() *ConfigDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type ReadConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*ReadConfig_Id
	//	*ReadConfig_Name
	Identifier     isReadConfig_Identifier `protobuf_oneof:"identifier"`
	ContainersPath *ContainersPath         `protobuf:"bytes,4,opt,name=containers_path,json=containersPath,proto3" json:"containers_path,omitempty"`
	Type           ConfigType              `protobuf:"varint,3,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
}

func (x *ReadConfig) Reset() {
	*x = ReadConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConfig) ProtoMessage() {}

func (x *ReadConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConfig.ProtoReflect.Descriptor instead.
func (*ReadConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{2}
}

func (m *ReadConfig) GetIdentifier() isReadConfig_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *ReadConfig) GetId() string {
	if x, ok := x.GetIdentifier().(*ReadConfig_Id); ok {
		return x.Id
	}
	return ""
}

func (x *ReadConfig) GetName() *ReadConfig_NameIdentifier {
	if x, ok := x.GetIdentifier().(*ReadConfig_Name); ok {
		return x.Name
	}
	return nil
}

func (x *ReadConfig) GetContainersPath() *ContainersPath {
	if x != nil {
		return x.ContainersPath
	}
	return nil
}

func (x *ReadConfig) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

type isReadConfig_Identifier interface {
	isReadConfig_Identifier()
}

type ReadConfig_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadConfig_Name struct {
	Name *ReadConfig_NameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadConfig_Id) isReadConfig_Identifier() {}

func (*ReadConfig_Name) isReadConfig_Identifier() {}

type UpdatedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           ConfigType      `protobuf:"varint,2,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
	ContainersPath *ContainersPath `protobuf:"bytes,5,opt,name=containers_path,json=containersPath,proto3" json:"containers_path,omitempty"`
	Before         *ConfigDetail   `protobuf:"bytes,3,opt,name=before,proto3" json:"before,omitempty"`
	After          *ConfigDetail   `protobuf:"bytes,4,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *UpdatedConfig) Reset() {
	*x = UpdatedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedConfig) ProtoMessage() {}

func (x *UpdatedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedConfig.ProtoReflect.Descriptor instead.
func (*UpdatedConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{3}
}

func (x *UpdatedConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatedConfig) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *UpdatedConfig) GetContainersPath() *ContainersPath {
	if x != nil {
		return x.ContainersPath
	}
	return nil
}

func (x *UpdatedConfig) GetBefore() *ConfigDetail {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *UpdatedConfig) GetAfter() *ConfigDetail {
	if x != nil {
		return x.After
	}
	return nil
}

type DeletedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           ConfigType      `protobuf:"varint,2,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
	ContainersPath *ContainersPath `protobuf:"bytes,3,opt,name=containers_path,json=containersPath,proto3" json:"containers_path,omitempty"`
}

func (x *DeletedConfig) Reset() {
	*x = DeletedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedConfig) ProtoMessage() {}

func (x *DeletedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedConfig.ProtoReflect.Descriptor instead.
func (*DeletedConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{4}
}

func (x *DeletedConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeletedConfig) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *DeletedConfig) GetContainersPath() *ContainersPath {
	if x != nil {
		return x.ContainersPath
	}
	return nil
}

type ConfigDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Version     int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to Configuration:
	//
	//	*ConfigDetail_CustomerConfig
	//	*ConfigDetail_ApplicationSpaceConfig
	//	*ConfigDetail_TenantConfig
	//	*ConfigDetail_ApplicationAgentCredential
	//	*ConfigDetail_ServiceAccountCredential
	//	*ConfigDetail_AuthFlowConfig
	//	*ConfigDetail_EmailServiceConfig
	//	*ConfigDetail_AuditSinkConfig
	//	*ConfigDetail_Oauth2ClientConfig
	//	*ConfigDetail_WebAuthnProviderConfig
	//	*ConfigDetail_AuthorizationPolicyConfig
	//	*ConfigDetail_Oauth2ApplicationConfig
	//	*ConfigDetail_Oauth2ProviderConfig
	//	*ConfigDetail_ConsentConfig
	Configuration isConfigDetail_Configuration `protobuf_oneof:"configuration"`
}

func (x *ConfigDetail) Reset() {
	*x = ConfigDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDetail) ProtoMessage() {}

func (x *ConfigDetail) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDetail.ProtoReflect.Descriptor instead.
func (*ConfigDetail) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ConfigDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigDetail) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *ConfigDetail) GetConfiguration() isConfigDetail_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (x *ConfigDetail) GetCustomerConfig() *CustomerConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_CustomerConfig); ok {
		return x.CustomerConfig
	}
	return nil
}

func (x *ConfigDetail) GetApplicationSpaceConfig() *ApplicationSpaceConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_ApplicationSpaceConfig); ok {
		return x.ApplicationSpaceConfig
	}
	return nil
}

func (x *ConfigDetail) GetTenantConfig() *TenantConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_TenantConfig); ok {
		return x.TenantConfig
	}
	return nil
}

func (x *ConfigDetail) GetApplicationAgentCredential() *ApplicationAgentCredentialConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_ApplicationAgentCredential); ok {
		return x.ApplicationAgentCredential
	}
	return nil
}

func (x *ConfigDetail) GetServiceAccountCredential() *ServiceAccountCredentialConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_ServiceAccountCredential); ok {
		return x.ServiceAccountCredential
	}
	return nil
}

func (x *ConfigDetail) GetAuthFlowConfig() *AuthFlowConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_AuthFlowConfig); ok {
		return x.AuthFlowConfig
	}
	return nil
}

func (x *ConfigDetail) GetEmailServiceConfig() *EmailServiceConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_EmailServiceConfig); ok {
		return x.EmailServiceConfig
	}
	return nil
}

func (x *ConfigDetail) GetAuditSinkConfig() *AuditSinkConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_AuditSinkConfig); ok {
		return x.AuditSinkConfig
	}
	return nil
}

func (x *ConfigDetail) GetOauth2ClientConfig() *OAuth2ClientConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_Oauth2ClientConfig); ok {
		return x.Oauth2ClientConfig
	}
	return nil
}

func (x *ConfigDetail) GetWebAuthnProviderConfig() *WebAuthnProviderConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_WebAuthnProviderConfig); ok {
		return x.WebAuthnProviderConfig
	}
	return nil
}

func (x *ConfigDetail) GetAuthorizationPolicyConfig() *AuthorizationPolicyConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_AuthorizationPolicyConfig); ok {
		return x.AuthorizationPolicyConfig
	}
	return nil
}

func (x *ConfigDetail) GetOauth2ApplicationConfig() *OAuth2ApplicationConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_Oauth2ApplicationConfig); ok {
		return x.Oauth2ApplicationConfig
	}
	return nil
}

func (x *ConfigDetail) GetOauth2ProviderConfig() *OAuth2ProviderConfig {
	if x, ok := x.GetConfiguration().(*ConfigDetail_Oauth2ProviderConfig); ok {
		return x.Oauth2ProviderConfig
	}
	return nil
}

func (x *ConfigDetail) GetConsentConfig() *v1beta1.ConsentConfiguration {
	if x, ok := x.GetConfiguration().(*ConfigDetail_ConsentConfig); ok {
		return x.ConsentConfig
	}
	return nil
}

type isConfigDetail_Configuration interface {
	isConfigDetail_Configuration()
}

type ConfigDetail_CustomerConfig struct {
	CustomerConfig *CustomerConfig `protobuf:"bytes,5,opt,name=customer_config,json=customerConfig,proto3,oneof"`
}

type ConfigDetail_ApplicationSpaceConfig struct {
	ApplicationSpaceConfig *ApplicationSpaceConfig `protobuf:"bytes,6,opt,name=application_space_config,json=applicationSpaceConfig,proto3,oneof"`
}

type ConfigDetail_TenantConfig struct {
	TenantConfig *TenantConfig `protobuf:"bytes,7,opt,name=tenant_config,json=tenantConfig,proto3,oneof"`
}

type ConfigDetail_ApplicationAgentCredential struct {
	ApplicationAgentCredential *ApplicationAgentCredentialConfig `protobuf:"bytes,8,opt,name=application_agent_credential,json=applicationAgentCredential,proto3,oneof"`
}

type ConfigDetail_ServiceAccountCredential struct {
	ServiceAccountCredential *ServiceAccountCredentialConfig `protobuf:"bytes,9,opt,name=service_account_credential,json=serviceAccountCredential,proto3,oneof"`
}

type ConfigDetail_AuthFlowConfig struct {
	AuthFlowConfig *AuthFlowConfig `protobuf:"bytes,10,opt,name=auth_flow_config,json=authFlowConfig,proto3,oneof"`
}

type ConfigDetail_EmailServiceConfig struct {
	EmailServiceConfig *EmailServiceConfig `protobuf:"bytes,11,opt,name=email_service_config,json=emailServiceConfig,proto3,oneof"`
}

type ConfigDetail_AuditSinkConfig struct {
	AuditSinkConfig *AuditSinkConfig `protobuf:"bytes,12,opt,name=audit_sink_config,json=auditSinkConfig,proto3,oneof"`
}

type ConfigDetail_Oauth2ClientConfig struct {
	Oauth2ClientConfig *OAuth2ClientConfig `protobuf:"bytes,13,opt,name=oauth2_client_config,json=oauth2ClientConfig,proto3,oneof"`
}

type ConfigDetail_WebAuthnProviderConfig struct {
	WebAuthnProviderConfig *WebAuthnProviderConfig `protobuf:"bytes,14,opt,name=web_authn_provider_config,json=webAuthnProviderConfig,proto3,oneof"`
}

type ConfigDetail_AuthorizationPolicyConfig struct {
	AuthorizationPolicyConfig *AuthorizationPolicyConfig `protobuf:"bytes,15,opt,name=authorization_policy_config,json=authorizationPolicyConfig,proto3,oneof"`
}

type ConfigDetail_Oauth2ApplicationConfig struct {
	Oauth2ApplicationConfig *OAuth2ApplicationConfig `protobuf:"bytes,16,opt,name=oauth2_application_config,json=oauth2ApplicationConfig,proto3,oneof"`
}

type ConfigDetail_Oauth2ProviderConfig struct {
	Oauth2ProviderConfig *OAuth2ProviderConfig `protobuf:"bytes,17,opt,name=oauth2_provider_config,json=oauth2ProviderConfig,proto3,oneof"`
}

type ConfigDetail_ConsentConfig struct {
	ConsentConfig *v1beta1.ConsentConfiguration `protobuf:"bytes,18,opt,name=consent_config,json=consentConfig,proto3,oneof"`
}

func (*ConfigDetail_CustomerConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_ApplicationSpaceConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_TenantConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_ApplicationAgentCredential) isConfigDetail_Configuration() {}

func (*ConfigDetail_ServiceAccountCredential) isConfigDetail_Configuration() {}

func (*ConfigDetail_AuthFlowConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_EmailServiceConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_AuditSinkConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_Oauth2ClientConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_WebAuthnProviderConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_AuthorizationPolicyConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_Oauth2ApplicationConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_Oauth2ProviderConfig) isConfigDetail_Configuration() {}

func (*ConfigDetail_ConsentConfig) isConfigDetail_Configuration() {}

type CustomerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultAuthFlowId     string `protobuf:"bytes,1,opt,name=default_auth_flow_id,json=defaultAuthFlowId,proto3" json:"default_auth_flow_id,omitempty"`
	DefaultEmailServiceId string `protobuf:"bytes,2,opt,name=default_email_service_id,json=defaultEmailServiceId,proto3" json:"default_email_service_id,omitempty"`
}

func (x *CustomerConfig) Reset() {
	*x = CustomerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerConfig) ProtoMessage() {}

func (x *CustomerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerConfig.ProtoReflect.Descriptor instead.
func (*CustomerConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{6}
}

func (x *CustomerConfig) GetDefaultAuthFlowId() string {
	if x != nil {
		return x.DefaultAuthFlowId
	}
	return ""
}

func (x *CustomerConfig) GetDefaultEmailServiceId() string {
	if x != nil {
		return x.DefaultEmailServiceId
	}
	return ""
}

type ApplicationSpaceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultTenantId       string                `protobuf:"bytes,1,opt,name=default_tenant_id,json=defaultTenantId,proto3" json:"default_tenant_id,omitempty"`
	DefaultAuthFlowId     string                `protobuf:"bytes,2,opt,name=default_auth_flow_id,json=defaultAuthFlowId,proto3" json:"default_auth_flow_id,omitempty"`
	DefaultEmailServiceId string                `protobuf:"bytes,3,opt,name=default_email_service_id,json=defaultEmailServiceId,proto3" json:"default_email_service_id,omitempty"`
	UsernamePolicy        *UsernamePolicyConfig `protobuf:"bytes,4,opt,name=username_policy,json=usernamePolicy,proto3" json:"username_policy,omitempty"`
}

func (x *ApplicationSpaceConfig) Reset() {
	*x = ApplicationSpaceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationSpaceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSpaceConfig) ProtoMessage() {}

func (x *ApplicationSpaceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSpaceConfig.ProtoReflect.Descriptor instead.
func (*ApplicationSpaceConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{7}
}

func (x *ApplicationSpaceConfig) GetDefaultTenantId() string {
	if x != nil {
		return x.DefaultTenantId
	}
	return ""
}

func (x *ApplicationSpaceConfig) GetDefaultAuthFlowId() string {
	if x != nil {
		return x.DefaultAuthFlowId
	}
	return ""
}

func (x *ApplicationSpaceConfig) GetDefaultEmailServiceId() string {
	if x != nil {
		return x.DefaultEmailServiceId
	}
	return ""
}

func (x *ApplicationSpaceConfig) GetUsernamePolicy() *UsernamePolicyConfig {
	if x != nil {
		return x.UsernamePolicy
	}
	return nil
}

type TenantConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultAuthFlowId     string                `protobuf:"bytes,1,opt,name=default_auth_flow_id,json=defaultAuthFlowId,proto3" json:"default_auth_flow_id,omitempty"`
	DefaultEmailServiceId string                `protobuf:"bytes,2,opt,name=default_email_service_id,json=defaultEmailServiceId,proto3" json:"default_email_service_id,omitempty"`
	UsernamePolicy        *UsernamePolicyConfig `protobuf:"bytes,3,opt,name=username_policy,json=usernamePolicy,proto3" json:"username_policy,omitempty"`
}

func (x *TenantConfig) Reset() {
	*x = TenantConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantConfig) ProtoMessage() {}

func (x *TenantConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantConfig.ProtoReflect.Descriptor instead.
func (*TenantConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{8}
}

func (x *TenantConfig) GetDefaultAuthFlowId() string {
	if x != nil {
		return x.DefaultAuthFlowId
	}
	return ""
}

func (x *TenantConfig) GetDefaultEmailServiceId() string {
	if x != nil {
		return x.DefaultEmailServiceId
	}
	return ""
}

func (x *TenantConfig) GetUsernamePolicy() *UsernamePolicyConfig {
	if x != nil {
		return x.UsernamePolicy
	}
	return nil
}

type UsernamePolicyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedUsernameFormats []string             `protobuf:"bytes,1,rep,name=allowed_username_formats,json=allowedUsernameFormats,proto3" json:"allowed_username_formats,omitempty"`
	ValidEmail             bool                 `protobuf:"varint,2,opt,name=valid_email,json=validEmail,proto3" json:"valid_email,omitempty"`
	VerifyEmail            bool                 `protobuf:"varint,3,opt,name=verify_email,json=verifyEmail,proto3" json:"verify_email,omitempty"`
	VerifyEmailGracePeriod *durationpb.Duration `protobuf:"bytes,4,opt,name=verify_email_grace_period,json=verifyEmailGracePeriod,proto3" json:"verify_email_grace_period,omitempty"`
	AllowedEmailDomains    []string             `protobuf:"bytes,5,rep,name=allowed_email_domains,json=allowedEmailDomains,proto3" json:"allowed_email_domains,omitempty"`
	ExclusiveEmailDomains  []string             `protobuf:"bytes,6,rep,name=exclusive_email_domains,json=exclusiveEmailDomains,proto3" json:"exclusive_email_domains,omitempty"`
}

func (x *UsernamePolicyConfig) Reset() {
	*x = UsernamePolicyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernamePolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernamePolicyConfig) ProtoMessage() {}

func (x *UsernamePolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernamePolicyConfig.ProtoReflect.Descriptor instead.
func (*UsernamePolicyConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{9}
}

func (x *UsernamePolicyConfig) GetAllowedUsernameFormats() []string {
	if x != nil {
		return x.AllowedUsernameFormats
	}
	return nil
}

func (x *UsernamePolicyConfig) GetValidEmail() bool {
	if x != nil {
		return x.ValidEmail
	}
	return false
}

func (x *UsernamePolicyConfig) GetVerifyEmail() bool {
	if x != nil {
		return x.VerifyEmail
	}
	return false
}

func (x *UsernamePolicyConfig) GetVerifyEmailGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.VerifyEmailGracePeriod
	}
	return nil
}

func (x *UsernamePolicyConfig) GetAllowedEmailDomains() []string {
	if x != nil {
		return x.AllowedEmailDomains
	}
	return nil
}

func (x *UsernamePolicyConfig) GetExclusiveEmailDomains() []string {
	if x != nil {
		return x.ExclusiveEmailDomains
	}
	return nil
}

type ApplicationAgentCredentialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kid string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"`
	// KeyFormat specify in which format the public key was provided.
	// Could by empty, if no public key was provided.
	KeyFormat   string                 `protobuf:"bytes,2,opt,name=key_format,json=keyFormat,proto3" json:"key_format,omitempty"`
	OriginalKid string                 `protobuf:"bytes,3,opt,name=original_kid,json=originalKid,proto3" json:"original_kid,omitempty"`
	ExpireTime  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *ApplicationAgentCredentialConfig) Reset() {
	*x = ApplicationAgentCredentialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationAgentCredentialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationAgentCredentialConfig) ProtoMessage() {}

func (x *ApplicationAgentCredentialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationAgentCredentialConfig.ProtoReflect.Descriptor instead.
func (*ApplicationAgentCredentialConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{10}
}

func (x *ApplicationAgentCredentialConfig) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *ApplicationAgentCredentialConfig) GetKeyFormat() string {
	if x != nil {
		return x.KeyFormat
	}
	return ""
}

func (x *ApplicationAgentCredentialConfig) GetOriginalKid() string {
	if x != nil {
		return x.OriginalKid
	}
	return ""
}

func (x *ApplicationAgentCredentialConfig) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

type ServiceAccountCredentialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kid string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"`
	// KeyFormat specify in which format the public key was provided.
	// Could by empty, if no public key was provided.
	KeyFormat   string                 `protobuf:"bytes,2,opt,name=key_format,json=keyFormat,proto3" json:"key_format,omitempty"`
	OriginalKid string                 `protobuf:"bytes,3,opt,name=original_kid,json=originalKid,proto3" json:"original_kid,omitempty"`
	ExpireTime  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *ServiceAccountCredentialConfig) Reset() {
	*x = ServiceAccountCredentialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccountCredentialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccountCredentialConfig) ProtoMessage() {}

func (x *ServiceAccountCredentialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccountCredentialConfig.ProtoReflect.Descriptor instead.
func (*ServiceAccountCredentialConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{11}
}

func (x *ServiceAccountCredentialConfig) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *ServiceAccountCredentialConfig) GetKeyFormat() string {
	if x != nil {
		return x.KeyFormat
	}
	return ""
}

func (x *ServiceAccountCredentialConfig) GetOriginalKid() string {
	if x != nil {
		return x.OriginalKid
	}
	return ""
}

func (x *ServiceAccountCredentialConfig) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

type AuthFlowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFormat AuthFlowConfig_Format `protobuf:"varint,1,opt,name=source_format,json=sourceFormat,proto3,enum=indykite.auditsink.v1beta1.AuthFlowConfig_Format" json:"source_format,omitempty"`
	// Source of AuthFlow definition.
	// During Write, developer can send only JSON or YAML and must set appropriate format in source_format field.
	//
	// When reading, format is always specified by source_format field. However, also Rich JSON might be returned.
	// This situation happen, when AuthFlow was designed via Drag'n'Drop tool in Console UI.
	Source []byte `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *AuthFlowConfig) Reset() {
	*x = AuthFlowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthFlowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFlowConfig) ProtoMessage() {}

func (x *AuthFlowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFlowConfig.ProtoReflect.Descriptor instead.
func (*AuthFlowConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{12}
}

func (x *AuthFlowConfig) GetSourceFormat() AuthFlowConfig_Format {
	if x != nil {
		return x.SourceFormat
	}
	return AuthFlowConfig_FORMAT_INVALID
}

func (x *AuthFlowConfig) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

type EmailServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultFromAddress *Email `protobuf:"bytes,1,opt,name=default_from_address,json=defaultFromAddress,proto3" json:"default_from_address,omitempty"`
	// Types that are assignable to Provider:
	//
	//	*EmailServiceConfig_Sendgrid
	//	*EmailServiceConfig_Amazon
	Provider               isEmailServiceConfig_Provider `protobuf_oneof:"provider"`
	InvitationMessage      *EmailDefinition              `protobuf:"bytes,4,opt,name=invitation_message,json=invitationMessage,proto3" json:"invitation_message,omitempty"`
	ResetPasswordMessage   *EmailDefinition              `protobuf:"bytes,5,opt,name=reset_password_message,json=resetPasswordMessage,proto3" json:"reset_password_message,omitempty"`
	VerificationMessage    *EmailDefinition              `protobuf:"bytes,6,opt,name=verification_message,json=verificationMessage,proto3" json:"verification_message,omitempty"`
	OneTimePasswordMessage *EmailDefinition              `protobuf:"bytes,7,opt,name=one_time_password_message,json=oneTimePasswordMessage,proto3" json:"one_time_password_message,omitempty"`
}

func (x *EmailServiceConfig) Reset() {
	*x = EmailServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailServiceConfig) ProtoMessage() {}

func (x *EmailServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailServiceConfig.ProtoReflect.Descriptor instead.
func (*EmailServiceConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{13}
}

func (x *EmailServiceConfig) GetDefaultFromAddress() *Email {
	if x != nil {
		return x.DefaultFromAddress
	}
	return nil
}

func (m *EmailServiceConfig) GetProvider() isEmailServiceConfig_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *EmailServiceConfig) GetSendgrid() *SendGridProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Sendgrid); ok {
		return x.Sendgrid
	}
	return nil
}

func (x *EmailServiceConfig) GetAmazon() *AmazonSESProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Amazon); ok {
		return x.Amazon
	}
	return nil
}

func (x *EmailServiceConfig) GetInvitationMessage() *EmailDefinition {
	if x != nil {
		return x.InvitationMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetResetPasswordMessage() *EmailDefinition {
	if x != nil {
		return x.ResetPasswordMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetVerificationMessage() *EmailDefinition {
	if x != nil {
		return x.VerificationMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetOneTimePasswordMessage() *EmailDefinition {
	if x != nil {
		return x.OneTimePasswordMessage
	}
	return nil
}

type isEmailServiceConfig_Provider interface {
	isEmailServiceConfig_Provider()
}

type EmailServiceConfig_Sendgrid struct {
	Sendgrid *SendGridProviderConfig `protobuf:"bytes,2,opt,name=sendgrid,proto3,oneof"`
}

type EmailServiceConfig_Amazon struct {
	Amazon *AmazonSESProviderConfig `protobuf:"bytes,3,opt,name=amazon,proto3,oneof"`
}

func (*EmailServiceConfig_Sendgrid) isEmailServiceConfig_Provider() {}

func (*EmailServiceConfig_Amazon) isEmailServiceConfig_Provider() {}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{14}
}

func (x *Email) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Email) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SendGridProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey      string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	SandboxMode bool   `protobuf:"varint,2,opt,name=sandbox_mode,json=sandboxMode,proto3" json:"sandbox_mode,omitempty"`
	IpPoolName  string `protobuf:"bytes,3,opt,name=ip_pool_name,json=ipPoolName,proto3" json:"ip_pool_name,omitempty"`
	Host        string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *SendGridProviderConfig) Reset() {
	*x = SendGridProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGridProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGridProviderConfig) ProtoMessage() {}

func (x *SendGridProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGridProviderConfig.ProtoReflect.Descriptor instead.
func (*SendGridProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{15}
}

func (x *SendGridProviderConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *SendGridProviderConfig) GetSandboxMode() bool {
	if x != nil {
		return x.SandboxMode
	}
	return false
}

func (x *SendGridProviderConfig) GetIpPoolName() string {
	if x != nil {
		return x.IpPoolName
	}
	return ""
}

func (x *SendGridProviderConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type AmazonSESProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId                    string   `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey                string   `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	Region                         string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	ConfigurationSetName           string   `protobuf:"bytes,4,opt,name=configuration_set_name,json=configurationSetName,proto3" json:"configuration_set_name,omitempty"`
	DefaultFromAddress             *Email   `protobuf:"bytes,5,opt,name=default_from_address,json=defaultFromAddress,proto3" json:"default_from_address,omitempty"`
	FeedbackForwardingEmailAddress string   `protobuf:"bytes,6,opt,name=feedback_forwarding_email_address,json=feedbackForwardingEmailAddress,proto3" json:"feedback_forwarding_email_address,omitempty"`
	ReplyToAddresses               []string `protobuf:"bytes,7,rep,name=reply_to_addresses,json=replyToAddresses,proto3" json:"reply_to_addresses,omitempty"`
}

func (x *AmazonSESProviderConfig) Reset() {
	*x = AmazonSESProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmazonSESProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmazonSESProviderConfig) ProtoMessage() {}

func (x *AmazonSESProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmazonSESProviderConfig.ProtoReflect.Descriptor instead.
func (*AmazonSESProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{16}
}

func (x *AmazonSESProviderConfig) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetConfigurationSetName() string {
	if x != nil {
		return x.ConfigurationSetName
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetDefaultFromAddress() *Email {
	if x != nil {
		return x.DefaultFromAddress
	}
	return nil
}

func (x *AmazonSESProviderConfig) GetFeedbackForwardingEmailAddress() string {
	if x != nil {
		return x.FeedbackForwardingEmailAddress
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetReplyToAddresses() []string {
	if x != nil {
		return x.ReplyToAddresses
	}
	return nil
}

type EmailDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Email:
	//
	//	*EmailDefinition_Template
	Email isEmailDefinition_Email `protobuf_oneof:"email"`
}

func (x *EmailDefinition) Reset() {
	*x = EmailDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailDefinition) ProtoMessage() {}

func (x *EmailDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailDefinition.ProtoReflect.Descriptor instead.
func (*EmailDefinition) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{17}
}

func (m *EmailDefinition) GetEmail() isEmailDefinition_Email {
	if m != nil {
		return m.Email
	}
	return nil
}

func (x *EmailDefinition) GetTemplate() *EmailTemplate {
	if x, ok := x.GetEmail().(*EmailDefinition_Template); ok {
		return x.Template
	}
	return nil
}

type isEmailDefinition_Email interface {
	isEmailDefinition_Email()
}

type EmailDefinition_Template struct {
	Template *EmailTemplate `protobuf:"bytes,1,opt,name=template,proto3,oneof"` // EmailMessage message = 2; // Not supported yet on BE
}

func (*EmailDefinition_Template) isEmailDefinition_Email() {}

type EmailTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId            string                     `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateVersion       string                     `protobuf:"bytes,2,opt,name=template_version,json=templateVersion,proto3" json:"template_version,omitempty"`
	From                  *Email                     `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	ReplyTo               *Email                     `protobuf:"bytes,4,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	To                    []*Email                   `protobuf:"bytes,5,rep,name=to,proto3" json:"to,omitempty"`
	Cc                    []*Email                   `protobuf:"bytes,6,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc                   []*Email                   `protobuf:"bytes,7,rep,name=bcc,proto3" json:"bcc,omitempty"`
	Subject               string                     `protobuf:"bytes,8,opt,name=subject,proto3" json:"subject,omitempty"`
	Headers               map[string]string          `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomArgs            map[string]string          `protobuf:"bytes,10,rep,name=custom_args,json=customArgs,proto3" json:"custom_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DynamicTemplateValues map[string]*v1beta11.Value `protobuf:"bytes,11,rep,name=dynamic_template_values,json=dynamicTemplateValues,proto3" json:"dynamic_template_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Categories            []string                   `protobuf:"bytes,12,rep,name=categories,proto3" json:"categories,omitempty"`
	Attachments           []*EmailAttachment         `protobuf:"bytes,13,rep,name=attachments,proto3" json:"attachments,omitempty"`
	EventPayload          string                     `protobuf:"bytes,14,opt,name=event_payload,json=eventPayload,proto3" json:"event_payload,omitempty"`
	// The Amazon Resource Name (ARN) of the template.
	TemplateArn string `protobuf:"bytes,15,opt,name=template_arn,json=templateArn,proto3" json:"template_arn,omitempty"`
}

func (x *EmailTemplate) Reset() {
	*x = EmailTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailTemplate) ProtoMessage() {}

func (x *EmailTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailTemplate.ProtoReflect.Descriptor instead.
func (*EmailTemplate) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{18}
}

func (x *EmailTemplate) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *EmailTemplate) GetTemplateVersion() string {
	if x != nil {
		return x.TemplateVersion
	}
	return ""
}

func (x *EmailTemplate) GetFrom() *Email {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EmailTemplate) GetReplyTo() *Email {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *EmailTemplate) GetTo() []*Email {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EmailTemplate) GetCc() []*Email {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *EmailTemplate) GetBcc() []*Email {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *EmailTemplate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailTemplate) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *EmailTemplate) GetCustomArgs() map[string]string {
	if x != nil {
		return x.CustomArgs
	}
	return nil
}

func (x *EmailTemplate) GetDynamicTemplateValues() map[string]*v1beta11.Value {
	if x != nil {
		return x.DynamicTemplateValues
	}
	return nil
}

func (x *EmailTemplate) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *EmailTemplate) GetAttachments() []*EmailAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *EmailTemplate) GetEventPayload() string {
	if x != nil {
		return x.EventPayload
	}
	return ""
}

func (x *EmailTemplate) GetTemplateArn() string {
	if x != nil {
		return x.TemplateArn
	}
	return ""
}

type EmailAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType string `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentId   string `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Inline      bool   `protobuf:"varint,3,opt,name=inline,proto3" json:"inline,omitempty"`
	FileName    string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Content     []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EmailAttachment) Reset() {
	*x = EmailAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAttachment) ProtoMessage() {}

func (x *EmailAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAttachment.ProtoReflect.Descriptor instead.
func (*EmailAttachment) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{19}
}

func (x *EmailAttachment) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *EmailAttachment) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *EmailAttachment) GetInline() bool {
	if x != nil {
		return x.Inline
	}
	return false
}

func (x *EmailAttachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *EmailAttachment) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type AuditSinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Provider:
	//
	//	*AuditSinkConfig_Kafka_
	Provider isAuditSinkConfig_Provider `protobuf_oneof:"provider"`
}

func (x *AuditSinkConfig) Reset() {
	*x = AuditSinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditSinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditSinkConfig) ProtoMessage() {}

func (x *AuditSinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditSinkConfig.ProtoReflect.Descriptor instead.
func (*AuditSinkConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{20}
}

func (m *AuditSinkConfig) GetProvider() isAuditSinkConfig_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *AuditSinkConfig) GetKafka() *AuditSinkConfig_Kafka {
	if x, ok := x.GetProvider().(*AuditSinkConfig_Kafka_); ok {
		return x.Kafka
	}
	return nil
}

type isAuditSinkConfig_Provider interface {
	isAuditSinkConfig_Provider()
}

type AuditSinkConfig_Kafka_ struct {
	Kafka *AuditSinkConfig_Kafka `protobuf:"bytes,1,opt,name=kafka,proto3,oneof"`
}

func (*AuditSinkConfig_Kafka_) isAuditSinkConfig_Provider() {}

type OAuth2ClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType          OAuth2ClientConfig_ProviderType `protobuf:"varint,1,opt,name=provider_type,json=providerType,proto3,enum=indykite.auditsink.v1beta1.OAuth2ClientConfig_ProviderType" json:"provider_type,omitempty"`
	ClientId              string                          `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret          string                          `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	RedirectUri           []string                        `protobuf:"bytes,4,rep,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	DefaultScopes         []string                        `protobuf:"bytes,17,rep,name=default_scopes,json=defaultScopes,proto3" json:"default_scopes,omitempty"`
	AllowedScopes         []string                        `protobuf:"bytes,19,rep,name=allowed_scopes,json=allowedScopes,proto3" json:"allowed_scopes,omitempty"`
	AllowSignup           bool                            `protobuf:"varint,8,opt,name=allow_signup,json=allowSignup,proto3" json:"allow_signup,omitempty"`
	Issuer                string                          `protobuf:"bytes,9,opt,name=issuer,proto3" json:"issuer,omitempty"`
	AuthorizationEndpoint string                          `protobuf:"bytes,10,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	TokenEndpoint         string                          `protobuf:"bytes,11,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	DiscoveryUrl          string                          `protobuf:"bytes,16,opt,name=discovery_url,json=discoveryUrl,proto3" json:"discovery_url,omitempty"`
	UserinfoEndpoint      string                          `protobuf:"bytes,12,opt,name=userinfo_endpoint,json=userinfoEndpoint,proto3" json:"userinfo_endpoint,omitempty"`
	JwksUri               string                          `protobuf:"bytes,13,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	ImageUrl              string                          `protobuf:"bytes,14,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Tenant                string                          `protobuf:"bytes,15,opt,name=tenant,proto3" json:"tenant,omitempty"`
	HostedDomain          string                          `protobuf:"bytes,18,opt,name=hosted_domain,json=hostedDomain,proto3" json:"hosted_domain,omitempty"`
	AuthStyle             OAuth2ClientConfig_AuthStyle    `protobuf:"varint,20,opt,name=auth_style,json=authStyle,proto3,enum=indykite.auditsink.v1beta1.OAuth2ClientConfig_AuthStyle" json:"auth_style,omitempty"`
	// Required for Apple as provider. This will be masked, so it is string.
	PrivateKeyPem string `protobuf:"bytes,21,opt,name=private_key_pem,json=privateKeyPem,proto3" json:"private_key_pem,omitempty"`
	// Required for Apple as provider.
	PrivateKeyId string `protobuf:"bytes,22,opt,name=private_key_id,json=privateKeyId,proto3" json:"private_key_id,omitempty"`
	// Required for Apple as provider.
	TeamId string `protobuf:"bytes,23,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *OAuth2ClientConfig) Reset() {
	*x = OAuth2ClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ClientConfig) ProtoMessage() {}

func (x *OAuth2ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ClientConfig.ProtoReflect.Descriptor instead.
func (*OAuth2ClientConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{21}
}

func (x *OAuth2ClientConfig) GetProviderType() OAuth2ClientConfig_ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return OAuth2ClientConfig_PROVIDER_TYPE_INVALID
}

func (x *OAuth2ClientConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OAuth2ClientConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OAuth2ClientConfig) GetRedirectUri() []string {
	if x != nil {
		return x.RedirectUri
	}
	return nil
}

func (x *OAuth2ClientConfig) GetDefaultScopes() []string {
	if x != nil {
		return x.DefaultScopes
	}
	return nil
}

func (x *OAuth2ClientConfig) GetAllowedScopes() []string {
	if x != nil {
		return x.AllowedScopes
	}
	return nil
}

func (x *OAuth2ClientConfig) GetAllowSignup() bool {
	if x != nil {
		return x.AllowSignup
	}
	return false
}

func (x *OAuth2ClientConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *OAuth2ClientConfig) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *OAuth2ClientConfig) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *OAuth2ClientConfig) GetDiscoveryUrl() string {
	if x != nil {
		return x.DiscoveryUrl
	}
	return ""
}

func (x *OAuth2ClientConfig) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *OAuth2ClientConfig) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *OAuth2ClientConfig) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *OAuth2ClientConfig) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *OAuth2ClientConfig) GetHostedDomain() string {
	if x != nil {
		return x.HostedDomain
	}
	return ""
}

func (x *OAuth2ClientConfig) GetAuthStyle() OAuth2ClientConfig_AuthStyle {
	if x != nil {
		return x.AuthStyle
	}
	return OAuth2ClientConfig_AUTH_STYLE_INVALID
}

func (x *OAuth2ClientConfig) GetPrivateKeyPem() string {
	if x != nil {
		return x.PrivateKeyPem
	}
	return ""
}

func (x *OAuth2ClientConfig) GetPrivateKeyId() string {
	if x != nil {
		return x.PrivateKeyId
	}
	return ""
}

func (x *OAuth2ClientConfig) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type OAuth2ProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantTypes                  []OAuth2GrantType               `protobuf:"varint,1,rep,packed,name=grant_types,json=grantTypes,proto3,enum=indykite.auditsink.v1beta1.OAuth2GrantType" json:"grant_types,omitempty"`
	ResponseTypes               []OAuth2ResponseType            `protobuf:"varint,2,rep,packed,name=response_types,json=responseTypes,proto3,enum=indykite.auditsink.v1beta1.OAuth2ResponseType" json:"response_types,omitempty"`
	Scopes                      []string                        `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	TokenEndpointAuthMethod     []OAuth2TokenEndpointAuthMethod `protobuf:"varint,4,rep,packed,name=token_endpoint_auth_method,json=tokenEndpointAuthMethod,proto3,enum=indykite.auditsink.v1beta1.OAuth2TokenEndpointAuthMethod" json:"token_endpoint_auth_method,omitempty"`
	TokenEndpointAuthSigningAlg []string                        `protobuf:"bytes,5,rep,name=token_endpoint_auth_signing_alg,json=tokenEndpointAuthSigningAlg,proto3" json:"token_endpoint_auth_signing_alg,omitempty"`
	RequestUris                 []string                        `protobuf:"bytes,6,rep,name=request_uris,json=requestUris,proto3" json:"request_uris,omitempty"`
	RequestObjectSigningAlg     string                          `protobuf:"bytes,7,opt,name=request_object_signing_alg,json=requestObjectSigningAlg,proto3" json:"request_object_signing_alg,omitempty"`
	FrontChannelLoginUri        map[string]string               `protobuf:"bytes,8,rep,name=front_channel_login_uri,json=frontChannelLoginUri,proto3" json:"front_channel_login_uri,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FrontChannelConsentUri      map[string]string               `protobuf:"bytes,9,rep,name=front_channel_consent_uri,json=frontChannelConsentUri,proto3" json:"front_channel_consent_uri,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OAuth2ProviderConfig) Reset() {
	*x = OAuth2ProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2ProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ProviderConfig) ProtoMessage() {}

func (x *OAuth2ProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ProviderConfig.ProtoReflect.Descriptor instead.
func (*OAuth2ProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{22}
}

func (x *OAuth2ProviderConfig) GetGrantTypes() []OAuth2GrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetResponseTypes() []OAuth2ResponseType {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetTokenEndpointAuthMethod() []OAuth2TokenEndpointAuthMethod {
	if x != nil {
		return x.TokenEndpointAuthMethod
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetTokenEndpointAuthSigningAlg() []string {
	if x != nil {
		return x.TokenEndpointAuthSigningAlg
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetRequestUris() []string {
	if x != nil {
		return x.RequestUris
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetRequestObjectSigningAlg() string {
	if x != nil {
		return x.RequestObjectSigningAlg
	}
	return ""
}

func (x *OAuth2ProviderConfig) GetFrontChannelLoginUri() map[string]string {
	if x != nil {
		return x.FrontChannelLoginUri
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetFrontChannelConsentUri() map[string]string {
	if x != nil {
		return x.FrontChannelConsentUri
	}
	return nil
}

type OAuth2ApplicationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// DisplayName is a human readable name to show in consent page etc.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description to show in consent page etc.
	Description                 string                                    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	RedirectUris                []string                                  `protobuf:"bytes,5,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	Owner                       string                                    `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	PolicyUri                   string                                    `protobuf:"bytes,7,opt,name=policy_uri,json=policyUri,proto3" json:"policy_uri,omitempty"`
	AllowedCorsOrigins          []string                                  `protobuf:"bytes,8,rep,name=allowed_cors_origins,json=allowedCorsOrigins,proto3" json:"allowed_cors_origins,omitempty"`
	TermsOfServiceUri           string                                    `protobuf:"bytes,9,opt,name=terms_of_service_uri,json=termsOfServiceUri,proto3" json:"terms_of_service_uri,omitempty"`
	ClientUri                   string                                    `protobuf:"bytes,10,opt,name=client_uri,json=clientUri,proto3" json:"client_uri,omitempty"`
	LogoUri                     string                                    `protobuf:"bytes,11,opt,name=logo_uri,json=logoUri,proto3" json:"logo_uri,omitempty"`
	UserSupportEmailAddress     string                                    `protobuf:"bytes,12,opt,name=user_support_email_address,json=userSupportEmailAddress,proto3" json:"user_support_email_address,omitempty"`
	AdditionalContacts          []string                                  `protobuf:"bytes,13,rep,name=additional_contacts,json=additionalContacts,proto3" json:"additional_contacts,omitempty"`
	SubjectType                 OAuth2ApplicationConfig_ClientSubjectType `protobuf:"varint,14,opt,name=subject_type,json=subjectType,proto3,enum=indykite.auditsink.v1beta1.OAuth2ApplicationConfig_ClientSubjectType" json:"subject_type,omitempty"`
	SectorIdentifierUri         string                                    `protobuf:"bytes,15,opt,name=sector_identifier_uri,json=sectorIdentifierUri,proto3" json:"sector_identifier_uri,omitempty"`
	GrantTypes                  []OAuth2GrantType                         `protobuf:"varint,16,rep,packed,name=grant_types,json=grantTypes,proto3,enum=indykite.auditsink.v1beta1.OAuth2GrantType" json:"grant_types,omitempty"`
	ResponseTypes               []OAuth2ResponseType                      `protobuf:"varint,17,rep,packed,name=response_types,json=responseTypes,proto3,enum=indykite.auditsink.v1beta1.OAuth2ResponseType" json:"response_types,omitempty"`
	Scopes                      []string                                  `protobuf:"bytes,18,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Audiences                   []string                                  `protobuf:"bytes,19,rep,name=audiences,proto3" json:"audiences,omitempty"`
	TokenEndpointAuthMethod     OAuth2TokenEndpointAuthMethod             `protobuf:"varint,20,opt,name=token_endpoint_auth_method,json=tokenEndpointAuthMethod,proto3,enum=indykite.auditsink.v1beta1.OAuth2TokenEndpointAuthMethod" json:"token_endpoint_auth_method,omitempty"`
	TokenEndpointAuthSigningAlg string                                    `protobuf:"bytes,21,opt,name=token_endpoint_auth_signing_alg,json=tokenEndpointAuthSigningAlg,proto3" json:"token_endpoint_auth_signing_alg,omitempty"`
	UserinfoSignedResponseAlg   string                                    `protobuf:"bytes,22,opt,name=userinfo_signed_response_alg,json=userinfoSignedResponseAlg,proto3" json:"userinfo_signed_response_alg,omitempty"`
	Trusted                     bool                                      `protobuf:"varint,23,opt,name=trusted,proto3" json:"trusted,omitempty"`
}

func (x *OAuth2ApplicationConfig) Reset() {
	*x = OAuth2ApplicationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2ApplicationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ApplicationConfig) ProtoMessage() {}

func (x *OAuth2ApplicationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ApplicationConfig.ProtoReflect.Descriptor instead.
func (*OAuth2ApplicationConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{23}
}

func (x *OAuth2ApplicationConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetRedirectUris() []string {
	if x != nil {
		return x.RedirectUris
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetPolicyUri() string {
	if x != nil {
		return x.PolicyUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetAllowedCorsOrigins() []string {
	if x != nil {
		return x.AllowedCorsOrigins
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetTermsOfServiceUri() string {
	if x != nil {
		return x.TermsOfServiceUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetClientUri() string {
	if x != nil {
		return x.ClientUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetLogoUri() string {
	if x != nil {
		return x.LogoUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetUserSupportEmailAddress() string {
	if x != nil {
		return x.UserSupportEmailAddress
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetAdditionalContacts() []string {
	if x != nil {
		return x.AdditionalContacts
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetSubjectType() OAuth2ApplicationConfig_ClientSubjectType {
	if x != nil {
		return x.SubjectType
	}
	return OAuth2ApplicationConfig_CLIENT_SUBJECT_TYPE_INVALID
}

func (x *OAuth2ApplicationConfig) GetSectorIdentifierUri() string {
	if x != nil {
		return x.SectorIdentifierUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetGrantTypes() []OAuth2GrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetResponseTypes() []OAuth2ResponseType {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetTokenEndpointAuthMethod() OAuth2TokenEndpointAuthMethod {
	if x != nil {
		return x.TokenEndpointAuthMethod
	}
	return OAuth2TokenEndpointAuthMethod_O_AUTH2_TOKEN_ENDPOINT_AUTH_METHOD_INVALID
}

func (x *OAuth2ApplicationConfig) GetTokenEndpointAuthSigningAlg() string {
	if x != nil {
		return x.TokenEndpointAuthSigningAlg
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetUserinfoSignedResponseAlg() string {
	if x != nil {
		return x.UserinfoSignedResponseAlg
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetTrusted() bool {
	if x != nil {
		return x.Trusted
	}
	return false
}

type WebAuthnProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelyingParties          map[string]string                                  `protobuf:"bytes,1,rep,name=relying_parties,json=relyingParties,proto3" json:"relying_parties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AttestationPreference   WebAuthnProviderConfig_ConveyancePreference        `protobuf:"varint,2,opt,name=attestation_preference,json=attestationPreference,proto3,enum=indykite.auditsink.v1beta1.WebAuthnProviderConfig_ConveyancePreference" json:"attestation_preference,omitempty"`
	AuthenticatorAttachment WebAuthnProviderConfig_AuthenticatorAttachment     `protobuf:"varint,3,opt,name=authenticator_attachment,json=authenticatorAttachment,proto3,enum=indykite.auditsink.v1beta1.WebAuthnProviderConfig_AuthenticatorAttachment" json:"authenticator_attachment,omitempty"`
	RequireResidentKey      bool                                               `protobuf:"varint,7,opt,name=require_resident_key,json=requireResidentKey,proto3" json:"require_resident_key,omitempty"`
	UserVerification        WebAuthnProviderConfig_UserVerificationRequirement `protobuf:"varint,4,opt,name=user_verification,json=userVerification,proto3,enum=indykite.auditsink.v1beta1.WebAuthnProviderConfig_UserVerificationRequirement" json:"user_verification,omitempty"`
	// specifies a time, in milliseconds
	RegistrationTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=registration_timeout,json=registrationTimeout,proto3" json:"registration_timeout,omitempty"`
	// specifies a time, in milliseconds
	AuthenticationTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=authentication_timeout,json=authenticationTimeout,proto3" json:"authentication_timeout,omitempty"`
}

func (x *WebAuthnProviderConfig) Reset() {
	*x = WebAuthnProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAuthnProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAuthnProviderConfig) ProtoMessage() {}

func (x *WebAuthnProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAuthnProviderConfig.ProtoReflect.Descriptor instead.
func (*WebAuthnProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{24}
}

func (x *WebAuthnProviderConfig) GetRelyingParties() map[string]string {
	if x != nil {
		return x.RelyingParties
	}
	return nil
}

func (x *WebAuthnProviderConfig) GetAttestationPreference() WebAuthnProviderConfig_ConveyancePreference {
	if x != nil {
		return x.AttestationPreference
	}
	return WebAuthnProviderConfig_CONVEYANCE_PREFERENCE_INVALID
}

func (x *WebAuthnProviderConfig) GetAuthenticatorAttachment() WebAuthnProviderConfig_AuthenticatorAttachment {
	if x != nil {
		return x.AuthenticatorAttachment
	}
	return WebAuthnProviderConfig_AUTHENTICATOR_ATTACHMENT_INVALID
}

func (x *WebAuthnProviderConfig) GetRequireResidentKey() bool {
	if x != nil {
		return x.RequireResidentKey
	}
	return false
}

func (x *WebAuthnProviderConfig) GetUserVerification() WebAuthnProviderConfig_UserVerificationRequirement {
	if x != nil {
		return x.UserVerification
	}
	return WebAuthnProviderConfig_USER_VERIFICATION_REQUIREMENT_INVALID
}

func (x *WebAuthnProviderConfig) GetRegistrationTimeout() *durationpb.Duration {
	if x != nil {
		return x.RegistrationTimeout
	}
	return nil
}

func (x *WebAuthnProviderConfig) GetAuthenticationTimeout() *durationpb.Duration {
	if x != nil {
		return x.AuthenticationTimeout
	}
	return nil
}

type AuthorizationPolicyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policy in JSON string format.
	Policy string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// Policy status.
	Status AuthorizationPolicyConfig_Status `protobuf:"varint,2,opt,name=status,proto3,enum=indykite.auditsink.v1beta1.AuthorizationPolicyConfig_Status" json:"status,omitempty"`
	// Optional policy tags
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AuthorizationPolicyConfig) Reset() {
	*x = AuthorizationPolicyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyConfig) ProtoMessage() {}

func (x *AuthorizationPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyConfig.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyConfig) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{25}
}

func (x *AuthorizationPolicyConfig) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *AuthorizationPolicyConfig) GetStatus() AuthorizationPolicyConfig_Status {
	if x != nil {
		return x.Status
	}
	return AuthorizationPolicyConfig_STATUS_INVALID
}

func (x *AuthorizationPolicyConfig) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AssignConfigPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TargetIdentifier is gid identifier of Service Account or DigitalTwin.
	TargetIdentifier string `protobuf:"bytes,1,opt,name=target_identifier,json=targetIdentifier,proto3" json:"target_identifier,omitempty"`
	// TargetType is type of TargetIdentifier.
	TargetType ConfigType `protobuf:"varint,2,opt,name=target_type,json=targetType,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"target_type,omitempty"`
	// Permission role id to be assigned.
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// CustomerId under which to assign permissions.
	CustomerId string `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Object to which Permission will be linked to. Can be Customer, AppSpace or Tenant.
	ObjectId string `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Object type is type of object_id.
	ObjectType ConfigType `protobuf:"varint,6,opt,name=object_type,json=objectType,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"object_type,omitempty"`
}

func (x *AssignConfigPermissions) Reset() {
	*x = AssignConfigPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignConfigPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignConfigPermissions) ProtoMessage() {}

func (x *AssignConfigPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignConfigPermissions.ProtoReflect.Descriptor instead.
func (*AssignConfigPermissions) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{26}
}

func (x *AssignConfigPermissions) GetTargetIdentifier() string {
	if x != nil {
		return x.TargetIdentifier
	}
	return ""
}

func (x *AssignConfigPermissions) GetTargetType() ConfigType {
	if x != nil {
		return x.TargetType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *AssignConfigPermissions) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *AssignConfigPermissions) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *AssignConfigPermissions) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *AssignConfigPermissions) GetObjectType() ConfigType {
	if x != nil {
		return x.ObjectType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

type RevokeConfigPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TargetIdentifier is gid identifier of Service Account or DigitalTwin.
	TargetIdentifier string `protobuf:"bytes,1,opt,name=target_identifier,json=targetIdentifier,proto3" json:"target_identifier,omitempty"`
	// TargetType is type of TargetIdentifier.
	TargetType ConfigType `protobuf:"varint,2,opt,name=target_type,json=targetType,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"target_type,omitempty"`
	// Permission role id to be assigned.
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// CustomerId under which to assign permissions.
	CustomerId string `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Object to which Permission will be linked to. Can be Customer, AppSpace or Tenant.
	ObjectId string `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Object type is type of object_id.
	ObjectType ConfigType `protobuf:"varint,6,opt,name=object_type,json=objectType,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"object_type,omitempty"`
}

func (x *RevokeConfigPermissions) Reset() {
	*x = RevokeConfigPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeConfigPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConfigPermissions) ProtoMessage() {}

func (x *RevokeConfigPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConfigPermissions.ProtoReflect.Descriptor instead.
func (*RevokeConfigPermissions) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{27}
}

func (x *RevokeConfigPermissions) GetTargetIdentifier() string {
	if x != nil {
		return x.TargetIdentifier
	}
	return ""
}

func (x *RevokeConfigPermissions) GetTargetType() ConfigType {
	if x != nil {
		return x.TargetType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *RevokeConfigPermissions) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RevokeConfigPermissions) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *RevokeConfigPermissions) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *RevokeConfigPermissions) GetObjectType() ConfigType {
	if x != nil {
		return x.ObjectType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

type CreatedConfig_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type ConfigType `protobuf:"varint,2,opt,name=type,proto3,enum=indykite.auditsink.v1beta1.ConfigType" json:"type,omitempty"`
}

func (x *CreatedConfig_Location) Reset() {
	*x = CreatedConfig_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedConfig_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedConfig_Location) ProtoMessage() {}

func (x *CreatedConfig_Location) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedConfig_Location.ProtoReflect.Descriptor instead.
func (*CreatedConfig_Location) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CreatedConfig_Location) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreatedConfig_Location) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

type ReadConfig_NameIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LocationId specify under which container the name search happen. Might be empty if searching customer.
	LocationId string `protobuf:"bytes,1,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// LocationType specify under which container type the name search happen. Might be empty if searching customer.
	LocationType *ConfigType `protobuf:"varint,2,opt,name=location_type,json=locationType,proto3,enum=indykite.auditsink.v1beta1.ConfigType,oneof" json:"location_type,omitempty"`
	Name         string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ReadConfig_NameIdentifier) Reset() {
	*x = ReadConfig_NameIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadConfig_NameIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConfig_NameIdentifier) ProtoMessage() {}

func (x *ReadConfig_NameIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConfig_NameIdentifier.ProtoReflect.Descriptor instead.
func (*ReadConfig_NameIdentifier) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ReadConfig_NameIdentifier) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *ReadConfig_NameIdentifier) GetLocationType() ConfigType {
	if x != nil && x.LocationType != nil {
		return *x.LocationType
	}
	return ConfigType_CONFIG_TYPE_INVALID
}

func (x *ReadConfig_NameIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AuditSinkConfig_Kafka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Brokers specify Kafka destinations to connect to.
	Brokers []string `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	// Topic name must be valid based on source code:
	// https://github.com/apache/kafka/blob/0.10.2/core/src/main/scala/kafka/common/Topic.scala#L29-L30
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// DisableTLS can force using non-secure connection.
	DisableTls bool `protobuf:"varint,3,opt,name=disable_tls,json=disableTls,proto3" json:"disable_tls,omitempty"`
	// TLSSkipVerify defines whenever not to verify TLS certificate. Ignored if TLS is disabled.
	TlsSkipVerify bool   `protobuf:"varint,4,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty"`
	Username      string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password      string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuditSinkConfig_Kafka) Reset() {
	*x = AuditSinkConfig_Kafka{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditSinkConfig_Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditSinkConfig_Kafka) ProtoMessage() {}

func (x *AuditSinkConfig_Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_auditsink_v1beta1_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditSinkConfig_Kafka.ProtoReflect.Descriptor instead.
func (*AuditSinkConfig_Kafka) Descriptor() ([]byte, []int) {
	return file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP(), []int{20, 0}
}

func (x *AuditSinkConfig_Kafka) GetBrokers() []string {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *AuditSinkConfig_Kafka) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *AuditSinkConfig_Kafka) GetDisableTls() bool {
	if x != nil {
		return x.DisableTls
	}
	return false
}

func (x *AuditSinkConfig_Kafka) GetTlsSkipVerify() bool {
	if x != nil {
		return x.TlsSkipVerify
	}
	return false
}

func (x *AuditSinkConfig_Kafka) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuditSinkConfig_Kafka) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_indykite_auditsink_v1beta1_config_proto protoreflect.FileDescriptor

var file_indykite_auditsink_v1beta1_config_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x25, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9a, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x56, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb2, 0x02, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40,
	0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x22, 0xb0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x22, 0xc3, 0x0c, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e,
	0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f,
	0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x80, 0x01, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x7a, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x56,
	0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x14, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x11, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x14, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x19, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74,
	0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x16, 0x77, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a, 0x1b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x19, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x16, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x56, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x0e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0xd3, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xd6, 0x02, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x54,
	0x0a, 0x19, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x22, 0xb3, 0x01, 0x0a, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4b, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4b, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x41,
	0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5e, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x52, 0x45, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x52, 0x45,
	0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x9d, 0x05,
	0x0a, 0x12, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x67, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x69,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x06, 0x61,
	0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x53,
	0x45, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x19, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x35, 0x0a,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x69,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x22, 0x85, 0x03, 0x0a, 0x17, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x53, 0x45, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x49, 0x0a, 0x21, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x0f, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xce,
	0x08, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x6f, 0x12, 0x31, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x02, 0x63, 0x63, 0x12, 0x33, 0x0a, 0x03, 0x62, 0x63, 0x63, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x62, 0x63, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x7c, 0x0a, 0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa2, 0x01, 0x0a, 0x0f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x1a, 0xb8, 0x01, 0x0a, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x6c, 0x73, 0x53, 0x6b, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xe5, 0x11, 0x0a, 0x12, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x60, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72, 0x69, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x57, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x65, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xa4, 0x0a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d, 0x41, 0x5a, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4d, 0x41, 0x5a, 0x4f, 0x4e, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x54, 0x4f, 0x5f,
	0x43, 0x4f, 0x4d, 0x10, 0x22, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x10, 0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x45, 0x51, 0x5f, 0x43, 0x4f,
	0x4d, 0x10, 0x21, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x10,
	0x26, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x10, 0x25, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x52,
	0x4e, 0x5f, 0x43, 0x48, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x27,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x49, 0x54, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x05, 0x12, 0x20,
	0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x4f, 0x55, 0x52, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x06,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x07, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x4b, 0x55, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x50, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x59, 0x4b, 0x49, 0x54,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x59, 0x4b, 0x49, 0x54, 0x45,
	0x5f, 0x4d, 0x45, 0x10, 0x24, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x47, 0x52, 0x41, 0x4d,
	0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x41, 0x4b, 0x41, 0x4f, 0x5f, 0x43, 0x4f,
	0x4d, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x49, 0x4e, 0x5f, 0x43, 0x4f,
	0x4d, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x43, 0x48, 0x49, 0x4d, 0x50, 0x5f, 0x43,
	0x4f, 0x4d, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x55, 0x10, 0x10, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x11,
	0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4d,
	0x41, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x10, 0x20, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54,
	0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4e,
	0x4f, 0x4b, 0x49, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x44, 0x4e, 0x4f,
	0x4b, 0x4c, 0x41, 0x53, 0x53, 0x4e, 0x49, 0x4b, 0x49, 0x5f, 0x52, 0x55, 0x10, 0x15, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x50, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x16, 0x12, 0x24, 0x0a, 0x20,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41,
	0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x50, 0x41, 0x59, 0x50, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d,
	0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x18, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x50, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x19, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f,
	0x4d, 0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x56, 0x10, 0x1b,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49,
	0x50, 0x50, 0x53, 0x5f, 0x4e, 0x4f, 0x10, 0x28, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4b, 0x5f, 0x43, 0x4f, 0x4d,
	0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x59, 0x41, 0x48, 0x4f, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1e, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x59, 0x41, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1f, 0x22, 0x73, 0x0a,
	0x09, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x10, 0x03, 0x22, 0x93, 0x07, 0x0a, 0x14, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0b, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x17, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x44, 0x0a, 0x1f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x69, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x87, 0x01, 0x0a, 0x19, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x55, 0x72, 0x69, 0x1a, 0x47, 0x0a, 0x19, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x69, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a,
	0x1b, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x09, 0x0a, 0x17, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x69,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x73,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x69, 0x12, 0x3b, 0x0a,
	0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x4c, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x17, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x1f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61,
	0x6c, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x6c, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x22, 0x76, 0x0a,
	0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x57,
	0x49, 0x53, 0x45, 0x10, 0x02, 0x22, 0xd4, 0x0a, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74,
	0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x6f, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x7e, 0x0a, 0x16, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x47, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57,
	0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x7b, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x50, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x59, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x59, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x59, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x59, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x03, 0x22, 0xb9, 0x01,
	0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x22, 0xd0, 0x01, 0x0a, 0x1b, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2d, 0x0a,
	0x29, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x55, 0x52, 0x41, 0x47, 0x45, 0x44, 0x10, 0x03, 0x22, 0xf5, 0x01, 0x0a,
	0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x56, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x03, 0x22, 0xaa, 0x02, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xaa, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xe0,
	0x05, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x12, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x57,
	0x49, 0x4e, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x07, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x08, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d,
	0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x10, 0x1b, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45,
	0x42, 0x41, 0x55, 0x54, 0x48, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x41, 0x46, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x10,
	0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x1d, 0x22,
	0x04, 0x08, 0x0e, 0x10, 0x0e, 0x22, 0x04, 0x08, 0x18, 0x10, 0x18, 0x22, 0x04, 0x08, 0x17, 0x10,
	0x17, 0x2a, 0xef, 0x01, 0x0a, 0x0f, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32,
	0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32,
	0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x47, 0x52, 0x41,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x47, 0x52,
	0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x24, 0x0a,
	0x20, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x10, 0x05, 0x2a, 0x9c, 0x01, 0x0a, 0x12, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x03, 0x2a, 0xab, 0x02, 0x0a, 0x1d, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x36, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x39, 0x0a, 0x35, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x43, 0x52, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x36, 0x0a, 0x32, 0x4f,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4a, 0x57,
	0x54, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04,
	0x42, 0x8c, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x41, 0x58, 0xaa, 0x02, 0x1a,
	0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x1a, 0x49, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x26, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1c, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_auditsink_v1beta1_config_proto_rawDescOnce sync.Once
	file_indykite_auditsink_v1beta1_config_proto_rawDescData = file_indykite_auditsink_v1beta1_config_proto_rawDesc
)

func file_indykite_auditsink_v1beta1_config_proto_rawDescGZIP() []byte {
	file_indykite_auditsink_v1beta1_config_proto_rawDescOnce.Do(func() {
		file_indykite_auditsink_v1beta1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_auditsink_v1beta1_config_proto_rawDescData)
	})
	return file_indykite_auditsink_v1beta1_config_proto_rawDescData
}

var file_indykite_auditsink_v1beta1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_indykite_auditsink_v1beta1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_indykite_auditsink_v1beta1_config_proto_goTypes = []interface{}{
	(ConfigType)(0),                                         // 0: indykite.auditsink.v1beta1.ConfigType
	(OAuth2GrantType)(0),                                    // 1: indykite.auditsink.v1beta1.OAuth2GrantType
	(OAuth2ResponseType)(0),                                 // 2: indykite.auditsink.v1beta1.OAuth2ResponseType
	(OAuth2TokenEndpointAuthMethod)(0),                      // 3: indykite.auditsink.v1beta1.OAuth2TokenEndpointAuthMethod
	(AuthFlowConfig_Format)(0),                              // 4: indykite.auditsink.v1beta1.AuthFlowConfig.Format
	(OAuth2ClientConfig_ProviderType)(0),                    // 5: indykite.auditsink.v1beta1.OAuth2ClientConfig.ProviderType
	(OAuth2ClientConfig_AuthStyle)(0),                       // 6: indykite.auditsink.v1beta1.OAuth2ClientConfig.AuthStyle
	(OAuth2ApplicationConfig_ClientSubjectType)(0),          // 7: indykite.auditsink.v1beta1.OAuth2ApplicationConfig.ClientSubjectType
	(WebAuthnProviderConfig_ConveyancePreference)(0),        // 8: indykite.auditsink.v1beta1.WebAuthnProviderConfig.ConveyancePreference
	(WebAuthnProviderConfig_AuthenticatorAttachment)(0),     // 9: indykite.auditsink.v1beta1.WebAuthnProviderConfig.AuthenticatorAttachment
	(WebAuthnProviderConfig_UserVerificationRequirement)(0), // 10: indykite.auditsink.v1beta1.WebAuthnProviderConfig.UserVerificationRequirement
	(AuthorizationPolicyConfig_Status)(0),                   // 11: indykite.auditsink.v1beta1.AuthorizationPolicyConfig.Status
	(*ContainersPath)(nil),                                  // 12: indykite.auditsink.v1beta1.ContainersPath
	(*CreatedConfig)(nil),                                   // 13: indykite.auditsink.v1beta1.CreatedConfig
	(*ReadConfig)(nil),                                      // 14: indykite.auditsink.v1beta1.ReadConfig
	(*UpdatedConfig)(nil),                                   // 15: indykite.auditsink.v1beta1.UpdatedConfig
	(*DeletedConfig)(nil),                                   // 16: indykite.auditsink.v1beta1.DeletedConfig
	(*ConfigDetail)(nil),                                    // 17: indykite.auditsink.v1beta1.ConfigDetail
	(*CustomerConfig)(nil),                                  // 18: indykite.auditsink.v1beta1.CustomerConfig
	(*ApplicationSpaceConfig)(nil),                          // 19: indykite.auditsink.v1beta1.ApplicationSpaceConfig
	(*TenantConfig)(nil),                                    // 20: indykite.auditsink.v1beta1.TenantConfig
	(*UsernamePolicyConfig)(nil),                            // 21: indykite.auditsink.v1beta1.UsernamePolicyConfig
	(*ApplicationAgentCredentialConfig)(nil),                // 22: indykite.auditsink.v1beta1.ApplicationAgentCredentialConfig
	(*ServiceAccountCredentialConfig)(nil),                  // 23: indykite.auditsink.v1beta1.ServiceAccountCredentialConfig
	(*AuthFlowConfig)(nil),                                  // 24: indykite.auditsink.v1beta1.AuthFlowConfig
	(*EmailServiceConfig)(nil),                              // 25: indykite.auditsink.v1beta1.EmailServiceConfig
	(*Email)(nil),                                           // 26: indykite.auditsink.v1beta1.Email
	(*SendGridProviderConfig)(nil),                          // 27: indykite.auditsink.v1beta1.SendGridProviderConfig
	(*AmazonSESProviderConfig)(nil),                         // 28: indykite.auditsink.v1beta1.AmazonSESProviderConfig
	(*EmailDefinition)(nil),                                 // 29: indykite.auditsink.v1beta1.EmailDefinition
	(*EmailTemplate)(nil),                                   // 30: indykite.auditsink.v1beta1.EmailTemplate
	(*EmailAttachment)(nil),                                 // 31: indykite.auditsink.v1beta1.EmailAttachment
	(*AuditSinkConfig)(nil),                                 // 32: indykite.auditsink.v1beta1.AuditSinkConfig
	(*OAuth2ClientConfig)(nil),                              // 33: indykite.auditsink.v1beta1.OAuth2ClientConfig
	(*OAuth2ProviderConfig)(nil),                            // 34: indykite.auditsink.v1beta1.OAuth2ProviderConfig
	(*OAuth2ApplicationConfig)(nil),                         // 35: indykite.auditsink.v1beta1.OAuth2ApplicationConfig
	(*WebAuthnProviderConfig)(nil),                          // 36: indykite.auditsink.v1beta1.WebAuthnProviderConfig
	(*AuthorizationPolicyConfig)(nil),                       // 37: indykite.auditsink.v1beta1.AuthorizationPolicyConfig
	(*AssignConfigPermissions)(nil),                         // 38: indykite.auditsink.v1beta1.AssignConfigPermissions
	(*RevokeConfigPermissions)(nil),                         // 39: indykite.auditsink.v1beta1.RevokeConfigPermissions
	(*CreatedConfig_Location)(nil),                          // 40: indykite.auditsink.v1beta1.CreatedConfig.Location
	(*ReadConfig_NameIdentifier)(nil),                       // 41: indykite.auditsink.v1beta1.ReadConfig.NameIdentifier
	nil,                                                     // 42: indykite.auditsink.v1beta1.EmailTemplate.HeadersEntry
	nil,                                                     // 43: indykite.auditsink.v1beta1.EmailTemplate.CustomArgsEntry
	nil,                                                     // 44: indykite.auditsink.v1beta1.EmailTemplate.DynamicTemplateValuesEntry
	(*AuditSinkConfig_Kafka)(nil),                           // 45: indykite.auditsink.v1beta1.AuditSinkConfig.Kafka
	nil,                                                     // 46: indykite.auditsink.v1beta1.OAuth2ProviderConfig.FrontChannelLoginUriEntry
	nil,                                                     // 47: indykite.auditsink.v1beta1.OAuth2ProviderConfig.FrontChannelConsentUriEntry
	nil,                                                     // 48: indykite.auditsink.v1beta1.WebAuthnProviderConfig.RelyingPartiesEntry
	(*v1beta1.ConsentConfiguration)(nil),                    // 49: indykite.config.v1beta1.ConsentConfiguration
	(*durationpb.Duration)(nil),                             // 50: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                           // 51: google.protobuf.Timestamp
	(*v1beta11.Value)(nil),                                  // 52: indykite.objects.v1beta1.Value
}
var file_indykite_auditsink_v1beta1_config_proto_depIdxs = []int32{
	0,  // 0: indykite.auditsink.v1beta1.CreatedConfig.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	40, // 1: indykite.auditsink.v1beta1.CreatedConfig.location:type_name -> indykite.auditsink.v1beta1.CreatedConfig.Location
	12, // 2: indykite.auditsink.v1beta1.CreatedConfig.containers_path:type_name -> indykite.auditsink.v1beta1.ContainersPath
	17, // 3: indykite.auditsink.v1beta1.CreatedConfig.detail:type_name -> indykite.auditsink.v1beta1.ConfigDetail
	41, // 4: indykite.auditsink.v1beta1.ReadConfig.name:type_name -> indykite.auditsink.v1beta1.ReadConfig.NameIdentifier
	12, // 5: indykite.auditsink.v1beta1.ReadConfig.containers_path:type_name -> indykite.auditsink.v1beta1.ContainersPath
	0,  // 6: indykite.auditsink.v1beta1.ReadConfig.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 7: indykite.auditsink.v1beta1.UpdatedConfig.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	12, // 8: indykite.auditsink.v1beta1.UpdatedConfig.containers_path:type_name -> indykite.auditsink.v1beta1.ContainersPath
	17, // 9: indykite.auditsink.v1beta1.UpdatedConfig.before:type_name -> indykite.auditsink.v1beta1.ConfigDetail
	17, // 10: indykite.auditsink.v1beta1.UpdatedConfig.after:type_name -> indykite.auditsink.v1beta1.ConfigDetail
	0,  // 11: indykite.auditsink.v1beta1.DeletedConfig.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	12, // 12: indykite.auditsink.v1beta1.DeletedConfig.containers_path:type_name -> indykite.auditsink.v1beta1.ContainersPath
	18, // 13: indykite.auditsink.v1beta1.ConfigDetail.customer_config:type_name -> indykite.auditsink.v1beta1.CustomerConfig
	19, // 14: indykite.auditsink.v1beta1.ConfigDetail.application_space_config:type_name -> indykite.auditsink.v1beta1.ApplicationSpaceConfig
	20, // 15: indykite.auditsink.v1beta1.ConfigDetail.tenant_config:type_name -> indykite.auditsink.v1beta1.TenantConfig
	22, // 16: indykite.auditsink.v1beta1.ConfigDetail.application_agent_credential:type_name -> indykite.auditsink.v1beta1.ApplicationAgentCredentialConfig
	23, // 17: indykite.auditsink.v1beta1.ConfigDetail.service_account_credential:type_name -> indykite.auditsink.v1beta1.ServiceAccountCredentialConfig
	24, // 18: indykite.auditsink.v1beta1.ConfigDetail.auth_flow_config:type_name -> indykite.auditsink.v1beta1.AuthFlowConfig
	25, // 19: indykite.auditsink.v1beta1.ConfigDetail.email_service_config:type_name -> indykite.auditsink.v1beta1.EmailServiceConfig
	32, // 20: indykite.auditsink.v1beta1.ConfigDetail.audit_sink_config:type_name -> indykite.auditsink.v1beta1.AuditSinkConfig
	33, // 21: indykite.auditsink.v1beta1.ConfigDetail.oauth2_client_config:type_name -> indykite.auditsink.v1beta1.OAuth2ClientConfig
	36, // 22: indykite.auditsink.v1beta1.ConfigDetail.web_authn_provider_config:type_name -> indykite.auditsink.v1beta1.WebAuthnProviderConfig
	37, // 23: indykite.auditsink.v1beta1.ConfigDetail.authorization_policy_config:type_name -> indykite.auditsink.v1beta1.AuthorizationPolicyConfig
	35, // 24: indykite.auditsink.v1beta1.ConfigDetail.oauth2_application_config:type_name -> indykite.auditsink.v1beta1.OAuth2ApplicationConfig
	34, // 25: indykite.auditsink.v1beta1.ConfigDetail.oauth2_provider_config:type_name -> indykite.auditsink.v1beta1.OAuth2ProviderConfig
	49, // 26: indykite.auditsink.v1beta1.ConfigDetail.consent_config:type_name -> indykite.config.v1beta1.ConsentConfiguration
	21, // 27: indykite.auditsink.v1beta1.ApplicationSpaceConfig.username_policy:type_name -> indykite.auditsink.v1beta1.UsernamePolicyConfig
	21, // 28: indykite.auditsink.v1beta1.TenantConfig.username_policy:type_name -> indykite.auditsink.v1beta1.UsernamePolicyConfig
	50, // 29: indykite.auditsink.v1beta1.UsernamePolicyConfig.verify_email_grace_period:type_name -> google.protobuf.Duration
	51, // 30: indykite.auditsink.v1beta1.ApplicationAgentCredentialConfig.expire_time:type_name -> google.protobuf.Timestamp
	51, // 31: indykite.auditsink.v1beta1.ServiceAccountCredentialConfig.expire_time:type_name -> google.protobuf.Timestamp
	4,  // 32: indykite.auditsink.v1beta1.AuthFlowConfig.source_format:type_name -> indykite.auditsink.v1beta1.AuthFlowConfig.Format
	26, // 33: indykite.auditsink.v1beta1.EmailServiceConfig.default_from_address:type_name -> indykite.auditsink.v1beta1.Email
	27, // 34: indykite.auditsink.v1beta1.EmailServiceConfig.sendgrid:type_name -> indykite.auditsink.v1beta1.SendGridProviderConfig
	28, // 35: indykite.auditsink.v1beta1.EmailServiceConfig.amazon:type_name -> indykite.auditsink.v1beta1.AmazonSESProviderConfig
	29, // 36: indykite.auditsink.v1beta1.EmailServiceConfig.invitation_message:type_name -> indykite.auditsink.v1beta1.EmailDefinition
	29, // 37: indykite.auditsink.v1beta1.EmailServiceConfig.reset_password_message:type_name -> indykite.auditsink.v1beta1.EmailDefinition
	29, // 38: indykite.auditsink.v1beta1.EmailServiceConfig.verification_message:type_name -> indykite.auditsink.v1beta1.EmailDefinition
	29, // 39: indykite.auditsink.v1beta1.EmailServiceConfig.one_time_password_message:type_name -> indykite.auditsink.v1beta1.EmailDefinition
	26, // 40: indykite.auditsink.v1beta1.AmazonSESProviderConfig.default_from_address:type_name -> indykite.auditsink.v1beta1.Email
	30, // 41: indykite.auditsink.v1beta1.EmailDefinition.template:type_name -> indykite.auditsink.v1beta1.EmailTemplate
	26, // 42: indykite.auditsink.v1beta1.EmailTemplate.from:type_name -> indykite.auditsink.v1beta1.Email
	26, // 43: indykite.auditsink.v1beta1.EmailTemplate.reply_to:type_name -> indykite.auditsink.v1beta1.Email
	26, // 44: indykite.auditsink.v1beta1.EmailTemplate.to:type_name -> indykite.auditsink.v1beta1.Email
	26, // 45: indykite.auditsink.v1beta1.EmailTemplate.cc:type_name -> indykite.auditsink.v1beta1.Email
	26, // 46: indykite.auditsink.v1beta1.EmailTemplate.bcc:type_name -> indykite.auditsink.v1beta1.Email
	42, // 47: indykite.auditsink.v1beta1.EmailTemplate.headers:type_name -> indykite.auditsink.v1beta1.EmailTemplate.HeadersEntry
	43, // 48: indykite.auditsink.v1beta1.EmailTemplate.custom_args:type_name -> indykite.auditsink.v1beta1.EmailTemplate.CustomArgsEntry
	44, // 49: indykite.auditsink.v1beta1.EmailTemplate.dynamic_template_values:type_name -> indykite.auditsink.v1beta1.EmailTemplate.DynamicTemplateValuesEntry
	31, // 50: indykite.auditsink.v1beta1.EmailTemplate.attachments:type_name -> indykite.auditsink.v1beta1.EmailAttachment
	45, // 51: indykite.auditsink.v1beta1.AuditSinkConfig.kafka:type_name -> indykite.auditsink.v1beta1.AuditSinkConfig.Kafka
	5,  // 52: indykite.auditsink.v1beta1.OAuth2ClientConfig.provider_type:type_name -> indykite.auditsink.v1beta1.OAuth2ClientConfig.ProviderType
	6,  // 53: indykite.auditsink.v1beta1.OAuth2ClientConfig.auth_style:type_name -> indykite.auditsink.v1beta1.OAuth2ClientConfig.AuthStyle
	1,  // 54: indykite.auditsink.v1beta1.OAuth2ProviderConfig.grant_types:type_name -> indykite.auditsink.v1beta1.OAuth2GrantType
	2,  // 55: indykite.auditsink.v1beta1.OAuth2ProviderConfig.response_types:type_name -> indykite.auditsink.v1beta1.OAuth2ResponseType
	3,  // 56: indykite.auditsink.v1beta1.OAuth2ProviderConfig.token_endpoint_auth_method:type_name -> indykite.auditsink.v1beta1.OAuth2TokenEndpointAuthMethod
	46, // 57: indykite.auditsink.v1beta1.OAuth2ProviderConfig.front_channel_login_uri:type_name -> indykite.auditsink.v1beta1.OAuth2ProviderConfig.FrontChannelLoginUriEntry
	47, // 58: indykite.auditsink.v1beta1.OAuth2ProviderConfig.front_channel_consent_uri:type_name -> indykite.auditsink.v1beta1.OAuth2ProviderConfig.FrontChannelConsentUriEntry
	7,  // 59: indykite.auditsink.v1beta1.OAuth2ApplicationConfig.subject_type:type_name -> indykite.auditsink.v1beta1.OAuth2ApplicationConfig.ClientSubjectType
	1,  // 60: indykite.auditsink.v1beta1.OAuth2ApplicationConfig.grant_types:type_name -> indykite.auditsink.v1beta1.OAuth2GrantType
	2,  // 61: indykite.auditsink.v1beta1.OAuth2ApplicationConfig.response_types:type_name -> indykite.auditsink.v1beta1.OAuth2ResponseType
	3,  // 62: indykite.auditsink.v1beta1.OAuth2ApplicationConfig.token_endpoint_auth_method:type_name -> indykite.auditsink.v1beta1.OAuth2TokenEndpointAuthMethod
	48, // 63: indykite.auditsink.v1beta1.WebAuthnProviderConfig.relying_parties:type_name -> indykite.auditsink.v1beta1.WebAuthnProviderConfig.RelyingPartiesEntry
	8,  // 64: indykite.auditsink.v1beta1.WebAuthnProviderConfig.attestation_preference:type_name -> indykite.auditsink.v1beta1.WebAuthnProviderConfig.ConveyancePreference
	9,  // 65: indykite.auditsink.v1beta1.WebAuthnProviderConfig.authenticator_attachment:type_name -> indykite.auditsink.v1beta1.WebAuthnProviderConfig.AuthenticatorAttachment
	10, // 66: indykite.auditsink.v1beta1.WebAuthnProviderConfig.user_verification:type_name -> indykite.auditsink.v1beta1.WebAuthnProviderConfig.UserVerificationRequirement
	50, // 67: indykite.auditsink.v1beta1.WebAuthnProviderConfig.registration_timeout:type_name -> google.protobuf.Duration
	50, // 68: indykite.auditsink.v1beta1.WebAuthnProviderConfig.authentication_timeout:type_name -> google.protobuf.Duration
	11, // 69: indykite.auditsink.v1beta1.AuthorizationPolicyConfig.status:type_name -> indykite.auditsink.v1beta1.AuthorizationPolicyConfig.Status
	0,  // 70: indykite.auditsink.v1beta1.AssignConfigPermissions.target_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 71: indykite.auditsink.v1beta1.AssignConfigPermissions.object_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 72: indykite.auditsink.v1beta1.RevokeConfigPermissions.target_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 73: indykite.auditsink.v1beta1.RevokeConfigPermissions.object_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 74: indykite.auditsink.v1beta1.CreatedConfig.Location.type:type_name -> indykite.auditsink.v1beta1.ConfigType
	0,  // 75: indykite.auditsink.v1beta1.ReadConfig.NameIdentifier.location_type:type_name -> indykite.auditsink.v1beta1.ConfigType
	52, // 76: indykite.auditsink.v1beta1.EmailTemplate.DynamicTemplateValuesEntry.value:type_name -> indykite.objects.v1beta1.Value
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_indykite_auditsink_v1beta1_config_proto_init() }
func file_indykite_auditsink_v1beta1_config_proto_init() {
	if File_indykite_auditsink_v1beta1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainersPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationSpaceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernamePolicyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationAgentCredentialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccountCredentialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthFlowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGridProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmazonSESProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditSinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2ClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2ProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2ApplicationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAuthnProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignConfigPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeConfigPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatedConfig_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadConfig_NameIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_auditsink_v1beta1_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditSinkConfig_Kafka); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ReadConfig_Id)(nil),
		(*ReadConfig_Name)(nil),
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ConfigDetail_CustomerConfig)(nil),
		(*ConfigDetail_ApplicationSpaceConfig)(nil),
		(*ConfigDetail_TenantConfig)(nil),
		(*ConfigDetail_ApplicationAgentCredential)(nil),
		(*ConfigDetail_ServiceAccountCredential)(nil),
		(*ConfigDetail_AuthFlowConfig)(nil),
		(*ConfigDetail_EmailServiceConfig)(nil),
		(*ConfigDetail_AuditSinkConfig)(nil),
		(*ConfigDetail_Oauth2ClientConfig)(nil),
		(*ConfigDetail_WebAuthnProviderConfig)(nil),
		(*ConfigDetail_AuthorizationPolicyConfig)(nil),
		(*ConfigDetail_Oauth2ApplicationConfig)(nil),
		(*ConfigDetail_Oauth2ProviderConfig)(nil),
		(*ConfigDetail_ConsentConfig)(nil),
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*EmailServiceConfig_Sendgrid)(nil),
		(*EmailServiceConfig_Amazon)(nil),
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*EmailDefinition_Template)(nil),
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*AuditSinkConfig_Kafka_)(nil),
	}
	file_indykite_auditsink_v1beta1_config_proto_msgTypes[29].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_auditsink_v1beta1_config_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_auditsink_v1beta1_config_proto_goTypes,
		DependencyIndexes: file_indykite_auditsink_v1beta1_config_proto_depIdxs,
		EnumInfos:         file_indykite_auditsink_v1beta1_config_proto_enumTypes,
		MessageInfos:      file_indykite_auditsink_v1beta1_config_proto_msgTypes,
	}.Build()
	File_indykite_auditsink_v1beta1_config_proto = out.File
	file_indykite_auditsink_v1beta1_config_proto_rawDesc = nil
	file_indykite_auditsink_v1beta1_config_proto_goTypes = nil
	file_indykite_auditsink_v1beta1_config_proto_depIdxs = nil
}
