// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/auditsink/v1beta1/ingest.proto

package auditsinkv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpsertData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpsertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpsertDataMultiError, or
// nil if none found.
func (m *UpsertData) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *UpsertData_Node:
		if v == nil {
			err := UpsertDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertDataValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertDataValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertDataValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpsertData_Relationship:
		if v == nil {
			err := UpsertDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRelationship()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertDataValidationError{
						field:  "Relationship",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertDataValidationError{
						field:  "Relationship",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertDataValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpsertDataMultiError(errors)
	}

	return nil
}

// UpsertDataMultiError is an error wrapping multiple validation errors
// returned by UpsertData.ValidateAll() if the designated constraints aren't met.
type UpsertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertDataMultiError) AllErrors() []error { return m }

// UpsertDataValidationError is the validation error returned by
// UpsertData.Validate if the designated constraints aren't met.
type UpsertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertDataValidationError) ErrorName() string { return "UpsertDataValidationError" }

// Error satisfies the builtin error interface
func (e UpsertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertDataValidationError{}

// Validate checks the field values on DeleteData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteDataMultiError, or
// nil if none found.
func (m *DeleteData) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *DeleteData_Node:
		if v == nil {
			err := DeleteDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DeleteData_Relationship:
		if v == nil {
			err := DeleteDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRelationship()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "Relationship",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "Relationship",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DeleteData_NodeProperty:
		if v == nil {
			err := DeleteDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNodeProperty()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "NodeProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "NodeProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNodeProperty()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataValidationError{
					field:  "NodeProperty",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DeleteData_RelationshipProperty:
		if v == nil {
			err := DeleteDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRelationshipProperty()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "RelationshipProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataValidationError{
						field:  "RelationshipProperty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRelationshipProperty()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataValidationError{
					field:  "RelationshipProperty",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DeleteDataMultiError(errors)
	}

	return nil
}

// DeleteDataMultiError is an error wrapping multiple validation errors
// returned by DeleteData.ValidateAll() if the designated constraints aren't met.
type DeleteDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataMultiError) AllErrors() []error { return m }

// DeleteDataValidationError is the validation error returned by
// DeleteData.Validate if the designated constraints aren't met.
type DeleteDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataValidationError) ErrorName() string { return "DeleteDataValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataValidationError{}

// Validate checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DigitalTwin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DigitalTwinMultiError, or
// nil if none found.
func (m *DigitalTwin) ValidateAll() error {
	return m.validate(true)
}

func (m *DigitalTwin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Type

	// no validation rules for TenantId

	if len(errors) > 0 {
		return DigitalTwinMultiError(errors)
	}

	return nil
}

// DigitalTwinMultiError is an error wrapping multiple validation errors
// returned by DigitalTwin.ValidateAll() if the designated constraints aren't met.
type DigitalTwinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DigitalTwinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DigitalTwinMultiError) AllErrors() []error { return m }

// DigitalTwinValidationError is the validation error returned by
// DigitalTwin.Validate if the designated constraints aren't met.
type DigitalTwinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DigitalTwinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DigitalTwinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DigitalTwinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DigitalTwinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DigitalTwinValidationError) ErrorName() string { return "DigitalTwinValidationError" }

// Error satisfies the builtin error interface
func (e DigitalTwinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDigitalTwin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DigitalTwinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DigitalTwinValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Type

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ExternalId

	// no validation rules for Type

	// no validation rules for IsIdentity

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on Relationship with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Relationship) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Relationship with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelationshipMultiError, or
// nil if none found.
func (m *Relationship) ValidateAll() error {
	return m.validate(true)
}

func (m *Relationship) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RelationshipMultiError(errors)
	}

	return nil
}

// RelationshipMultiError is an error wrapping multiple validation errors
// returned by Relationship.ValidateAll() if the designated constraints aren't met.
type RelationshipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationshipMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationshipMultiError) AllErrors() []error { return m }

// RelationshipValidationError is the validation error returned by
// Relationship.Validate if the designated constraints aren't met.
type RelationshipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipValidationError) ErrorName() string { return "RelationshipValidationError" }

// Error satisfies the builtin error interface
func (e RelationshipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationship.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipValidationError{}

// Validate checks the field values on NodeMatch with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeMatch with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeMatchMultiError, or nil
// if none found.
func (m *NodeMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Type

	if len(errors) > 0 {
		return NodeMatchMultiError(errors)
	}

	return nil
}

// NodeMatchMultiError is an error wrapping multiple validation errors returned
// by NodeMatch.ValidateAll() if the designated constraints aren't met.
type NodeMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMatchMultiError) AllErrors() []error { return m }

// NodeMatchValidationError is the validation error returned by
// NodeMatch.Validate if the designated constraints aren't met.
type NodeMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeMatchValidationError) ErrorName() string { return "NodeMatchValidationError" }

// Error satisfies the builtin error interface
func (e NodeMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeMatchValidationError{}

// Validate checks the field values on DeleteData_NodePropertyMatch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteData_NodePropertyMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteData_NodePropertyMatch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteData_NodePropertyMatchMultiError, or nil if none found.
func (m *DeleteData_NodePropertyMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteData_NodePropertyMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteData_NodePropertyMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteData_NodePropertyMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteData_NodePropertyMatchValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PropertyType

	if len(errors) > 0 {
		return DeleteData_NodePropertyMatchMultiError(errors)
	}

	return nil
}

// DeleteData_NodePropertyMatchMultiError is an error wrapping multiple
// validation errors returned by DeleteData_NodePropertyMatch.ValidateAll() if
// the designated constraints aren't met.
type DeleteData_NodePropertyMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteData_NodePropertyMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteData_NodePropertyMatchMultiError) AllErrors() []error { return m }

// DeleteData_NodePropertyMatchValidationError is the validation error returned
// by DeleteData_NodePropertyMatch.Validate if the designated constraints
// aren't met.
type DeleteData_NodePropertyMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteData_NodePropertyMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteData_NodePropertyMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteData_NodePropertyMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteData_NodePropertyMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteData_NodePropertyMatchValidationError) ErrorName() string {
	return "DeleteData_NodePropertyMatchValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteData_NodePropertyMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteData_NodePropertyMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteData_NodePropertyMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteData_NodePropertyMatchValidationError{}

// Validate checks the field values on DeleteData_RelationshipPropertyMatch
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteData_RelationshipPropertyMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteData_RelationshipPropertyMatch
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteData_RelationshipPropertyMatchMultiError, or nil if none found.
func (m *DeleteData_RelationshipPropertyMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteData_RelationshipPropertyMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteData_RelationshipPropertyMatchValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteData_RelationshipPropertyMatchValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteData_RelationshipPropertyMatchValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteData_RelationshipPropertyMatchValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteData_RelationshipPropertyMatchValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteData_RelationshipPropertyMatchValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PropertyType

	if len(errors) > 0 {
		return DeleteData_RelationshipPropertyMatchMultiError(errors)
	}

	return nil
}

// DeleteData_RelationshipPropertyMatchMultiError is an error wrapping multiple
// validation errors returned by
// DeleteData_RelationshipPropertyMatch.ValidateAll() if the designated
// constraints aren't met.
type DeleteData_RelationshipPropertyMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteData_RelationshipPropertyMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteData_RelationshipPropertyMatchMultiError) AllErrors() []error { return m }

// DeleteData_RelationshipPropertyMatchValidationError is the validation error
// returned by DeleteData_RelationshipPropertyMatch.Validate if the designated
// constraints aren't met.
type DeleteData_RelationshipPropertyMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteData_RelationshipPropertyMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteData_RelationshipPropertyMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteData_RelationshipPropertyMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteData_RelationshipPropertyMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteData_RelationshipPropertyMatchValidationError) ErrorName() string {
	return "DeleteData_RelationshipPropertyMatchValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteData_RelationshipPropertyMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteData_RelationshipPropertyMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteData_RelationshipPropertyMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteData_RelationshipPropertyMatchValidationError{}
