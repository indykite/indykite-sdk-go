// Copyright (c) 2024 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Trusted Data Access Service Description.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: indykite/tda/v1beta1/trusted_data_access_api.proto

package tdav1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TrustedDataAccessAPI_DataAccess_FullMethodName    = "/indykite.tda.v1beta1.TrustedDataAccessAPI/DataAccess"
	TrustedDataAccessAPI_GrantConsent_FullMethodName  = "/indykite.tda.v1beta1.TrustedDataAccessAPI/GrantConsent"
	TrustedDataAccessAPI_RevokeConsent_FullMethodName = "/indykite.tda.v1beta1.TrustedDataAccessAPI/RevokeConsent"
	TrustedDataAccessAPI_ListConsents_FullMethodName  = "/indykite.tda.v1beta1.TrustedDataAccessAPI/ListConsents"
)

// TrustedDataAccessAPIClient is the client API for TrustedDataAccessAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TrustedDataAccessAPI represents the service interface for the Trusted Data Access API.
type TrustedDataAccessAPIClient interface {
	DataAccess(ctx context.Context, in *DataAccessRequest, opts ...grpc.CallOption) (*DataAccessResponse, error)
	GrantConsent(ctx context.Context, in *GrantConsentRequest, opts ...grpc.CallOption) (*GrantConsentResponse, error)
	RevokeConsent(ctx context.Context, in *RevokeConsentRequest, opts ...grpc.CallOption) (*RevokeConsentResponse, error)
	// ListConsents returns all Consents (and the consented properties) between the specified application and user.
	ListConsents(ctx context.Context, in *ListConsentsRequest, opts ...grpc.CallOption) (*ListConsentsResponse, error)
}

type trustedDataAccessAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustedDataAccessAPIClient(cc grpc.ClientConnInterface) TrustedDataAccessAPIClient {
	return &trustedDataAccessAPIClient{cc}
}

func (c *trustedDataAccessAPIClient) DataAccess(ctx context.Context, in *DataAccessRequest, opts ...grpc.CallOption) (*DataAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataAccessResponse)
	err := c.cc.Invoke(ctx, TrustedDataAccessAPI_DataAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedDataAccessAPIClient) GrantConsent(ctx context.Context, in *GrantConsentRequest, opts ...grpc.CallOption) (*GrantConsentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrantConsentResponse)
	err := c.cc.Invoke(ctx, TrustedDataAccessAPI_GrantConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedDataAccessAPIClient) RevokeConsent(ctx context.Context, in *RevokeConsentRequest, opts ...grpc.CallOption) (*RevokeConsentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeConsentResponse)
	err := c.cc.Invoke(ctx, TrustedDataAccessAPI_RevokeConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedDataAccessAPIClient) ListConsents(ctx context.Context, in *ListConsentsRequest, opts ...grpc.CallOption) (*ListConsentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConsentsResponse)
	err := c.cc.Invoke(ctx, TrustedDataAccessAPI_ListConsents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustedDataAccessAPIServer is the server API for TrustedDataAccessAPI service.
// All implementations should embed UnimplementedTrustedDataAccessAPIServer
// for forward compatibility
//
// TrustedDataAccessAPI represents the service interface for the Trusted Data Access API.
type TrustedDataAccessAPIServer interface {
	DataAccess(context.Context, *DataAccessRequest) (*DataAccessResponse, error)
	GrantConsent(context.Context, *GrantConsentRequest) (*GrantConsentResponse, error)
	RevokeConsent(context.Context, *RevokeConsentRequest) (*RevokeConsentResponse, error)
	// ListConsents returns all Consents (and the consented properties) between the specified application and user.
	ListConsents(context.Context, *ListConsentsRequest) (*ListConsentsResponse, error)
}

// UnimplementedTrustedDataAccessAPIServer should be embedded to have forward compatible implementations.
type UnimplementedTrustedDataAccessAPIServer struct {
}

func (UnimplementedTrustedDataAccessAPIServer) DataAccess(context.Context, *DataAccessRequest) (*DataAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataAccess not implemented")
}
func (UnimplementedTrustedDataAccessAPIServer) GrantConsent(context.Context, *GrantConsentRequest) (*GrantConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantConsent not implemented")
}
func (UnimplementedTrustedDataAccessAPIServer) RevokeConsent(context.Context, *RevokeConsentRequest) (*RevokeConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeConsent not implemented")
}
func (UnimplementedTrustedDataAccessAPIServer) ListConsents(context.Context, *ListConsentsRequest) (*ListConsentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsents not implemented")
}

// UnsafeTrustedDataAccessAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustedDataAccessAPIServer will
// result in compilation errors.
type UnsafeTrustedDataAccessAPIServer interface {
	mustEmbedUnimplementedTrustedDataAccessAPIServer()
}

func RegisterTrustedDataAccessAPIServer(s grpc.ServiceRegistrar, srv TrustedDataAccessAPIServer) {
	s.RegisterService(&TrustedDataAccessAPI_ServiceDesc, srv)
}

func _TrustedDataAccessAPI_DataAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedDataAccessAPIServer).DataAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedDataAccessAPI_DataAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedDataAccessAPIServer).DataAccess(ctx, req.(*DataAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedDataAccessAPI_GrantConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedDataAccessAPIServer).GrantConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedDataAccessAPI_GrantConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedDataAccessAPIServer).GrantConsent(ctx, req.(*GrantConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedDataAccessAPI_RevokeConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedDataAccessAPIServer).RevokeConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedDataAccessAPI_RevokeConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedDataAccessAPIServer).RevokeConsent(ctx, req.(*RevokeConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedDataAccessAPI_ListConsents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedDataAccessAPIServer).ListConsents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedDataAccessAPI_ListConsents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedDataAccessAPIServer).ListConsents(ctx, req.(*ListConsentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrustedDataAccessAPI_ServiceDesc is the grpc.ServiceDesc for TrustedDataAccessAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrustedDataAccessAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indykite.tda.v1beta1.TrustedDataAccessAPI",
	HandlerType: (*TrustedDataAccessAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataAccess",
			Handler:    _TrustedDataAccessAPI_DataAccess_Handler,
		},
		{
			MethodName: "GrantConsent",
			Handler:    _TrustedDataAccessAPI_GrantConsent_Handler,
		},
		{
			MethodName: "RevokeConsent",
			Handler:    _TrustedDataAccessAPI_RevokeConsent_Handler,
		},
		{
			MethodName: "ListConsents",
			Handler:    _TrustedDataAccessAPI_ListConsents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indykite/tda/v1beta1/trusted_data_access_api.proto",
}
