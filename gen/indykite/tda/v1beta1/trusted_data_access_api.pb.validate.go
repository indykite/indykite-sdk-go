// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/tda/v1beta1/trusted_data_access_api.proto

package tdav1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListConsentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConsentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConsentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConsentsRequestMultiError, or nil if none found.
func (m *ListConsentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConsentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() == nil {
		err := ListConsentsRequestValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListConsentsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListConsentsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListConsentsRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetApplicationId() != "" {

		if l := utf8.RuneCountInString(m.GetApplicationId()); l < 22 || l > 254 {
			err := ListConsentsRequestValidationError{
				field:  "ApplicationId",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListConsentsRequest_ApplicationId_Pattern.MatchString(m.GetApplicationId()) {
			err := ListConsentsRequestValidationError{
				field:  "ApplicationId",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListConsentsRequestMultiError(errors)
	}

	return nil
}

// ListConsentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListConsentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListConsentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConsentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConsentsRequestMultiError) AllErrors() []error { return m }

// ListConsentsRequestValidationError is the validation error returned by
// ListConsentsRequest.Validate if the designated constraints aren't met.
type ListConsentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConsentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConsentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConsentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConsentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConsentsRequestValidationError) ErrorName() string {
	return "ListConsentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConsentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConsentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConsentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConsentsRequestValidationError{}

var _ListConsentsRequest_ApplicationId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ListConsentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConsentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConsentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConsentsResponseMultiError, or nil if none found.
func (m *ListConsentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConsentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConsents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConsentsResponseValidationError{
						field:  fmt.Sprintf("Consents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConsentsResponseValidationError{
						field:  fmt.Sprintf("Consents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConsentsResponseValidationError{
					field:  fmt.Sprintf("Consents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListConsentsResponseMultiError(errors)
	}

	return nil
}

// ListConsentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListConsentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListConsentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConsentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConsentsResponseMultiError) AllErrors() []error { return m }

// ListConsentsResponseValidationError is the validation error returned by
// ListConsentsResponse.Validate if the designated constraints aren't met.
type ListConsentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConsentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConsentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConsentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConsentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConsentsResponseValidationError) ErrorName() string {
	return "ListConsentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConsentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConsentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConsentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConsentsResponseValidationError{}

// Validate checks the field values on DataAccessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DataAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataAccessRequestMultiError, or nil if none found.
func (m *DataAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DataAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetConsentId()); l < 22 || l > 254 {
		err := DataAccessRequestValidationError{
			field:  "ConsentId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DataAccessRequest_ConsentId_Pattern.MatchString(m.GetConsentId()) {
		err := DataAccessRequestValidationError{
			field:  "ConsentId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetApplicationId() != "" {

		if l := utf8.RuneCountInString(m.GetApplicationId()); l < 22 || l > 254 {
			err := DataAccessRequestValidationError{
				field:  "ApplicationId",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_DataAccessRequest_ApplicationId_Pattern.MatchString(m.GetApplicationId()) {
			err := DataAccessRequestValidationError{
				field:  "ApplicationId",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataAccessRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataAccessRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataAccessRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataAccessRequestMultiError(errors)
	}

	return nil
}

// DataAccessRequestMultiError is an error wrapping multiple validation errors
// returned by DataAccessRequest.ValidateAll() if the designated constraints
// aren't met.
type DataAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataAccessRequestMultiError) AllErrors() []error { return m }

// DataAccessRequestValidationError is the validation error returned by
// DataAccessRequest.Validate if the designated constraints aren't met.
type DataAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataAccessRequestValidationError) ErrorName() string {
	return "DataAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DataAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataAccessRequestValidationError{}

var _DataAccessRequest_ConsentId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _DataAccessRequest_ApplicationId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DataAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataAccessResponseMultiError, or nil if none found.
func (m *DataAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DataAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataAccessResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataAccessResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataAccessResponseValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DataAccessResponseMultiError(errors)
	}

	return nil
}

// DataAccessResponseMultiError is an error wrapping multiple validation errors
// returned by DataAccessResponse.ValidateAll() if the designated constraints
// aren't met.
type DataAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataAccessResponseMultiError) AllErrors() []error { return m }

// DataAccessResponseValidationError is the validation error returned by
// DataAccessResponse.Validate if the designated constraints aren't met.
type DataAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataAccessResponseValidationError) ErrorName() string {
	return "DataAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DataAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataAccessResponseValidationError{}

// Validate checks the field values on GrantConsentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantConsentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantConsentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantConsentRequestMultiError, or nil if none found.
func (m *GrantConsentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantConsentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() == nil {
		err := GrantConsentRequestValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantConsentRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantConsentRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantConsentRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetConsentId()); l < 22 || l > 254 {
		err := GrantConsentRequestValidationError{
			field:  "ConsentId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GrantConsentRequest_ConsentId_Pattern.MatchString(m.GetConsentId()) {
		err := GrantConsentRequestValidationError{
			field:  "ConsentId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ValidityPeriod

	if len(errors) > 0 {
		return GrantConsentRequestMultiError(errors)
	}

	return nil
}

// GrantConsentRequestMultiError is an error wrapping multiple validation
// errors returned by GrantConsentRequest.ValidateAll() if the designated
// constraints aren't met.
type GrantConsentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantConsentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantConsentRequestMultiError) AllErrors() []error { return m }

// GrantConsentRequestValidationError is the validation error returned by
// GrantConsentRequest.Validate if the designated constraints aren't met.
type GrantConsentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantConsentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantConsentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantConsentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantConsentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantConsentRequestValidationError) ErrorName() string {
	return "GrantConsentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantConsentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantConsentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantConsentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantConsentRequestValidationError{}

var _GrantConsentRequest_ConsentId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on GrantConsentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantConsentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantConsentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantConsentResponseMultiError, or nil if none found.
func (m *GrantConsentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantConsentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GrantConsentResponseMultiError(errors)
	}

	return nil
}

// GrantConsentResponseMultiError is an error wrapping multiple validation
// errors returned by GrantConsentResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantConsentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantConsentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantConsentResponseMultiError) AllErrors() []error { return m }

// GrantConsentResponseValidationError is the validation error returned by
// GrantConsentResponse.Validate if the designated constraints aren't met.
type GrantConsentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantConsentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantConsentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantConsentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantConsentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantConsentResponseValidationError) ErrorName() string {
	return "GrantConsentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantConsentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantConsentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantConsentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantConsentResponseValidationError{}

// Validate checks the field values on RevokeConsentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeConsentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeConsentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeConsentRequestMultiError, or nil if none found.
func (m *RevokeConsentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeConsentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() == nil {
		err := RevokeConsentRequestValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RevokeConsentRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RevokeConsentRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevokeConsentRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetConsentId()); l < 22 || l > 254 {
		err := RevokeConsentRequestValidationError{
			field:  "ConsentId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RevokeConsentRequest_ConsentId_Pattern.MatchString(m.GetConsentId()) {
		err := RevokeConsentRequestValidationError{
			field:  "ConsentId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RevokeConsentRequestMultiError(errors)
	}

	return nil
}

// RevokeConsentRequestMultiError is an error wrapping multiple validation
// errors returned by RevokeConsentRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokeConsentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeConsentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeConsentRequestMultiError) AllErrors() []error { return m }

// RevokeConsentRequestValidationError is the validation error returned by
// RevokeConsentRequest.Validate if the designated constraints aren't met.
type RevokeConsentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeConsentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeConsentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeConsentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeConsentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeConsentRequestValidationError) ErrorName() string {
	return "RevokeConsentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeConsentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeConsentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeConsentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeConsentRequestValidationError{}

var _RevokeConsentRequest_ConsentId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on RevokeConsentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeConsentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeConsentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeConsentResponseMultiError, or nil if none found.
func (m *RevokeConsentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeConsentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevokeConsentResponseMultiError(errors)
	}

	return nil
}

// RevokeConsentResponseMultiError is an error wrapping multiple validation
// errors returned by RevokeConsentResponse.ValidateAll() if the designated
// constraints aren't met.
type RevokeConsentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeConsentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeConsentResponseMultiError) AllErrors() []error { return m }

// RevokeConsentResponseValidationError is the validation error returned by
// RevokeConsentResponse.Validate if the designated constraints aren't met.
type RevokeConsentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeConsentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeConsentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeConsentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeConsentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeConsentResponseValidationError) ErrorName() string {
	return "RevokeConsentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeConsentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeConsentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeConsentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeConsentResponseValidationError{}
