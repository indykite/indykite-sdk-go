// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/config/v1beta1/policy_builder.proto

package configv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PolicyBuilderConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyBuilderConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyBuilderConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyBuilderConfigMultiError, or nil if none found.
func (m *PolicyBuilderConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyBuilderConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubjectType

	// no validation rules for ResourceType

	if all {
		switch v := interface{}(m.GetConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyBuilderConfigValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyBuilderConfigValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyBuilderConfigValidationError{
				field:  "Conditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyBuilderConfigMultiError(errors)
	}

	return nil
}

// PolicyBuilderConfigMultiError is an error wrapping multiple validation
// errors returned by PolicyBuilderConfig.ValidateAll() if the designated
// constraints aren't met.
type PolicyBuilderConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyBuilderConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyBuilderConfigMultiError) AllErrors() []error { return m }

// PolicyBuilderConfigValidationError is the validation error returned by
// PolicyBuilderConfig.Validate if the designated constraints aren't met.
type PolicyBuilderConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyBuilderConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyBuilderConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyBuilderConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyBuilderConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyBuilderConfigValidationError) ErrorName() string {
	return "PolicyBuilderConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyBuilderConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyBuilderConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyBuilderConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyBuilderConfigValidationError{}

// Validate checks the field values on PolicyBuilderConditions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyBuilderConditions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyBuilderConditions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyBuilderConditionsMultiError, or nil if none found.
func (m *PolicyBuilderConditions) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyBuilderConditions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyBuilderConditionsValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyBuilderConditionsValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyBuilderConditionsValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRelationships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyBuilderConditionsValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyBuilderConditionsValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyBuilderConditionsValidationError{
					field:  fmt.Sprintf("Relationships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PolicyBuilderConditionsMultiError(errors)
	}

	return nil
}

// PolicyBuilderConditionsMultiError is an error wrapping multiple validation
// errors returned by PolicyBuilderConditions.ValidateAll() if the designated
// constraints aren't met.
type PolicyBuilderConditionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyBuilderConditionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyBuilderConditionsMultiError) AllErrors() []error { return m }

// PolicyBuilderConditionsValidationError is the validation error returned by
// PolicyBuilderConditions.Validate if the designated constraints aren't met.
type PolicyBuilderConditionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyBuilderConditionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyBuilderConditionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyBuilderConditionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyBuilderConditionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyBuilderConditionsValidationError) ErrorName() string {
	return "PolicyBuilderConditionsValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyBuilderConditionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyBuilderConditions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyBuilderConditionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyBuilderConditionsValidationError{}

// Validate checks the field values on PolicyBuilderNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolicyBuilderNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyBuilderNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyBuilderNodeMultiError, or nil if none found.
func (m *PolicyBuilderNode) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyBuilderNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alias

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyBuilderNodeValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyBuilderNodeValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyBuilderNodeValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyBuilderNodeMultiError(errors)
	}

	return nil
}

// PolicyBuilderNodeMultiError is an error wrapping multiple validation errors
// returned by PolicyBuilderNode.ValidateAll() if the designated constraints
// aren't met.
type PolicyBuilderNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyBuilderNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyBuilderNodeMultiError) AllErrors() []error { return m }

// PolicyBuilderNodeValidationError is the validation error returned by
// PolicyBuilderNode.Validate if the designated constraints aren't met.
type PolicyBuilderNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyBuilderNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyBuilderNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyBuilderNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyBuilderNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyBuilderNodeValidationError) ErrorName() string {
	return "PolicyBuilderNodeValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyBuilderNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyBuilderNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyBuilderNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyBuilderNodeValidationError{}

// Validate checks the field values on PolicyBuilderRelationship with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyBuilderRelationship) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyBuilderRelationship with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyBuilderRelationshipMultiError, or nil if none found.
func (m *PolicyBuilderRelationship) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyBuilderRelationship) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Undirected

	// no validation rules for SourceAlias

	// no validation rules for TargetAlias

	// no validation rules for RelationshipType

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyBuilderRelationshipValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyBuilderRelationshipValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyBuilderRelationshipValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyBuilderRelationshipMultiError(errors)
	}

	return nil
}

// PolicyBuilderRelationshipMultiError is an error wrapping multiple validation
// errors returned by PolicyBuilderRelationship.ValidateAll() if the
// designated constraints aren't met.
type PolicyBuilderRelationshipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyBuilderRelationshipMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyBuilderRelationshipMultiError) AllErrors() []error { return m }

// PolicyBuilderRelationshipValidationError is the validation error returned by
// PolicyBuilderRelationship.Validate if the designated constraints aren't met.
type PolicyBuilderRelationshipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyBuilderRelationshipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyBuilderRelationshipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyBuilderRelationshipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyBuilderRelationshipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyBuilderRelationshipValidationError) ErrorName() string {
	return "PolicyBuilderRelationshipValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyBuilderRelationshipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyBuilderRelationship.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyBuilderRelationshipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyBuilderRelationshipValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Filter.(type) {
	case *Filter_NotFilter:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNotFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "NotFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "NotFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNotFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "NotFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_SimpleFilter:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSimpleFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "SimpleFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "SimpleFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSimpleFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "SimpleFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_ComplexFilter:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetComplexFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "ComplexFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "ComplexFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetComplexFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "ComplexFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on NotFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotFilterMultiError, or nil
// if none found.
func (m *NotFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *NotFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotFilterValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotFilterValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotFilterValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotFilterMultiError(errors)
	}

	return nil
}

// NotFilterMultiError is an error wrapping multiple validation errors returned
// by NotFilter.ValidateAll() if the designated constraints aren't met.
type NotFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotFilterMultiError) AllErrors() []error { return m }

// NotFilterValidationError is the validation error returned by
// NotFilter.Validate if the designated constraints aren't met.
type NotFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotFilterValidationError) ErrorName() string { return "NotFilterValidationError" }

// Error satisfies the builtin error interface
func (e NotFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotFilterValidationError{}

// Validate checks the field values on SimpleFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SimpleFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimpleFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SimpleFilterMultiError, or
// nil if none found.
func (m *SimpleFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *SimpleFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PropertyName

	if all {
		switch v := interface{}(m.GetPropertyValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SimpleFilterValidationError{
					field:  "PropertyValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SimpleFilterValidationError{
					field:  "PropertyValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPropertyValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SimpleFilterValidationError{
				field:  "PropertyValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	if len(errors) > 0 {
		return SimpleFilterMultiError(errors)
	}

	return nil
}

// SimpleFilterMultiError is an error wrapping multiple validation errors
// returned by SimpleFilter.ValidateAll() if the designated constraints aren't met.
type SimpleFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimpleFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimpleFilterMultiError) AllErrors() []error { return m }

// SimpleFilterValidationError is the validation error returned by
// SimpleFilter.Validate if the designated constraints aren't met.
type SimpleFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimpleFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimpleFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimpleFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimpleFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimpleFilterValidationError) ErrorName() string { return "SimpleFilterValidationError" }

// Error satisfies the builtin error interface
func (e SimpleFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimpleFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimpleFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimpleFilterValidationError{}

// Validate checks the field values on ComplexFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComplexFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComplexFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComplexFilterMultiError, or
// nil if none found.
func (m *ComplexFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ComplexFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComplexFilterValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComplexFilterValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComplexFilterValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Operator

	if len(errors) > 0 {
		return ComplexFilterMultiError(errors)
	}

	return nil
}

// ComplexFilterMultiError is an error wrapping multiple validation errors
// returned by ComplexFilter.ValidateAll() if the designated constraints
// aren't met.
type ComplexFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComplexFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComplexFilterMultiError) AllErrors() []error { return m }

// ComplexFilterValidationError is the validation error returned by
// ComplexFilter.Validate if the designated constraints aren't met.
type ComplexFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComplexFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComplexFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComplexFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComplexFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComplexFilterValidationError) ErrorName() string { return "ComplexFilterValidationError" }

// Error satisfies the builtin error interface
func (e ComplexFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComplexFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComplexFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComplexFilterValidationError{}

// Validate checks the field values on PropertyValueType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PropertyValueType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyValueType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PropertyValueTypeMultiError, or nil if none found.
func (m *PropertyValueType) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyValueType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Value.(type) {
	case *PropertyValueType_BoolValue:
		if v == nil {
			err := PropertyValueTypeValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BoolValue
	case *PropertyValueType_IntValue:
		if v == nil {
			err := PropertyValueTypeValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IntValue
	case *PropertyValueType_FloatValue:
		if v == nil {
			err := PropertyValueTypeValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FloatValue
	case *PropertyValueType_TimeValue:
		if v == nil {
			err := PropertyValueTypeValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimeValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PropertyValueTypeValidationError{
						field:  "TimeValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PropertyValueTypeValidationError{
						field:  "TimeValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PropertyValueTypeValidationError{
					field:  "TimeValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PropertyValueType_DurationValue:
		if v == nil {
			err := PropertyValueTypeValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDurationValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PropertyValueTypeValidationError{
						field:  "DurationValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PropertyValueTypeValidationError{
						field:  "DurationValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDurationValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PropertyValueTypeValidationError{
					field:  "DurationValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PropertyValueType_StringValue:
		if v == nil {
			err := PropertyValueTypeValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PropertyValueTypeMultiError(errors)
	}

	return nil
}

// PropertyValueTypeMultiError is an error wrapping multiple validation errors
// returned by PropertyValueType.ValidateAll() if the designated constraints
// aren't met.
type PropertyValueTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyValueTypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyValueTypeMultiError) AllErrors() []error { return m }

// PropertyValueTypeValidationError is the validation error returned by
// PropertyValueType.Validate if the designated constraints aren't met.
type PropertyValueTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyValueTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyValueTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyValueTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyValueTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyValueTypeValidationError) ErrorName() string {
	return "PropertyValueTypeValidationError"
}

// Error satisfies the builtin error interface
func (e PropertyValueTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyValueType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyValueTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyValueTypeValidationError{}
