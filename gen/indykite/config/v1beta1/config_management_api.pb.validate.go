// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/config/v1beta1/config_management_api.proto

package configv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReadCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadCustomerRequestMultiError, or nil if none found.
func (m *ReadCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Identifier.(type) {

	case *ReadCustomerRequest_Id:

		if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
			err := ReadCustomerRequestValidationError{
				field:  "Id",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadCustomerRequest_Id_Pattern.MatchString(m.GetId()) {
			err := ReadCustomerRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ReadCustomerRequest_Name:

		if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
			err := ReadCustomerRequestValidationError{
				field:  "Name",
				reason: "value length must be between 2 and 63 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadCustomerRequest_Name_Pattern.MatchString(m.GetName()) {
			err := ReadCustomerRequestValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		err := ReadCustomerRequestValidationError{
			field:  "Identifier",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ReadCustomerRequestMultiError(errors)
	}

	return nil
}

// ReadCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by ReadCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadCustomerRequestMultiError) AllErrors() []error { return m }

// ReadCustomerRequestValidationError is the validation error returned by
// ReadCustomerRequest.Validate if the designated constraints aren't met.
type ReadCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadCustomerRequestValidationError) ErrorName() string {
	return "ReadCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadCustomerRequestValidationError{}

var _ReadCustomerRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _ReadCustomerRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on ReadCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadCustomerResponseMultiError, or nil if none found.
func (m *ReadCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadCustomerResponseValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadCustomerResponseMultiError(errors)
	}

	return nil
}

// ReadCustomerResponseMultiError is an error wrapping multiple validation
// errors returned by ReadCustomerResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadCustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadCustomerResponseMultiError) AllErrors() []error { return m }

// ReadCustomerResponseValidationError is the validation error returned by
// ReadCustomerResponse.Validate if the designated constraints aren't met.
type ReadCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadCustomerResponseValidationError) ErrorName() string {
	return "ReadCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadCustomerResponseValidationError{}

// Validate checks the field values on CreateApplicationSpaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApplicationSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApplicationSpaceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateApplicationSpaceRequestMultiError, or nil if none found.
func (m *CreateApplicationSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApplicationSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCustomerId()); l < 22 || l > 254 {
		err := CreateApplicationSpaceRequestValidationError{
			field:  "CustomerId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateApplicationSpaceRequest_CustomerId_Pattern.MatchString(m.GetCustomerId()) {
		err := CreateApplicationSpaceRequestValidationError{
			field:  "CustomerId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
		err := CreateApplicationSpaceRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateApplicationSpaceRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateApplicationSpaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateApplicationSpaceRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateApplicationSpaceRequestValidationError{
				field:  "Description",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateApplicationSpaceRequestMultiError(errors)
	}

	return nil
}

// CreateApplicationSpaceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateApplicationSpaceRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateApplicationSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApplicationSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApplicationSpaceRequestMultiError) AllErrors() []error { return m }

// CreateApplicationSpaceRequestValidationError is the validation error
// returned by CreateApplicationSpaceRequest.Validate if the designated
// constraints aren't met.
type CreateApplicationSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationSpaceRequestValidationError) ErrorName() string {
	return "CreateApplicationSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationSpaceRequestValidationError{}

var _CreateApplicationSpaceRequest_CustomerId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _CreateApplicationSpaceRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on CreateApplicationSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApplicationSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApplicationSpaceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateApplicationSpaceResponseMultiError, or nil if none found.
func (m *CreateApplicationSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApplicationSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := CreateApplicationSpaceResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateApplicationSpaceResponse_Id_Pattern.MatchString(m.GetId()) {
		err := CreateApplicationSpaceResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateApplicationSpaceResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateApplicationSpaceResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationSpaceResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateApplicationSpaceResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateApplicationSpaceResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationSpaceResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return CreateApplicationSpaceResponseMultiError(errors)
	}

	return nil
}

// CreateApplicationSpaceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateApplicationSpaceResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateApplicationSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApplicationSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApplicationSpaceResponseMultiError) AllErrors() []error { return m }

// CreateApplicationSpaceResponseValidationError is the validation error
// returned by CreateApplicationSpaceResponse.Validate if the designated
// constraints aren't met.
type CreateApplicationSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationSpaceResponseValidationError) ErrorName() string {
	return "CreateApplicationSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationSpaceResponseValidationError{}

var _CreateApplicationSpaceResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadApplicationSpaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadApplicationSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadApplicationSpaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadApplicationSpaceRequestMultiError, or nil if none found.
func (m *ReadApplicationSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadApplicationSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Identifier.(type) {

	case *ReadApplicationSpaceRequest_Id:

		if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
			err := ReadApplicationSpaceRequestValidationError{
				field:  "Id",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadApplicationSpaceRequest_Id_Pattern.MatchString(m.GetId()) {
			err := ReadApplicationSpaceRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ReadApplicationSpaceRequest_Name:

		if all {
			switch v := interface{}(m.GetName()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadApplicationSpaceRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadApplicationSpaceRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadApplicationSpaceRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := ReadApplicationSpaceRequestValidationError{
			field:  "Identifier",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ReadApplicationSpaceRequestMultiError(errors)
	}

	return nil
}

// ReadApplicationSpaceRequestMultiError is an error wrapping multiple
// validation errors returned by ReadApplicationSpaceRequest.ValidateAll() if
// the designated constraints aren't met.
type ReadApplicationSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadApplicationSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadApplicationSpaceRequestMultiError) AllErrors() []error { return m }

// ReadApplicationSpaceRequestValidationError is the validation error returned
// by ReadApplicationSpaceRequest.Validate if the designated constraints
// aren't met.
type ReadApplicationSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationSpaceRequestValidationError) ErrorName() string {
	return "ReadApplicationSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationSpaceRequestValidationError{}

var _ReadApplicationSpaceRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadApplicationSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadApplicationSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadApplicationSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadApplicationSpaceResponseMultiError, or nil if none found.
func (m *ReadApplicationSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadApplicationSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAppSpace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadApplicationSpaceResponseValidationError{
					field:  "AppSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadApplicationSpaceResponseValidationError{
					field:  "AppSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppSpace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationSpaceResponseValidationError{
				field:  "AppSpace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadApplicationSpaceResponseMultiError(errors)
	}

	return nil
}

// ReadApplicationSpaceResponseMultiError is an error wrapping multiple
// validation errors returned by ReadApplicationSpaceResponse.ValidateAll() if
// the designated constraints aren't met.
type ReadApplicationSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadApplicationSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadApplicationSpaceResponseMultiError) AllErrors() []error { return m }

// ReadApplicationSpaceResponseValidationError is the validation error returned
// by ReadApplicationSpaceResponse.Validate if the designated constraints
// aren't met.
type ReadApplicationSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationSpaceResponseValidationError) ErrorName() string {
	return "ReadApplicationSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationSpaceResponseValidationError{}

// Validate checks the field values on ListApplicationSpacesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationSpacesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationSpacesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationSpacesRequestMultiError, or nil if none found.
func (m *ListApplicationSpacesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationSpacesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCustomerId()); l < 22 || l > 254 {
		err := ListApplicationSpacesRequestValidationError{
			field:  "CustomerId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListApplicationSpacesRequest_CustomerId_Pattern.MatchString(m.GetCustomerId()) {
		err := ListApplicationSpacesRequestValidationError{
			field:  "CustomerId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMatch()) < 1 {
		err := ListApplicationSpacesRequestValidationError{
			field:  "Match",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_ListApplicationSpacesRequest_Match_Unique := make(map[string]struct{}, len(m.GetMatch()))

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if _, exists := _ListApplicationSpacesRequest_Match_Unique[item]; exists {
			err := ListApplicationSpacesRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ListApplicationSpacesRequest_Match_Unique[item] = struct{}{}
		}

		if l := utf8.RuneCountInString(item); l < 2 || l > 254 {
			err := ListApplicationSpacesRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListApplicationSpacesRequest_Match_Pattern.MatchString(item) {
			err := ListApplicationSpacesRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,252}[a-z0-9])$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListApplicationSpacesRequestMultiError(errors)
	}

	return nil
}

// ListApplicationSpacesRequestMultiError is an error wrapping multiple
// validation errors returned by ListApplicationSpacesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListApplicationSpacesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationSpacesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationSpacesRequestMultiError) AllErrors() []error { return m }

// ListApplicationSpacesRequestValidationError is the validation error returned
// by ListApplicationSpacesRequest.Validate if the designated constraints
// aren't met.
type ListApplicationSpacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationSpacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationSpacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationSpacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationSpacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationSpacesRequestValidationError) ErrorName() string {
	return "ListApplicationSpacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationSpacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationSpacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationSpacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationSpacesRequestValidationError{}

var _ListApplicationSpacesRequest_CustomerId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _ListApplicationSpacesRequest_Match_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,252}[a-z0-9])$")

// Validate checks the field values on ListApplicationSpacesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationSpacesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationSpacesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListApplicationSpacesResponseMultiError, or nil if none found.
func (m *ListApplicationSpacesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationSpacesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAppSpace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListApplicationSpacesResponseValidationError{
					field:  "AppSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListApplicationSpacesResponseValidationError{
					field:  "AppSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppSpace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationSpacesResponseValidationError{
				field:  "AppSpace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListApplicationSpacesResponseMultiError(errors)
	}

	return nil
}

// ListApplicationSpacesResponseMultiError is an error wrapping multiple
// validation errors returned by ListApplicationSpacesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListApplicationSpacesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationSpacesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationSpacesResponseMultiError) AllErrors() []error { return m }

// ListApplicationSpacesResponseValidationError is the validation error
// returned by ListApplicationSpacesResponse.Validate if the designated
// constraints aren't met.
type ListApplicationSpacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationSpacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationSpacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationSpacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationSpacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationSpacesResponseValidationError) ErrorName() string {
	return "ListApplicationSpacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationSpacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationSpacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationSpacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationSpacesResponseValidationError{}

// Validate checks the field values on UpdateApplicationSpaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationSpaceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateApplicationSpaceRequestMultiError, or nil if none found.
func (m *UpdateApplicationSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateApplicationSpaceRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateApplicationSpaceRequest_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateApplicationSpaceRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := UpdateApplicationSpaceRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_UpdateApplicationSpaceRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := UpdateApplicationSpaceRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateApplicationSpaceRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateApplicationSpaceRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return UpdateApplicationSpaceRequestMultiError(errors)
	}

	return nil
}

// UpdateApplicationSpaceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateApplicationSpaceRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateApplicationSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationSpaceRequestMultiError) AllErrors() []error { return m }

// UpdateApplicationSpaceRequestValidationError is the validation error
// returned by UpdateApplicationSpaceRequest.Validate if the designated
// constraints aren't met.
type UpdateApplicationSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationSpaceRequestValidationError) ErrorName() string {
	return "UpdateApplicationSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationSpaceRequestValidationError{}

var _UpdateApplicationSpaceRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _UpdateApplicationSpaceRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on UpdateApplicationSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationSpaceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateApplicationSpaceResponseMultiError, or nil if none found.
func (m *UpdateApplicationSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateApplicationSpaceResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateApplicationSpaceResponse_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateApplicationSpaceResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateApplicationSpaceResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateApplicationSpaceResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationSpaceResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return UpdateApplicationSpaceResponseMultiError(errors)
	}

	return nil
}

// UpdateApplicationSpaceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateApplicationSpaceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateApplicationSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationSpaceResponseMultiError) AllErrors() []error { return m }

// UpdateApplicationSpaceResponseValidationError is the validation error
// returned by UpdateApplicationSpaceResponse.Validate if the designated
// constraints aren't met.
type UpdateApplicationSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationSpaceResponseValidationError) ErrorName() string {
	return "UpdateApplicationSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationSpaceResponseValidationError{}

var _UpdateApplicationSpaceResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteApplicationSpaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationSpaceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteApplicationSpaceRequestMultiError, or nil if none found.
func (m *DeleteApplicationSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteApplicationSpaceRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteApplicationSpaceRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteApplicationSpaceRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := DeleteApplicationSpaceRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_DeleteApplicationSpaceRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := DeleteApplicationSpaceRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return DeleteApplicationSpaceRequestMultiError(errors)
	}

	return nil
}

// DeleteApplicationSpaceRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteApplicationSpaceRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteApplicationSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationSpaceRequestMultiError) AllErrors() []error { return m }

// DeleteApplicationSpaceRequestValidationError is the validation error
// returned by DeleteApplicationSpaceRequest.Validate if the designated
// constraints aren't met.
type DeleteApplicationSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationSpaceRequestValidationError) ErrorName() string {
	return "DeleteApplicationSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationSpaceRequestValidationError{}

var _DeleteApplicationSpaceRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _DeleteApplicationSpaceRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on DeleteApplicationSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationSpaceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteApplicationSpaceResponseMultiError, or nil if none found.
func (m *DeleteApplicationSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteApplicationSpaceResponseMultiError(errors)
	}

	return nil
}

// DeleteApplicationSpaceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteApplicationSpaceResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteApplicationSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationSpaceResponseMultiError) AllErrors() []error { return m }

// DeleteApplicationSpaceResponseValidationError is the validation error
// returned by DeleteApplicationSpaceResponse.Validate if the designated
// constraints aren't met.
type DeleteApplicationSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationSpaceResponseValidationError) ErrorName() string {
	return "DeleteApplicationSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationSpaceResponseValidationError{}

// Validate checks the field values on CreateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateApplicationRequestMultiError, or nil if none found.
func (m *CreateApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAppSpaceId()); l < 22 || l > 254 {
		err := CreateApplicationRequestValidationError{
			field:  "AppSpaceId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateApplicationRequest_AppSpaceId_Pattern.MatchString(m.GetAppSpaceId()) {
		err := CreateApplicationRequestValidationError{
			field:  "AppSpaceId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
		err := CreateApplicationRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateApplicationRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateApplicationRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateApplicationRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateApplicationRequestValidationError{
				field:  "Description",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateApplicationRequestMultiError(errors)
	}

	return nil
}

// CreateApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApplicationRequestMultiError) AllErrors() []error { return m }

// CreateApplicationRequestValidationError is the validation error returned by
// CreateApplicationRequest.Validate if the designated constraints aren't met.
type CreateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationRequestValidationError) ErrorName() string {
	return "CreateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationRequestValidationError{}

var _CreateApplicationRequest_AppSpaceId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _CreateApplicationRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on CreateApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateApplicationResponseMultiError, or nil if none found.
func (m *CreateApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := CreateApplicationResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateApplicationResponse_Id_Pattern.MatchString(m.GetId()) {
		err := CreateApplicationResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateApplicationResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateApplicationResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateApplicationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateApplicationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return CreateApplicationResponseMultiError(errors)
	}

	return nil
}

// CreateApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateApplicationResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApplicationResponseMultiError) AllErrors() []error { return m }

// CreateApplicationResponseValidationError is the validation error returned by
// CreateApplicationResponse.Validate if the designated constraints aren't met.
type CreateApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationResponseValidationError) ErrorName() string {
	return "CreateApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationResponseValidationError{}

var _CreateApplicationResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadApplicationRequestMultiError, or nil if none found.
func (m *ReadApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Identifier.(type) {

	case *ReadApplicationRequest_Id:

		if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
			err := ReadApplicationRequestValidationError{
				field:  "Id",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadApplicationRequest_Id_Pattern.MatchString(m.GetId()) {
			err := ReadApplicationRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ReadApplicationRequest_Name:

		if all {
			switch v := interface{}(m.GetName()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadApplicationRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadApplicationRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadApplicationRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := ReadApplicationRequestValidationError{
			field:  "Identifier",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ReadApplicationRequestMultiError(errors)
	}

	return nil
}

// ReadApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by ReadApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadApplicationRequestMultiError) AllErrors() []error { return m }

// ReadApplicationRequestValidationError is the validation error returned by
// ReadApplicationRequest.Validate if the designated constraints aren't met.
type ReadApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationRequestValidationError) ErrorName() string {
	return "ReadApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationRequestValidationError{}

var _ReadApplicationRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadApplicationResponseMultiError, or nil if none found.
func (m *ReadApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationResponseValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadApplicationResponseMultiError(errors)
	}

	return nil
}

// ReadApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by ReadApplicationResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadApplicationResponseMultiError) AllErrors() []error { return m }

// ReadApplicationResponseValidationError is the validation error returned by
// ReadApplicationResponse.Validate if the designated constraints aren't met.
type ReadApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationResponseValidationError) ErrorName() string {
	return "ReadApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationResponseValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsRequestMultiError, or nil if none found.
func (m *ListApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAppSpaceId()); l < 22 || l > 254 {
		err := ListApplicationsRequestValidationError{
			field:  "AppSpaceId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListApplicationsRequest_AppSpaceId_Pattern.MatchString(m.GetAppSpaceId()) {
		err := ListApplicationsRequestValidationError{
			field:  "AppSpaceId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMatch()) < 1 {
		err := ListApplicationsRequestValidationError{
			field:  "Match",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_ListApplicationsRequest_Match_Unique := make(map[string]struct{}, len(m.GetMatch()))

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if _, exists := _ListApplicationsRequest_Match_Unique[item]; exists {
			err := ListApplicationsRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ListApplicationsRequest_Match_Unique[item] = struct{}{}
		}

		if l := utf8.RuneCountInString(item); l < 2 || l > 254 {
			err := ListApplicationsRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListApplicationsRequest_Match_Pattern.MatchString(item) {
			err := ListApplicationsRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,252}[a-z0-9])$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListApplicationsRequestMultiError(errors)
	}

	return nil
}

// ListApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsRequestMultiError) AllErrors() []error { return m }

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

var _ListApplicationsRequest_AppSpaceId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _ListApplicationsRequest_Match_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,252}[a-z0-9])$")

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsResponseMultiError, or nil if none found.
func (m *ListApplicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListApplicationsResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListApplicationsResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsResponseValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListApplicationsResponseMultiError(errors)
	}

	return nil
}

// ListApplicationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsResponseMultiError) AllErrors() []error { return m }

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on UpdateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApplicationRequestMultiError, or nil if none found.
func (m *UpdateApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateApplicationRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateApplicationRequest_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateApplicationRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := UpdateApplicationRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_UpdateApplicationRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := UpdateApplicationRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateApplicationRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateApplicationRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return UpdateApplicationRequestMultiError(errors)
	}

	return nil
}

// UpdateApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationRequestMultiError) AllErrors() []error { return m }

// UpdateApplicationRequestValidationError is the validation error returned by
// UpdateApplicationRequest.Validate if the designated constraints aren't met.
type UpdateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationRequestValidationError) ErrorName() string {
	return "UpdateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationRequestValidationError{}

var _UpdateApplicationRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _UpdateApplicationRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on UpdateApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApplicationResponseMultiError, or nil if none found.
func (m *UpdateApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateApplicationResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateApplicationResponse_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateApplicationResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateApplicationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateApplicationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return UpdateApplicationResponseMultiError(errors)
	}

	return nil
}

// UpdateApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateApplicationResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationResponseMultiError) AllErrors() []error { return m }

// UpdateApplicationResponseValidationError is the validation error returned by
// UpdateApplicationResponse.Validate if the designated constraints aren't met.
type UpdateApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationResponseValidationError) ErrorName() string {
	return "UpdateApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationResponseValidationError{}

var _UpdateApplicationResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApplicationRequestMultiError, or nil if none found.
func (m *DeleteApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteApplicationRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteApplicationRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteApplicationRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := DeleteApplicationRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_DeleteApplicationRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := DeleteApplicationRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return DeleteApplicationRequestMultiError(errors)
	}

	return nil
}

// DeleteApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationRequestMultiError) AllErrors() []error { return m }

// DeleteApplicationRequestValidationError is the validation error returned by
// DeleteApplicationRequest.Validate if the designated constraints aren't met.
type DeleteApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRequestValidationError) ErrorName() string {
	return "DeleteApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRequestValidationError{}

var _DeleteApplicationRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _DeleteApplicationRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on DeleteApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApplicationResponseMultiError, or nil if none found.
func (m *DeleteApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteApplicationResponseMultiError(errors)
	}

	return nil
}

// DeleteApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteApplicationResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationResponseMultiError) AllErrors() []error { return m }

// DeleteApplicationResponseValidationError is the validation error returned by
// DeleteApplicationResponse.Validate if the designated constraints aren't met.
type DeleteApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationResponseValidationError) ErrorName() string {
	return "DeleteApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationResponseValidationError{}

// Validate checks the field values on CreateApplicationAgentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApplicationAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApplicationAgentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateApplicationAgentRequestMultiError, or nil if none found.
func (m *CreateApplicationAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApplicationAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetApplicationId()); l < 22 || l > 254 {
		err := CreateApplicationAgentRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateApplicationAgentRequest_ApplicationId_Pattern.MatchString(m.GetApplicationId()) {
		err := CreateApplicationAgentRequestValidationError{
			field:  "ApplicationId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
		err := CreateApplicationAgentRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateApplicationAgentRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateApplicationAgentRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateApplicationAgentRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateApplicationAgentRequestValidationError{
				field:  "Description",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateApplicationAgentRequestMultiError(errors)
	}

	return nil
}

// CreateApplicationAgentRequestMultiError is an error wrapping multiple
// validation errors returned by CreateApplicationAgentRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateApplicationAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApplicationAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApplicationAgentRequestMultiError) AllErrors() []error { return m }

// CreateApplicationAgentRequestValidationError is the validation error
// returned by CreateApplicationAgentRequest.Validate if the designated
// constraints aren't met.
type CreateApplicationAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationAgentRequestValidationError) ErrorName() string {
	return "CreateApplicationAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationAgentRequestValidationError{}

var _CreateApplicationAgentRequest_ApplicationId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _CreateApplicationAgentRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on CreateApplicationAgentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApplicationAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApplicationAgentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateApplicationAgentResponseMultiError, or nil if none found.
func (m *CreateApplicationAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApplicationAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := CreateApplicationAgentResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateApplicationAgentResponse_Id_Pattern.MatchString(m.GetId()) {
		err := CreateApplicationAgentResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateApplicationAgentResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateApplicationAgentResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationAgentResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateApplicationAgentResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateApplicationAgentResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationAgentResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return CreateApplicationAgentResponseMultiError(errors)
	}

	return nil
}

// CreateApplicationAgentResponseMultiError is an error wrapping multiple
// validation errors returned by CreateApplicationAgentResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateApplicationAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApplicationAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApplicationAgentResponseMultiError) AllErrors() []error { return m }

// CreateApplicationAgentResponseValidationError is the validation error
// returned by CreateApplicationAgentResponse.Validate if the designated
// constraints aren't met.
type CreateApplicationAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationAgentResponseValidationError) ErrorName() string {
	return "CreateApplicationAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationAgentResponseValidationError{}

var _CreateApplicationAgentResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadApplicationAgentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadApplicationAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadApplicationAgentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadApplicationAgentRequestMultiError, or nil if none found.
func (m *ReadApplicationAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadApplicationAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Identifier.(type) {

	case *ReadApplicationAgentRequest_Id:

		if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
			err := ReadApplicationAgentRequestValidationError{
				field:  "Id",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadApplicationAgentRequest_Id_Pattern.MatchString(m.GetId()) {
			err := ReadApplicationAgentRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ReadApplicationAgentRequest_Name:

		if all {
			switch v := interface{}(m.GetName()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadApplicationAgentRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadApplicationAgentRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadApplicationAgentRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := ReadApplicationAgentRequestValidationError{
			field:  "Identifier",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ReadApplicationAgentRequestMultiError(errors)
	}

	return nil
}

// ReadApplicationAgentRequestMultiError is an error wrapping multiple
// validation errors returned by ReadApplicationAgentRequest.ValidateAll() if
// the designated constraints aren't met.
type ReadApplicationAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadApplicationAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadApplicationAgentRequestMultiError) AllErrors() []error { return m }

// ReadApplicationAgentRequestValidationError is the validation error returned
// by ReadApplicationAgentRequest.Validate if the designated constraints
// aren't met.
type ReadApplicationAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationAgentRequestValidationError) ErrorName() string {
	return "ReadApplicationAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationAgentRequestValidationError{}

var _ReadApplicationAgentRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadApplicationAgentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadApplicationAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadApplicationAgentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadApplicationAgentResponseMultiError, or nil if none found.
func (m *ReadApplicationAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadApplicationAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplicationAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadApplicationAgentResponseValidationError{
					field:  "ApplicationAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadApplicationAgentResponseValidationError{
					field:  "ApplicationAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplicationAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationAgentResponseValidationError{
				field:  "ApplicationAgent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadApplicationAgentResponseMultiError(errors)
	}

	return nil
}

// ReadApplicationAgentResponseMultiError is an error wrapping multiple
// validation errors returned by ReadApplicationAgentResponse.ValidateAll() if
// the designated constraints aren't met.
type ReadApplicationAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadApplicationAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadApplicationAgentResponseMultiError) AllErrors() []error { return m }

// ReadApplicationAgentResponseValidationError is the validation error returned
// by ReadApplicationAgentResponse.Validate if the designated constraints
// aren't met.
type ReadApplicationAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationAgentResponseValidationError) ErrorName() string {
	return "ReadApplicationAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationAgentResponseValidationError{}

// Validate checks the field values on ListApplicationAgentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationAgentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationAgentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationAgentsRequestMultiError, or nil if none found.
func (m *ListApplicationAgentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationAgentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAppSpaceId()); l < 22 || l > 254 {
		err := ListApplicationAgentsRequestValidationError{
			field:  "AppSpaceId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListApplicationAgentsRequest_AppSpaceId_Pattern.MatchString(m.GetAppSpaceId()) {
		err := ListApplicationAgentsRequestValidationError{
			field:  "AppSpaceId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMatch()) < 1 {
		err := ListApplicationAgentsRequestValidationError{
			field:  "Match",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_ListApplicationAgentsRequest_Match_Unique := make(map[string]struct{}, len(m.GetMatch()))

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if _, exists := _ListApplicationAgentsRequest_Match_Unique[item]; exists {
			err := ListApplicationAgentsRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ListApplicationAgentsRequest_Match_Unique[item] = struct{}{}
		}

		if l := utf8.RuneCountInString(item); l < 2 || l > 254 {
			err := ListApplicationAgentsRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListApplicationAgentsRequest_Match_Pattern.MatchString(item) {
			err := ListApplicationAgentsRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,252}[a-z0-9])$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListApplicationAgentsRequestMultiError(errors)
	}

	return nil
}

// ListApplicationAgentsRequestMultiError is an error wrapping multiple
// validation errors returned by ListApplicationAgentsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListApplicationAgentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationAgentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationAgentsRequestMultiError) AllErrors() []error { return m }

// ListApplicationAgentsRequestValidationError is the validation error returned
// by ListApplicationAgentsRequest.Validate if the designated constraints
// aren't met.
type ListApplicationAgentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationAgentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationAgentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationAgentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationAgentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationAgentsRequestValidationError) ErrorName() string {
	return "ListApplicationAgentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationAgentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationAgentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationAgentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationAgentsRequestValidationError{}

var _ListApplicationAgentsRequest_AppSpaceId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _ListApplicationAgentsRequest_Match_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,252}[a-z0-9])$")

// Validate checks the field values on ListApplicationAgentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationAgentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationAgentsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListApplicationAgentsResponseMultiError, or nil if none found.
func (m *ListApplicationAgentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationAgentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplicationAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListApplicationAgentsResponseValidationError{
					field:  "ApplicationAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListApplicationAgentsResponseValidationError{
					field:  "ApplicationAgent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplicationAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationAgentsResponseValidationError{
				field:  "ApplicationAgent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListApplicationAgentsResponseMultiError(errors)
	}

	return nil
}

// ListApplicationAgentsResponseMultiError is an error wrapping multiple
// validation errors returned by ListApplicationAgentsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListApplicationAgentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationAgentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationAgentsResponseMultiError) AllErrors() []error { return m }

// ListApplicationAgentsResponseValidationError is the validation error
// returned by ListApplicationAgentsResponse.Validate if the designated
// constraints aren't met.
type ListApplicationAgentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationAgentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationAgentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationAgentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationAgentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationAgentsResponseValidationError) ErrorName() string {
	return "ListApplicationAgentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationAgentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationAgentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationAgentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationAgentsResponseValidationError{}

// Validate checks the field values on UpdateApplicationAgentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationAgentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateApplicationAgentRequestMultiError, or nil if none found.
func (m *UpdateApplicationAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateApplicationAgentRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateApplicationAgentRequest_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateApplicationAgentRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := UpdateApplicationAgentRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_UpdateApplicationAgentRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := UpdateApplicationAgentRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateApplicationAgentRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateApplicationAgentRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return UpdateApplicationAgentRequestMultiError(errors)
	}

	return nil
}

// UpdateApplicationAgentRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateApplicationAgentRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateApplicationAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationAgentRequestMultiError) AllErrors() []error { return m }

// UpdateApplicationAgentRequestValidationError is the validation error
// returned by UpdateApplicationAgentRequest.Validate if the designated
// constraints aren't met.
type UpdateApplicationAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationAgentRequestValidationError) ErrorName() string {
	return "UpdateApplicationAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationAgentRequestValidationError{}

var _UpdateApplicationAgentRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _UpdateApplicationAgentRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on UpdateApplicationAgentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationAgentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateApplicationAgentResponseMultiError, or nil if none found.
func (m *UpdateApplicationAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateApplicationAgentResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateApplicationAgentResponse_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateApplicationAgentResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateApplicationAgentResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateApplicationAgentResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationAgentResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return UpdateApplicationAgentResponseMultiError(errors)
	}

	return nil
}

// UpdateApplicationAgentResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateApplicationAgentResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateApplicationAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationAgentResponseMultiError) AllErrors() []error { return m }

// UpdateApplicationAgentResponseValidationError is the validation error
// returned by UpdateApplicationAgentResponse.Validate if the designated
// constraints aren't met.
type UpdateApplicationAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationAgentResponseValidationError) ErrorName() string {
	return "UpdateApplicationAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationAgentResponseValidationError{}

var _UpdateApplicationAgentResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteApplicationAgentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationAgentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteApplicationAgentRequestMultiError, or nil if none found.
func (m *DeleteApplicationAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteApplicationAgentRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteApplicationAgentRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteApplicationAgentRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := DeleteApplicationAgentRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_DeleteApplicationAgentRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := DeleteApplicationAgentRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return DeleteApplicationAgentRequestMultiError(errors)
	}

	return nil
}

// DeleteApplicationAgentRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteApplicationAgentRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteApplicationAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationAgentRequestMultiError) AllErrors() []error { return m }

// DeleteApplicationAgentRequestValidationError is the validation error
// returned by DeleteApplicationAgentRequest.Validate if the designated
// constraints aren't met.
type DeleteApplicationAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationAgentRequestValidationError) ErrorName() string {
	return "DeleteApplicationAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationAgentRequestValidationError{}

var _DeleteApplicationAgentRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _DeleteApplicationAgentRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on DeleteApplicationAgentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationAgentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteApplicationAgentResponseMultiError, or nil if none found.
func (m *DeleteApplicationAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteApplicationAgentResponseMultiError(errors)
	}

	return nil
}

// DeleteApplicationAgentResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteApplicationAgentResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteApplicationAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationAgentResponseMultiError) AllErrors() []error { return m }

// DeleteApplicationAgentResponseValidationError is the validation error
// returned by DeleteApplicationAgentResponse.Validate if the designated
// constraints aren't met.
type DeleteApplicationAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationAgentResponseValidationError) ErrorName() string {
	return "DeleteApplicationAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationAgentResponseValidationError{}

// Validate checks the field values on
// RegisterApplicationAgentCredentialRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterApplicationAgentCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RegisterApplicationAgentCredentialRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RegisterApplicationAgentCredentialRequestMultiError, or nil if none found.
func (m *RegisterApplicationAgentCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterApplicationAgentCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetApplicationAgentId()); l < 22 || l > 254 {
		err := RegisterApplicationAgentCredentialRequestValidationError{
			field:  "ApplicationAgentId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterApplicationAgentCredentialRequest_ApplicationAgentId_Pattern.MatchString(m.GetApplicationAgentId()) {
		err := RegisterApplicationAgentCredentialRequestValidationError{
			field:  "ApplicationAgentId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDisplayName() != "" {

		if l := utf8.RuneCountInString(m.GetDisplayName()); l < 2 || l > 254 {
			err := RegisterApplicationAgentCredentialRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if t := m.GetExpireTime(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = RegisterApplicationAgentCredentialRequestValidationError{
				field:  "ExpireTime",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := RegisterApplicationAgentCredentialRequestValidationError{
					field:  "ExpireTime",
					reason: "value must be greater than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if m.GetDefaultTenantId() != "" {

		if l := utf8.RuneCountInString(m.GetDefaultTenantId()); l < 22 || l > 254 {
			err := RegisterApplicationAgentCredentialRequestValidationError{
				field:  "DefaultTenantId",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_RegisterApplicationAgentCredentialRequest_DefaultTenantId_Pattern.MatchString(m.GetDefaultTenantId()) {
			err := RegisterApplicationAgentCredentialRequestValidationError{
				field:  "DefaultTenantId",
				reason: "value does not match regex pattern \"^gid:[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	switch m.PublicKey.(type) {

	case *RegisterApplicationAgentCredentialRequest_Jwk:

		if l := len(m.GetJwk()); l < 96 || l > 8192 {
			err := RegisterApplicationAgentCredentialRequestValidationError{
				field:  "Jwk",
				reason: "value length must be between 96 and 8192 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !bytes.HasPrefix(m.GetJwk(), []uint8{0x7B}) {
			err := RegisterApplicationAgentCredentialRequestValidationError{
				field:  "Jwk",
				reason: "value does not have prefix \"\\x7B\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !bytes.HasSuffix(m.GetJwk(), []uint8{0x7D}) {
			err := RegisterApplicationAgentCredentialRequestValidationError{
				field:  "Jwk",
				reason: "value does not have suffix \"\\x7D\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RegisterApplicationAgentCredentialRequest_Pem:

		if l := len(m.GetPem()); l < 256 || l > 8192 {
			err := RegisterApplicationAgentCredentialRequestValidationError{
				field:  "Pem",
				reason: "value length must be between 256 and 8192 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !bytes.HasPrefix(m.GetPem(), []uint8{0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x50, 0x55, 0x42, 0x4C, 0x49, 0x43, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D}) {
			err := RegisterApplicationAgentCredentialRequestValidationError{
				field:  "Pem",
				reason: "value does not have prefix \"\\x2D\\x2D\\x2D\\x2D\\x2D\\x42\\x45\\x47\\x49\\x4E\\x20\\x50\\x55\\x42\\x4C\\x49\\x43\\x20\\x4B\\x45\\x59\\x2D\\x2D\\x2D\\x2D\\x2D\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !bytes.HasSuffix(m.GetPem(), []uint8{0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4C, 0x49, 0x43, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D}) {
			err := RegisterApplicationAgentCredentialRequestValidationError{
				field:  "Pem",
				reason: "value does not have suffix \"\\x2D\\x2D\\x2D\\x2D\\x2D\\x45\\x4E\\x44\\x20\\x50\\x55\\x42\\x4C\\x49\\x43\\x20\\x4B\\x45\\x59\\x2D\\x2D\\x2D\\x2D\\x2D\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RegisterApplicationAgentCredentialRequestMultiError(errors)
	}

	return nil
}

// RegisterApplicationAgentCredentialRequestMultiError is an error wrapping
// multiple validation errors returned by
// RegisterApplicationAgentCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterApplicationAgentCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterApplicationAgentCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterApplicationAgentCredentialRequestMultiError) AllErrors() []error { return m }

// RegisterApplicationAgentCredentialRequestValidationError is the validation
// error returned by RegisterApplicationAgentCredentialRequest.Validate if the
// designated constraints aren't met.
type RegisterApplicationAgentCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterApplicationAgentCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterApplicationAgentCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterApplicationAgentCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterApplicationAgentCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterApplicationAgentCredentialRequestValidationError) ErrorName() string {
	return "RegisterApplicationAgentCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterApplicationAgentCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterApplicationAgentCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterApplicationAgentCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterApplicationAgentCredentialRequestValidationError{}

var _RegisterApplicationAgentCredentialRequest_ApplicationAgentId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _RegisterApplicationAgentCredentialRequest_DefaultTenantId_Pattern = regexp.MustCompile("^gid:[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on
// RegisterApplicationAgentCredentialResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterApplicationAgentCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RegisterApplicationAgentCredentialResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RegisterApplicationAgentCredentialResponseMultiError, or nil if none found.
func (m *RegisterApplicationAgentCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterApplicationAgentCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := RegisterApplicationAgentCredentialResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterApplicationAgentCredentialResponse_Id_Pattern.MatchString(m.GetId()) {
		err := RegisterApplicationAgentCredentialResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetApplicationAgentId()); l < 22 || l > 254 {
		err := RegisterApplicationAgentCredentialResponseValidationError{
			field:  "ApplicationAgentId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterApplicationAgentCredentialResponse_ApplicationAgentId_Pattern.MatchString(m.GetApplicationAgentId()) {
		err := RegisterApplicationAgentCredentialResponseValidationError{
			field:  "ApplicationAgentId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Kid

	// no validation rules for AgentConfig

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterApplicationAgentCredentialResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterApplicationAgentCredentialResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterApplicationAgentCredentialResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterApplicationAgentCredentialResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterApplicationAgentCredentialResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterApplicationAgentCredentialResponseValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterApplicationAgentCredentialResponseMultiError(errors)
	}

	return nil
}

// RegisterApplicationAgentCredentialResponseMultiError is an error wrapping
// multiple validation errors returned by
// RegisterApplicationAgentCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterApplicationAgentCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterApplicationAgentCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterApplicationAgentCredentialResponseMultiError) AllErrors() []error { return m }

// RegisterApplicationAgentCredentialResponseValidationError is the validation
// error returned by RegisterApplicationAgentCredentialResponse.Validate if
// the designated constraints aren't met.
type RegisterApplicationAgentCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterApplicationAgentCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterApplicationAgentCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterApplicationAgentCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterApplicationAgentCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterApplicationAgentCredentialResponseValidationError) ErrorName() string {
	return "RegisterApplicationAgentCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterApplicationAgentCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterApplicationAgentCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterApplicationAgentCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterApplicationAgentCredentialResponseValidationError{}

var _RegisterApplicationAgentCredentialResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _RegisterApplicationAgentCredentialResponse_ApplicationAgentId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadApplicationAgentCredentialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReadApplicationAgentCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadApplicationAgentCredentialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadApplicationAgentCredentialRequestMultiError, or nil if none found.
func (m *ReadApplicationAgentCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadApplicationAgentCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := ReadApplicationAgentCredentialRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReadApplicationAgentCredentialRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ReadApplicationAgentCredentialRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadApplicationAgentCredentialRequestMultiError(errors)
	}

	return nil
}

// ReadApplicationAgentCredentialRequestMultiError is an error wrapping
// multiple validation errors returned by
// ReadApplicationAgentCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadApplicationAgentCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadApplicationAgentCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadApplicationAgentCredentialRequestMultiError) AllErrors() []error { return m }

// ReadApplicationAgentCredentialRequestValidationError is the validation error
// returned by ReadApplicationAgentCredentialRequest.Validate if the
// designated constraints aren't met.
type ReadApplicationAgentCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationAgentCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationAgentCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationAgentCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationAgentCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationAgentCredentialRequestValidationError) ErrorName() string {
	return "ReadApplicationAgentCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationAgentCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationAgentCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationAgentCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationAgentCredentialRequestValidationError{}

var _ReadApplicationAgentCredentialRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadApplicationAgentCredentialResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReadApplicationAgentCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReadApplicationAgentCredentialResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ReadApplicationAgentCredentialResponseMultiError, or nil if none found.
func (m *ReadApplicationAgentCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadApplicationAgentCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplicationAgentCredential()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadApplicationAgentCredentialResponseValidationError{
					field:  "ApplicationAgentCredential",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadApplicationAgentCredentialResponseValidationError{
					field:  "ApplicationAgentCredential",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplicationAgentCredential()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationAgentCredentialResponseValidationError{
				field:  "ApplicationAgentCredential",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadApplicationAgentCredentialResponseMultiError(errors)
	}

	return nil
}

// ReadApplicationAgentCredentialResponseMultiError is an error wrapping
// multiple validation errors returned by
// ReadApplicationAgentCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadApplicationAgentCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadApplicationAgentCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadApplicationAgentCredentialResponseMultiError) AllErrors() []error { return m }

// ReadApplicationAgentCredentialResponseValidationError is the validation
// error returned by ReadApplicationAgentCredentialResponse.Validate if the
// designated constraints aren't met.
type ReadApplicationAgentCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationAgentCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationAgentCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationAgentCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationAgentCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationAgentCredentialResponseValidationError) ErrorName() string {
	return "ReadApplicationAgentCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationAgentCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationAgentCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationAgentCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationAgentCredentialResponseValidationError{}

// Validate checks the field values on DeleteApplicationAgentCredentialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteApplicationAgentCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteApplicationAgentCredentialRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteApplicationAgentCredentialRequestMultiError, or nil if none found.
func (m *DeleteApplicationAgentCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationAgentCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteApplicationAgentCredentialRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteApplicationAgentCredentialRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteApplicationAgentCredentialRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteApplicationAgentCredentialRequestMultiError(errors)
	}

	return nil
}

// DeleteApplicationAgentCredentialRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteApplicationAgentCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteApplicationAgentCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationAgentCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationAgentCredentialRequestMultiError) AllErrors() []error { return m }

// DeleteApplicationAgentCredentialRequestValidationError is the validation
// error returned by DeleteApplicationAgentCredentialRequest.Validate if the
// designated constraints aren't met.
type DeleteApplicationAgentCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationAgentCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationAgentCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationAgentCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationAgentCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationAgentCredentialRequestValidationError) ErrorName() string {
	return "DeleteApplicationAgentCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationAgentCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationAgentCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationAgentCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationAgentCredentialRequestValidationError{}

var _DeleteApplicationAgentCredentialRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteApplicationAgentCredentialResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteApplicationAgentCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteApplicationAgentCredentialResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteApplicationAgentCredentialResponseMultiError, or nil if none found.
func (m *DeleteApplicationAgentCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationAgentCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteApplicationAgentCredentialResponseMultiError(errors)
	}

	return nil
}

// DeleteApplicationAgentCredentialResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteApplicationAgentCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteApplicationAgentCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationAgentCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationAgentCredentialResponseMultiError) AllErrors() []error { return m }

// DeleteApplicationAgentCredentialResponseValidationError is the validation
// error returned by DeleteApplicationAgentCredentialResponse.Validate if the
// designated constraints aren't met.
type DeleteApplicationAgentCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationAgentCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationAgentCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationAgentCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationAgentCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationAgentCredentialResponseValidationError) ErrorName() string {
	return "DeleteApplicationAgentCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationAgentCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationAgentCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationAgentCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationAgentCredentialResponseValidationError{}

// Validate checks the field values on CreateServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceAccountRequestMultiError, or nil if none found.
func (m *CreateServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetLocation()); l < 22 || l > 254 {
		err := CreateServiceAccountRequestValidationError{
			field:  "Location",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateServiceAccountRequest_Location_Pattern.MatchString(m.GetLocation()) {
		err := CreateServiceAccountRequestValidationError{
			field:  "Location",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
		err := CreateServiceAccountRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateServiceAccountRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateServiceAccountRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateServiceAccountRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateServiceAccountRequestValidationError{
				field:  "Description",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := _CreateServiceAccountRequest_Role_InLookup[m.GetRole()]; !ok {
		err := CreateServiceAccountRequestValidationError{
			field:  "Role",
			reason: "value must be in list [all_editor all_viewer app_editor app_viewer authn_viewer authn_editor]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateServiceAccountRequestMultiError(errors)
	}

	return nil
}

// CreateServiceAccountRequestMultiError is an error wrapping multiple
// validation errors returned by CreateServiceAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceAccountRequestMultiError) AllErrors() []error { return m }

// CreateServiceAccountRequestValidationError is the validation error returned
// by CreateServiceAccountRequest.Validate if the designated constraints
// aren't met.
type CreateServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceAccountRequestValidationError) ErrorName() string {
	return "CreateServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceAccountRequestValidationError{}

var _CreateServiceAccountRequest_Location_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _CreateServiceAccountRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

var _CreateServiceAccountRequest_Role_InLookup = map[string]struct{}{
	"all_editor":   {},
	"all_viewer":   {},
	"app_editor":   {},
	"app_viewer":   {},
	"authn_viewer": {},
	"authn_editor": {},
}

// Validate checks the field values on CreateServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceAccountResponseMultiError, or nil if none found.
func (m *CreateServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := CreateServiceAccountResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateServiceAccountResponse_Id_Pattern.MatchString(m.GetId()) {
		err := CreateServiceAccountResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceAccountResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceAccountResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceAccountResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceAccountResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceAccountResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceAccountResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return CreateServiceAccountResponseMultiError(errors)
	}

	return nil
}

// CreateServiceAccountResponseMultiError is an error wrapping multiple
// validation errors returned by CreateServiceAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceAccountResponseMultiError) AllErrors() []error { return m }

// CreateServiceAccountResponseValidationError is the validation error returned
// by CreateServiceAccountResponse.Validate if the designated constraints
// aren't met.
type CreateServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceAccountResponseValidationError) ErrorName() string {
	return "CreateServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceAccountResponseValidationError{}

var _CreateServiceAccountResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadServiceAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadServiceAccountRequestMultiError, or nil if none found.
func (m *ReadServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Identifier.(type) {

	case *ReadServiceAccountRequest_Id:

		if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
			err := ReadServiceAccountRequestValidationError{
				field:  "Id",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadServiceAccountRequest_Id_Pattern.MatchString(m.GetId()) {
			err := ReadServiceAccountRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ReadServiceAccountRequest_Name:

		if all {
			switch v := interface{}(m.GetName()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadServiceAccountRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadServiceAccountRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadServiceAccountRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := ReadServiceAccountRequestValidationError{
			field:  "Identifier",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ReadServiceAccountRequestMultiError(errors)
	}

	return nil
}

// ReadServiceAccountRequestMultiError is an error wrapping multiple validation
// errors returned by ReadServiceAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type ReadServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadServiceAccountRequestMultiError) AllErrors() []error { return m }

// ReadServiceAccountRequestValidationError is the validation error returned by
// ReadServiceAccountRequest.Validate if the designated constraints aren't met.
type ReadServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceAccountRequestValidationError) ErrorName() string {
	return "ReadServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceAccountRequestValidationError{}

var _ReadServiceAccountRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadServiceAccountResponseMultiError, or nil if none found.
func (m *ReadServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceAccountResponseValidationError{
				field:  "ServiceAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadServiceAccountResponseMultiError(errors)
	}

	return nil
}

// ReadServiceAccountResponseMultiError is an error wrapping multiple
// validation errors returned by ReadServiceAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type ReadServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadServiceAccountResponseMultiError) AllErrors() []error { return m }

// ReadServiceAccountResponseValidationError is the validation error returned
// by ReadServiceAccountResponse.Validate if the designated constraints aren't met.
type ReadServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceAccountResponseValidationError) ErrorName() string {
	return "ReadServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceAccountResponseValidationError{}

// Validate checks the field values on UpdateServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceAccountRequestMultiError, or nil if none found.
func (m *UpdateServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateServiceAccountRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateServiceAccountRequest_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateServiceAccountRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := UpdateServiceAccountRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_UpdateServiceAccountRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := UpdateServiceAccountRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateServiceAccountRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateServiceAccountRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return UpdateServiceAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateServiceAccountRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServiceAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceAccountRequestMultiError) AllErrors() []error { return m }

// UpdateServiceAccountRequestValidationError is the validation error returned
// by UpdateServiceAccountRequest.Validate if the designated constraints
// aren't met.
type UpdateServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceAccountRequestValidationError) ErrorName() string {
	return "UpdateServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceAccountRequestValidationError{}

var _UpdateServiceAccountRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _UpdateServiceAccountRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on UpdateServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceAccountResponseMultiError, or nil if none found.
func (m *UpdateServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateServiceAccountResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateServiceAccountResponse_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateServiceAccountResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateServiceAccountResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateServiceAccountResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceAccountResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return UpdateServiceAccountResponseMultiError(errors)
	}

	return nil
}

// UpdateServiceAccountResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServiceAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceAccountResponseMultiError) AllErrors() []error { return m }

// UpdateServiceAccountResponseValidationError is the validation error returned
// by UpdateServiceAccountResponse.Validate if the designated constraints
// aren't met.
type UpdateServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceAccountResponseValidationError) ErrorName() string {
	return "UpdateServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceAccountResponseValidationError{}

var _UpdateServiceAccountResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceAccountRequestMultiError, or nil if none found.
func (m *DeleteServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteServiceAccountRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteServiceAccountRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteServiceAccountRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := DeleteServiceAccountRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_DeleteServiceAccountRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := DeleteServiceAccountRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return DeleteServiceAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceAccountRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteServiceAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceAccountRequestMultiError) AllErrors() []error { return m }

// DeleteServiceAccountRequestValidationError is the validation error returned
// by DeleteServiceAccountRequest.Validate if the designated constraints
// aren't met.
type DeleteServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceAccountRequestValidationError) ErrorName() string {
	return "DeleteServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceAccountRequestValidationError{}

var _DeleteServiceAccountRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _DeleteServiceAccountRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on DeleteServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceAccountResponseMultiError, or nil if none found.
func (m *DeleteServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServiceAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteServiceAccountResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteServiceAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceAccountResponseMultiError) AllErrors() []error { return m }

// DeleteServiceAccountResponseValidationError is the validation error returned
// by DeleteServiceAccountResponse.Validate if the designated constraints
// aren't met.
type DeleteServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceAccountResponseValidationError) ErrorName() string {
	return "DeleteServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceAccountResponseValidationError{}

// Validate checks the field values on RegisterServiceAccountCredentialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RegisterServiceAccountCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RegisterServiceAccountCredentialRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RegisterServiceAccountCredentialRequestMultiError, or nil if none found.
func (m *RegisterServiceAccountCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterServiceAccountCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetServiceAccountId()); l < 22 || l > 254 {
		err := RegisterServiceAccountCredentialRequestValidationError{
			field:  "ServiceAccountId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterServiceAccountCredentialRequest_ServiceAccountId_Pattern.MatchString(m.GetServiceAccountId()) {
		err := RegisterServiceAccountCredentialRequestValidationError{
			field:  "ServiceAccountId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDisplayName() != "" {

		if l := utf8.RuneCountInString(m.GetDisplayName()); l < 2 || l > 254 {
			err := RegisterServiceAccountCredentialRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if t := m.GetExpireTime(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = RegisterServiceAccountCredentialRequestValidationError{
				field:  "ExpireTime",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := RegisterServiceAccountCredentialRequestValidationError{
					field:  "ExpireTime",
					reason: "value must be greater than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	switch m.PublicKey.(type) {

	case *RegisterServiceAccountCredentialRequest_Jwk:

		if l := len(m.GetJwk()); l < 96 || l > 8192 {
			err := RegisterServiceAccountCredentialRequestValidationError{
				field:  "Jwk",
				reason: "value length must be between 96 and 8192 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !bytes.HasPrefix(m.GetJwk(), []uint8{0x7B}) {
			err := RegisterServiceAccountCredentialRequestValidationError{
				field:  "Jwk",
				reason: "value does not have prefix \"\\x7B\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !bytes.HasSuffix(m.GetJwk(), []uint8{0x7D}) {
			err := RegisterServiceAccountCredentialRequestValidationError{
				field:  "Jwk",
				reason: "value does not have suffix \"\\x7D\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RegisterServiceAccountCredentialRequest_Pem:

		if l := len(m.GetPem()); l < 256 || l > 8192 {
			err := RegisterServiceAccountCredentialRequestValidationError{
				field:  "Pem",
				reason: "value length must be between 256 and 8192 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !bytes.HasPrefix(m.GetPem(), []uint8{0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x50, 0x55, 0x42, 0x4C, 0x49, 0x43, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D}) {
			err := RegisterServiceAccountCredentialRequestValidationError{
				field:  "Pem",
				reason: "value does not have prefix \"\\x2D\\x2D\\x2D\\x2D\\x2D\\x42\\x45\\x47\\x49\\x4E\\x20\\x50\\x55\\x42\\x4C\\x49\\x43\\x20\\x4B\\x45\\x59\\x2D\\x2D\\x2D\\x2D\\x2D\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !bytes.HasSuffix(m.GetPem(), []uint8{0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4C, 0x49, 0x43, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D}) {
			err := RegisterServiceAccountCredentialRequestValidationError{
				field:  "Pem",
				reason: "value does not have suffix \"\\x2D\\x2D\\x2D\\x2D\\x2D\\x45\\x4E\\x44\\x20\\x50\\x55\\x42\\x4C\\x49\\x43\\x20\\x4B\\x45\\x59\\x2D\\x2D\\x2D\\x2D\\x2D\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RegisterServiceAccountCredentialRequestMultiError(errors)
	}

	return nil
}

// RegisterServiceAccountCredentialRequestMultiError is an error wrapping
// multiple validation errors returned by
// RegisterServiceAccountCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterServiceAccountCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterServiceAccountCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterServiceAccountCredentialRequestMultiError) AllErrors() []error { return m }

// RegisterServiceAccountCredentialRequestValidationError is the validation
// error returned by RegisterServiceAccountCredentialRequest.Validate if the
// designated constraints aren't met.
type RegisterServiceAccountCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterServiceAccountCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterServiceAccountCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterServiceAccountCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterServiceAccountCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterServiceAccountCredentialRequestValidationError) ErrorName() string {
	return "RegisterServiceAccountCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterServiceAccountCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterServiceAccountCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterServiceAccountCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterServiceAccountCredentialRequestValidationError{}

var _RegisterServiceAccountCredentialRequest_ServiceAccountId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on RegisterServiceAccountCredentialResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RegisterServiceAccountCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RegisterServiceAccountCredentialResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RegisterServiceAccountCredentialResponseMultiError, or nil if none found.
func (m *RegisterServiceAccountCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterServiceAccountCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := RegisterServiceAccountCredentialResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterServiceAccountCredentialResponse_Id_Pattern.MatchString(m.GetId()) {
		err := RegisterServiceAccountCredentialResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetServiceAccountId()); l < 22 || l > 254 {
		err := RegisterServiceAccountCredentialResponseValidationError{
			field:  "ServiceAccountId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterServiceAccountCredentialResponse_ServiceAccountId_Pattern.MatchString(m.GetServiceAccountId()) {
		err := RegisterServiceAccountCredentialResponseValidationError{
			field:  "ServiceAccountId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Kid

	// no validation rules for ServiceAccountConfig

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterServiceAccountCredentialResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterServiceAccountCredentialResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterServiceAccountCredentialResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterServiceAccountCredentialResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterServiceAccountCredentialResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterServiceAccountCredentialResponseValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterServiceAccountCredentialResponseMultiError(errors)
	}

	return nil
}

// RegisterServiceAccountCredentialResponseMultiError is an error wrapping
// multiple validation errors returned by
// RegisterServiceAccountCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterServiceAccountCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterServiceAccountCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterServiceAccountCredentialResponseMultiError) AllErrors() []error { return m }

// RegisterServiceAccountCredentialResponseValidationError is the validation
// error returned by RegisterServiceAccountCredentialResponse.Validate if the
// designated constraints aren't met.
type RegisterServiceAccountCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterServiceAccountCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterServiceAccountCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterServiceAccountCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterServiceAccountCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterServiceAccountCredentialResponseValidationError) ErrorName() string {
	return "RegisterServiceAccountCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterServiceAccountCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterServiceAccountCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterServiceAccountCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterServiceAccountCredentialResponseValidationError{}

var _RegisterServiceAccountCredentialResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _RegisterServiceAccountCredentialResponse_ServiceAccountId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadServiceAccountCredentialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadServiceAccountCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadServiceAccountCredentialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadServiceAccountCredentialRequestMultiError, or nil if none found.
func (m *ReadServiceAccountCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadServiceAccountCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := ReadServiceAccountCredentialRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReadServiceAccountCredentialRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ReadServiceAccountCredentialRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadServiceAccountCredentialRequestMultiError(errors)
	}

	return nil
}

// ReadServiceAccountCredentialRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReadServiceAccountCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadServiceAccountCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadServiceAccountCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadServiceAccountCredentialRequestMultiError) AllErrors() []error { return m }

// ReadServiceAccountCredentialRequestValidationError is the validation error
// returned by ReadServiceAccountCredentialRequest.Validate if the designated
// constraints aren't met.
type ReadServiceAccountCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceAccountCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceAccountCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceAccountCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceAccountCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceAccountCredentialRequestValidationError) ErrorName() string {
	return "ReadServiceAccountCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceAccountCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceAccountCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceAccountCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceAccountCredentialRequestValidationError{}

var _ReadServiceAccountCredentialRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadServiceAccountCredentialResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReadServiceAccountCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadServiceAccountCredentialResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadServiceAccountCredentialResponseMultiError, or nil if none found.
func (m *ReadServiceAccountCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadServiceAccountCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceAccountCredential()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadServiceAccountCredentialResponseValidationError{
					field:  "ServiceAccountCredential",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadServiceAccountCredentialResponseValidationError{
					field:  "ServiceAccountCredential",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceAccountCredential()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceAccountCredentialResponseValidationError{
				field:  "ServiceAccountCredential",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadServiceAccountCredentialResponseMultiError(errors)
	}

	return nil
}

// ReadServiceAccountCredentialResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReadServiceAccountCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadServiceAccountCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadServiceAccountCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadServiceAccountCredentialResponseMultiError) AllErrors() []error { return m }

// ReadServiceAccountCredentialResponseValidationError is the validation error
// returned by ReadServiceAccountCredentialResponse.Validate if the designated
// constraints aren't met.
type ReadServiceAccountCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceAccountCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceAccountCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceAccountCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceAccountCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceAccountCredentialResponseValidationError) ErrorName() string {
	return "ReadServiceAccountCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceAccountCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceAccountCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceAccountCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceAccountCredentialResponseValidationError{}

// Validate checks the field values on DeleteServiceAccountCredentialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteServiceAccountCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceAccountCredentialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteServiceAccountCredentialRequestMultiError, or nil if none found.
func (m *DeleteServiceAccountCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceAccountCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteServiceAccountCredentialRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteServiceAccountCredentialRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteServiceAccountCredentialRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServiceAccountCredentialRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceAccountCredentialRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteServiceAccountCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceAccountCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceAccountCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceAccountCredentialRequestMultiError) AllErrors() []error { return m }

// DeleteServiceAccountCredentialRequestValidationError is the validation error
// returned by DeleteServiceAccountCredentialRequest.Validate if the
// designated constraints aren't met.
type DeleteServiceAccountCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceAccountCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceAccountCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceAccountCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceAccountCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceAccountCredentialRequestValidationError) ErrorName() string {
	return "DeleteServiceAccountCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceAccountCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceAccountCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceAccountCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceAccountCredentialRequestValidationError{}

var _DeleteServiceAccountCredentialRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteServiceAccountCredentialResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteServiceAccountCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteServiceAccountCredentialResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteServiceAccountCredentialResponseMultiError, or nil if none found.
func (m *DeleteServiceAccountCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceAccountCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServiceAccountCredentialResponseMultiError(errors)
	}

	return nil
}

// DeleteServiceAccountCredentialResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteServiceAccountCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceAccountCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceAccountCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceAccountCredentialResponseMultiError) AllErrors() []error { return m }

// DeleteServiceAccountCredentialResponseValidationError is the validation
// error returned by DeleteServiceAccountCredentialResponse.Validate if the
// designated constraints aren't met.
type DeleteServiceAccountCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceAccountCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceAccountCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceAccountCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceAccountCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceAccountCredentialResponseValidationError) ErrorName() string {
	return "DeleteServiceAccountCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceAccountCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceAccountCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceAccountCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceAccountCredentialResponseValidationError{}

// Validate checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantRequestMultiError, or nil if none found.
func (m *CreateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetIssuerId()); l < 22 || l > 254 {
		err := CreateTenantRequestValidationError{
			field:  "IssuerId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateTenantRequest_IssuerId_Pattern.MatchString(m.GetIssuerId()) {
		err := CreateTenantRequestValidationError{
			field:  "IssuerId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
		err := CreateTenantRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateTenantRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateTenantRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateTenantRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
			err := CreateTenantRequestValidationError{
				field:  "Description",
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateTenantRequestMultiError(errors)
	}

	return nil
}

// CreateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantRequestMultiError) AllErrors() []error { return m }

// CreateTenantRequestValidationError is the validation error returned by
// CreateTenantRequest.Validate if the designated constraints aren't met.
type CreateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantRequestValidationError) ErrorName() string {
	return "CreateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantRequestValidationError{}

var _CreateTenantRequest_IssuerId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _CreateTenantRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantResponseMultiError, or nil if none found.
func (m *CreateTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := CreateTenantResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateTenantResponse_Id_Pattern.MatchString(m.GetId()) {
		err := CreateTenantResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTenantResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTenantResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTenantResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTenantResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTenantResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTenantResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return CreateTenantResponseMultiError(errors)
	}

	return nil
}

// CreateTenantResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantResponseMultiError) AllErrors() []error { return m }

// CreateTenantResponseValidationError is the validation error returned by
// CreateTenantResponse.Validate if the designated constraints aren't met.
type CreateTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantResponseValidationError) ErrorName() string {
	return "CreateTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantResponseValidationError{}

var _CreateTenantResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTenantRequestMultiError, or nil if none found.
func (m *ReadTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Identifier.(type) {

	case *ReadTenantRequest_Id:

		if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
			err := ReadTenantRequestValidationError{
				field:  "Id",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadTenantRequest_Id_Pattern.MatchString(m.GetId()) {
			err := ReadTenantRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ReadTenantRequest_Name:

		if all {
			switch v := interface{}(m.GetName()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadTenantRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadTenantRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadTenantRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := ReadTenantRequestValidationError{
			field:  "Identifier",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ReadTenantRequestMultiError(errors)
	}

	return nil
}

// ReadTenantRequestMultiError is an error wrapping multiple validation errors
// returned by ReadTenantRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTenantRequestMultiError) AllErrors() []error { return m }

// ReadTenantRequestValidationError is the validation error returned by
// ReadTenantRequest.Validate if the designated constraints aren't met.
type ReadTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTenantRequestValidationError) ErrorName() string {
	return "ReadTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTenantRequestValidationError{}

var _ReadTenantRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTenantResponseMultiError, or nil if none found.
func (m *ReadTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadTenantResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadTenantResponseMultiError(errors)
	}

	return nil
}

// ReadTenantResponseMultiError is an error wrapping multiple validation errors
// returned by ReadTenantResponse.ValidateAll() if the designated constraints
// aren't met.
type ReadTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTenantResponseMultiError) AllErrors() []error { return m }

// ReadTenantResponseValidationError is the validation error returned by
// ReadTenantResponse.Validate if the designated constraints aren't met.
type ReadTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTenantResponseValidationError) ErrorName() string {
	return "ReadTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTenantResponseValidationError{}

// Validate checks the field values on ListTenantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantsRequestMultiError, or nil if none found.
func (m *ListTenantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAppSpaceId()); l < 22 || l > 254 {
		err := ListTenantsRequestValidationError{
			field:  "AppSpaceId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTenantsRequest_AppSpaceId_Pattern.MatchString(m.GetAppSpaceId()) {
		err := ListTenantsRequestValidationError{
			field:  "AppSpaceId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMatch()) < 1 {
		err := ListTenantsRequestValidationError{
			field:  "Match",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_ListTenantsRequest_Match_Unique := make(map[string]struct{}, len(m.GetMatch()))

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if _, exists := _ListTenantsRequest_Match_Unique[item]; exists {
			err := ListTenantsRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ListTenantsRequest_Match_Unique[item] = struct{}{}
		}

		if l := utf8.RuneCountInString(item); l < 2 || l > 254 {
			err := ListTenantsRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "value length must be between 2 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListTenantsRequest_Match_Pattern.MatchString(item) {
			err := ListTenantsRequestValidationError{
				field:  fmt.Sprintf("Match[%v]", idx),
				reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,252}[a-z0-9])$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListTenantsRequestMultiError(errors)
	}

	return nil
}

// ListTenantsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTenantsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTenantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantsRequestMultiError) AllErrors() []error { return m }

// ListTenantsRequestValidationError is the validation error returned by
// ListTenantsRequest.Validate if the designated constraints aren't met.
type ListTenantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantsRequestValidationError) ErrorName() string {
	return "ListTenantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantsRequestValidationError{}

var _ListTenantsRequest_AppSpaceId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _ListTenantsRequest_Match_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,252}[a-z0-9])$")

// Validate checks the field values on ListTenantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantsResponseMultiError, or nil if none found.
func (m *ListTenantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTenantsResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTenantsResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTenantsResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTenantsResponseMultiError(errors)
	}

	return nil
}

// ListTenantsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTenantsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTenantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantsResponseMultiError) AllErrors() []error { return m }

// ListTenantsResponseValidationError is the validation error returned by
// ListTenantsResponse.Validate if the designated constraints aren't met.
type ListTenantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantsResponseValidationError) ErrorName() string {
	return "ListTenantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantsResponseValidationError{}

// Validate checks the field values on UpdateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTenantRequestMultiError, or nil if none found.
func (m *UpdateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateTenantRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateTenantRequest_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateTenantRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := UpdateTenantRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_UpdateTenantRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := UpdateTenantRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateTenantRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateTenantRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return UpdateTenantRequestMultiError(errors)
	}

	return nil
}

// UpdateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantRequestMultiError) AllErrors() []error { return m }

// UpdateTenantRequestValidationError is the validation error returned by
// UpdateTenantRequest.Validate if the designated constraints aren't met.
type UpdateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantRequestValidationError) ErrorName() string {
	return "UpdateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantRequestValidationError{}

var _UpdateTenantRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _UpdateTenantRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on UpdateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTenantResponseMultiError, or nil if none found.
func (m *UpdateTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateTenantResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateTenantResponse_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateTenantResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTenantResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTenantResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return UpdateTenantResponseMultiError(errors)
	}

	return nil
}

// UpdateTenantResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantResponseMultiError) AllErrors() []error { return m }

// UpdateTenantResponseValidationError is the validation error returned by
// UpdateTenantResponse.Validate if the designated constraints aren't met.
type UpdateTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantResponseValidationError) ErrorName() string {
	return "UpdateTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantResponseValidationError{}

var _UpdateTenantResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantRequestMultiError, or nil if none found.
func (m *DeleteTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteTenantRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteTenantRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteTenantRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetEtag(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 8 || l > 18 {
				err := DeleteTenantRequestValidationError{
					field:  "Etag",
					reason: "value length must be between 8 and 18 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_DeleteTenantRequest_Etag_Pattern.MatchString(wrapper.GetValue()) {
				err := DeleteTenantRequestValidationError{
					field:  "Etag",
					reason: "value does not match regex pattern \"^[A-Za-z0-9-_]{8,18}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return DeleteTenantRequestMultiError(errors)
	}

	return nil
}

// DeleteTenantRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantRequestMultiError) AllErrors() []error { return m }

// DeleteTenantRequestValidationError is the validation error returned by
// DeleteTenantRequest.Validate if the designated constraints aren't met.
type DeleteTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantRequestValidationError) ErrorName() string {
	return "DeleteTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantRequestValidationError{}

var _DeleteTenantRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _DeleteTenantRequest_Etag_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]{8,18}$")

// Validate checks the field values on DeleteTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantResponseMultiError, or nil if none found.
func (m *DeleteTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTenantResponseMultiError(errors)
	}

	return nil
}

// DeleteTenantResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantResponseMultiError) AllErrors() []error { return m }

// DeleteTenantResponseValidationError is the validation error returned by
// DeleteTenantResponse.Validate if the designated constraints aren't met.
type DeleteTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantResponseValidationError) ErrorName() string {
	return "DeleteTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantResponseValidationError{}

// Validate checks the field values on CreateConfigNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConfigNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConfigNodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConfigNodeRequestMultiError, or nil if none found.
func (m *CreateConfigNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConfigNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetLocation()); l < 22 || l > 254 {
		err := CreateConfigNodeRequestValidationError{
			field:  "Location",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateConfigNodeRequest_Location_Pattern.MatchString(m.GetLocation()) {
		err := CreateConfigNodeRequestValidationError{
			field:  "Location",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
		err := CreateConfigNodeRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateConfigNodeRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateConfigNodeRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := CreateConfigNodeRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := CreateConfigNodeRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	switch m.Config.(type) {

	case *CreateConfigNodeRequest_AuthFlowConfig:

		if all {
			switch v := interface{}(m.GetAuthFlowConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "AuthFlowConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "AuthFlowConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuthFlowConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "AuthFlowConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_EmailServiceConfig:

		if all {
			switch v := interface{}(m.GetEmailServiceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "EmailServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "EmailServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEmailServiceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "EmailServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_SmsServiceConfig:

		if all {
			switch v := interface{}(m.GetSmsServiceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "SmsServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "SmsServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSmsServiceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "SmsServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_Oauth2ClientConfig:

		if all {
			switch v := interface{}(m.GetOauth2ClientConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "Oauth2ClientConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "Oauth2ClientConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOauth2ClientConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "Oauth2ClientConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_PasswordProviderConfig:

		if all {
			switch v := interface{}(m.GetPasswordProviderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "PasswordProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "PasswordProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPasswordProviderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "PasswordProviderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_WebauthnProviderConfig:

		if all {
			switch v := interface{}(m.GetWebauthnProviderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "WebauthnProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "WebauthnProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWebauthnProviderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "WebauthnProviderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_AuthenteqProviderConfig:

		if all {
			switch v := interface{}(m.GetAuthenteqProviderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "AuthenteqProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "AuthenteqProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuthenteqProviderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "AuthenteqProviderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_SafrProviderConfig:

		if all {
			switch v := interface{}(m.GetSafrProviderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "SafrProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "SafrProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSafrProviderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "SafrProviderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_IngestMappingConfig:

		if all {
			switch v := interface{}(m.GetIngestMappingConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "IngestMappingConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "IngestMappingConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIngestMappingConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "IngestMappingConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_AuthorizationPolicyConfig:

		if all {
			switch v := interface{}(m.GetAuthorizationPolicyConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "AuthorizationPolicyConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "AuthorizationPolicyConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuthorizationPolicyConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "AuthorizationPolicyConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateConfigNodeRequest_KnowledgeGraphSchemaConfig:

		if all {
			switch v := interface{}(m.GetKnowledgeGraphSchemaConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "KnowledgeGraphSchemaConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConfigNodeRequestValidationError{
						field:  "KnowledgeGraphSchemaConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKnowledgeGraphSchemaConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigNodeRequestValidationError{
					field:  "KnowledgeGraphSchemaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := CreateConfigNodeRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CreateConfigNodeRequestMultiError(errors)
	}

	return nil
}

// CreateConfigNodeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateConfigNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateConfigNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConfigNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConfigNodeRequestMultiError) AllErrors() []error { return m }

// CreateConfigNodeRequestValidationError is the validation error returned by
// CreateConfigNodeRequest.Validate if the designated constraints aren't met.
type CreateConfigNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConfigNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConfigNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConfigNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConfigNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConfigNodeRequestValidationError) ErrorName() string {
	return "CreateConfigNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConfigNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConfigNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConfigNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConfigNodeRequestValidationError{}

var _CreateConfigNodeRequest_Location_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _CreateConfigNodeRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on CreateConfigNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConfigNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConfigNodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConfigNodeResponseMultiError, or nil if none found.
func (m *CreateConfigNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConfigNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := CreateConfigNodeResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateConfigNodeResponse_Id_Pattern.MatchString(m.GetId()) {
		err := CreateConfigNodeResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConfigNodeResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConfigNodeResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConfigNodeResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConfigNodeResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConfigNodeResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConfigNodeResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return CreateConfigNodeResponseMultiError(errors)
	}

	return nil
}

// CreateConfigNodeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateConfigNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateConfigNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConfigNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConfigNodeResponseMultiError) AllErrors() []error { return m }

// CreateConfigNodeResponseValidationError is the validation error returned by
// CreateConfigNodeResponse.Validate if the designated constraints aren't met.
type CreateConfigNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConfigNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConfigNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConfigNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConfigNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConfigNodeResponseValidationError) ErrorName() string {
	return "CreateConfigNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConfigNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConfigNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConfigNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConfigNodeResponseValidationError{}

var _CreateConfigNodeResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadConfigNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadConfigNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadConfigNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadConfigNodeRequestMultiError, or nil if none found.
func (m *ReadConfigNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadConfigNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := ReadConfigNodeRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReadConfigNodeRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ReadConfigNodeRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadConfigNodeRequestMultiError(errors)
	}

	return nil
}

// ReadConfigNodeRequestMultiError is an error wrapping multiple validation
// errors returned by ReadConfigNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadConfigNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadConfigNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadConfigNodeRequestMultiError) AllErrors() []error { return m }

// ReadConfigNodeRequestValidationError is the validation error returned by
// ReadConfigNodeRequest.Validate if the designated constraints aren't met.
type ReadConfigNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadConfigNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadConfigNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadConfigNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadConfigNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadConfigNodeRequestValidationError) ErrorName() string {
	return "ReadConfigNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadConfigNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadConfigNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadConfigNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadConfigNodeRequestValidationError{}

var _ReadConfigNodeRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadConfigNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadConfigNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadConfigNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadConfigNodeResponseMultiError, or nil if none found.
func (m *ReadConfigNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadConfigNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfigNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadConfigNodeResponseValidationError{
					field:  "ConfigNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadConfigNodeResponseValidationError{
					field:  "ConfigNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadConfigNodeResponseValidationError{
				field:  "ConfigNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadConfigNodeResponseMultiError(errors)
	}

	return nil
}

// ReadConfigNodeResponseMultiError is an error wrapping multiple validation
// errors returned by ReadConfigNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadConfigNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadConfigNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadConfigNodeResponseMultiError) AllErrors() []error { return m }

// ReadConfigNodeResponseValidationError is the validation error returned by
// ReadConfigNodeResponse.Validate if the designated constraints aren't met.
type ReadConfigNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadConfigNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadConfigNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadConfigNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadConfigNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadConfigNodeResponseValidationError) ErrorName() string {
	return "ReadConfigNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadConfigNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadConfigNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadConfigNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadConfigNodeResponseValidationError{}

// Validate checks the field values on UpdateConfigNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigNodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigNodeRequestMultiError, or nil if none found.
func (m *UpdateConfigNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateConfigNodeRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateConfigNodeRequest_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateConfigNodeRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEtag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConfigNodeRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConfigNodeRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConfigNodeRequestValidationError{
				field:  "Etag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateConfigNodeRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateConfigNodeRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	switch m.Config.(type) {

	case *UpdateConfigNodeRequest_AuthFlowConfig:

		if all {
			switch v := interface{}(m.GetAuthFlowConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "AuthFlowConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "AuthFlowConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuthFlowConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "AuthFlowConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_EmailServiceConfig:

		if all {
			switch v := interface{}(m.GetEmailServiceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "EmailServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "EmailServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEmailServiceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "EmailServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_SmsServiceConfig:

		if all {
			switch v := interface{}(m.GetSmsServiceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "SmsServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "SmsServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSmsServiceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "SmsServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_Oauth2ClientConfig:

		if all {
			switch v := interface{}(m.GetOauth2ClientConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "Oauth2ClientConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "Oauth2ClientConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOauth2ClientConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "Oauth2ClientConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_PasswordProviderConfig:

		if all {
			switch v := interface{}(m.GetPasswordProviderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "PasswordProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "PasswordProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPasswordProviderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "PasswordProviderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_WebauthnProviderConfig:

		if all {
			switch v := interface{}(m.GetWebauthnProviderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "WebauthnProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "WebauthnProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWebauthnProviderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "WebauthnProviderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_AuthenteqProviderConfig:

		if all {
			switch v := interface{}(m.GetAuthenteqProviderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "AuthenteqProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "AuthenteqProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuthenteqProviderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "AuthenteqProviderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_SafrProviderConfig:

		if all {
			switch v := interface{}(m.GetSafrProviderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "SafrProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "SafrProviderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSafrProviderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "SafrProviderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_IngestMappingConfig:

		if all {
			switch v := interface{}(m.GetIngestMappingConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "IngestMappingConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "IngestMappingConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIngestMappingConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "IngestMappingConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_AuthorizationPolicyConfig:

		if all {
			switch v := interface{}(m.GetAuthorizationPolicyConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "AuthorizationPolicyConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "AuthorizationPolicyConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuthorizationPolicyConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "AuthorizationPolicyConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateConfigNodeRequest_KnowledgeGraphSchemaConfig:

		if all {
			switch v := interface{}(m.GetKnowledgeGraphSchemaConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "KnowledgeGraphSchemaConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateConfigNodeRequestValidationError{
						field:  "KnowledgeGraphSchemaConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKnowledgeGraphSchemaConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigNodeRequestValidationError{
					field:  "KnowledgeGraphSchemaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateConfigNodeRequestMultiError(errors)
	}

	return nil
}

// UpdateConfigNodeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigNodeRequestMultiError) AllErrors() []error { return m }

// UpdateConfigNodeRequestValidationError is the validation error returned by
// UpdateConfigNodeRequest.Validate if the designated constraints aren't met.
type UpdateConfigNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigNodeRequestValidationError) ErrorName() string {
	return "UpdateConfigNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigNodeRequestValidationError{}

var _UpdateConfigNodeRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on UpdateConfigNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigNodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigNodeResponseMultiError, or nil if none found.
func (m *UpdateConfigNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateConfigNodeResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateConfigNodeResponse_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateConfigNodeResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConfigNodeResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConfigNodeResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConfigNodeResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return UpdateConfigNodeResponseMultiError(errors)
	}

	return nil
}

// UpdateConfigNodeResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigNodeResponseMultiError) AllErrors() []error { return m }

// UpdateConfigNodeResponseValidationError is the validation error returned by
// UpdateConfigNodeResponse.Validate if the designated constraints aren't met.
type UpdateConfigNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigNodeResponseValidationError) ErrorName() string {
	return "UpdateConfigNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigNodeResponseValidationError{}

var _UpdateConfigNodeResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteConfigNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConfigNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConfigNodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConfigNodeRequestMultiError, or nil if none found.
func (m *DeleteConfigNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConfigNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteConfigNodeRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteConfigNodeRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteConfigNodeRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEtag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteConfigNodeRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteConfigNodeRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteConfigNodeRequestValidationError{
				field:  "Etag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteConfigNodeRequestMultiError(errors)
	}

	return nil
}

// DeleteConfigNodeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteConfigNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteConfigNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConfigNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConfigNodeRequestMultiError) AllErrors() []error { return m }

// DeleteConfigNodeRequestValidationError is the validation error returned by
// DeleteConfigNodeRequest.Validate if the designated constraints aren't met.
type DeleteConfigNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConfigNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConfigNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConfigNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConfigNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConfigNodeRequestValidationError) ErrorName() string {
	return "DeleteConfigNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConfigNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConfigNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConfigNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConfigNodeRequestValidationError{}

var _DeleteConfigNodeRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteConfigNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConfigNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConfigNodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConfigNodeResponseMultiError, or nil if none found.
func (m *DeleteConfigNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConfigNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteConfigNodeResponseMultiError(errors)
	}

	return nil
}

// DeleteConfigNodeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteConfigNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteConfigNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConfigNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConfigNodeResponseMultiError) AllErrors() []error { return m }

// DeleteConfigNodeResponseValidationError is the validation error returned by
// DeleteConfigNodeResponse.Validate if the designated constraints aren't met.
type DeleteConfigNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConfigNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConfigNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConfigNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConfigNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConfigNodeResponseValidationError) ErrorName() string {
	return "DeleteConfigNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConfigNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConfigNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConfigNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConfigNodeResponseValidationError{}

// Validate checks the field values on CreateOAuth2ProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOAuth2ProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOAuth2ProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOAuth2ProviderRequestMultiError, or nil if none found.
func (m *CreateOAuth2ProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOAuth2ProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAppSpaceId()); l < 22 || l > 254 {
		err := CreateOAuth2ProviderRequestValidationError{
			field:  "AppSpaceId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOAuth2ProviderRequest_AppSpaceId_Pattern.MatchString(m.GetAppSpaceId()) {
		err := CreateOAuth2ProviderRequestValidationError{
			field:  "AppSpaceId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
		err := CreateOAuth2ProviderRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOAuth2ProviderRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateOAuth2ProviderRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := CreateOAuth2ProviderRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := CreateOAuth2ProviderRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.GetConfig() == nil {
		err := CreateOAuth2ProviderRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOAuth2ProviderRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOAuth2ProviderRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOAuth2ProviderRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOAuth2ProviderRequestMultiError(errors)
	}

	return nil
}

// CreateOAuth2ProviderRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOAuth2ProviderRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOAuth2ProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOAuth2ProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOAuth2ProviderRequestMultiError) AllErrors() []error { return m }

// CreateOAuth2ProviderRequestValidationError is the validation error returned
// by CreateOAuth2ProviderRequest.Validate if the designated constraints
// aren't met.
type CreateOAuth2ProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOAuth2ProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOAuth2ProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOAuth2ProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOAuth2ProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOAuth2ProviderRequestValidationError) ErrorName() string {
	return "CreateOAuth2ProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOAuth2ProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOAuth2ProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOAuth2ProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOAuth2ProviderRequestValidationError{}

var _CreateOAuth2ProviderRequest_AppSpaceId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _CreateOAuth2ProviderRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on CreateOAuth2ProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOAuth2ProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOAuth2ProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOAuth2ProviderResponseMultiError, or nil if none found.
func (m *CreateOAuth2ProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOAuth2ProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := CreateOAuth2ProviderResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOAuth2ProviderResponse_Id_Pattern.MatchString(m.GetId()) {
		err := CreateOAuth2ProviderResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOAuth2ProviderResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOAuth2ProviderResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOAuth2ProviderResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOAuth2ProviderResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOAuth2ProviderResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOAuth2ProviderResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return CreateOAuth2ProviderResponseMultiError(errors)
	}

	return nil
}

// CreateOAuth2ProviderResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOAuth2ProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOAuth2ProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOAuth2ProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOAuth2ProviderResponseMultiError) AllErrors() []error { return m }

// CreateOAuth2ProviderResponseValidationError is the validation error returned
// by CreateOAuth2ProviderResponse.Validate if the designated constraints
// aren't met.
type CreateOAuth2ProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOAuth2ProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOAuth2ProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOAuth2ProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOAuth2ProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOAuth2ProviderResponseValidationError) ErrorName() string {
	return "CreateOAuth2ProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOAuth2ProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOAuth2ProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOAuth2ProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOAuth2ProviderResponseValidationError{}

var _CreateOAuth2ProviderResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadOAuth2ProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOAuth2ProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOAuth2ProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOAuth2ProviderRequestMultiError, or nil if none found.
func (m *ReadOAuth2ProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOAuth2ProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := ReadOAuth2ProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReadOAuth2ProviderRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ReadOAuth2ProviderRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadOAuth2ProviderRequestMultiError(errors)
	}

	return nil
}

// ReadOAuth2ProviderRequestMultiError is an error wrapping multiple validation
// errors returned by ReadOAuth2ProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type ReadOAuth2ProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOAuth2ProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOAuth2ProviderRequestMultiError) AllErrors() []error { return m }

// ReadOAuth2ProviderRequestValidationError is the validation error returned by
// ReadOAuth2ProviderRequest.Validate if the designated constraints aren't met.
type ReadOAuth2ProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOAuth2ProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOAuth2ProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOAuth2ProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOAuth2ProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOAuth2ProviderRequestValidationError) ErrorName() string {
	return "ReadOAuth2ProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOAuth2ProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOAuth2ProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOAuth2ProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOAuth2ProviderRequestValidationError{}

var _ReadOAuth2ProviderRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadOAuth2ProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOAuth2ProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOAuth2ProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOAuth2ProviderResponseMultiError, or nil if none found.
func (m *ReadOAuth2ProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOAuth2ProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOauth2Provider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadOAuth2ProviderResponseValidationError{
					field:  "Oauth2Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadOAuth2ProviderResponseValidationError{
					field:  "Oauth2Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOauth2Provider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadOAuth2ProviderResponseValidationError{
				field:  "Oauth2Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadOAuth2ProviderResponseMultiError(errors)
	}

	return nil
}

// ReadOAuth2ProviderResponseMultiError is an error wrapping multiple
// validation errors returned by ReadOAuth2ProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type ReadOAuth2ProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOAuth2ProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOAuth2ProviderResponseMultiError) AllErrors() []error { return m }

// ReadOAuth2ProviderResponseValidationError is the validation error returned
// by ReadOAuth2ProviderResponse.Validate if the designated constraints aren't met.
type ReadOAuth2ProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOAuth2ProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOAuth2ProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOAuth2ProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOAuth2ProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOAuth2ProviderResponseValidationError) ErrorName() string {
	return "ReadOAuth2ProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOAuth2ProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOAuth2ProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOAuth2ProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOAuth2ProviderResponseValidationError{}

// Validate checks the field values on UpdateOAuth2ProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOAuth2ProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOAuth2ProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOAuth2ProviderRequestMultiError, or nil if none found.
func (m *UpdateOAuth2ProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOAuth2ProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateOAuth2ProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateOAuth2ProviderRequest_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateOAuth2ProviderRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEtag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOAuth2ProviderRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOAuth2ProviderRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOAuth2ProviderRequestValidationError{
				field:  "Etag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateOAuth2ProviderRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateOAuth2ProviderRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOAuth2ProviderRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOAuth2ProviderRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOAuth2ProviderRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOAuth2ProviderRequestMultiError(errors)
	}

	return nil
}

// UpdateOAuth2ProviderRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOAuth2ProviderRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateOAuth2ProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOAuth2ProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOAuth2ProviderRequestMultiError) AllErrors() []error { return m }

// UpdateOAuth2ProviderRequestValidationError is the validation error returned
// by UpdateOAuth2ProviderRequest.Validate if the designated constraints
// aren't met.
type UpdateOAuth2ProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOAuth2ProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOAuth2ProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOAuth2ProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOAuth2ProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOAuth2ProviderRequestValidationError) ErrorName() string {
	return "UpdateOAuth2ProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOAuth2ProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOAuth2ProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOAuth2ProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOAuth2ProviderRequestValidationError{}

var _UpdateOAuth2ProviderRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on UpdateOAuth2ProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOAuth2ProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOAuth2ProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOAuth2ProviderResponseMultiError, or nil if none found.
func (m *UpdateOAuth2ProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOAuth2ProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateOAuth2ProviderResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateOAuth2ProviderResponse_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateOAuth2ProviderResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOAuth2ProviderResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOAuth2ProviderResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOAuth2ProviderResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return UpdateOAuth2ProviderResponseMultiError(errors)
	}

	return nil
}

// UpdateOAuth2ProviderResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOAuth2ProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOAuth2ProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOAuth2ProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOAuth2ProviderResponseMultiError) AllErrors() []error { return m }

// UpdateOAuth2ProviderResponseValidationError is the validation error returned
// by UpdateOAuth2ProviderResponse.Validate if the designated constraints
// aren't met.
type UpdateOAuth2ProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOAuth2ProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOAuth2ProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOAuth2ProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOAuth2ProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOAuth2ProviderResponseValidationError) ErrorName() string {
	return "UpdateOAuth2ProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOAuth2ProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOAuth2ProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOAuth2ProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOAuth2ProviderResponseValidationError{}

var _UpdateOAuth2ProviderResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteOAuth2ProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuth2ProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuth2ProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOAuth2ProviderRequestMultiError, or nil if none found.
func (m *DeleteOAuth2ProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuth2ProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteOAuth2ProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteOAuth2ProviderRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteOAuth2ProviderRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEtag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOAuth2ProviderRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOAuth2ProviderRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOAuth2ProviderRequestValidationError{
				field:  "Etag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteOAuth2ProviderRequestMultiError(errors)
	}

	return nil
}

// DeleteOAuth2ProviderRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOAuth2ProviderRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteOAuth2ProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuth2ProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuth2ProviderRequestMultiError) AllErrors() []error { return m }

// DeleteOAuth2ProviderRequestValidationError is the validation error returned
// by DeleteOAuth2ProviderRequest.Validate if the designated constraints
// aren't met.
type DeleteOAuth2ProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuth2ProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuth2ProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuth2ProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuth2ProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuth2ProviderRequestValidationError) ErrorName() string {
	return "DeleteOAuth2ProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuth2ProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuth2ProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuth2ProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuth2ProviderRequestValidationError{}

var _DeleteOAuth2ProviderRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteOAuth2ProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuth2ProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuth2ProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOAuth2ProviderResponseMultiError, or nil if none found.
func (m *DeleteOAuth2ProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuth2ProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOAuth2ProviderResponseMultiError(errors)
	}

	return nil
}

// DeleteOAuth2ProviderResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOAuth2ProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOAuth2ProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuth2ProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuth2ProviderResponseMultiError) AllErrors() []error { return m }

// DeleteOAuth2ProviderResponseValidationError is the validation error returned
// by DeleteOAuth2ProviderResponse.Validate if the designated constraints
// aren't met.
type DeleteOAuth2ProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuth2ProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuth2ProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuth2ProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuth2ProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuth2ProviderResponseValidationError) ErrorName() string {
	return "DeleteOAuth2ProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuth2ProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuth2ProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuth2ProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuth2ProviderResponseValidationError{}

// Validate checks the field values on CreateOAuth2ApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOAuth2ApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOAuth2ApplicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOAuth2ApplicationRequestMultiError, or nil if none found.
func (m *CreateOAuth2ApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOAuth2ApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOauth2ProviderId()); l < 22 || l > 254 {
		err := CreateOAuth2ApplicationRequestValidationError{
			field:  "Oauth2ProviderId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOAuth2ApplicationRequest_Oauth2ProviderId_Pattern.MatchString(m.GetOauth2ProviderId()) {
		err := CreateOAuth2ApplicationRequestValidationError{
			field:  "Oauth2ProviderId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
		err := CreateOAuth2ApplicationRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOAuth2ApplicationRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateOAuth2ApplicationRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := CreateOAuth2ApplicationRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := CreateOAuth2ApplicationRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.GetConfig() == nil {
		err := CreateOAuth2ApplicationRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOAuth2ApplicationRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOAuth2ApplicationRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOAuth2ApplicationRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOAuth2ApplicationRequestMultiError(errors)
	}

	return nil
}

// CreateOAuth2ApplicationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOAuth2ApplicationRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOAuth2ApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOAuth2ApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOAuth2ApplicationRequestMultiError) AllErrors() []error { return m }

// CreateOAuth2ApplicationRequestValidationError is the validation error
// returned by CreateOAuth2ApplicationRequest.Validate if the designated
// constraints aren't met.
type CreateOAuth2ApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOAuth2ApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOAuth2ApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOAuth2ApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOAuth2ApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOAuth2ApplicationRequestValidationError) ErrorName() string {
	return "CreateOAuth2ApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOAuth2ApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOAuth2ApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOAuth2ApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOAuth2ApplicationRequestValidationError{}

var _CreateOAuth2ApplicationRequest_Oauth2ProviderId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _CreateOAuth2ApplicationRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on CreateOAuth2ApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOAuth2ApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOAuth2ApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOAuth2ApplicationResponseMultiError, or nil if none found.
func (m *CreateOAuth2ApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOAuth2ApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := CreateOAuth2ApplicationResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOAuth2ApplicationResponse_Id_Pattern.MatchString(m.GetId()) {
		err := CreateOAuth2ApplicationResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOAuth2ApplicationResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOAuth2ApplicationResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOAuth2ApplicationResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOAuth2ApplicationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOAuth2ApplicationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOAuth2ApplicationResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if len(errors) > 0 {
		return CreateOAuth2ApplicationResponseMultiError(errors)
	}

	return nil
}

// CreateOAuth2ApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOAuth2ApplicationResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOAuth2ApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOAuth2ApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOAuth2ApplicationResponseMultiError) AllErrors() []error { return m }

// CreateOAuth2ApplicationResponseValidationError is the validation error
// returned by CreateOAuth2ApplicationResponse.Validate if the designated
// constraints aren't met.
type CreateOAuth2ApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOAuth2ApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOAuth2ApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOAuth2ApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOAuth2ApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOAuth2ApplicationResponseValidationError) ErrorName() string {
	return "CreateOAuth2ApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOAuth2ApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOAuth2ApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOAuth2ApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOAuth2ApplicationResponseValidationError{}

var _CreateOAuth2ApplicationResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadOAuth2ApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOAuth2ApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOAuth2ApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOAuth2ApplicationRequestMultiError, or nil if none found.
func (m *ReadOAuth2ApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOAuth2ApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := ReadOAuth2ApplicationRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReadOAuth2ApplicationRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ReadOAuth2ApplicationRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadOAuth2ApplicationRequestMultiError(errors)
	}

	return nil
}

// ReadOAuth2ApplicationRequestMultiError is an error wrapping multiple
// validation errors returned by ReadOAuth2ApplicationRequest.ValidateAll() if
// the designated constraints aren't met.
type ReadOAuth2ApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOAuth2ApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOAuth2ApplicationRequestMultiError) AllErrors() []error { return m }

// ReadOAuth2ApplicationRequestValidationError is the validation error returned
// by ReadOAuth2ApplicationRequest.Validate if the designated constraints
// aren't met.
type ReadOAuth2ApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOAuth2ApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOAuth2ApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOAuth2ApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOAuth2ApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOAuth2ApplicationRequestValidationError) ErrorName() string {
	return "ReadOAuth2ApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOAuth2ApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOAuth2ApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOAuth2ApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOAuth2ApplicationRequestValidationError{}

var _ReadOAuth2ApplicationRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadOAuth2ApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOAuth2ApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOAuth2ApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadOAuth2ApplicationResponseMultiError, or nil if none found.
func (m *ReadOAuth2ApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOAuth2ApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOauth2Application()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadOAuth2ApplicationResponseValidationError{
					field:  "Oauth2Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadOAuth2ApplicationResponseValidationError{
					field:  "Oauth2Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOauth2Application()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadOAuth2ApplicationResponseValidationError{
				field:  "Oauth2Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadOAuth2ApplicationResponseMultiError(errors)
	}

	return nil
}

// ReadOAuth2ApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by ReadOAuth2ApplicationResponse.ValidateAll()
// if the designated constraints aren't met.
type ReadOAuth2ApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOAuth2ApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOAuth2ApplicationResponseMultiError) AllErrors() []error { return m }

// ReadOAuth2ApplicationResponseValidationError is the validation error
// returned by ReadOAuth2ApplicationResponse.Validate if the designated
// constraints aren't met.
type ReadOAuth2ApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOAuth2ApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOAuth2ApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOAuth2ApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOAuth2ApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOAuth2ApplicationResponseValidationError) ErrorName() string {
	return "ReadOAuth2ApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOAuth2ApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOAuth2ApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOAuth2ApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOAuth2ApplicationResponseValidationError{}

// Validate checks the field values on UpdateOAuth2ApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOAuth2ApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOAuth2ApplicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOAuth2ApplicationRequestMultiError, or nil if none found.
func (m *UpdateOAuth2ApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOAuth2ApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateOAuth2ApplicationRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateOAuth2ApplicationRequest_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateOAuth2ApplicationRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEtag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOAuth2ApplicationRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOAuth2ApplicationRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOAuth2ApplicationRequestValidationError{
				field:  "Etag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetDisplayName(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateOAuth2ApplicationRequestValidationError{
					field:  "DisplayName",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 2 || l > 254 {
				err := UpdateOAuth2ApplicationRequestValidationError{
					field:  "Description",
					reason: "value length must be between 2 and 254 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOAuth2ApplicationRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOAuth2ApplicationRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOAuth2ApplicationRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOAuth2ApplicationRequestMultiError(errors)
	}

	return nil
}

// UpdateOAuth2ApplicationRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOAuth2ApplicationRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateOAuth2ApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOAuth2ApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOAuth2ApplicationRequestMultiError) AllErrors() []error { return m }

// UpdateOAuth2ApplicationRequestValidationError is the validation error
// returned by UpdateOAuth2ApplicationRequest.Validate if the designated
// constraints aren't met.
type UpdateOAuth2ApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOAuth2ApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOAuth2ApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOAuth2ApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOAuth2ApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOAuth2ApplicationRequestValidationError) ErrorName() string {
	return "UpdateOAuth2ApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOAuth2ApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOAuth2ApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOAuth2ApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOAuth2ApplicationRequestValidationError{}

var _UpdateOAuth2ApplicationRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on UpdateOAuth2ApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOAuth2ApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOAuth2ApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOAuth2ApplicationResponseMultiError, or nil if none found.
func (m *UpdateOAuth2ApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOAuth2ApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := UpdateOAuth2ApplicationResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateOAuth2ApplicationResponse_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateOAuth2ApplicationResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOAuth2ApplicationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOAuth2ApplicationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOAuth2ApplicationResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return UpdateOAuth2ApplicationResponseMultiError(errors)
	}

	return nil
}

// UpdateOAuth2ApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOAuth2ApplicationResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateOAuth2ApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOAuth2ApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOAuth2ApplicationResponseMultiError) AllErrors() []error { return m }

// UpdateOAuth2ApplicationResponseValidationError is the validation error
// returned by UpdateOAuth2ApplicationResponse.Validate if the designated
// constraints aren't met.
type UpdateOAuth2ApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOAuth2ApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOAuth2ApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOAuth2ApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOAuth2ApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOAuth2ApplicationResponseValidationError) ErrorName() string {
	return "UpdateOAuth2ApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOAuth2ApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOAuth2ApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOAuth2ApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOAuth2ApplicationResponseValidationError{}

var _UpdateOAuth2ApplicationResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteOAuth2ApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuth2ApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuth2ApplicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOAuth2ApplicationRequestMultiError, or nil if none found.
func (m *DeleteOAuth2ApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuth2ApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := DeleteOAuth2ApplicationRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteOAuth2ApplicationRequest_Id_Pattern.MatchString(m.GetId()) {
		err := DeleteOAuth2ApplicationRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEtag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOAuth2ApplicationRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOAuth2ApplicationRequestValidationError{
					field:  "Etag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOAuth2ApplicationRequestValidationError{
				field:  "Etag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteOAuth2ApplicationRequestMultiError(errors)
	}

	return nil
}

// DeleteOAuth2ApplicationRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOAuth2ApplicationRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOAuth2ApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuth2ApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuth2ApplicationRequestMultiError) AllErrors() []error { return m }

// DeleteOAuth2ApplicationRequestValidationError is the validation error
// returned by DeleteOAuth2ApplicationRequest.Validate if the designated
// constraints aren't met.
type DeleteOAuth2ApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuth2ApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuth2ApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuth2ApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuth2ApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuth2ApplicationRequestValidationError) ErrorName() string {
	return "DeleteOAuth2ApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuth2ApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuth2ApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuth2ApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuth2ApplicationRequestValidationError{}

var _DeleteOAuth2ApplicationRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on DeleteOAuth2ApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuth2ApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuth2ApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOAuth2ApplicationResponseMultiError, or nil if none found.
func (m *DeleteOAuth2ApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuth2ApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOAuth2ApplicationResponseMultiError(errors)
	}

	return nil
}

// DeleteOAuth2ApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOAuth2ApplicationResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteOAuth2ApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuth2ApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuth2ApplicationResponseMultiError) AllErrors() []error { return m }

// DeleteOAuth2ApplicationResponseValidationError is the validation error
// returned by DeleteOAuth2ApplicationResponse.Validate if the designated
// constraints aren't met.
type DeleteOAuth2ApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuth2ApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuth2ApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuth2ApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuth2ApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuth2ApplicationResponseValidationError) ErrorName() string {
	return "DeleteOAuth2ApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuth2ApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuth2ApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuth2ApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuth2ApplicationResponseValidationError{}

// Validate checks the field values on AssignPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignPermissionsRequestMultiError, or nil if none found.
func (m *AssignPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTargetIdentifier()); l < 22 || l > 254 {
		err := AssignPermissionsRequestValidationError{
			field:  "TargetIdentifier",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AssignPermissionsRequest_TargetIdentifier_Pattern.MatchString(m.GetTargetIdentifier()) {
		err := AssignPermissionsRequestValidationError{
			field:  "TargetIdentifier",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AssignPermissionsRequest_Role_InLookup[m.GetRole()]; !ok {
		err := AssignPermissionsRequestValidationError{
			field:  "Role",
			reason: "value must be in list [all_editor all_viewer app_editor app_viewer authn_viewer authn_editor]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCustomerId()); l < 22 || l > 254 {
		err := AssignPermissionsRequestValidationError{
			field:  "CustomerId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AssignPermissionsRequest_CustomerId_Pattern.MatchString(m.GetCustomerId()) {
		err := AssignPermissionsRequestValidationError{
			field:  "CustomerId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetObjectId()); l < 22 || l > 254 {
		err := AssignPermissionsRequestValidationError{
			field:  "ObjectId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AssignPermissionsRequest_ObjectId_Pattern.MatchString(m.GetObjectId()) {
		err := AssignPermissionsRequestValidationError{
			field:  "ObjectId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignPermissionsRequestMultiError(errors)
	}

	return nil
}

// AssignPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by AssignPermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignPermissionsRequestMultiError) AllErrors() []error { return m }

// AssignPermissionsRequestValidationError is the validation error returned by
// AssignPermissionsRequest.Validate if the designated constraints aren't met.
type AssignPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignPermissionsRequestValidationError) ErrorName() string {
	return "AssignPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignPermissionsRequestValidationError{}

var _AssignPermissionsRequest_TargetIdentifier_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _AssignPermissionsRequest_Role_InLookup = map[string]struct{}{
	"all_editor":   {},
	"all_viewer":   {},
	"app_editor":   {},
	"app_viewer":   {},
	"authn_viewer": {},
	"authn_editor": {},
}

var _AssignPermissionsRequest_CustomerId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _AssignPermissionsRequest_ObjectId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on AssignPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignPermissionsResponseMultiError, or nil if none found.
func (m *AssignPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AssignPermissionsResponseMultiError(errors)
	}

	return nil
}

// AssignPermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by AssignPermissionsResponse.ValidateAll() if the
// designated constraints aren't met.
type AssignPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignPermissionsResponseMultiError) AllErrors() []error { return m }

// AssignPermissionsResponseValidationError is the validation error returned by
// AssignPermissionsResponse.Validate if the designated constraints aren't met.
type AssignPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignPermissionsResponseValidationError) ErrorName() string {
	return "AssignPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignPermissionsResponseValidationError{}

// Validate checks the field values on RevokePermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokePermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokePermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokePermissionsRequestMultiError, or nil if none found.
func (m *RevokePermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokePermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTargetIdentifier()); l < 22 || l > 254 {
		err := RevokePermissionsRequestValidationError{
			field:  "TargetIdentifier",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RevokePermissionsRequest_TargetIdentifier_Pattern.MatchString(m.GetTargetIdentifier()) {
		err := RevokePermissionsRequestValidationError{
			field:  "TargetIdentifier",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _RevokePermissionsRequest_Role_InLookup[m.GetRole()]; !ok {
		err := RevokePermissionsRequestValidationError{
			field:  "Role",
			reason: "value must be in list [all_editor all_viewer app_editor app_viewer authn_viewer authn_editor]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCustomerId()); l < 22 || l > 254 {
		err := RevokePermissionsRequestValidationError{
			field:  "CustomerId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RevokePermissionsRequest_CustomerId_Pattern.MatchString(m.GetCustomerId()) {
		err := RevokePermissionsRequestValidationError{
			field:  "CustomerId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetObjectId()); l < 22 || l > 254 {
		err := RevokePermissionsRequestValidationError{
			field:  "ObjectId",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RevokePermissionsRequest_ObjectId_Pattern.MatchString(m.GetObjectId()) {
		err := RevokePermissionsRequestValidationError{
			field:  "ObjectId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RevokePermissionsRequestMultiError(errors)
	}

	return nil
}

// RevokePermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by RevokePermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokePermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokePermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokePermissionsRequestMultiError) AllErrors() []error { return m }

// RevokePermissionsRequestValidationError is the validation error returned by
// RevokePermissionsRequest.Validate if the designated constraints aren't met.
type RevokePermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokePermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokePermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokePermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokePermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokePermissionsRequestValidationError) ErrorName() string {
	return "RevokePermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokePermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokePermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokePermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokePermissionsRequestValidationError{}

var _RevokePermissionsRequest_TargetIdentifier_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _RevokePermissionsRequest_Role_InLookup = map[string]struct{}{
	"all_editor":   {},
	"all_viewer":   {},
	"app_editor":   {},
	"app_viewer":   {},
	"authn_viewer": {},
	"authn_editor": {},
}

var _RevokePermissionsRequest_CustomerId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _RevokePermissionsRequest_ObjectId_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on RevokePermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokePermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokePermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokePermissionsResponseMultiError, or nil if none found.
func (m *RevokePermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokePermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RevokePermissionsResponseMultiError(errors)
	}

	return nil
}

// RevokePermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by RevokePermissionsResponse.ValidateAll() if the
// designated constraints aren't met.
type RevokePermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokePermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokePermissionsResponseMultiError) AllErrors() []error { return m }

// RevokePermissionsResponseValidationError is the validation error returned by
// RevokePermissionsResponse.Validate if the designated constraints aren't met.
type RevokePermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokePermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokePermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokePermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokePermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokePermissionsResponseValidationError) ErrorName() string {
	return "RevokePermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokePermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokePermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokePermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokePermissionsResponseValidationError{}

// Validate checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsRequestMultiError, or nil if none found.
func (m *ListPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetLocation()); l < 22 || l > 254 {
		err := ListPermissionsRequestValidationError{
			field:  "Location",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListPermissionsRequest_Location_Pattern.MatchString(m.GetLocation()) {
		err := ListPermissionsRequestValidationError{
			field:  "Location",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListPermissionsRequestMultiError(errors)
	}

	return nil
}

// ListPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsRequestMultiError) AllErrors() []error { return m }

// ListPermissionsRequestValidationError is the validation error returned by
// ListPermissionsRequest.Validate if the designated constraints aren't met.
type ListPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsRequestValidationError) ErrorName() string {
	return "ListPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsRequestValidationError{}

var _ListPermissionsRequest_Location_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ListPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsResponseMultiError, or nil if none found.
func (m *ListPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetServiceAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("ServiceAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("ServiceAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponseValidationError{
					field:  fmt.Sprintf("ServiceAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInvitations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponseValidationError{
					field:  fmt.Sprintf("Invitations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPermissionsResponseMultiError(errors)
	}

	return nil
}

// ListPermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsResponseMultiError) AllErrors() []error { return m }

// ListPermissionsResponseValidationError is the validation error returned by
// ListPermissionsResponse.Validate if the designated constraints aren't met.
type ListPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponseValidationError) ErrorName() string {
	return "ListPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponseValidationError{}

// Validate checks the field values on ListPermissionsResponse_PermissionRole
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListPermissionsResponse_PermissionRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListPermissionsResponse_PermissionRole with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListPermissionsResponse_PermissionRoleMultiError, or nil if none found.
func (m *ListPermissionsResponse_PermissionRole) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsResponse_PermissionRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return ListPermissionsResponse_PermissionRoleMultiError(errors)
	}

	return nil
}

// ListPermissionsResponse_PermissionRoleMultiError is an error wrapping
// multiple validation errors returned by
// ListPermissionsResponse_PermissionRole.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsResponse_PermissionRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsResponse_PermissionRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsResponse_PermissionRoleMultiError) AllErrors() []error { return m }

// ListPermissionsResponse_PermissionRoleValidationError is the validation
// error returned by ListPermissionsResponse_PermissionRole.Validate if the
// designated constraints aren't met.
type ListPermissionsResponse_PermissionRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponse_PermissionRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponse_PermissionRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponse_PermissionRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponse_PermissionRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponse_PermissionRoleValidationError) ErrorName() string {
	return "ListPermissionsResponse_PermissionRoleValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponse_PermissionRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse_PermissionRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponse_PermissionRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponse_PermissionRoleValidationError{}

// Validate checks the field values on ListPermissionsResponse_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsResponse_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsResponse_UserMultiError, or nil if none found.
func (m *ListPermissionsResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionsResponse_UserValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionsResponse_UserValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponse_UserValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPermissionsResponse_UserMultiError(errors)
	}

	return nil
}

// ListPermissionsResponse_UserMultiError is an error wrapping multiple
// validation errors returned by ListPermissionsResponse_User.ValidateAll() if
// the designated constraints aren't met.
type ListPermissionsResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsResponse_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsResponse_UserMultiError) AllErrors() []error { return m }

// ListPermissionsResponse_UserValidationError is the validation error returned
// by ListPermissionsResponse_User.Validate if the designated constraints
// aren't met.
type ListPermissionsResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponse_UserValidationError) ErrorName() string {
	return "ListPermissionsResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponse_UserValidationError{}

// Validate checks the field values on ListPermissionsResponse_ServiceAccount
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListPermissionsResponse_ServiceAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListPermissionsResponse_ServiceAccount with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListPermissionsResponse_ServiceAccountMultiError, or nil if none found.
func (m *ListPermissionsResponse_ServiceAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsResponse_ServiceAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionsResponse_ServiceAccountValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionsResponse_ServiceAccountValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponse_ServiceAccountValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPermissionsResponse_ServiceAccountMultiError(errors)
	}

	return nil
}

// ListPermissionsResponse_ServiceAccountMultiError is an error wrapping
// multiple validation errors returned by
// ListPermissionsResponse_ServiceAccount.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsResponse_ServiceAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsResponse_ServiceAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsResponse_ServiceAccountMultiError) AllErrors() []error { return m }

// ListPermissionsResponse_ServiceAccountValidationError is the validation
// error returned by ListPermissionsResponse_ServiceAccount.Validate if the
// designated constraints aren't met.
type ListPermissionsResponse_ServiceAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponse_ServiceAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponse_ServiceAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponse_ServiceAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponse_ServiceAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponse_ServiceAccountValidationError) ErrorName() string {
	return "ListPermissionsResponse_ServiceAccountValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponse_ServiceAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse_ServiceAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponse_ServiceAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponse_ServiceAccountValidationError{}

// Validate checks the field values on ListPermissionsResponse_Invitation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListPermissionsResponse_Invitation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsResponse_Invitation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListPermissionsResponse_InvitationMultiError, or nil if none found.
func (m *ListPermissionsResponse_Invitation) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsResponse_Invitation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Invitee

	// no validation rules for Id

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionsResponse_InvitationValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionsResponse_InvitationValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponse_InvitationValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPermissionsResponse_InvitationMultiError(errors)
	}

	return nil
}

// ListPermissionsResponse_InvitationMultiError is an error wrapping multiple
// validation errors returned by
// ListPermissionsResponse_Invitation.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsResponse_InvitationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsResponse_InvitationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsResponse_InvitationMultiError) AllErrors() []error { return m }

// ListPermissionsResponse_InvitationValidationError is the validation error
// returned by ListPermissionsResponse_Invitation.Validate if the designated
// constraints aren't met.
type ListPermissionsResponse_InvitationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponse_InvitationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponse_InvitationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponse_InvitationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponse_InvitationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponse_InvitationValidationError) ErrorName() string {
	return "ListPermissionsResponse_InvitationValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponse_InvitationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse_Invitation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponse_InvitationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponse_InvitationValidationError{}
