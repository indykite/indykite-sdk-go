// Copyright (c) 2020 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: indykite/config/v1beta1/model.proto

package configv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

	v1beta11 "github.com/indykite/jarvis-sdk-go/gen/indykite/knowledge_graph/v1beta1"
	v1beta1 "github.com/indykite/jarvis-sdk-go/gen/indykite/objects/v1beta1"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProviderType is a list of supported OAuth2 providers.
type ProviderType int32

const (
	ProviderType_PROVIDER_TYPE_INVALID               ProviderType = 0
	ProviderType_PROVIDER_TYPE_AMAZON_COM            ProviderType = 1
	ProviderType_PROVIDER_TYPE_AMAZONCOGNITO_COM     ProviderType = 34
	ProviderType_PROVIDER_TYPE_APPLE_COM             ProviderType = 41
	ProviderType_PROVIDER_TYPE_AUTHENTEQ_COM         ProviderType = 33
	ProviderType_PROVIDER_TYPE_BANKID_COM            ProviderType = 38
	ProviderType_PROVIDER_TYPE_BANKID_NO             ProviderType = 37
	ProviderType_PROVIDER_TYPE_BITBUCKET             ProviderType = 2
	ProviderType_PROVIDER_TYPE_CERN_CH               ProviderType = 3
	ProviderType_PROVIDER_TYPE_CUSTOM                ProviderType = 39
	ProviderType_PROVIDER_TYPE_FACEBOOK_COM          ProviderType = 4
	ProviderType_PROVIDER_TYPE_FITBIT_COM            ProviderType = 5
	ProviderType_PROVIDER_TYPE_FOURSQUARE_COM        ProviderType = 6
	ProviderType_PROVIDER_TYPE_GITHUB_COM            ProviderType = 7
	ProviderType_PROVIDER_TYPE_GITLAB_COM            ProviderType = 8
	ProviderType_PROVIDER_TYPE_GOOGLE_COM            ProviderType = 9
	ProviderType_PROVIDER_TYPE_HEROKU_COM            ProviderType = 10
	ProviderType_PROVIDER_TYPE_HIPCHAT_COM           ProviderType = 11
	ProviderType_PROVIDER_TYPE_INDYKITE_ID           ProviderType = 35
	ProviderType_PROVIDER_TYPE_INDYKITE_ME           ProviderType = 36
	ProviderType_PROVIDER_TYPE_INSTAGRAM_COM         ProviderType = 12
	ProviderType_PROVIDER_TYPE_KAKAO_COM             ProviderType = 13
	ProviderType_PROVIDER_TYPE_LINKEDIN_COM          ProviderType = 14
	ProviderType_PROVIDER_TYPE_MAILCHIMP_COM         ProviderType = 15
	ProviderType_PROVIDER_TYPE_MAIL_RU               ProviderType = 16
	ProviderType_PROVIDER_TYPE_MEDIAMATH_COM         ProviderType = 17
	ProviderType_PROVIDER_TYPE_SANDBOX_MEDIAMATH_COM ProviderType = 18
	ProviderType_PROVIDER_TYPE_LIVE_COM              ProviderType = 32
	ProviderType_PROVIDER_TYPE_MICROSOFT_COM         ProviderType = 19
	ProviderType_PROVIDER_TYPE_HEALTH_NOKIA_COM      ProviderType = 20
	ProviderType_PROVIDER_TYPE_ODNOKLASSNIKI_RU      ProviderType = 21
	ProviderType_PROVIDER_TYPE_PAYPAL_COM            ProviderType = 22
	ProviderType_PROVIDER_TYPE_SANDBOX_PAYPAL_COM    ProviderType = 23
	ProviderType_PROVIDER_TYPE_SLACK_COM             ProviderType = 24
	ProviderType_PROVIDER_TYPE_SPOTIFY_COM           ProviderType = 25
	ProviderType_PROVIDER_TYPE_STACKOVERFLOW_COM     ProviderType = 26
	ProviderType_PROVIDER_TYPE_TWITCH_TV             ProviderType = 27
	ProviderType_PROVIDER_TYPE_UBER_COM              ProviderType = 28
	ProviderType_PROVIDER_TYPE_VIPPS_NO              ProviderType = 40
	ProviderType_PROVIDER_TYPE_VK_COM                ProviderType = 29
	ProviderType_PROVIDER_TYPE_YAHOO_COM             ProviderType = 30
	ProviderType_PROVIDER_TYPE_YANDEX_COM            ProviderType = 31
)

// Enum value maps for ProviderType.
var (
	ProviderType_name = map[int32]string{
		0:  "PROVIDER_TYPE_INVALID",
		1:  "PROVIDER_TYPE_AMAZON_COM",
		34: "PROVIDER_TYPE_AMAZONCOGNITO_COM",
		41: "PROVIDER_TYPE_APPLE_COM",
		33: "PROVIDER_TYPE_AUTHENTEQ_COM",
		38: "PROVIDER_TYPE_BANKID_COM",
		37: "PROVIDER_TYPE_BANKID_NO",
		2:  "PROVIDER_TYPE_BITBUCKET",
		3:  "PROVIDER_TYPE_CERN_CH",
		39: "PROVIDER_TYPE_CUSTOM",
		4:  "PROVIDER_TYPE_FACEBOOK_COM",
		5:  "PROVIDER_TYPE_FITBIT_COM",
		6:  "PROVIDER_TYPE_FOURSQUARE_COM",
		7:  "PROVIDER_TYPE_GITHUB_COM",
		8:  "PROVIDER_TYPE_GITLAB_COM",
		9:  "PROVIDER_TYPE_GOOGLE_COM",
		10: "PROVIDER_TYPE_HEROKU_COM",
		11: "PROVIDER_TYPE_HIPCHAT_COM",
		35: "PROVIDER_TYPE_INDYKITE_ID",
		36: "PROVIDER_TYPE_INDYKITE_ME",
		12: "PROVIDER_TYPE_INSTAGRAM_COM",
		13: "PROVIDER_TYPE_KAKAO_COM",
		14: "PROVIDER_TYPE_LINKEDIN_COM",
		15: "PROVIDER_TYPE_MAILCHIMP_COM",
		16: "PROVIDER_TYPE_MAIL_RU",
		17: "PROVIDER_TYPE_MEDIAMATH_COM",
		18: "PROVIDER_TYPE_SANDBOX_MEDIAMATH_COM",
		32: "PROVIDER_TYPE_LIVE_COM",
		19: "PROVIDER_TYPE_MICROSOFT_COM",
		20: "PROVIDER_TYPE_HEALTH_NOKIA_COM",
		21: "PROVIDER_TYPE_ODNOKLASSNIKI_RU",
		22: "PROVIDER_TYPE_PAYPAL_COM",
		23: "PROVIDER_TYPE_SANDBOX_PAYPAL_COM",
		24: "PROVIDER_TYPE_SLACK_COM",
		25: "PROVIDER_TYPE_SPOTIFY_COM",
		26: "PROVIDER_TYPE_STACKOVERFLOW_COM",
		27: "PROVIDER_TYPE_TWITCH_TV",
		28: "PROVIDER_TYPE_UBER_COM",
		40: "PROVIDER_TYPE_VIPPS_NO",
		29: "PROVIDER_TYPE_VK_COM",
		30: "PROVIDER_TYPE_YAHOO_COM",
		31: "PROVIDER_TYPE_YANDEX_COM",
	}
	ProviderType_value = map[string]int32{
		"PROVIDER_TYPE_INVALID":               0,
		"PROVIDER_TYPE_AMAZON_COM":            1,
		"PROVIDER_TYPE_AMAZONCOGNITO_COM":     34,
		"PROVIDER_TYPE_APPLE_COM":             41,
		"PROVIDER_TYPE_AUTHENTEQ_COM":         33,
		"PROVIDER_TYPE_BANKID_COM":            38,
		"PROVIDER_TYPE_BANKID_NO":             37,
		"PROVIDER_TYPE_BITBUCKET":             2,
		"PROVIDER_TYPE_CERN_CH":               3,
		"PROVIDER_TYPE_CUSTOM":                39,
		"PROVIDER_TYPE_FACEBOOK_COM":          4,
		"PROVIDER_TYPE_FITBIT_COM":            5,
		"PROVIDER_TYPE_FOURSQUARE_COM":        6,
		"PROVIDER_TYPE_GITHUB_COM":            7,
		"PROVIDER_TYPE_GITLAB_COM":            8,
		"PROVIDER_TYPE_GOOGLE_COM":            9,
		"PROVIDER_TYPE_HEROKU_COM":            10,
		"PROVIDER_TYPE_HIPCHAT_COM":           11,
		"PROVIDER_TYPE_INDYKITE_ID":           35,
		"PROVIDER_TYPE_INDYKITE_ME":           36,
		"PROVIDER_TYPE_INSTAGRAM_COM":         12,
		"PROVIDER_TYPE_KAKAO_COM":             13,
		"PROVIDER_TYPE_LINKEDIN_COM":          14,
		"PROVIDER_TYPE_MAILCHIMP_COM":         15,
		"PROVIDER_TYPE_MAIL_RU":               16,
		"PROVIDER_TYPE_MEDIAMATH_COM":         17,
		"PROVIDER_TYPE_SANDBOX_MEDIAMATH_COM": 18,
		"PROVIDER_TYPE_LIVE_COM":              32,
		"PROVIDER_TYPE_MICROSOFT_COM":         19,
		"PROVIDER_TYPE_HEALTH_NOKIA_COM":      20,
		"PROVIDER_TYPE_ODNOKLASSNIKI_RU":      21,
		"PROVIDER_TYPE_PAYPAL_COM":            22,
		"PROVIDER_TYPE_SANDBOX_PAYPAL_COM":    23,
		"PROVIDER_TYPE_SLACK_COM":             24,
		"PROVIDER_TYPE_SPOTIFY_COM":           25,
		"PROVIDER_TYPE_STACKOVERFLOW_COM":     26,
		"PROVIDER_TYPE_TWITCH_TV":             27,
		"PROVIDER_TYPE_UBER_COM":              28,
		"PROVIDER_TYPE_VIPPS_NO":              40,
		"PROVIDER_TYPE_VK_COM":                29,
		"PROVIDER_TYPE_YAHOO_COM":             30,
		"PROVIDER_TYPE_YANDEX_COM":            31,
	}
)

func (x ProviderType) Enum() *ProviderType {
	p := new(ProviderType)
	*p = x
	return p
}

func (x ProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[0].Descriptor()
}

func (ProviderType) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[0]
}

func (x ProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderType.Descriptor instead.
func (ProviderType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{0}
}

// AuthStyle represents how requests for tokens are authenticated
// to the server.
type AuthStyle int32

const (
	AuthStyle_AUTH_STYLE_INVALID AuthStyle = 0
	// AuthStyleAutoDetect means to auto-detect which authentication
	// style the provider wants by trying both ways and caching
	// the successful way for the future.
	AuthStyle_AUTH_STYLE_AUTO_DETECT AuthStyle = 1
	// AuthStyleInParams sends the "client_id" and "client_secret"
	// in the POST body as application/x-www-form-urlencoded parameters.
	AuthStyle_AUTH_STYLE_IN_PARAMS AuthStyle = 2
	// AuthStyleInHeader sends the client_id and client_password
	// using HTTP Basic Authorization. This is an optional style
	// described in the OAuth2 RFC 6749 section 2.3.1.
	AuthStyle_AUTH_STYLE_IN_HEADER AuthStyle = 3
)

// Enum value maps for AuthStyle.
var (
	AuthStyle_name = map[int32]string{
		0: "AUTH_STYLE_INVALID",
		1: "AUTH_STYLE_AUTO_DETECT",
		2: "AUTH_STYLE_IN_PARAMS",
		3: "AUTH_STYLE_IN_HEADER",
	}
	AuthStyle_value = map[string]int32{
		"AUTH_STYLE_INVALID":     0,
		"AUTH_STYLE_AUTO_DETECT": 1,
		"AUTH_STYLE_IN_PARAMS":   2,
		"AUTH_STYLE_IN_HEADER":   3,
	}
)

func (x AuthStyle) Enum() *AuthStyle {
	p := new(AuthStyle)
	*p = x
	return p
}

func (x AuthStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[1].Descriptor()
}

func (AuthStyle) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[1]
}

func (x AuthStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthStyle.Descriptor instead.
func (AuthStyle) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{1}
}

type GrantType int32

const (
	GrantType_GRANT_TYPE_INVALID GrantType = 0
	// https://tools.ietf.org/html/rfc6749#section-4.1
	GrantType_GRANT_TYPE_AUTHORIZATION_CODE GrantType = 1
	// https://tools.ietf.org/html/rfc6749#section-4.2
	GrantType_GRANT_TYPE_IMPLICIT GrantType = 2
	// https://tools.ietf.org/html/rfc6749#section-4.3
	GrantType_GRANT_TYPE_PASSWORD GrantType = 3
	// https://tools.ietf.org/html/rfc6749#section-4.4
	GrantType_GRANT_TYPE_CLIENT_CREDENTIALS GrantType = 4
	// https://tools.ietf.org/html/rfc6749#section-6
	GrantType_GRANT_TYPE_REFRESH_TOKEN GrantType = 5
)

// Enum value maps for GrantType.
var (
	GrantType_name = map[int32]string{
		0: "GRANT_TYPE_INVALID",
		1: "GRANT_TYPE_AUTHORIZATION_CODE",
		2: "GRANT_TYPE_IMPLICIT",
		3: "GRANT_TYPE_PASSWORD",
		4: "GRANT_TYPE_CLIENT_CREDENTIALS",
		5: "GRANT_TYPE_REFRESH_TOKEN",
	}
	GrantType_value = map[string]int32{
		"GRANT_TYPE_INVALID":            0,
		"GRANT_TYPE_AUTHORIZATION_CODE": 1,
		"GRANT_TYPE_IMPLICIT":           2,
		"GRANT_TYPE_PASSWORD":           3,
		"GRANT_TYPE_CLIENT_CREDENTIALS": 4,
		"GRANT_TYPE_REFRESH_TOKEN":      5,
	}
)

func (x GrantType) Enum() *GrantType {
	p := new(GrantType)
	*p = x
	return p
}

func (x GrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[2].Descriptor()
}

func (GrantType) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[2]
}

func (x GrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantType.Descriptor instead.
func (GrantType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{2}
}

type ResponseType int32

const (
	ResponseType_RESPONSE_TYPE_INVALID  ResponseType = 0
	ResponseType_RESPONSE_TYPE_TOKEN    ResponseType = 1
	ResponseType_RESPONSE_TYPE_CODE     ResponseType = 2
	ResponseType_RESPONSE_TYPE_ID_TOKEN ResponseType = 3
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "RESPONSE_TYPE_INVALID",
		1: "RESPONSE_TYPE_TOKEN",
		2: "RESPONSE_TYPE_CODE",
		3: "RESPONSE_TYPE_ID_TOKEN",
	}
	ResponseType_value = map[string]int32{
		"RESPONSE_TYPE_INVALID":  0,
		"RESPONSE_TYPE_TOKEN":    1,
		"RESPONSE_TYPE_CODE":     2,
		"RESPONSE_TYPE_ID_TOKEN": 3,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[3].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[3]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{3}
}

type ClientSubjectType int32

const (
	ClientSubjectType_CLIENT_SUBJECT_TYPE_INVALID  ClientSubjectType = 0
	ClientSubjectType_CLIENT_SUBJECT_TYPE_PUBLIC   ClientSubjectType = 1
	ClientSubjectType_CLIENT_SUBJECT_TYPE_PAIRWISE ClientSubjectType = 2
)

// Enum value maps for ClientSubjectType.
var (
	ClientSubjectType_name = map[int32]string{
		0: "CLIENT_SUBJECT_TYPE_INVALID",
		1: "CLIENT_SUBJECT_TYPE_PUBLIC",
		2: "CLIENT_SUBJECT_TYPE_PAIRWISE",
	}
	ClientSubjectType_value = map[string]int32{
		"CLIENT_SUBJECT_TYPE_INVALID":  0,
		"CLIENT_SUBJECT_TYPE_PUBLIC":   1,
		"CLIENT_SUBJECT_TYPE_PAIRWISE": 2,
	}
)

func (x ClientSubjectType) Enum() *ClientSubjectType {
	p := new(ClientSubjectType)
	*p = x
	return p
}

func (x ClientSubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientSubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[4].Descriptor()
}

func (ClientSubjectType) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[4]
}

func (x ClientSubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientSubjectType.Descriptor instead.
func (ClientSubjectType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{4}
}

type TokenEndpointAuthMethod int32

const (
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_INVALID             TokenEndpointAuthMethod = 0
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC TokenEndpointAuthMethod = 1
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST  TokenEndpointAuthMethod = 2
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT     TokenEndpointAuthMethod = 3
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_NONE                TokenEndpointAuthMethod = 4
)

// Enum value maps for TokenEndpointAuthMethod.
var (
	TokenEndpointAuthMethod_name = map[int32]string{
		0: "TOKEN_ENDPOINT_AUTH_METHOD_INVALID",
		1: "TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC",
		2: "TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST",
		3: "TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT",
		4: "TOKEN_ENDPOINT_AUTH_METHOD_NONE",
	}
	TokenEndpointAuthMethod_value = map[string]int32{
		"TOKEN_ENDPOINT_AUTH_METHOD_INVALID":             0,
		"TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC": 1,
		"TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST":  2,
		"TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT":     3,
		"TOKEN_ENDPOINT_AUTH_METHOD_NONE":                4,
	}
)

func (x TokenEndpointAuthMethod) Enum() *TokenEndpointAuthMethod {
	p := new(TokenEndpointAuthMethod)
	*p = x
	return p
}

func (x TokenEndpointAuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenEndpointAuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[5].Descriptor()
}

func (TokenEndpointAuthMethod) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[5]
}

func (x TokenEndpointAuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenEndpointAuthMethod.Descriptor instead.
func (TokenEndpointAuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{5}
}

type ConveyancePreference int32

const (
	ConveyancePreference_CONVEYANCE_PREFERENCE_INVALID  ConveyancePreference = 0
	ConveyancePreference_CONVEYANCE_PREFERENCE_NONE     ConveyancePreference = 1
	ConveyancePreference_CONVEYANCE_PREFERENCE_INDIRECT ConveyancePreference = 2
	ConveyancePreference_CONVEYANCE_PREFERENCE_DIRECT   ConveyancePreference = 3
)

// Enum value maps for ConveyancePreference.
var (
	ConveyancePreference_name = map[int32]string{
		0: "CONVEYANCE_PREFERENCE_INVALID",
		1: "CONVEYANCE_PREFERENCE_NONE",
		2: "CONVEYANCE_PREFERENCE_INDIRECT",
		3: "CONVEYANCE_PREFERENCE_DIRECT",
	}
	ConveyancePreference_value = map[string]int32{
		"CONVEYANCE_PREFERENCE_INVALID":  0,
		"CONVEYANCE_PREFERENCE_NONE":     1,
		"CONVEYANCE_PREFERENCE_INDIRECT": 2,
		"CONVEYANCE_PREFERENCE_DIRECT":   3,
	}
)

func (x ConveyancePreference) Enum() *ConveyancePreference {
	p := new(ConveyancePreference)
	*p = x
	return p
}

func (x ConveyancePreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConveyancePreference) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[6].Descriptor()
}

func (ConveyancePreference) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[6]
}

func (x ConveyancePreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConveyancePreference.Descriptor instead.
func (ConveyancePreference) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{6}
}

type AuthenticatorAttachment int32

const (
	AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_INVALID        AuthenticatorAttachment = 0
	AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_DEFAULT        AuthenticatorAttachment = 1
	AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_PLATFORM       AuthenticatorAttachment = 2
	AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM AuthenticatorAttachment = 3
)

// Enum value maps for AuthenticatorAttachment.
var (
	AuthenticatorAttachment_name = map[int32]string{
		0: "AUTHENTICATOR_ATTACHMENT_INVALID",
		1: "AUTHENTICATOR_ATTACHMENT_DEFAULT",
		2: "AUTHENTICATOR_ATTACHMENT_PLATFORM",
		3: "AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM",
	}
	AuthenticatorAttachment_value = map[string]int32{
		"AUTHENTICATOR_ATTACHMENT_INVALID":        0,
		"AUTHENTICATOR_ATTACHMENT_DEFAULT":        1,
		"AUTHENTICATOR_ATTACHMENT_PLATFORM":       2,
		"AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM": 3,
	}
)

func (x AuthenticatorAttachment) Enum() *AuthenticatorAttachment {
	p := new(AuthenticatorAttachment)
	*p = x
	return p
}

func (x AuthenticatorAttachment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticatorAttachment) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[7].Descriptor()
}

func (AuthenticatorAttachment) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[7]
}

func (x AuthenticatorAttachment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticatorAttachment.Descriptor instead.
func (AuthenticatorAttachment) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{7}
}

type UserVerificationRequirement int32

const (
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_INVALID     UserVerificationRequirement = 0
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_PREFERRED   UserVerificationRequirement = 1
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_REQUIRED    UserVerificationRequirement = 2
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_DISCOURAGED UserVerificationRequirement = 3
)

// Enum value maps for UserVerificationRequirement.
var (
	UserVerificationRequirement_name = map[int32]string{
		0: "USER_VERIFICATION_REQUIREMENT_INVALID",
		1: "USER_VERIFICATION_REQUIREMENT_PREFERRED",
		2: "USER_VERIFICATION_REQUIREMENT_REQUIRED",
		3: "USER_VERIFICATION_REQUIREMENT_DISCOURAGED",
	}
	UserVerificationRequirement_value = map[string]int32{
		"USER_VERIFICATION_REQUIREMENT_INVALID":     0,
		"USER_VERIFICATION_REQUIREMENT_PREFERRED":   1,
		"USER_VERIFICATION_REQUIREMENT_REQUIRED":    2,
		"USER_VERIFICATION_REQUIREMENT_DISCOURAGED": 3,
	}
)

func (x UserVerificationRequirement) Enum() *UserVerificationRequirement {
	p := new(UserVerificationRequirement)
	*p = x
	return p
}

func (x UserVerificationRequirement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserVerificationRequirement) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[8].Descriptor()
}

func (UserVerificationRequirement) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[8]
}

func (x UserVerificationRequirement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserVerificationRequirement.Descriptor instead.
func (UserVerificationRequirement) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{8}
}

type PasswordPolicyTemplate int32

const (
	PasswordPolicyTemplate_PASSWORD_POLICY_TEMPLATE_INVALID PasswordPolicyTemplate = 0
	PasswordPolicyTemplate_PASSWORD_POLICY_TEMPLATE_CUSTOM  PasswordPolicyTemplate = 1
	PasswordPolicyTemplate_PASSWORD_POLICY_TEMPLATE_NIST    PasswordPolicyTemplate = 2
)

// Enum value maps for PasswordPolicyTemplate.
var (
	PasswordPolicyTemplate_name = map[int32]string{
		0: "PASSWORD_POLICY_TEMPLATE_INVALID",
		1: "PASSWORD_POLICY_TEMPLATE_CUSTOM",
		2: "PASSWORD_POLICY_TEMPLATE_NIST",
	}
	PasswordPolicyTemplate_value = map[string]int32{
		"PASSWORD_POLICY_TEMPLATE_INVALID": 0,
		"PASSWORD_POLICY_TEMPLATE_CUSTOM":  1,
		"PASSWORD_POLICY_TEMPLATE_NIST":    2,
	}
)

func (x PasswordPolicyTemplate) Enum() *PasswordPolicyTemplate {
	p := new(PasswordPolicyTemplate)
	*p = x
	return p
}

func (x PasswordPolicyTemplate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordPolicyTemplate) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[9].Descriptor()
}

func (PasswordPolicyTemplate) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[9]
}

func (x PasswordPolicyTemplate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordPolicyTemplate.Descriptor instead.
func (PasswordPolicyTemplate) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{9}
}

type AuthFlowConfig_Format int32

const (
	AuthFlowConfig_FORMAT_BARE_INVALID AuthFlowConfig_Format = 0
	AuthFlowConfig_FORMAT_BARE_YAML    AuthFlowConfig_Format = 1
	AuthFlowConfig_FORMAT_BARE_JSON    AuthFlowConfig_Format = 2
	AuthFlowConfig_FORMAT_RICH_JSON    AuthFlowConfig_Format = 3
)

// Enum value maps for AuthFlowConfig_Format.
var (
	AuthFlowConfig_Format_name = map[int32]string{
		0: "FORMAT_BARE_INVALID",
		1: "FORMAT_BARE_YAML",
		2: "FORMAT_BARE_JSON",
		3: "FORMAT_RICH_JSON",
	}
	AuthFlowConfig_Format_value = map[string]int32{
		"FORMAT_BARE_INVALID": 0,
		"FORMAT_BARE_YAML":    1,
		"FORMAT_BARE_JSON":    2,
		"FORMAT_RICH_JSON":    3,
	}
)

func (x AuthFlowConfig_Format) Enum() *AuthFlowConfig_Format {
	p := new(AuthFlowConfig_Format)
	*p = x
	return p
}

func (x AuthFlowConfig_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthFlowConfig_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[10].Descriptor()
}

func (AuthFlowConfig_Format) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[10]
}

func (x AuthFlowConfig_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthFlowConfig_Format.Descriptor instead.
func (AuthFlowConfig_Format) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{17, 0}
}

type IngestMappingConfig_Direction int32

const (
	IngestMappingConfig_DIRECTION_INVALID  IngestMappingConfig_Direction = 0
	IngestMappingConfig_DIRECTION_INBOUND  IngestMappingConfig_Direction = 1
	IngestMappingConfig_DIRECTION_OUTBOUND IngestMappingConfig_Direction = 2
)

// Enum value maps for IngestMappingConfig_Direction.
var (
	IngestMappingConfig_Direction_name = map[int32]string{
		0: "DIRECTION_INVALID",
		1: "DIRECTION_INBOUND",
		2: "DIRECTION_OUTBOUND",
	}
	IngestMappingConfig_Direction_value = map[string]int32{
		"DIRECTION_INVALID":  0,
		"DIRECTION_INBOUND":  1,
		"DIRECTION_OUTBOUND": 2,
	}
)

func (x IngestMappingConfig_Direction) Enum() *IngestMappingConfig_Direction {
	p := new(IngestMappingConfig_Direction)
	*p = x
	return p
}

func (x IngestMappingConfig_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IngestMappingConfig_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[11].Descriptor()
}

func (IngestMappingConfig_Direction) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[11]
}

func (x IngestMappingConfig_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IngestMappingConfig_Direction.Descriptor instead.
func (IngestMappingConfig_Direction) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{34, 0}
}

// UniqueNameIdentifier is an alternative to Globally Unique ID generated by the server.
//
// This identifier combines the Globally Unique ID of the location where to look for the name
// to find the object. It makes the object identification easier by the human readable name.
type UniqueNameIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UniqueNameIdentifier) Reset() {
	*x = UniqueNameIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueNameIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueNameIdentifier) ProtoMessage() {}

func (x *UniqueNameIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueNameIdentifier.ProtoReflect.Descriptor instead.
func (*UniqueNameIdentifier) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{0}
}

func (x *UniqueNameIdentifier) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UniqueNameIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Customer representing the Customer Node.
type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{1}
}

func (x *Customer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Customer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Customer) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Customer) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Customer) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Customer) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Customer) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *Customer) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Customer) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// ApplicationSpace representing the Application Space Node.
type ApplicationSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// IssuerId associated with this Application Space.
	IssuerId string `protobuf:"bytes,11,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
}

func (x *ApplicationSpace) Reset() {
	*x = ApplicationSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSpace) ProtoMessage() {}

func (x *ApplicationSpace) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSpace.ProtoReflect.Descriptor instead.
func (*ApplicationSpace) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{2}
}

func (x *ApplicationSpace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationSpace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationSpace) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationSpace) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ApplicationSpace) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApplicationSpace) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ApplicationSpace) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ApplicationSpace) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ApplicationSpace) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ApplicationSpace) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ApplicationSpace) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

// Tenant is a representation of an organization.
// Tenant is distinct and separate from other IndyKite tenants and has its own
// representation of objects.
type Tenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// IssuerId this object is directly or indirectly connected to.
	IssuerId string `protobuf:"bytes,12,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{3}
}

func (x *Tenant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tenant) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Tenant) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Tenant) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Tenant) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Tenant) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *Tenant) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Tenant) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Tenant) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Tenant) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *Tenant) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

// Application represents the customer application.
type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{4}
}

func (x *Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Application) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Application) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Application) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Application) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *Application) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Application) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Application) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Application) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

type ApplicationAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// ApplicationId this object is directly connected to.
	ApplicationId string `protobuf:"bytes,12,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *ApplicationAgent) Reset() {
	*x = ApplicationAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationAgent) ProtoMessage() {}

func (x *ApplicationAgent) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationAgent.ProtoReflect.Descriptor instead.
func (*ApplicationAgent) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationAgent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationAgent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationAgent) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationAgent) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ApplicationAgent) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApplicationAgent) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ApplicationAgent) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ApplicationAgent) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ApplicationAgent) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ApplicationAgent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ApplicationAgent) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ApplicationAgent) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

type ApplicationAgentCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Kid is public key ID
	Kid string `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// ApplicationId this object is directly connected to.
	ApplicationId string `protobuf:"bytes,12,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// ApplicationAgentId this object is directly connected to.
	ApplicationAgentId string `protobuf:"bytes,9,opt,name=application_agent_id,json=applicationAgentId,proto3" json:"application_agent_id,omitempty"`
}

func (x *ApplicationAgentCredential) Reset() {
	*x = ApplicationAgentCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationAgentCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationAgentCredential) ProtoMessage() {}

func (x *ApplicationAgentCredential) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationAgentCredential.ProtoReflect.Descriptor instead.
func (*ApplicationAgentCredential) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationAgentCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationAgentCredential) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *ApplicationAgentCredential) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationAgentCredential) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApplicationAgentCredential) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ApplicationAgentCredential) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ApplicationAgentCredential) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ApplicationAgentCredential) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ApplicationAgentCredential) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ApplicationAgentCredential) GetApplicationAgentId() string {
	if x != nil {
		return x.ApplicationAgentId
	}
	return ""
}

type ServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly connected to, might be empty if ServiceAccount is linked directly to Customer.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
}

func (x *ServiceAccount) Reset() {
	*x = ServiceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccount) ProtoMessage() {}

func (x *ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccount.ProtoReflect.Descriptor instead.
func (*ServiceAccount) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceAccount) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ServiceAccount) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ServiceAccount) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceAccount) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ServiceAccount) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ServiceAccount) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ServiceAccount) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ServiceAccount) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ServiceAccount) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

type ServiceAccountCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Kid is public key ID
	Kid string `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// CustomerId this object is indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// ServiceAccountId this object is directly connected to.
	ServiceAccountId string `protobuf:"bytes,12,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
}

func (x *ServiceAccountCredential) Reset() {
	*x = ServiceAccountCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccountCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccountCredential) ProtoMessage() {}

func (x *ServiceAccountCredential) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccountCredential.ProtoReflect.Descriptor instead.
func (*ServiceAccountCredential) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceAccountCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceAccountCredential) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *ServiceAccountCredential) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ServiceAccountCredential) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceAccountCredential) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ServiceAccountCredential) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ServiceAccountCredential) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ServiceAccountCredential) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ServiceAccountCredential) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

type ConfigNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// TenantId this object is directly or indirectly connected to.
	TenantId string `protobuf:"bytes,12,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Types that are assignable to Config:
	//	*ConfigNode_AuthFlowConfig
	//	*ConfigNode_EmailServiceConfig
	//	*ConfigNode_Oauth2ClientConfig
	//	*ConfigNode_PasswordProviderConfig
	//	*ConfigNode_WebauthnProviderConfig
	//	*ConfigNode_AuthenteqProviderConfig
	//	*ConfigNode_SafrProviderConfig
	//	*ConfigNode_IngestMappingConfig
	//	*ConfigNode_AuthorizationPolicyConfig
	//	*ConfigNode_KnowledgeGraphSchemaConfig
	Config isConfigNode_Config `protobuf_oneof:"config"`
}

func (x *ConfigNode) Reset() {
	*x = ConfigNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigNode) ProtoMessage() {}

func (x *ConfigNode) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigNode.ProtoReflect.Descriptor instead.
func (*ConfigNode) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConfigNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigNode) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ConfigNode) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ConfigNode) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ConfigNode) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ConfigNode) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ConfigNode) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ConfigNode) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ConfigNode) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ConfigNode) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ConfigNode) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (m *ConfigNode) GetConfig() isConfigNode_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ConfigNode) GetAuthFlowConfig() *AuthFlowConfig {
	if x, ok := x.GetConfig().(*ConfigNode_AuthFlowConfig); ok {
		return x.AuthFlowConfig
	}
	return nil
}

func (x *ConfigNode) GetEmailServiceConfig() *EmailServiceConfig {
	if x, ok := x.GetConfig().(*ConfigNode_EmailServiceConfig); ok {
		return x.EmailServiceConfig
	}
	return nil
}

func (x *ConfigNode) GetOauth2ClientConfig() *OAuth2ClientConfig {
	if x, ok := x.GetConfig().(*ConfigNode_Oauth2ClientConfig); ok {
		return x.Oauth2ClientConfig
	}
	return nil
}

func (x *ConfigNode) GetPasswordProviderConfig() *PasswordProviderConfig {
	if x, ok := x.GetConfig().(*ConfigNode_PasswordProviderConfig); ok {
		return x.PasswordProviderConfig
	}
	return nil
}

func (x *ConfigNode) GetWebauthnProviderConfig() *WebAuthnProviderConfig {
	if x, ok := x.GetConfig().(*ConfigNode_WebauthnProviderConfig); ok {
		return x.WebauthnProviderConfig
	}
	return nil
}

func (x *ConfigNode) GetAuthenteqProviderConfig() *AuthenteqProviderConfig {
	if x, ok := x.GetConfig().(*ConfigNode_AuthenteqProviderConfig); ok {
		return x.AuthenteqProviderConfig
	}
	return nil
}

func (x *ConfigNode) GetSafrProviderConfig() *SAFRProviderConfig {
	if x, ok := x.GetConfig().(*ConfigNode_SafrProviderConfig); ok {
		return x.SafrProviderConfig
	}
	return nil
}

func (x *ConfigNode) GetIngestMappingConfig() *IngestMappingConfig {
	if x, ok := x.GetConfig().(*ConfigNode_IngestMappingConfig); ok {
		return x.IngestMappingConfig
	}
	return nil
}

func (x *ConfigNode) GetAuthorizationPolicyConfig() *AuthorizationPolicyConfig {
	if x, ok := x.GetConfig().(*ConfigNode_AuthorizationPolicyConfig); ok {
		return x.AuthorizationPolicyConfig
	}
	return nil
}

func (x *ConfigNode) GetKnowledgeGraphSchemaConfig() *KnowledgeGraphSchemaConfig {
	if x, ok := x.GetConfig().(*ConfigNode_KnowledgeGraphSchemaConfig); ok {
		return x.KnowledgeGraphSchemaConfig
	}
	return nil
}

type isConfigNode_Config interface {
	isConfigNode_Config()
}

type ConfigNode_AuthFlowConfig struct {
	AuthFlowConfig *AuthFlowConfig `protobuf:"bytes,14,opt,name=auth_flow_config,json=authFlowConfig,proto3,oneof"`
}

type ConfigNode_EmailServiceConfig struct {
	EmailServiceConfig *EmailServiceConfig `protobuf:"bytes,15,opt,name=email_service_config,json=emailServiceConfig,proto3,oneof"`
}

type ConfigNode_Oauth2ClientConfig struct {
	// OAuth2ClientConfig for third party OIDC clients.
	Oauth2ClientConfig *OAuth2ClientConfig `protobuf:"bytes,16,opt,name=oauth2_client_config,json=oauth2ClientConfig,proto3,oneof"`
}

type ConfigNode_PasswordProviderConfig struct {
	PasswordProviderConfig *PasswordProviderConfig `protobuf:"bytes,18,opt,name=password_provider_config,json=passwordProviderConfig,proto3,oneof"`
}

type ConfigNode_WebauthnProviderConfig struct {
	WebauthnProviderConfig *WebAuthnProviderConfig `protobuf:"bytes,19,opt,name=webauthn_provider_config,json=webauthnProviderConfig,proto3,oneof"`
}

type ConfigNode_AuthenteqProviderConfig struct {
	AuthenteqProviderConfig *AuthenteqProviderConfig `protobuf:"bytes,20,opt,name=authenteq_provider_config,json=authenteqProviderConfig,proto3,oneof"`
}

type ConfigNode_SafrProviderConfig struct {
	SafrProviderConfig *SAFRProviderConfig `protobuf:"bytes,21,opt,name=safr_provider_config,json=safrProviderConfig,proto3,oneof"`
}

type ConfigNode_IngestMappingConfig struct {
	IngestMappingConfig *IngestMappingConfig `protobuf:"bytes,22,opt,name=ingest_mapping_config,json=ingestMappingConfig,proto3,oneof"`
}

type ConfigNode_AuthorizationPolicyConfig struct {
	AuthorizationPolicyConfig *AuthorizationPolicyConfig `protobuf:"bytes,23,opt,name=authorization_policy_config,json=authorizationPolicyConfig,proto3,oneof"`
}

type ConfigNode_KnowledgeGraphSchemaConfig struct {
	KnowledgeGraphSchemaConfig *KnowledgeGraphSchemaConfig `protobuf:"bytes,24,opt,name=knowledge_graph_schema_config,json=knowledgeGraphSchemaConfig,proto3,oneof"`
}

func (*ConfigNode_AuthFlowConfig) isConfigNode_Config() {}

func (*ConfigNode_EmailServiceConfig) isConfigNode_Config() {}

func (*ConfigNode_Oauth2ClientConfig) isConfigNode_Config() {}

func (*ConfigNode_PasswordProviderConfig) isConfigNode_Config() {}

func (*ConfigNode_WebauthnProviderConfig) isConfigNode_Config() {}

func (*ConfigNode_AuthenteqProviderConfig) isConfigNode_Config() {}

func (*ConfigNode_SafrProviderConfig) isConfigNode_Config() {}

func (*ConfigNode_IngestMappingConfig) isConfigNode_Config() {}

func (*ConfigNode_AuthorizationPolicyConfig) isConfigNode_Config() {}

func (*ConfigNode_KnowledgeGraphSchemaConfig) isConfigNode_Config() {}

// OAuth2ClientConfig is a service specific set of parameters
type OAuth2ClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType ProviderType `protobuf:"varint,1,opt,name=provider_type,json=providerType,proto3,enum=indykite.config.v1beta1.ProviderType" json:"provider_type,omitempty"`
	ClientId     string       `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Client secret, must be provided when creating a new client config but is optional when updating.
	// If provided when updating, stored secret value will be updated with new value.
	// If not provided when updating, stored secret value will be kept.
	// When reading back client config, client secret will always be set to string empty.
	ClientSecret  string   `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	RedirectUri   []string `protobuf:"bytes,4,rep,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	DefaultScopes []string `protobuf:"bytes,17,rep,name=default_scopes,json=defaultScopes,proto3" json:"default_scopes,omitempty"`
	AllowedScopes []string `protobuf:"bytes,19,rep,name=allowed_scopes,json=allowedScopes,proto3" json:"allowed_scopes,omitempty"`
	// This is only for Github, might change to hint for UI.
	AllowSignup bool `protobuf:"varint,8,opt,name=allow_signup,json=allowSignup,proto3" json:"allow_signup,omitempty"`
	// URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier.
	// If Issuer discovery is supported (see Section 2), this value MUST be identical to the issuer value returned by WebFinger.
	// This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.
	// Example: `https://server/issuer/.well-known/openid-configuration`
	Issuer string `protobuf:"bytes,9,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// URL of the OP's OAuth 2.0 Authorization Endpoint
	// Example: `https://server/issuer/.well-known/openid-configuration`
	AuthorizationEndpoint string `protobuf:"bytes,10,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	// URL of the OP's OAuth 2.0 Token Endpoint
	TokenEndpoint string `protobuf:"bytes,11,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	DiscoveryUrl  string `protobuf:"bytes,16,opt,name=discovery_url,json=discoveryUrl,proto3" json:"discovery_url,omitempty"`
	// URL of the OP's UserInfo Endpoint
	// Example `https://server/issuer/.well-known/openid-configuration`
	UserinfoEndpoint string `protobuf:"bytes,12,opt,name=userinfo_endpoint,json=userinfoEndpoint,proto3" json:"userinfo_endpoint,omitempty"`
	// URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the
	// RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s),
	// which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available,
	// a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's
	// intended usage. Although some algorithms allow the same key to be used for both signatures and encryption,
	// doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509
	// representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
	JwksUri string `protobuf:"bytes,13,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	// Example `https://server/openid.png`
	ImageUrl string `protobuf:"bytes,14,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Example `login.microsoftonline.com/" + tenant + "/oauth2/v2.0/authorize`
	Tenant string `protobuf:"bytes,15,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// [Send Auth Request](https://developers.google.com/identity/protocols/oauth2/openid-connect#sendauthrequest)
	// [Authentication URI Parameters](https://developers.google.com/identity/protocols/oauth2/openid-connect#authenticationuriparameters)
	HostedDomain string `protobuf:"bytes,18,opt,name=hosted_domain,json=hostedDomain,proto3" json:"hosted_domain,omitempty"`
	// AuthStyle represents how requests for tokens are authenticated to the server.
	AuthStyle AuthStyle `protobuf:"varint,20,opt,name=auth_style,json=authStyle,proto3,enum=indykite.config.v1beta1.AuthStyle" json:"auth_style,omitempty"`
	// Required if using Apple as provider. Used to sign JWT token which acts as client_secret for
	// authorization code - token exchange.
	// Private key pem must be provided when creating a new client config but is optional when updating.
	// If provided when updating, stored secret value will be updated with new value.
	// If not provided when updating, stored secret value will be kept.
	// When reading back client config, private key pem will always be set to null.
	PrivateKeyPem []byte `protobuf:"bytes,21,opt,name=private_key_pem,json=privateKeyPem,proto3" json:"private_key_pem,omitempty"`
	// Required if using Apple as provider. Used to sign JWT token which acts as client_secret for
	// authorization code - token exchange.
	PrivateKeyId string `protobuf:"bytes,22,opt,name=private_key_id,json=privateKeyId,proto3" json:"private_key_id,omitempty"`
	// Required if using Apple as provider. Used to generate JWT token for authorization code - token exchange.
	TeamId string `protobuf:"bytes,23,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *OAuth2ClientConfig) Reset() {
	*x = OAuth2ClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ClientConfig) ProtoMessage() {}

func (x *OAuth2ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ClientConfig.ProtoReflect.Descriptor instead.
func (*OAuth2ClientConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{10}
}

func (x *OAuth2ClientConfig) GetProviderType() ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return ProviderType_PROVIDER_TYPE_INVALID
}

func (x *OAuth2ClientConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OAuth2ClientConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OAuth2ClientConfig) GetRedirectUri() []string {
	if x != nil {
		return x.RedirectUri
	}
	return nil
}

func (x *OAuth2ClientConfig) GetDefaultScopes() []string {
	if x != nil {
		return x.DefaultScopes
	}
	return nil
}

func (x *OAuth2ClientConfig) GetAllowedScopes() []string {
	if x != nil {
		return x.AllowedScopes
	}
	return nil
}

func (x *OAuth2ClientConfig) GetAllowSignup() bool {
	if x != nil {
		return x.AllowSignup
	}
	return false
}

func (x *OAuth2ClientConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *OAuth2ClientConfig) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *OAuth2ClientConfig) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *OAuth2ClientConfig) GetDiscoveryUrl() string {
	if x != nil {
		return x.DiscoveryUrl
	}
	return ""
}

func (x *OAuth2ClientConfig) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *OAuth2ClientConfig) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *OAuth2ClientConfig) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *OAuth2ClientConfig) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *OAuth2ClientConfig) GetHostedDomain() string {
	if x != nil {
		return x.HostedDomain
	}
	return ""
}

func (x *OAuth2ClientConfig) GetAuthStyle() AuthStyle {
	if x != nil {
		return x.AuthStyle
	}
	return AuthStyle_AUTH_STYLE_INVALID
}

func (x *OAuth2ClientConfig) GetPrivateKeyPem() []byte {
	if x != nil {
		return x.PrivateKeyPem
	}
	return nil
}

func (x *OAuth2ClientConfig) GetPrivateKeyId() string {
	if x != nil {
		return x.PrivateKeyId
	}
	return ""
}

func (x *OAuth2ClientConfig) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type OAuth2Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// oauth2_provider_id this object is directly connected to.
	Oauth2ProviderId string `protobuf:"bytes,12,opt,name=oauth2_provider_id,json=oauth2ProviderId,proto3" json:"oauth2_provider_id,omitempty"`
	// OAuth2ApplicationConfig IndyKite OIDC Application Config
	Config *OAuth2ApplicationConfig `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *OAuth2Application) Reset() {
	*x = OAuth2Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2Application) ProtoMessage() {}

func (x *OAuth2Application) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2Application.ProtoReflect.Descriptor instead.
func (*OAuth2Application) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{11}
}

func (x *OAuth2Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OAuth2Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OAuth2Application) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OAuth2Application) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *OAuth2Application) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OAuth2Application) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *OAuth2Application) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *OAuth2Application) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *OAuth2Application) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *OAuth2Application) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *OAuth2Application) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *OAuth2Application) GetOauth2ProviderId() string {
	if x != nil {
		return x.Oauth2ProviderId
	}
	return ""
}

func (x *OAuth2Application) GetConfig() *OAuth2ApplicationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type OAuth2ApplicationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClientId is the id for this client.
	// It is read-only and is ignored during create/update request.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// DisplayName is a human readable name to show in consent page etc, not in Console
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description to show in consent page etc, not in Console
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// RedirectURIs is an array of allowed redirect urls for the client, for example http://mydomain/oauth/callback .
	RedirectUris []string `protobuf:"bytes,5,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	// Owner is a string identifying the owner of the OAuth 2.0 Client.
	Owner string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	// PolicyURI is a URL string that points to a human-readable privacy policy document
	// that describes how the deployment organization collects, uses,
	// retains, and discloses personal data.
	PolicyUri string `protobuf:"bytes,7,opt,name=policy_uri,json=policyUri,proto3" json:"policy_uri,omitempty"`
	// AllowedCORSOrigins are one or more URLs (scheme://host[:port]) which are allowed to make CORS requests
	// to the /oauth/token endpoint. If this array is empty, the sever's CORS origin configuration (`CORS_ALLOWED_ORIGINS`)
	// will be used instead. If this array is set, the allowed origins are appended to the server's CORS origin configuration.
	// Be aware that environment variable `CORS_ENABLED` MUST be set to `true` for this to work.
	AllowedCorsOrigins []string `protobuf:"bytes,8,rep,name=allowed_cors_origins,json=allowedCorsOrigins,proto3" json:"allowed_cors_origins,omitempty"`
	// TermsOfServiceURI is a URL string that points to a human-readable terms of service
	// document for the client that describes a contractual relationship
	// between the end-user and the client that the end-user accepts when
	// authorizing the client.
	TermsOfServiceUri string `protobuf:"bytes,9,opt,name=terms_of_service_uri,json=termsOfServiceUri,proto3" json:"terms_of_service_uri,omitempty"`
	// ClientURI is an URL string of a web page providing information about the client.
	// If present, the server SHOULD display this URL to the end-user in
	// a clickable fashion.
	ClientUri string `protobuf:"bytes,10,opt,name=client_uri,json=clientUri,proto3" json:"client_uri,omitempty"`
	// LogoURI is an URL string that references a logo for the client.
	LogoUri string `protobuf:"bytes,11,opt,name=logo_uri,json=logoUri,proto3" json:"logo_uri,omitempty"`
	// UserSupportEmailAddress is main email contact for User support
	UserSupportEmailAddress string `protobuf:"bytes,12,opt,name=user_support_email_address,json=userSupportEmailAddress,proto3" json:"user_support_email_address,omitempty"`
	// AdditionalContacts is a array of strings representing ways to contact people responsible
	// for this client, typically email addresses.
	AdditionalContacts []string `protobuf:"bytes,13,rep,name=additional_contacts,json=additionalContacts,proto3" json:"additional_contacts,omitempty"`
	// SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a
	// list of the supported subject_type values for this server.
	SubjectType ClientSubjectType `protobuf:"varint,14,opt,name=subject_type,json=subjectType,proto3,enum=indykite.config.v1beta1.ClientSubjectType" json:"subject_type,omitempty"`
	// URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a
	// file with a single JSON array of redirect_uri values.
	SectorIdentifierUri string `protobuf:"bytes,15,opt,name=sector_identifier_uri,json=sectorIdentifierUri,proto3" json:"sector_identifier_uri,omitempty"`
	// GrantTypes is an array of grant types the client is allowed to use.
	GrantTypes []GrantType `protobuf:"varint,16,rep,packed,name=grant_types,json=grantTypes,proto3,enum=indykite.config.v1beta1.GrantType" json:"grant_types,omitempty"`
	// ResponseTypes is an array of the OAuth 2.0 response type strings that the client can
	// use at the authorization endpoint.
	ResponseTypes []ResponseType `protobuf:"varint,17,rep,packed,name=response_types,json=responseTypes,proto3,enum=indykite.config.v1beta1.ResponseType" json:"response_types,omitempty"`
	// Scope is a string containing a space-separated list of scope values (as
	// described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client
	// can use when requesting access tokens.
	//
	// Pattern: ^[!#-\[\]-~]{1,254}$
	Scopes []string `protobuf:"bytes,18,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Audience is a whitelist defining the audiences this client is allowed to request tokens for. An audience limits
	// the applicability of an OAuth 2.0 Access Token to, for example, certain API endpoints.
	Audiences []string `protobuf:"bytes,19,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// Requested Client Authentication method for the Token Endpoint.
	TokenEndpointAuthMethod TokenEndpointAuthMethod `protobuf:"varint,20,opt,name=token_endpoint_auth_method,json=tokenEndpointAuthMethod,proto3,enum=indykite.config.v1beta1.TokenEndpointAuthMethod" json:"token_endpoint_auth_method,omitempty"`
	// Requested Client Authentication signing algorithm for the Token Endpoint.
	TokenEndpointAuthSigningAlg string `protobuf:"bytes,21,opt,name=token_endpoint_auth_signing_alg,json=tokenEndpointAuthSigningAlg,proto3" json:"token_endpoint_auth_signing_alg,omitempty"`
	// JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT
	// [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims
	// as a UTF-8 encoded JSON object using the application/json content-type.
	UserinfoSignedResponseAlg string `protobuf:"bytes,22,opt,name=userinfo_signed_response_alg,json=userinfoSignedResponseAlg,proto3" json:"userinfo_signed_response_alg,omitempty"`
}

func (x *OAuth2ApplicationConfig) Reset() {
	*x = OAuth2ApplicationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2ApplicationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ApplicationConfig) ProtoMessage() {}

func (x *OAuth2ApplicationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ApplicationConfig.ProtoReflect.Descriptor instead.
func (*OAuth2ApplicationConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{12}
}

func (x *OAuth2ApplicationConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetRedirectUris() []string {
	if x != nil {
		return x.RedirectUris
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetPolicyUri() string {
	if x != nil {
		return x.PolicyUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetAllowedCorsOrigins() []string {
	if x != nil {
		return x.AllowedCorsOrigins
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetTermsOfServiceUri() string {
	if x != nil {
		return x.TermsOfServiceUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetClientUri() string {
	if x != nil {
		return x.ClientUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetLogoUri() string {
	if x != nil {
		return x.LogoUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetUserSupportEmailAddress() string {
	if x != nil {
		return x.UserSupportEmailAddress
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetAdditionalContacts() []string {
	if x != nil {
		return x.AdditionalContacts
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetSubjectType() ClientSubjectType {
	if x != nil {
		return x.SubjectType
	}
	return ClientSubjectType_CLIENT_SUBJECT_TYPE_INVALID
}

func (x *OAuth2ApplicationConfig) GetSectorIdentifierUri() string {
	if x != nil {
		return x.SectorIdentifierUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetGrantTypes() []GrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetResponseTypes() []ResponseType {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetTokenEndpointAuthMethod() TokenEndpointAuthMethod {
	if x != nil {
		return x.TokenEndpointAuthMethod
	}
	return TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_INVALID
}

func (x *OAuth2ApplicationConfig) GetTokenEndpointAuthSigningAlg() string {
	if x != nil {
		return x.TokenEndpointAuthSigningAlg
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetUserinfoSignedResponseAlg() string {
	if x != nil {
		return x.UserinfoSignedResponseAlg
	}
	return ""
}

type OAuth2Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// OAuth2ApplicationConfig IndyKite OIDC Application Config
	Config *OAuth2ProviderConfig `protobuf:"bytes,12,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *OAuth2Provider) Reset() {
	*x = OAuth2Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2Provider) ProtoMessage() {}

func (x *OAuth2Provider) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2Provider.ProtoReflect.Descriptor instead.
func (*OAuth2Provider) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{13}
}

func (x *OAuth2Provider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OAuth2Provider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OAuth2Provider) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OAuth2Provider) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *OAuth2Provider) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OAuth2Provider) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *OAuth2Provider) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *OAuth2Provider) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *OAuth2Provider) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *OAuth2Provider) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *OAuth2Provider) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *OAuth2Provider) GetConfig() *OAuth2ProviderConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type OAuth2ProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GrantTypes is an array of grant types the client is allowed to use.
	GrantTypes []GrantType `protobuf:"varint,1,rep,packed,name=grant_types,json=grantTypes,proto3,enum=indykite.config.v1beta1.GrantType" json:"grant_types,omitempty"`
	// ResponseTypes is an array of the OAuth 2.0 response type strings that the client can
	// use at the authorization endpoint.
	ResponseTypes []ResponseType `protobuf:"varint,2,rep,packed,name=response_types,json=responseTypes,proto3,enum=indykite.config.v1beta1.ResponseType" json:"response_types,omitempty"`
	// Scope is a string containing a space-separated list of scope values (as
	// described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client
	// can use when requesting access tokens.
	//
	// Pattern: ^[!#-\[\]-~]{1,254}$
	Scopes []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Requested Client Authentication method for the Token Endpoint.
	TokenEndpointAuthMethod []TokenEndpointAuthMethod `protobuf:"varint,4,rep,packed,name=token_endpoint_auth_method,json=tokenEndpointAuthMethod,proto3,enum=indykite.config.v1beta1.TokenEndpointAuthMethod" json:"token_endpoint_auth_method,omitempty"`
	// Requested Client Authentication signing algorithm for the Token Endpoint.
	TokenEndpointAuthSigningAlg []string `protobuf:"bytes,5,rep,name=token_endpoint_auth_signing_alg,json=tokenEndpointAuthSigningAlg,proto3" json:"token_endpoint_auth_signing_alg,omitempty"`
	// Array of request_uri values that are pre-registered by the RP for use at the OP. Servers MAY cache the
	// contents of the files referenced by these URIs and not retrieve them at the time they are used in a request.
	// OPs can require that request_uri values used be pre-registered with the require_request_uri_registration
	// discovery parameter.
	RequestUris []string `protobuf:"bytes,6,rep,name=request_uris,json=requestUris,proto3" json:"request_uris,omitempty"`
	// RequestObjectSigningAlg JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects
	// from this Client MUST be rejected, if not signed with this algorithm.
	RequestObjectSigningAlg string            `protobuf:"bytes,7,opt,name=request_object_signing_alg,json=requestObjectSigningAlg,proto3" json:"request_object_signing_alg,omitempty"`
	FrontChannelLoginUri    map[string]string `protobuf:"bytes,8,rep,name=front_channel_login_uri,json=frontChannelLoginUri,proto3" json:"front_channel_login_uri,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FrontChannelConsentUri  map[string]string `protobuf:"bytes,9,rep,name=front_channel_consent_uri,json=frontChannelConsentUri,proto3" json:"front_channel_consent_uri,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OAuth2ProviderConfig) Reset() {
	*x = OAuth2ProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2ProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ProviderConfig) ProtoMessage() {}

func (x *OAuth2ProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ProviderConfig.ProtoReflect.Descriptor instead.
func (*OAuth2ProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{14}
}

func (x *OAuth2ProviderConfig) GetGrantTypes() []GrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetResponseTypes() []ResponseType {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetTokenEndpointAuthMethod() []TokenEndpointAuthMethod {
	if x != nil {
		return x.TokenEndpointAuthMethod
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetTokenEndpointAuthSigningAlg() []string {
	if x != nil {
		return x.TokenEndpointAuthSigningAlg
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetRequestUris() []string {
	if x != nil {
		return x.RequestUris
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetRequestObjectSigningAlg() string {
	if x != nil {
		return x.RequestObjectSigningAlg
	}
	return ""
}

func (x *OAuth2ProviderConfig) GetFrontChannelLoginUri() map[string]string {
	if x != nil {
		return x.FrontChannelLoginUri
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetFrontChannelConsentUri() map[string]string {
	if x != nil {
		return x.FrontChannelConsentUri
	}
	return nil
}

type WebAuthnProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayingParties         map[string]string           `protobuf:"bytes,1,rep,name=relaying_parties,json=relayingParties,proto3" json:"relaying_parties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AttestationPreference   ConveyancePreference        `protobuf:"varint,2,opt,name=attestation_preference,json=attestationPreference,proto3,enum=indykite.config.v1beta1.ConveyancePreference" json:"attestation_preference,omitempty"`
	AuthenticatorAttachment AuthenticatorAttachment     `protobuf:"varint,3,opt,name=authenticator_attachment,json=authenticatorAttachment,proto3,enum=indykite.config.v1beta1.AuthenticatorAttachment" json:"authenticator_attachment,omitempty"`
	RequireResidentKey      bool                        `protobuf:"varint,7,opt,name=require_resident_key,json=requireResidentKey,proto3" json:"require_resident_key,omitempty"`
	UserVerification        UserVerificationRequirement `protobuf:"varint,4,opt,name=user_verification,json=userVerification,proto3,enum=indykite.config.v1beta1.UserVerificationRequirement" json:"user_verification,omitempty"`
	//  specifies a time, in milliseconds
	RegistrationTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=registration_timeout,json=registrationTimeout,proto3" json:"registration_timeout,omitempty"`
	//  specifies a time, in milliseconds
	AuthenticationTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=authentication_timeout,json=authenticationTimeout,proto3" json:"authentication_timeout,omitempty"`
}

func (x *WebAuthnProviderConfig) Reset() {
	*x = WebAuthnProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAuthnProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAuthnProviderConfig) ProtoMessage() {}

func (x *WebAuthnProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAuthnProviderConfig.ProtoReflect.Descriptor instead.
func (*WebAuthnProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{15}
}

func (x *WebAuthnProviderConfig) GetRelayingParties() map[string]string {
	if x != nil {
		return x.RelayingParties
	}
	return nil
}

func (x *WebAuthnProviderConfig) GetAttestationPreference() ConveyancePreference {
	if x != nil {
		return x.AttestationPreference
	}
	return ConveyancePreference_CONVEYANCE_PREFERENCE_INVALID
}

func (x *WebAuthnProviderConfig) GetAuthenticatorAttachment() AuthenticatorAttachment {
	if x != nil {
		return x.AuthenticatorAttachment
	}
	return AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_INVALID
}

func (x *WebAuthnProviderConfig) GetRequireResidentKey() bool {
	if x != nil {
		return x.RequireResidentKey
	}
	return false
}

func (x *WebAuthnProviderConfig) GetUserVerification() UserVerificationRequirement {
	if x != nil {
		return x.UserVerification
	}
	return UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_INVALID
}

func (x *WebAuthnProviderConfig) GetRegistrationTimeout() *durationpb.Duration {
	if x != nil {
		return x.RegistrationTimeout
	}
	return nil
}

func (x *WebAuthnProviderConfig) GetAuthenticationTimeout() *durationpb.Duration {
	if x != nil {
		return x.AuthenticationTimeout
	}
	return nil
}

type WebAuthnSiteDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Origin      string `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	Icon        string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *WebAuthnSiteDefinition) Reset() {
	*x = WebAuthnSiteDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAuthnSiteDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAuthnSiteDefinition) ProtoMessage() {}

func (x *WebAuthnSiteDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAuthnSiteDefinition.ProtoReflect.Descriptor instead.
func (*WebAuthnSiteDefinition) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{16}
}

func (x *WebAuthnSiteDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebAuthnSiteDefinition) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *WebAuthnSiteDefinition) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *WebAuthnSiteDefinition) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// AuthFlowConfig Flow Definition
type AuthFlowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFormat AuthFlowConfig_Format `protobuf:"varint,1,opt,name=source_format,json=sourceFormat,proto3,enum=indykite.config.v1beta1.AuthFlowConfig_Format" json:"source_format,omitempty"`
	// JSON from Console UI of the Flow diagram
	Source  []byte                `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Default *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	// Proto soon to deprecate once the rich_json can be parsed and compiled.
	Proto *anypb.Any `protobuf:"bytes,4,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (x *AuthFlowConfig) Reset() {
	*x = AuthFlowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthFlowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFlowConfig) ProtoMessage() {}

func (x *AuthFlowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFlowConfig.ProtoReflect.Descriptor instead.
func (*AuthFlowConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{17}
}

func (x *AuthFlowConfig) GetSourceFormat() AuthFlowConfig_Format {
	if x != nil {
		return x.SourceFormat
	}
	return AuthFlowConfig_FORMAT_BARE_INVALID
}

func (x *AuthFlowConfig) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AuthFlowConfig) GetDefault() *wrapperspb.BoolValue {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *AuthFlowConfig) GetProto() *anypb.Any {
	if x != nil {
		return x.Proto
	}
	return nil
}

type AuthenteqProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DefaultRedirectUri used when RedirectUri selection is not obvious.
	DefaultRedirectUri string `protobuf:"bytes,1,opt,name=default_redirect_uri,json=defaultRedirectUri,proto3" json:"default_redirect_uri,omitempty"`
	ClientId           string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Client secret, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored secret value will be updated with new value.
	// If not provided when updating, stored secret value will be kept.
	// When reading back config, client secret will always be set to string empty.
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	HostAddress  string `protobuf:"bytes,4,opt,name=host_address,json=hostAddress,proto3" json:"host_address,omitempty"`
}

func (x *AuthenteqProviderConfig) Reset() {
	*x = AuthenteqProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenteqProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenteqProviderConfig) ProtoMessage() {}

func (x *AuthenteqProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenteqProviderConfig.ProtoReflect.Descriptor instead.
func (*AuthenteqProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{18}
}

func (x *AuthenteqProviderConfig) GetDefaultRedirectUri() string {
	if x != nil {
		return x.DefaultRedirectUri
	}
	return ""
}

func (x *AuthenteqProviderConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AuthenteqProviderConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *AuthenteqProviderConfig) GetHostAddress() string {
	if x != nil {
		return x.HostAddress
	}
	return ""
}

type SAFRProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Password, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored password value will be updated with new value.
	// If not provided when updating, stored password value will be kept.
	// When reading back config, password will always be set to string empty.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Directory has default value : main
	Directory string `protobuf:"bytes,3,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *SAFRProviderConfig) Reset() {
	*x = SAFRProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAFRProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAFRProviderConfig) ProtoMessage() {}

func (x *SAFRProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAFRProviderConfig.ProtoReflect.Descriptor instead.
func (*SAFRProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{19}
}

func (x *SAFRProviderConfig) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SAFRProviderConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SAFRProviderConfig) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

// SMSServiceConfig is not supported yet, but is used as type in many endpoints
type SMSServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SMSServiceConfig) Reset() {
	*x = SMSServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMSServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMSServiceConfig) ProtoMessage() {}

func (x *SMSServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMSServiceConfig.ProtoReflect.Descriptor instead.
func (*SMSServiceConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{20}
}

type EmailServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultFromAddress *Email                `protobuf:"bytes,1,opt,name=default_from_address,json=defaultFromAddress,proto3" json:"default_from_address,omitempty"`
	Default            *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	// Types that are assignable to Provider:
	//	*EmailServiceConfig_Sendgrid
	//	*EmailServiceConfig_Mailjet
	//	*EmailServiceConfig_Mailgun
	//	*EmailServiceConfig_Amazon
	Provider               isEmailServiceConfig_Provider `protobuf_oneof:"provider"`
	AuthenticationMessage  *EmailDefinition              `protobuf:"bytes,12,opt,name=authentication_message,json=authenticationMessage,proto3" json:"authentication_message,omitempty"`
	InvitationMessage      *EmailDefinition              `protobuf:"bytes,9,opt,name=invitation_message,json=invitationMessage,proto3" json:"invitation_message,omitempty"`
	ResetPasswordMessage   *EmailDefinition              `protobuf:"bytes,10,opt,name=reset_password_message,json=resetPasswordMessage,proto3" json:"reset_password_message,omitempty"`
	VerificationMessage    *EmailDefinition              `protobuf:"bytes,11,opt,name=verification_message,json=verificationMessage,proto3" json:"verification_message,omitempty"`
	OneTimePasswordMessage *EmailDefinition              `protobuf:"bytes,13,opt,name=one_time_password_message,json=oneTimePasswordMessage,proto3" json:"one_time_password_message,omitempty"`
}

func (x *EmailServiceConfig) Reset() {
	*x = EmailServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailServiceConfig) ProtoMessage() {}

func (x *EmailServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailServiceConfig.ProtoReflect.Descriptor instead.
func (*EmailServiceConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{21}
}

func (x *EmailServiceConfig) GetDefaultFromAddress() *Email {
	if x != nil {
		return x.DefaultFromAddress
	}
	return nil
}

func (x *EmailServiceConfig) GetDefault() *wrapperspb.BoolValue {
	if x != nil {
		return x.Default
	}
	return nil
}

func (m *EmailServiceConfig) GetProvider() isEmailServiceConfig_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *EmailServiceConfig) GetSendgrid() *SendGridProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Sendgrid); ok {
		return x.Sendgrid
	}
	return nil
}

func (x *EmailServiceConfig) GetMailjet() *MailJetProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Mailjet); ok {
		return x.Mailjet
	}
	return nil
}

func (x *EmailServiceConfig) GetMailgun() *MailgunProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Mailgun); ok {
		return x.Mailgun
	}
	return nil
}

func (x *EmailServiceConfig) GetAmazon() *AmazonSESProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Amazon); ok {
		return x.Amazon
	}
	return nil
}

func (x *EmailServiceConfig) GetAuthenticationMessage() *EmailDefinition {
	if x != nil {
		return x.AuthenticationMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetInvitationMessage() *EmailDefinition {
	if x != nil {
		return x.InvitationMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetResetPasswordMessage() *EmailDefinition {
	if x != nil {
		return x.ResetPasswordMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetVerificationMessage() *EmailDefinition {
	if x != nil {
		return x.VerificationMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetOneTimePasswordMessage() *EmailDefinition {
	if x != nil {
		return x.OneTimePasswordMessage
	}
	return nil
}

type isEmailServiceConfig_Provider interface {
	isEmailServiceConfig_Provider()
}

type EmailServiceConfig_Sendgrid struct {
	Sendgrid *SendGridProviderConfig `protobuf:"bytes,4,opt,name=sendgrid,proto3,oneof"`
}

type EmailServiceConfig_Mailjet struct {
	Mailjet *MailJetProviderConfig `protobuf:"bytes,5,opt,name=mailjet,proto3,oneof"`
}

type EmailServiceConfig_Mailgun struct {
	Mailgun *MailgunProviderConfig `protobuf:"bytes,6,opt,name=mailgun,proto3,oneof"`
}

type EmailServiceConfig_Amazon struct {
	Amazon *AmazonSESProviderConfig `protobuf:"bytes,7,opt,name=amazon,proto3,oneof"`
}

func (*EmailServiceConfig_Sendgrid) isEmailServiceConfig_Provider() {}

func (*EmailServiceConfig_Mailjet) isEmailServiceConfig_Provider() {}

func (*EmailServiceConfig_Mailgun) isEmailServiceConfig_Provider() {}

func (*EmailServiceConfig_Amazon) isEmailServiceConfig_Provider() {}

// Email holds email name and address info.
type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{22}
}

func (x *Email) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Email) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SendGridProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Api key, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored api key value will be updated with new value.
	// If not provided when updating, stored api key value will be kept.
	// When reading back config, api key will always be set to string empty.
	ApiKey      string                  `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	SandboxMode bool                    `protobuf:"varint,2,opt,name=sandbox_mode,json=sandboxMode,proto3" json:"sandbox_mode,omitempty"`
	IpPoolName  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ip_pool_name,json=ipPoolName,proto3" json:"ip_pool_name,omitempty"`
	// Host default to https://api.sendgrid.com
	Host *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *SendGridProviderConfig) Reset() {
	*x = SendGridProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGridProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGridProviderConfig) ProtoMessage() {}

func (x *SendGridProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGridProviderConfig.ProtoReflect.Descriptor instead.
func (*SendGridProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{23}
}

func (x *SendGridProviderConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *SendGridProviderConfig) GetSandboxMode() bool {
	if x != nil {
		return x.SandboxMode
	}
	return false
}

func (x *SendGridProviderConfig) GetIpPoolName() *wrapperspb.StringValue {
	if x != nil {
		return x.IpPoolName
	}
	return nil
}

func (x *SendGridProviderConfig) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

type MailJetProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Api key, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored api key value will be updated with new value.
	// If not provided when updating, stored api key value will be kept.
	// When reading back config, api key will always be set to string empty.
	ApiKey         string                  `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	SandboxMode    bool                    `protobuf:"varint,2,opt,name=sandbox_mode,json=sandboxMode,proto3" json:"sandbox_mode,omitempty"`
	UrlTags        map[string]string       `protobuf:"bytes,8,rep,name=url_tags,json=urlTags,proto3" json:"url_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomCampaign *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=custom_campaign,json=customCampaign,proto3" json:"custom_campaign,omitempty"`
}

func (x *MailJetProviderConfig) Reset() {
	*x = MailJetProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailJetProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailJetProviderConfig) ProtoMessage() {}

func (x *MailJetProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailJetProviderConfig.ProtoReflect.Descriptor instead.
func (*MailJetProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{24}
}

func (x *MailJetProviderConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *MailJetProviderConfig) GetSandboxMode() bool {
	if x != nil {
		return x.SandboxMode
	}
	return false
}

func (x *MailJetProviderConfig) GetUrlTags() map[string]string {
	if x != nil {
		return x.UrlTags
	}
	return nil
}

func (x *MailJetProviderConfig) GetCustomCampaign() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomCampaign
	}
	return nil
}

type MailgunProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Api key, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored api key value will be updated with new value.
	// If not provided when updating, stored api key value will be kept.
	// When reading back config, api key will always be set to string empty.
	ApiKey             string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	DefaultFromAddress *Email `protobuf:"bytes,2,opt,name=default_from_address,json=defaultFromAddress,proto3" json:"default_from_address,omitempty"`
}

func (x *MailgunProviderConfig) Reset() {
	*x = MailgunProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailgunProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailgunProviderConfig) ProtoMessage() {}

func (x *MailgunProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailgunProviderConfig.ProtoReflect.Descriptor instead.
func (*MailgunProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{25}
}

func (x *MailgunProviderConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *MailgunProviderConfig) GetDefaultFromAddress() *Email {
	if x != nil {
		return x.DefaultFromAddress
	}
	return nil
}

type AmazonSESProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWS Access key ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// AWS Secret Access Key, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored access key value will be updated with new value.
	// If not provided when updating, stored access key value will be kept.
	// When reading back config, access key will always be set to string empty.
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	// The region to send requests to. This parameter is required and must
	// be configured globally or on a per-client basis unless otherwise
	// noted. A full list of regions is found in the "Regions and Endpoints"
	// document.
	//
	// See (Regions)[http://docs.aws.amazon.com/general/latest/gr/rande.html] for AWS
	// Regions and Endpoints.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// ConfigurationSetName The name of the configuration set that you want to use when sending the email.
	ConfigurationSetName string `protobuf:"bytes,5,opt,name=configuration_set_name,json=configurationSetName,proto3" json:"configuration_set_name,omitempty"`
	DefaultFromAddress   *Email `protobuf:"bytes,6,opt,name=default_from_address,json=defaultFromAddress,proto3" json:"default_from_address,omitempty"`
	// FeedbackForwardingEmailAddress The address that you want bounce and complaint notifications to be sent to.
	FeedbackForwardingEmailAddress string `protobuf:"bytes,7,opt,name=feedback_forwarding_email_address,json=feedbackForwardingEmailAddress,proto3" json:"feedback_forwarding_email_address,omitempty"`
	// ReplyToAddresses The "Reply-to" email addresses for the message.
	//
	// When the recipient replies  to the message, each Reply-to address receives the reply.
	ReplyToAddresses []string `protobuf:"bytes,8,rep,name=reply_to_addresses,json=replyToAddresses,proto3" json:"reply_to_addresses,omitempty"`
}

func (x *AmazonSESProviderConfig) Reset() {
	*x = AmazonSESProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmazonSESProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmazonSESProviderConfig) ProtoMessage() {}

func (x *AmazonSESProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmazonSESProviderConfig.ProtoReflect.Descriptor instead.
func (*AmazonSESProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{26}
}

func (x *AmazonSESProviderConfig) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetConfigurationSetName() string {
	if x != nil {
		return x.ConfigurationSetName
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetDefaultFromAddress() *Email {
	if x != nil {
		return x.DefaultFromAddress
	}
	return nil
}

func (x *AmazonSESProviderConfig) GetFeedbackForwardingEmailAddress() string {
	if x != nil {
		return x.FeedbackForwardingEmailAddress
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetReplyToAddresses() []string {
	if x != nil {
		return x.ReplyToAddresses
	}
	return nil
}

type EmailDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Email:
	//	*EmailDefinition_Template
	//	*EmailDefinition_Message
	Email isEmailDefinition_Email `protobuf_oneof:"email"`
}

func (x *EmailDefinition) Reset() {
	*x = EmailDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailDefinition) ProtoMessage() {}

func (x *EmailDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailDefinition.ProtoReflect.Descriptor instead.
func (*EmailDefinition) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{27}
}

func (m *EmailDefinition) GetEmail() isEmailDefinition_Email {
	if m != nil {
		return m.Email
	}
	return nil
}

func (x *EmailDefinition) GetTemplate() *EmailTemplate {
	if x, ok := x.GetEmail().(*EmailDefinition_Template); ok {
		return x.Template
	}
	return nil
}

func (x *EmailDefinition) GetMessage() *EmailMessage {
	if x, ok := x.GetEmail().(*EmailDefinition_Message); ok {
		return x.Message
	}
	return nil
}

type isEmailDefinition_Email interface {
	isEmailDefinition_Email()
}

type EmailDefinition_Template struct {
	Template *EmailTemplate `protobuf:"bytes,2,opt,name=template,proto3,oneof"`
}

type EmailDefinition_Message struct {
	Message *EmailMessage `protobuf:"bytes,3,opt,name=message,proto3,oneof"`
}

func (*EmailDefinition_Template) isEmailDefinition_Email() {}

func (*EmailDefinition_Message) isEmailDefinition_Email() {}

type EmailTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId            string                    `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateVersion       *wrapperspb.StringValue   `protobuf:"bytes,20,opt,name=template_version,json=templateVersion,proto3" json:"template_version,omitempty"`
	From                  *Email                    `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	ReplyTo               *Email                    `protobuf:"bytes,3,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	To                    []*Email                  `protobuf:"bytes,4,rep,name=to,proto3" json:"to,omitempty"`
	Cc                    []*Email                  `protobuf:"bytes,5,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc                   []*Email                  `protobuf:"bytes,6,rep,name=bcc,proto3" json:"bcc,omitempty"`
	Subject               string                    `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	Headers               map[string]string         `protobuf:"bytes,8,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomArgs            map[string]string         `protobuf:"bytes,11,rep,name=custom_args,json=customArgs,proto3" json:"custom_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DynamicTemplateValues map[string]*v1beta1.Value `protobuf:"bytes,12,rep,name=dynamic_template_values,json=dynamicTemplateValues,proto3" json:"dynamic_template_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Categories            []string                  `protobuf:"bytes,13,rep,name=categories,proto3" json:"categories,omitempty"`
	Attachments           []*EmailAttachment        `protobuf:"bytes,14,rep,name=attachments,proto3" json:"attachments,omitempty"`
	EventPayload          *wrapperspb.StringValue   `protobuf:"bytes,15,opt,name=event_payload,json=eventPayload,proto3" json:"event_payload,omitempty"`
	// The Amazon Resource Name (ARN) of the template.
	TemplateArn string `protobuf:"bytes,16,opt,name=template_arn,json=templateArn,proto3" json:"template_arn,omitempty"`
}

func (x *EmailTemplate) Reset() {
	*x = EmailTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailTemplate) ProtoMessage() {}

func (x *EmailTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailTemplate.ProtoReflect.Descriptor instead.
func (*EmailTemplate) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{28}
}

func (x *EmailTemplate) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *EmailTemplate) GetTemplateVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.TemplateVersion
	}
	return nil
}

func (x *EmailTemplate) GetFrom() *Email {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EmailTemplate) GetReplyTo() *Email {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *EmailTemplate) GetTo() []*Email {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EmailTemplate) GetCc() []*Email {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *EmailTemplate) GetBcc() []*Email {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *EmailTemplate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailTemplate) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *EmailTemplate) GetCustomArgs() map[string]string {
	if x != nil {
		return x.CustomArgs
	}
	return nil
}

func (x *EmailTemplate) GetDynamicTemplateValues() map[string]*v1beta1.Value {
	if x != nil {
		return x.DynamicTemplateValues
	}
	return nil
}

func (x *EmailTemplate) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *EmailTemplate) GetAttachments() []*EmailAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *EmailTemplate) GetEventPayload() *wrapperspb.StringValue {
	if x != nil {
		return x.EventPayload
	}
	return nil
}

func (x *EmailTemplate) GetTemplateArn() string {
	if x != nil {
		return x.TemplateArn
	}
	return ""
}

type EmailAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType string                  `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentId   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Inline      bool                    `protobuf:"varint,3,opt,name=inline,proto3" json:"inline,omitempty"`
	FileName    string                  `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Content     []byte                  `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EmailAttachment) Reset() {
	*x = EmailAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAttachment) ProtoMessage() {}

func (x *EmailAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAttachment.ProtoReflect.Descriptor instead.
func (*EmailAttachment) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{29}
}

func (x *EmailAttachment) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *EmailAttachment) GetContentId() *wrapperspb.StringValue {
	if x != nil {
		return x.ContentId
	}
	return nil
}

func (x *EmailAttachment) GetInline() bool {
	if x != nil {
		return x.Inline
	}
	return false
}

func (x *EmailAttachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *EmailAttachment) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type EmailMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From                  *Email                    `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ReplyTo               *Email                    `protobuf:"bytes,2,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	To                    []*Email                  `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	Cc                    []*Email                  `protobuf:"bytes,4,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc                   []*Email                  `protobuf:"bytes,5,rep,name=bcc,proto3" json:"bcc,omitempty"`
	Subject               string                    `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	TextContent           string                    `protobuf:"bytes,7,opt,name=text_content,json=textContent,proto3" json:"text_content,omitempty"`
	HtmlContent           string                    `protobuf:"bytes,8,opt,name=html_content,json=htmlContent,proto3" json:"html_content,omitempty"`
	Headers               map[string]string         `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomArgs            map[string]string         `protobuf:"bytes,11,rep,name=custom_args,json=customArgs,proto3" json:"custom_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DynamicTemplateValues map[string]*v1beta1.Value `protobuf:"bytes,10,rep,name=dynamic_template_values,json=dynamicTemplateValues,proto3" json:"dynamic_template_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Categories            []string                  `protobuf:"bytes,12,rep,name=categories,proto3" json:"categories,omitempty"`
	Attachments           []*EmailAttachment        `protobuf:"bytes,13,rep,name=attachments,proto3" json:"attachments,omitempty"`
	EventPayload          *wrapperspb.StringValue   `protobuf:"bytes,14,opt,name=event_payload,json=eventPayload,proto3" json:"event_payload,omitempty"`
}

func (x *EmailMessage) Reset() {
	*x = EmailMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailMessage) ProtoMessage() {}

func (x *EmailMessage) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailMessage.ProtoReflect.Descriptor instead.
func (*EmailMessage) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{30}
}

func (x *EmailMessage) GetFrom() *Email {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EmailMessage) GetReplyTo() *Email {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *EmailMessage) GetTo() []*Email {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EmailMessage) GetCc() []*Email {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *EmailMessage) GetBcc() []*Email {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *EmailMessage) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailMessage) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *EmailMessage) GetHtmlContent() string {
	if x != nil {
		return x.HtmlContent
	}
	return ""
}

func (x *EmailMessage) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *EmailMessage) GetCustomArgs() map[string]string {
	if x != nil {
		return x.CustomArgs
	}
	return nil
}

func (x *EmailMessage) GetDynamicTemplateValues() map[string]*v1beta1.Value {
	if x != nil {
		return x.DynamicTemplateValues
	}
	return nil
}

func (x *EmailMessage) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *EmailMessage) GetAttachments() []*EmailAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *EmailMessage) GetEventPayload() *wrapperspb.StringValue {
	if x != nil {
		return x.EventPayload
	}
	return nil
}

type PasswordProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsernamePolicy *UsernamePolicy `protobuf:"bytes,1,opt,name=username_policy,json=usernamePolicy,proto3" json:"username_policy,omitempty"`
	PasswordPolicy *PasswordPolicy `protobuf:"bytes,2,opt,name=password_policy,json=passwordPolicy,proto3" json:"password_policy,omitempty"`
	// Specifies the period (in seconds) after which the failure count will be reset.
	FailInterval            *durationpb.Duration `protobuf:"bytes,3,opt,name=fail_interval,json=failInterval,proto3" json:"fail_interval,omitempty"`
	MinimumPasswordLifetime *durationpb.Duration `protobuf:"bytes,4,opt,name=minimum_password_lifetime,json=minimumPasswordLifetime,proto3" json:"minimum_password_lifetime,omitempty"`
	MaximumPasswordLifetime *durationpb.Duration `protobuf:"bytes,5,opt,name=maximum_password_lifetime,json=maximumPasswordLifetime,proto3" json:"maximum_password_lifetime,omitempty"`
	// Sets the number of previous passwords that are stored and which a user is prevented from using
	PasswordHistory int64 `protobuf:"varint,6,opt,name=password_history,json=passwordHistory,proto3" json:"password_history,omitempty"`
	// Specifies the maximum number of consecutive failures to input the correct password before the user's account is locked.
	MaximumConsecutiveFailures int64 `protobuf:"varint,7,opt,name=maximum_consecutive_failures,json=maximumConsecutiveFailures,proto3" json:"maximum_consecutive_failures,omitempty"`
	// Specifies the period (in seconds) for which a lockout is enforced.
	LockoutTime *durationpb.Duration `protobuf:"bytes,8,opt,name=lockout_time,json=lockoutTime,proto3" json:"lockout_time,omitempty"`
}

func (x *PasswordProviderConfig) Reset() {
	*x = PasswordProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordProviderConfig) ProtoMessage() {}

func (x *PasswordProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordProviderConfig.ProtoReflect.Descriptor instead.
func (*PasswordProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{31}
}

func (x *PasswordProviderConfig) GetUsernamePolicy() *UsernamePolicy {
	if x != nil {
		return x.UsernamePolicy
	}
	return nil
}

func (x *PasswordProviderConfig) GetPasswordPolicy() *PasswordPolicy {
	if x != nil {
		return x.PasswordPolicy
	}
	return nil
}

func (x *PasswordProviderConfig) GetFailInterval() *durationpb.Duration {
	if x != nil {
		return x.FailInterval
	}
	return nil
}

func (x *PasswordProviderConfig) GetMinimumPasswordLifetime() *durationpb.Duration {
	if x != nil {
		return x.MinimumPasswordLifetime
	}
	return nil
}

func (x *PasswordProviderConfig) GetMaximumPasswordLifetime() *durationpb.Duration {
	if x != nil {
		return x.MaximumPasswordLifetime
	}
	return nil
}

func (x *PasswordProviderConfig) GetPasswordHistory() int64 {
	if x != nil {
		return x.PasswordHistory
	}
	return 0
}

func (x *PasswordProviderConfig) GetMaximumConsecutiveFailures() int64 {
	if x != nil {
		return x.MaximumConsecutiveFailures
	}
	return 0
}

func (x *PasswordProviderConfig) GetLockoutTime() *durationpb.Duration {
	if x != nil {
		return x.LockoutTime
	}
	return nil
}

type UsernamePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must be valid email with MX record
	ValidEmail bool `protobuf:"varint,1,opt,name=valid_email,json=validEmail,proto3" json:"valid_email,omitempty"`
	// Email must be verified
	VerifyEmail bool `protobuf:"varint,2,opt,name=verify_email,json=verifyEmail,proto3" json:"verify_email,omitempty"`
	// Allowed email domains to register. Can be shared among tenants.
	AllowedEmailDomains []string `protobuf:"bytes,3,rep,name=allowed_email_domains,json=allowedEmailDomains,proto3" json:"allowed_email_domains,omitempty"`
	// Unique email domain in AppSpace, not allowed to be shared amon tenants.
	ExclusiveEmailDomains []string `protobuf:"bytes,4,rep,name=exclusive_email_domains,json=exclusiveEmailDomains,proto3" json:"exclusive_email_domains,omitempty"`
}

func (x *UsernamePolicy) Reset() {
	*x = UsernamePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernamePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernamePolicy) ProtoMessage() {}

func (x *UsernamePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernamePolicy.ProtoReflect.Descriptor instead.
func (*UsernamePolicy) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{32}
}

func (x *UsernamePolicy) GetValidEmail() bool {
	if x != nil {
		return x.ValidEmail
	}
	return false
}

func (x *UsernamePolicy) GetVerifyEmail() bool {
	if x != nil {
		return x.VerifyEmail
	}
	return false
}

func (x *UsernamePolicy) GetAllowedEmailDomains() []string {
	if x != nil {
		return x.AllowedEmailDomains
	}
	return nil
}

func (x *UsernamePolicy) GetExclusiveEmailDomains() []string {
	if x != nil {
		return x.ExclusiveEmailDomains
	}
	return nil
}

type PasswordPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template      PasswordPolicyTemplate `protobuf:"varint,1,opt,name=template,proto3,enum=indykite.config.v1beta1.PasswordPolicyTemplate" json:"template,omitempty"`
	MinimumLength *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=minimum_length,json=minimumLength,proto3" json:"minimum_length,omitempty"`
}

func (x *PasswordPolicy) Reset() {
	*x = PasswordPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordPolicy) ProtoMessage() {}

func (x *PasswordPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordPolicy.ProtoReflect.Descriptor instead.
func (*PasswordPolicy) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{33}
}

func (x *PasswordPolicy) GetTemplate() PasswordPolicyTemplate {
	if x != nil {
		return x.Template
	}
	return PasswordPolicyTemplate_PASSWORD_POLICY_TEMPLATE_INVALID
}

func (x *PasswordPolicy) GetMinimumLength() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinimumLength
	}
	return nil
}

type IngestMappingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mappings defining how to ingest data into the Knowledge Graph and the Identity Graph.
	//
	// Types that are assignable to IngestType:
	//	*IngestMappingConfig_Upsert
	IngestType isIngestMappingConfig_IngestType `protobuf_oneof:"ingest_type"`
}

func (x *IngestMappingConfig) Reset() {
	*x = IngestMappingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestMappingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestMappingConfig) ProtoMessage() {}

func (x *IngestMappingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestMappingConfig.ProtoReflect.Descriptor instead.
func (*IngestMappingConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{34}
}

func (m *IngestMappingConfig) GetIngestType() isIngestMappingConfig_IngestType {
	if m != nil {
		return m.IngestType
	}
	return nil
}

func (x *IngestMappingConfig) GetUpsert() *IngestMappingConfig_UpsertData {
	if x, ok := x.GetIngestType().(*IngestMappingConfig_Upsert); ok {
		return x.Upsert
	}
	return nil
}

type isIngestMappingConfig_IngestType interface {
	isIngestMappingConfig_IngestType()
}

type IngestMappingConfig_Upsert struct {
	// Creation or updating of data in the Knowledge Graph and the Identity Graph.
	Upsert *IngestMappingConfig_UpsertData `protobuf:"bytes,1,opt,name=upsert,proto3,oneof"`
}

func (*IngestMappingConfig_Upsert) isIngestMappingConfig_IngestType() {}

type AuthorizationPolicyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *v1beta11.Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *AuthorizationPolicyConfig) Reset() {
	*x = AuthorizationPolicyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyConfig) ProtoMessage() {}

func (x *AuthorizationPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyConfig.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{35}
}

func (x *AuthorizationPolicyConfig) GetPolicy() *v1beta11.Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type KnowledgeGraphSchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *v1beta11.Schema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *KnowledgeGraphSchemaConfig) Reset() {
	*x = KnowledgeGraphSchemaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnowledgeGraphSchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeGraphSchemaConfig) ProtoMessage() {}

func (x *KnowledgeGraphSchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeGraphSchemaConfig.ProtoReflect.Descriptor instead.
func (*KnowledgeGraphSchemaConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{36}
}

func (x *KnowledgeGraphSchemaConfig) GetSchema() *v1beta11.Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type IngestMappingConfig_UpsertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*IngestMappingConfig_Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *IngestMappingConfig_UpsertData) Reset() {
	*x = IngestMappingConfig_UpsertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestMappingConfig_UpsertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestMappingConfig_UpsertData) ProtoMessage() {}

func (x *IngestMappingConfig_UpsertData) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestMappingConfig_UpsertData.ProtoReflect.Descriptor instead.
func (*IngestMappingConfig_UpsertData) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{34, 0}
}

func (x *IngestMappingConfig_UpsertData) GetEntities() []*IngestMappingConfig_Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Entity can either be a DigitalTwin (stored in both the Identity Graph and the Knowledge Graph)
// or a domain specific entity (like 'Family') that is only stored in the Knowledge Graph.
type IngestMappingConfig_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional TenantId to create the digital twin entity under, if specified.
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// The labels to attach to the Node representing the Entity.
	// For a DigitalTwin this list needs to contain 'DigitalTwin'.
	// A domain entity can contain anything *but* 'DigitalTwin'.
	// Labels need to be in PascalCase.
	Labels []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// The property to be used as the externalId of the entity, representing its unique id in the source system.
	ExternalId *IngestMappingConfig_Property `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Knowledge Graph: Actual properties on the node.
	// Identity Graph: Node properties with a 'HAS' relation from the DigitalTwin (if PII).
	Properties []*IngestMappingConfig_Property `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
	// Knowledge Graph only: A list of relationships to create between this entity node and other nodes.
	Relationships []*IngestMappingConfig_Relationship `protobuf:"bytes,5,rep,name=relationships,proto3" json:"relationships,omitempty"`
}

func (x *IngestMappingConfig_Entity) Reset() {
	*x = IngestMappingConfig_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestMappingConfig_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestMappingConfig_Entity) ProtoMessage() {}

func (x *IngestMappingConfig_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestMappingConfig_Entity.ProtoReflect.Descriptor instead.
func (*IngestMappingConfig_Entity) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{34, 1}
}

func (x *IngestMappingConfig_Entity) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *IngestMappingConfig_Entity) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *IngestMappingConfig_Entity) GetExternalId() *IngestMappingConfig_Property {
	if x != nil {
		return x.ExternalId
	}
	return nil
}

func (x *IngestMappingConfig_Entity) GetProperties() []*IngestMappingConfig_Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *IngestMappingConfig_Entity) GetRelationships() []*IngestMappingConfig_Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

type IngestMappingConfig_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the field in the source, as it is ingested.
	SourceName string `protobuf:"bytes,1,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	// The name this field will have after ingestion.
	MappedName string `protobuf:"bytes,2,opt,name=mapped_name,json=mappedName,proto3" json:"mapped_name,omitempty"`
	// Whether this property needs to be present in ingested data.
	IsRequired bool `protobuf:"varint,4,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
}

func (x *IngestMappingConfig_Property) Reset() {
	*x = IngestMappingConfig_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestMappingConfig_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestMappingConfig_Property) ProtoMessage() {}

func (x *IngestMappingConfig_Property) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestMappingConfig_Property.ProtoReflect.Descriptor instead.
func (*IngestMappingConfig_Property) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{34, 2}
}

func (x *IngestMappingConfig_Property) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *IngestMappingConfig_Property) GetMappedName() string {
	if x != nil {
		return x.MappedName
	}
	return ""
}

func (x *IngestMappingConfig_Property) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

type IngestMappingConfig_Relationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The external id of the node to match on when establishing the relationship.
	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// The relationship type, matching zero or more sequences of _ and 1 or more uppercase ASCII letters,
	// like 'MOTHER_OF'.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The direction of the relationship, from the perspective of this entity.
	Direction IngestMappingConfig_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=indykite.config.v1beta1.IngestMappingConfig_Direction" json:"direction,omitempty"`
	// The label of the entity to connect the relationship to.
	// If the entity does not exist (depends on the order of ingestion) then a node with this label will be created.
	// Labels need to be in PascalCase.
	MatchLabel string `protobuf:"bytes,4,opt,name=match_label,json=matchLabel,proto3" json:"match_label,omitempty"`
}

func (x *IngestMappingConfig_Relationship) Reset() {
	*x = IngestMappingConfig_Relationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestMappingConfig_Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestMappingConfig_Relationship) ProtoMessage() {}

func (x *IngestMappingConfig_Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestMappingConfig_Relationship.ProtoReflect.Descriptor instead.
func (*IngestMappingConfig_Relationship) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{34, 3}
}

func (x *IngestMappingConfig_Relationship) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *IngestMappingConfig_Relationship) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IngestMappingConfig_Relationship) GetDirection() IngestMappingConfig_Direction {
	if x != nil {
		return x.Direction
	}
	return IngestMappingConfig_DIRECTION_INVALID
}

func (x *IngestMappingConfig_Relationship) GetMatchLabel() string {
	if x != nil {
		return x.MatchLabel
	}
	return ""
}

var File_indykite_config_v1beta1_model_proto protoreflect.FileDescriptor

var file_indykite_config_v1beta1_model_proto_rawDesc = []byte{
	0x0a, 0x23, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2d, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2d, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x04, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02,
	0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x22, 0x9a, 0x05, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72,
	0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a,
	0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe,
	0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd8,
	0x05, 0x0a, 0x06, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa,
	0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36,
	0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9a, 0x05, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa,
	0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36,
	0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xec, 0x05, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30,
	0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18,
	0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9d, 0x05, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x29,
	0x18, 0x2d, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x56, 0x0a,
	0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa0, 0x05, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42,
	0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28,
	0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31,
	0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xcd, 0x04, 0x0a, 0x18, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x6b,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10,
	0x29, 0x18, 0x2d, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x81, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a,
	0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f,
	0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18,
	0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x14,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a,
	0x14, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b,
	0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x18, 0x77,
	0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x16, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x65, 0x71, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x65, 0x71, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x14, 0x73, 0x61, 0x66, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x53, 0x41, 0x46, 0x52, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x73, 0x61, 0x66, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x15, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a,
	0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x78, 0x0a, 0x1d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x1a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x98, 0x09, 0x0a,
	0x12, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x08, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x08, 0xd0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x92, 0x01, 0x0d,
	0x18, 0x01, 0x22, 0x07, 0x72, 0x05, 0x10, 0x08, 0x88, 0x01, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x37, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x0d,
	0x92, 0x01, 0x0a, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12,
	0x2c, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0xd0,
	0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x4b, 0x0a,
	0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa,
	0x42, 0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0xd0, 0x01, 0x01,
	0x88, 0x01, 0x01, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68, 0x74, 0x74,
	0x70, 0x73, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0xd0, 0x01,
	0x01, 0x88, 0x01, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa,
	0x42, 0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0xd0, 0x01, 0x01,
	0x88, 0x01, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x09,
	0x3a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x07, 0x6a,
	0x77, 0x6b, 0x73, 0x55, 0x72, 0x69, 0x12, 0x2a, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08,
	0x10, 0x02, 0x18, 0x80, 0x08, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01,
	0x01, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x68, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x68,
	0x01, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x4b, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x65, 0x6d, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x44, 0xfa, 0x42, 0x41, 0x7a, 0x3f, 0x10, 0x55, 0x18, 0x80,
	0x40, 0x2a, 0x1b, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x32, 0x19,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x70, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12, 0x33, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01,
	0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xbe, 0x06, 0x0a, 0x11, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x12, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xbe, 0x0b, 0x0a, 0x17, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe,
	0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xfa, 0x42, 0x0e, 0x92, 0x01, 0x0b,
	0x08, 0x01, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0a, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52, 0x09, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x69, 0x12, 0x44, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x92, 0x01, 0x0c, 0x18, 0x01, 0x22,
	0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x6f, 0x72, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3c, 0x0a,
	0x14, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08,
	0x72, 0x06, 0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f,
	0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x69, 0x12, 0x2a, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06,
	0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x69, 0x12,
	0x47, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0xfe, 0x01, 0x60, 0x01, 0x52,
	0x17, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x72, 0x09, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01,
	0x88, 0x01, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x56, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x11, 0xfa, 0x42, 0x0e, 0x92, 0x01, 0x0b, 0x18, 0x01, 0x22, 0x07, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x5f, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x11, 0xfa, 0x42, 0x0e, 0x92, 0x01, 0x0b, 0x18, 0x01, 0x22, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x31, 0xfa, 0x42, 0x2e, 0x92, 0x01, 0x2b, 0x08, 0x01, 0x18, 0x01, 0x22, 0x25, 0x72,
	0x23, 0x32, 0x21, 0x5e, 0x5b, 0x5c, 0x78, 0x32, 0x31, 0x5c, 0x78, 0x32, 0x33, 0x2d, 0x5c, 0x78,
	0x35, 0x62, 0x5c, 0x78, 0x35, 0x64, 0x2d, 0x5c, 0x78, 0x37, 0x65, 0x5d, 0x7b, 0x31, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x1a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x17, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0xae, 0x01, 0x0a, 0x1f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x68, 0xfa, 0x42, 0x65, 0x72, 0x63, 0x52, 0x05, 0x52, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05,
	0x52, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x52, 0x53, 0x35, 0x31, 0x32, 0x52, 0x05, 0x50, 0x53,
	0x32, 0x35, 0x36, 0x52, 0x05, 0x50, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x50, 0x53, 0x35, 0x31,
	0x32, 0x52, 0x05, 0x45, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x45, 0x53, 0x33, 0x38, 0x34, 0x52,
	0x05, 0x45, 0x53, 0x35, 0x31, 0x32, 0x52, 0x06, 0x45, 0x53, 0x32, 0x35, 0x36, 0x4b, 0x52, 0x05,
	0x48, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x48, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x48, 0x53,
	0x35, 0x31, 0x32, 0x52, 0x05, 0x45, 0x64, 0x44, 0x53, 0x41, 0x52, 0x1b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x50, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa,
	0x42, 0x0c, 0x72, 0x0a, 0x52, 0x05, 0x52, 0x53, 0x32, 0x35, 0x36, 0xd0, 0x01, 0x01, 0x52, 0x19,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6c, 0x67, 0x22, 0xe4, 0x05, 0x0a, 0x0e, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x80, 0x0a, 0x0a, 0x14, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x92, 0x01, 0x0d, 0x08, 0x01, 0x18, 0x01, 0x22, 0x07,
	0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x92, 0x01, 0x0d, 0x08, 0x01, 0x18, 0x01, 0x22, 0x07,
	0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x31, 0xfa, 0x42, 0x2e, 0x92, 0x01, 0x2b, 0x08, 0x01,
	0x18, 0x01, 0x22, 0x25, 0x72, 0x23, 0x32, 0x21, 0x5e, 0x5b, 0x5c, 0x78, 0x32, 0x31, 0x5c, 0x78,
	0x32, 0x33, 0x2d, 0x5c, 0x78, 0x35, 0x62, 0x5c, 0x78, 0x35, 0x64, 0x2d, 0x5c, 0x78, 0x37, 0x65,
	0x5d, 0x7b, 0x31, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x80, 0x01, 0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x11, 0xfa, 0x42, 0x0e, 0x92, 0x01, 0x0b,
	0x08, 0x01, 0x22, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x17, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0xb5, 0x01, 0x0a, 0x1f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x6f,
	0xfa, 0x42, 0x6c, 0x92, 0x01, 0x69, 0x08, 0x01, 0x22, 0x65, 0x72, 0x63, 0x52, 0x05, 0x52, 0x53,
	0x32, 0x35, 0x36, 0x52, 0x05, 0x52, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x52, 0x53, 0x35, 0x31,
	0x32, 0x52, 0x05, 0x50, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x50, 0x53, 0x33, 0x38, 0x34, 0x52,
	0x05, 0x50, 0x53, 0x35, 0x31, 0x32, 0x52, 0x05, 0x45, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x45,
	0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x45, 0x53, 0x35, 0x31, 0x32, 0x52, 0x06, 0x45, 0x53, 0x32,
	0x35, 0x36, 0x4b, 0x52, 0x05, 0x48, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x48, 0x53, 0x33, 0x38,
	0x34, 0x52, 0x05, 0x48, 0x53, 0x35, 0x31, 0x32, 0x52, 0x05, 0x45, 0x64, 0x44, 0x53, 0x41, 0x52,
	0x1b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x30, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x88, 0x01,
	0x01, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0xa8,
	0x01, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x6b, 0xfa, 0x42, 0x68, 0x72, 0x66, 0x52, 0x05, 0x52, 0x53, 0x32, 0x35,
	0x36, 0x52, 0x05, 0x52, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x52, 0x53, 0x35, 0x31, 0x32, 0x52,
	0x05, 0x50, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x50, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x50,
	0x53, 0x35, 0x31, 0x32, 0x52, 0x05, 0x45, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x45, 0x53, 0x33,
	0x38, 0x34, 0x52, 0x05, 0x45, 0x53, 0x35, 0x31, 0x32, 0x52, 0x06, 0x45, 0x53, 0x32, 0x35, 0x36,
	0x4b, 0x52, 0x05, 0x48, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x48, 0x53, 0x33, 0x38, 0x34, 0x52,
	0x05, 0x48, 0x53, 0x35, 0x31, 0x32, 0x52, 0x05, 0x45, 0x64, 0x44, 0x53, 0x41, 0xd0, 0x01, 0x01,
	0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x95, 0x01, 0x0a, 0x17, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x69, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0xfa, 0x42, 0x12, 0x9a, 0x01, 0x0f, 0x08, 0x01, 0x22, 0x04,
	0x72, 0x02, 0x18, 0x20, 0x2a, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x14, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72,
	0x69, 0x12, 0x9b, 0x01, 0x0a, 0x19, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x15, 0xfa, 0x42, 0x12, 0x9a, 0x01, 0x0f, 0x08, 0x01, 0x22, 0x04, 0x72, 0x02, 0x18, 0x20,
	0x2a, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x1a,
	0x47, 0x0a, 0x19, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55,
	0x72, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xac, 0x06, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89,
	0x01, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x18, 0xfa, 0x42, 0x15, 0x9a, 0x01, 0x12, 0x08, 0x01, 0x22, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01,
	0x2a, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x16, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x15, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x18, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x6b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5b, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0xaa, 0x01,
	0x07, 0x22, 0x03, 0x08, 0x84, 0x07, 0x32, 0x00, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5f, 0x0a,
	0x16, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0xaa, 0x01, 0x07,
	0x22, 0x03, 0x08, 0x84, 0x07, 0x32, 0x00, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x42,
	0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x77, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x53, 0x69,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xda, 0x03, 0x0a, 0x0e,
	0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d,
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x7a, 0x04, 0x18, 0x80, 0x80, 0x40, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x7e, 0xfa, 0x42,
	0x7b, 0xa2, 0x01, 0x78, 0x12, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x64, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x42, 0x41, 0x52, 0x45, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x52, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x49, 0x43,
	0x48, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xce, 0x01, 0x0a, 0x17, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x0c, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x0c, 0xd0, 0x01, 0x01, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2a, 0x0a,
	0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x68, 0x01, 0x52, 0x0b, 0x68, 0x6f,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x53, 0x41,
	0x46, 0x52, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x29, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa,
	0x42, 0x0a, 0x72, 0x08, 0x10, 0x04, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0x12, 0x0a, 0x10, 0x53, 0x4d, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xdf, 0x07, 0x0a, 0x12, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x14, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x07,
	0x6d, 0x61, 0x69, 0x6c, 0x6a, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x4a, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x6a,
	0x65, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x67, 0x75, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x67, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x61, 0x69, 0x6c, 0x67, 0x75, 0x6e, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x6d, 0x61, 0x7a,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x53, 0x45, 0x53, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x12, 0x5f,
	0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x24, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0xfe, 0x01, 0x60, 0x01, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x01, 0x18, 0xf7, 0x03, 0xd0,
	0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e,
	0x64, 0x47, 0x72, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x19, 0x18, 0xfe, 0x01,
	0xd0, 0x01, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10, 0x02, 0x18, 0x40, 0xd0, 0x01, 0x01,
	0x52, 0x0a, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x72, 0x0b, 0x10,
	0x0a, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x22, 0xbd, 0x02, 0x0a, 0x15, 0x4d, 0x61, 0x69, 0x6c, 0x4a, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a,
	0x72, 0x08, 0x10, 0x19, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x4a, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x72, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x55, 0x72, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x91, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x69, 0x6c, 0x67, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a,
	0x72, 0x08, 0x10, 0x19, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x50, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x17, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x53,
	0x45, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2e, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x19,
	0x18, 0xfe, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a,
	0x72, 0x08, 0x10, 0x19, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xfa, 0x42, 0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x50, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x21, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xfa, 0x42, 0x0a, 0x72, 0x08, 0x18, 0xf7, 0x03, 0xd0, 0x01, 0x01, 0x60, 0x01, 0x52, 0x1e, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a,
	0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01,
	0x09, 0x22, 0x07, 0x72, 0x05, 0x18, 0xf7, 0x03, 0x60, 0x01, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a,
	0x0f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4e, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x96, 0x09, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xfe, 0x01, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xfe, 0x01, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x39,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x63, 0x63, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x63, 0x63, 0x12, 0x30, 0x0a, 0x03, 0x62, 0x63, 0x63,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x62, 0x63, 0x63, 0x12, 0x27, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42,
	0x0a, 0x72, 0x08, 0x10, 0x01, 0x18, 0xf7, 0x03, 0xd0, 0x01, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x79, 0x0a, 0x17,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc0, 0x01, 0x0a, 0x0f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xb3, 0x08, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02,
	0x63, 0x63, 0x12, 0x30, 0x0a, 0x03, 0x62, 0x63, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x03, 0x62, 0x63, 0x63, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x01, 0x18, 0xf7,
	0x03, 0xd0, 0x01, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x78, 0x0a, 0x17, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a,
	0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x04, 0x0a, 0x16, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x5a, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x19, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x81, 0x09, 0x0a, 0x13,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x1a, 0x69, 0x0a, 0x0a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0xb8, 0x03, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x08, 0x01, 0x10, 0x05, 0x22, 0x16,
	0x72, 0x14, 0x18, 0x40, 0x32, 0x10, 0x5e, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x60,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x5f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x10, 0x14, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x69, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x14, 0x52, 0x0d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x85, 0x01, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x1a, 0x81, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x18, 0x80, 0x01, 0x32, 0x14, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x5d, 0x2b, 0x28, 0x3f, 0x3a, 0x5f, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x2b, 0x29, 0x2a, 0x24,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x18, 0x40, 0x32, 0x10, 0x5e, 0x28, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x51, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x12, 0x0a, 0x0b, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0x67, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x68, 0x0a, 0x1a, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2a, 0xa4, 0x0a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4d, 0x41, 0x5a, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d,
	0x41, 0x5a, 0x4f, 0x4e, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x10,
	0x22, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x29, 0x12, 0x1f,
	0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x45, 0x51, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x21, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x26, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x42,
	0x55, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x4e, 0x5f, 0x43, 0x48,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x27, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41,
	0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x54, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x52,
	0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49,
	0x54, 0x48, 0x55, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x4c,
	0x41, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x4b, 0x55, 0x5f, 0x43,
	0x4f, 0x4d, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x50, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x59, 0x4b, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x59, 0x4b, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x10,
	0x24, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4d,
	0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4b, 0x41, 0x4b, 0x41, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x0d, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x0e, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x43, 0x48, 0x49, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x0f,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x55, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41,
	0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4d, 0x41, 0x54, 0x48, 0x5f,
	0x43, 0x4f, 0x4d, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x10,
	0x20, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x4b, 0x49, 0x41,
	0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x44, 0x4e, 0x4f, 0x4b, 0x4c, 0x41, 0x53,
	0x53, 0x4e, 0x49, 0x4b, 0x49, 0x5f, 0x52, 0x55, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x50,
	0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x16, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f,
	0x58, 0x5f, 0x50, 0x41, 0x59, 0x50, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x17, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x19, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1a, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x56, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x42,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x50, 0x50, 0x53, 0x5f,
	0x4e, 0x4f, 0x10, 0x28, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1d, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x59, 0x41, 0x48, 0x4f, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x41, 0x4e,
	0x44, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1f, 0x2a, 0x73, 0x0a, 0x09, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53,
	0x54, 0x59, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xb9,
	0x01, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x41, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x41,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45,
	0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x05, 0x2a, 0x76, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x03, 0x2a, 0x76, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x41, 0x49, 0x52, 0x57, 0x49, 0x53, 0x45, 0x10, 0x02, 0x2a, 0xfd, 0x01, 0x0a, 0x17, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x32,
	0x0a, 0x2e, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x50,
	0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x4a, 0x57, 0x54, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x9f, 0x01, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x59, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x59,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x59,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x59, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x03, 0x2a, 0xb9, 0x01, 0x0a,
	0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x2a, 0xd0, 0x01, 0x0a, 0x1b, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x55, 0x52, 0x41, 0x47, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x86, 0x01, 0x0a, 0x16,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x49,
	0x53, 0x54, 0x10, 0x02, 0x42, 0xf4, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2,
	0x02, 0x03, 0x49, 0x43, 0x58, 0xaa, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca,
	0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x23, 0x49, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_indykite_config_v1beta1_model_proto_rawDescOnce sync.Once
	file_indykite_config_v1beta1_model_proto_rawDescData = file_indykite_config_v1beta1_model_proto_rawDesc
)

func file_indykite_config_v1beta1_model_proto_rawDescGZIP() []byte {
	file_indykite_config_v1beta1_model_proto_rawDescOnce.Do(func() {
		file_indykite_config_v1beta1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_config_v1beta1_model_proto_rawDescData)
	})
	return file_indykite_config_v1beta1_model_proto_rawDescData
}

var file_indykite_config_v1beta1_model_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_indykite_config_v1beta1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_indykite_config_v1beta1_model_proto_goTypes = []interface{}{
	(ProviderType)(0),                        // 0: indykite.config.v1beta1.ProviderType
	(AuthStyle)(0),                           // 1: indykite.config.v1beta1.AuthStyle
	(GrantType)(0),                           // 2: indykite.config.v1beta1.GrantType
	(ResponseType)(0),                        // 3: indykite.config.v1beta1.ResponseType
	(ClientSubjectType)(0),                   // 4: indykite.config.v1beta1.ClientSubjectType
	(TokenEndpointAuthMethod)(0),             // 5: indykite.config.v1beta1.TokenEndpointAuthMethod
	(ConveyancePreference)(0),                // 6: indykite.config.v1beta1.ConveyancePreference
	(AuthenticatorAttachment)(0),             // 7: indykite.config.v1beta1.AuthenticatorAttachment
	(UserVerificationRequirement)(0),         // 8: indykite.config.v1beta1.UserVerificationRequirement
	(PasswordPolicyTemplate)(0),              // 9: indykite.config.v1beta1.PasswordPolicyTemplate
	(AuthFlowConfig_Format)(0),               // 10: indykite.config.v1beta1.AuthFlowConfig.Format
	(IngestMappingConfig_Direction)(0),       // 11: indykite.config.v1beta1.IngestMappingConfig.Direction
	(*UniqueNameIdentifier)(nil),             // 12: indykite.config.v1beta1.UniqueNameIdentifier
	(*Customer)(nil),                         // 13: indykite.config.v1beta1.Customer
	(*ApplicationSpace)(nil),                 // 14: indykite.config.v1beta1.ApplicationSpace
	(*Tenant)(nil),                           // 15: indykite.config.v1beta1.Tenant
	(*Application)(nil),                      // 16: indykite.config.v1beta1.Application
	(*ApplicationAgent)(nil),                 // 17: indykite.config.v1beta1.ApplicationAgent
	(*ApplicationAgentCredential)(nil),       // 18: indykite.config.v1beta1.ApplicationAgentCredential
	(*ServiceAccount)(nil),                   // 19: indykite.config.v1beta1.ServiceAccount
	(*ServiceAccountCredential)(nil),         // 20: indykite.config.v1beta1.ServiceAccountCredential
	(*ConfigNode)(nil),                       // 21: indykite.config.v1beta1.ConfigNode
	(*OAuth2ClientConfig)(nil),               // 22: indykite.config.v1beta1.OAuth2ClientConfig
	(*OAuth2Application)(nil),                // 23: indykite.config.v1beta1.OAuth2Application
	(*OAuth2ApplicationConfig)(nil),          // 24: indykite.config.v1beta1.OAuth2ApplicationConfig
	(*OAuth2Provider)(nil),                   // 25: indykite.config.v1beta1.OAuth2Provider
	(*OAuth2ProviderConfig)(nil),             // 26: indykite.config.v1beta1.OAuth2ProviderConfig
	(*WebAuthnProviderConfig)(nil),           // 27: indykite.config.v1beta1.WebAuthnProviderConfig
	(*WebAuthnSiteDefinition)(nil),           // 28: indykite.config.v1beta1.WebAuthnSiteDefinition
	(*AuthFlowConfig)(nil),                   // 29: indykite.config.v1beta1.AuthFlowConfig
	(*AuthenteqProviderConfig)(nil),          // 30: indykite.config.v1beta1.AuthenteqProviderConfig
	(*SAFRProviderConfig)(nil),               // 31: indykite.config.v1beta1.SAFRProviderConfig
	(*SMSServiceConfig)(nil),                 // 32: indykite.config.v1beta1.SMSServiceConfig
	(*EmailServiceConfig)(nil),               // 33: indykite.config.v1beta1.EmailServiceConfig
	(*Email)(nil),                            // 34: indykite.config.v1beta1.Email
	(*SendGridProviderConfig)(nil),           // 35: indykite.config.v1beta1.SendGridProviderConfig
	(*MailJetProviderConfig)(nil),            // 36: indykite.config.v1beta1.MailJetProviderConfig
	(*MailgunProviderConfig)(nil),            // 37: indykite.config.v1beta1.MailgunProviderConfig
	(*AmazonSESProviderConfig)(nil),          // 38: indykite.config.v1beta1.AmazonSESProviderConfig
	(*EmailDefinition)(nil),                  // 39: indykite.config.v1beta1.EmailDefinition
	(*EmailTemplate)(nil),                    // 40: indykite.config.v1beta1.EmailTemplate
	(*EmailAttachment)(nil),                  // 41: indykite.config.v1beta1.EmailAttachment
	(*EmailMessage)(nil),                     // 42: indykite.config.v1beta1.EmailMessage
	(*PasswordProviderConfig)(nil),           // 43: indykite.config.v1beta1.PasswordProviderConfig
	(*UsernamePolicy)(nil),                   // 44: indykite.config.v1beta1.UsernamePolicy
	(*PasswordPolicy)(nil),                   // 45: indykite.config.v1beta1.PasswordPolicy
	(*IngestMappingConfig)(nil),              // 46: indykite.config.v1beta1.IngestMappingConfig
	(*AuthorizationPolicyConfig)(nil),        // 47: indykite.config.v1beta1.AuthorizationPolicyConfig
	(*KnowledgeGraphSchemaConfig)(nil),       // 48: indykite.config.v1beta1.KnowledgeGraphSchemaConfig
	nil,                                      // 49: indykite.config.v1beta1.OAuth2ProviderConfig.FrontChannelLoginUriEntry
	nil,                                      // 50: indykite.config.v1beta1.OAuth2ProviderConfig.FrontChannelConsentUriEntry
	nil,                                      // 51: indykite.config.v1beta1.WebAuthnProviderConfig.RelayingPartiesEntry
	nil,                                      // 52: indykite.config.v1beta1.MailJetProviderConfig.UrlTagsEntry
	nil,                                      // 53: indykite.config.v1beta1.EmailTemplate.HeadersEntry
	nil,                                      // 54: indykite.config.v1beta1.EmailTemplate.CustomArgsEntry
	nil,                                      // 55: indykite.config.v1beta1.EmailTemplate.DynamicTemplateValuesEntry
	nil,                                      // 56: indykite.config.v1beta1.EmailMessage.HeadersEntry
	nil,                                      // 57: indykite.config.v1beta1.EmailMessage.CustomArgsEntry
	nil,                                      // 58: indykite.config.v1beta1.EmailMessage.DynamicTemplateValuesEntry
	(*IngestMappingConfig_UpsertData)(nil),   // 59: indykite.config.v1beta1.IngestMappingConfig.UpsertData
	(*IngestMappingConfig_Entity)(nil),       // 60: indykite.config.v1beta1.IngestMappingConfig.Entity
	(*IngestMappingConfig_Property)(nil),     // 61: indykite.config.v1beta1.IngestMappingConfig.Property
	(*IngestMappingConfig_Relationship)(nil), // 62: indykite.config.v1beta1.IngestMappingConfig.Relationship
	(*wrapperspb.StringValue)(nil),           // 63: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),            // 64: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),              // 65: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),             // 66: google.protobuf.BoolValue
	(*anypb.Any)(nil),                        // 67: google.protobuf.Any
	(*wrapperspb.Int64Value)(nil),            // 68: google.protobuf.Int64Value
	(*v1beta11.Policy)(nil),                  // 69: indykite.knowledge_graph.v1beta1.Policy
	(*v1beta11.Schema)(nil),                  // 70: indykite.knowledge_graph.v1beta1.Schema
	(*v1beta1.Value)(nil),                    // 71: indykite.objects.v1beta1.Value
}
var file_indykite_config_v1beta1_model_proto_depIdxs = []int32{
	63,  // 0: indykite.config.v1beta1.Customer.description:type_name -> google.protobuf.StringValue
	64,  // 1: indykite.config.v1beta1.Customer.create_time:type_name -> google.protobuf.Timestamp
	64,  // 2: indykite.config.v1beta1.Customer.update_time:type_name -> google.protobuf.Timestamp
	64,  // 3: indykite.config.v1beta1.Customer.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 4: indykite.config.v1beta1.Customer.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 5: indykite.config.v1beta1.ApplicationSpace.description:type_name -> google.protobuf.StringValue
	64,  // 6: indykite.config.v1beta1.ApplicationSpace.create_time:type_name -> google.protobuf.Timestamp
	64,  // 7: indykite.config.v1beta1.ApplicationSpace.update_time:type_name -> google.protobuf.Timestamp
	64,  // 8: indykite.config.v1beta1.ApplicationSpace.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 9: indykite.config.v1beta1.ApplicationSpace.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 10: indykite.config.v1beta1.Tenant.description:type_name -> google.protobuf.StringValue
	64,  // 11: indykite.config.v1beta1.Tenant.create_time:type_name -> google.protobuf.Timestamp
	64,  // 12: indykite.config.v1beta1.Tenant.update_time:type_name -> google.protobuf.Timestamp
	64,  // 13: indykite.config.v1beta1.Tenant.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 14: indykite.config.v1beta1.Tenant.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 15: indykite.config.v1beta1.Application.description:type_name -> google.protobuf.StringValue
	64,  // 16: indykite.config.v1beta1.Application.create_time:type_name -> google.protobuf.Timestamp
	64,  // 17: indykite.config.v1beta1.Application.update_time:type_name -> google.protobuf.Timestamp
	64,  // 18: indykite.config.v1beta1.Application.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 19: indykite.config.v1beta1.Application.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 20: indykite.config.v1beta1.ApplicationAgent.description:type_name -> google.protobuf.StringValue
	64,  // 21: indykite.config.v1beta1.ApplicationAgent.create_time:type_name -> google.protobuf.Timestamp
	64,  // 22: indykite.config.v1beta1.ApplicationAgent.update_time:type_name -> google.protobuf.Timestamp
	64,  // 23: indykite.config.v1beta1.ApplicationAgent.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 24: indykite.config.v1beta1.ApplicationAgent.delete_time:type_name -> google.protobuf.Timestamp
	64,  // 25: indykite.config.v1beta1.ApplicationAgentCredential.create_time:type_name -> google.protobuf.Timestamp
	64,  // 26: indykite.config.v1beta1.ApplicationAgentCredential.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 27: indykite.config.v1beta1.ApplicationAgentCredential.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 28: indykite.config.v1beta1.ServiceAccount.description:type_name -> google.protobuf.StringValue
	64,  // 29: indykite.config.v1beta1.ServiceAccount.create_time:type_name -> google.protobuf.Timestamp
	64,  // 30: indykite.config.v1beta1.ServiceAccount.update_time:type_name -> google.protobuf.Timestamp
	64,  // 31: indykite.config.v1beta1.ServiceAccount.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 32: indykite.config.v1beta1.ServiceAccount.delete_time:type_name -> google.protobuf.Timestamp
	64,  // 33: indykite.config.v1beta1.ServiceAccountCredential.create_time:type_name -> google.protobuf.Timestamp
	64,  // 34: indykite.config.v1beta1.ServiceAccountCredential.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 35: indykite.config.v1beta1.ServiceAccountCredential.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 36: indykite.config.v1beta1.ConfigNode.description:type_name -> google.protobuf.StringValue
	64,  // 37: indykite.config.v1beta1.ConfigNode.create_time:type_name -> google.protobuf.Timestamp
	64,  // 38: indykite.config.v1beta1.ConfigNode.update_time:type_name -> google.protobuf.Timestamp
	64,  // 39: indykite.config.v1beta1.ConfigNode.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 40: indykite.config.v1beta1.ConfigNode.delete_time:type_name -> google.protobuf.Timestamp
	29,  // 41: indykite.config.v1beta1.ConfigNode.auth_flow_config:type_name -> indykite.config.v1beta1.AuthFlowConfig
	33,  // 42: indykite.config.v1beta1.ConfigNode.email_service_config:type_name -> indykite.config.v1beta1.EmailServiceConfig
	22,  // 43: indykite.config.v1beta1.ConfigNode.oauth2_client_config:type_name -> indykite.config.v1beta1.OAuth2ClientConfig
	43,  // 44: indykite.config.v1beta1.ConfigNode.password_provider_config:type_name -> indykite.config.v1beta1.PasswordProviderConfig
	27,  // 45: indykite.config.v1beta1.ConfigNode.webauthn_provider_config:type_name -> indykite.config.v1beta1.WebAuthnProviderConfig
	30,  // 46: indykite.config.v1beta1.ConfigNode.authenteq_provider_config:type_name -> indykite.config.v1beta1.AuthenteqProviderConfig
	31,  // 47: indykite.config.v1beta1.ConfigNode.safr_provider_config:type_name -> indykite.config.v1beta1.SAFRProviderConfig
	46,  // 48: indykite.config.v1beta1.ConfigNode.ingest_mapping_config:type_name -> indykite.config.v1beta1.IngestMappingConfig
	47,  // 49: indykite.config.v1beta1.ConfigNode.authorization_policy_config:type_name -> indykite.config.v1beta1.AuthorizationPolicyConfig
	48,  // 50: indykite.config.v1beta1.ConfigNode.knowledge_graph_schema_config:type_name -> indykite.config.v1beta1.KnowledgeGraphSchemaConfig
	0,   // 51: indykite.config.v1beta1.OAuth2ClientConfig.provider_type:type_name -> indykite.config.v1beta1.ProviderType
	1,   // 52: indykite.config.v1beta1.OAuth2ClientConfig.auth_style:type_name -> indykite.config.v1beta1.AuthStyle
	63,  // 53: indykite.config.v1beta1.OAuth2Application.description:type_name -> google.protobuf.StringValue
	64,  // 54: indykite.config.v1beta1.OAuth2Application.create_time:type_name -> google.protobuf.Timestamp
	64,  // 55: indykite.config.v1beta1.OAuth2Application.update_time:type_name -> google.protobuf.Timestamp
	64,  // 56: indykite.config.v1beta1.OAuth2Application.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 57: indykite.config.v1beta1.OAuth2Application.delete_time:type_name -> google.protobuf.Timestamp
	24,  // 58: indykite.config.v1beta1.OAuth2Application.config:type_name -> indykite.config.v1beta1.OAuth2ApplicationConfig
	4,   // 59: indykite.config.v1beta1.OAuth2ApplicationConfig.subject_type:type_name -> indykite.config.v1beta1.ClientSubjectType
	2,   // 60: indykite.config.v1beta1.OAuth2ApplicationConfig.grant_types:type_name -> indykite.config.v1beta1.GrantType
	3,   // 61: indykite.config.v1beta1.OAuth2ApplicationConfig.response_types:type_name -> indykite.config.v1beta1.ResponseType
	5,   // 62: indykite.config.v1beta1.OAuth2ApplicationConfig.token_endpoint_auth_method:type_name -> indykite.config.v1beta1.TokenEndpointAuthMethod
	63,  // 63: indykite.config.v1beta1.OAuth2Provider.description:type_name -> google.protobuf.StringValue
	64,  // 64: indykite.config.v1beta1.OAuth2Provider.create_time:type_name -> google.protobuf.Timestamp
	64,  // 65: indykite.config.v1beta1.OAuth2Provider.update_time:type_name -> google.protobuf.Timestamp
	64,  // 66: indykite.config.v1beta1.OAuth2Provider.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 67: indykite.config.v1beta1.OAuth2Provider.delete_time:type_name -> google.protobuf.Timestamp
	26,  // 68: indykite.config.v1beta1.OAuth2Provider.config:type_name -> indykite.config.v1beta1.OAuth2ProviderConfig
	2,   // 69: indykite.config.v1beta1.OAuth2ProviderConfig.grant_types:type_name -> indykite.config.v1beta1.GrantType
	3,   // 70: indykite.config.v1beta1.OAuth2ProviderConfig.response_types:type_name -> indykite.config.v1beta1.ResponseType
	5,   // 71: indykite.config.v1beta1.OAuth2ProviderConfig.token_endpoint_auth_method:type_name -> indykite.config.v1beta1.TokenEndpointAuthMethod
	49,  // 72: indykite.config.v1beta1.OAuth2ProviderConfig.front_channel_login_uri:type_name -> indykite.config.v1beta1.OAuth2ProviderConfig.FrontChannelLoginUriEntry
	50,  // 73: indykite.config.v1beta1.OAuth2ProviderConfig.front_channel_consent_uri:type_name -> indykite.config.v1beta1.OAuth2ProviderConfig.FrontChannelConsentUriEntry
	51,  // 74: indykite.config.v1beta1.WebAuthnProviderConfig.relaying_parties:type_name -> indykite.config.v1beta1.WebAuthnProviderConfig.RelayingPartiesEntry
	6,   // 75: indykite.config.v1beta1.WebAuthnProviderConfig.attestation_preference:type_name -> indykite.config.v1beta1.ConveyancePreference
	7,   // 76: indykite.config.v1beta1.WebAuthnProviderConfig.authenticator_attachment:type_name -> indykite.config.v1beta1.AuthenticatorAttachment
	8,   // 77: indykite.config.v1beta1.WebAuthnProviderConfig.user_verification:type_name -> indykite.config.v1beta1.UserVerificationRequirement
	65,  // 78: indykite.config.v1beta1.WebAuthnProviderConfig.registration_timeout:type_name -> google.protobuf.Duration
	65,  // 79: indykite.config.v1beta1.WebAuthnProviderConfig.authentication_timeout:type_name -> google.protobuf.Duration
	10,  // 80: indykite.config.v1beta1.AuthFlowConfig.source_format:type_name -> indykite.config.v1beta1.AuthFlowConfig.Format
	66,  // 81: indykite.config.v1beta1.AuthFlowConfig.default:type_name -> google.protobuf.BoolValue
	67,  // 82: indykite.config.v1beta1.AuthFlowConfig.proto:type_name -> google.protobuf.Any
	34,  // 83: indykite.config.v1beta1.EmailServiceConfig.default_from_address:type_name -> indykite.config.v1beta1.Email
	66,  // 84: indykite.config.v1beta1.EmailServiceConfig.default:type_name -> google.protobuf.BoolValue
	35,  // 85: indykite.config.v1beta1.EmailServiceConfig.sendgrid:type_name -> indykite.config.v1beta1.SendGridProviderConfig
	36,  // 86: indykite.config.v1beta1.EmailServiceConfig.mailjet:type_name -> indykite.config.v1beta1.MailJetProviderConfig
	37,  // 87: indykite.config.v1beta1.EmailServiceConfig.mailgun:type_name -> indykite.config.v1beta1.MailgunProviderConfig
	38,  // 88: indykite.config.v1beta1.EmailServiceConfig.amazon:type_name -> indykite.config.v1beta1.AmazonSESProviderConfig
	39,  // 89: indykite.config.v1beta1.EmailServiceConfig.authentication_message:type_name -> indykite.config.v1beta1.EmailDefinition
	39,  // 90: indykite.config.v1beta1.EmailServiceConfig.invitation_message:type_name -> indykite.config.v1beta1.EmailDefinition
	39,  // 91: indykite.config.v1beta1.EmailServiceConfig.reset_password_message:type_name -> indykite.config.v1beta1.EmailDefinition
	39,  // 92: indykite.config.v1beta1.EmailServiceConfig.verification_message:type_name -> indykite.config.v1beta1.EmailDefinition
	39,  // 93: indykite.config.v1beta1.EmailServiceConfig.one_time_password_message:type_name -> indykite.config.v1beta1.EmailDefinition
	63,  // 94: indykite.config.v1beta1.SendGridProviderConfig.ip_pool_name:type_name -> google.protobuf.StringValue
	63,  // 95: indykite.config.v1beta1.SendGridProviderConfig.host:type_name -> google.protobuf.StringValue
	52,  // 96: indykite.config.v1beta1.MailJetProviderConfig.url_tags:type_name -> indykite.config.v1beta1.MailJetProviderConfig.UrlTagsEntry
	63,  // 97: indykite.config.v1beta1.MailJetProviderConfig.custom_campaign:type_name -> google.protobuf.StringValue
	34,  // 98: indykite.config.v1beta1.MailgunProviderConfig.default_from_address:type_name -> indykite.config.v1beta1.Email
	34,  // 99: indykite.config.v1beta1.AmazonSESProviderConfig.default_from_address:type_name -> indykite.config.v1beta1.Email
	40,  // 100: indykite.config.v1beta1.EmailDefinition.template:type_name -> indykite.config.v1beta1.EmailTemplate
	42,  // 101: indykite.config.v1beta1.EmailDefinition.message:type_name -> indykite.config.v1beta1.EmailMessage
	63,  // 102: indykite.config.v1beta1.EmailTemplate.template_version:type_name -> google.protobuf.StringValue
	34,  // 103: indykite.config.v1beta1.EmailTemplate.from:type_name -> indykite.config.v1beta1.Email
	34,  // 104: indykite.config.v1beta1.EmailTemplate.reply_to:type_name -> indykite.config.v1beta1.Email
	34,  // 105: indykite.config.v1beta1.EmailTemplate.to:type_name -> indykite.config.v1beta1.Email
	34,  // 106: indykite.config.v1beta1.EmailTemplate.cc:type_name -> indykite.config.v1beta1.Email
	34,  // 107: indykite.config.v1beta1.EmailTemplate.bcc:type_name -> indykite.config.v1beta1.Email
	53,  // 108: indykite.config.v1beta1.EmailTemplate.headers:type_name -> indykite.config.v1beta1.EmailTemplate.HeadersEntry
	54,  // 109: indykite.config.v1beta1.EmailTemplate.custom_args:type_name -> indykite.config.v1beta1.EmailTemplate.CustomArgsEntry
	55,  // 110: indykite.config.v1beta1.EmailTemplate.dynamic_template_values:type_name -> indykite.config.v1beta1.EmailTemplate.DynamicTemplateValuesEntry
	41,  // 111: indykite.config.v1beta1.EmailTemplate.attachments:type_name -> indykite.config.v1beta1.EmailAttachment
	63,  // 112: indykite.config.v1beta1.EmailTemplate.event_payload:type_name -> google.protobuf.StringValue
	63,  // 113: indykite.config.v1beta1.EmailAttachment.content_id:type_name -> google.protobuf.StringValue
	34,  // 114: indykite.config.v1beta1.EmailMessage.from:type_name -> indykite.config.v1beta1.Email
	34,  // 115: indykite.config.v1beta1.EmailMessage.reply_to:type_name -> indykite.config.v1beta1.Email
	34,  // 116: indykite.config.v1beta1.EmailMessage.to:type_name -> indykite.config.v1beta1.Email
	34,  // 117: indykite.config.v1beta1.EmailMessage.cc:type_name -> indykite.config.v1beta1.Email
	34,  // 118: indykite.config.v1beta1.EmailMessage.bcc:type_name -> indykite.config.v1beta1.Email
	56,  // 119: indykite.config.v1beta1.EmailMessage.headers:type_name -> indykite.config.v1beta1.EmailMessage.HeadersEntry
	57,  // 120: indykite.config.v1beta1.EmailMessage.custom_args:type_name -> indykite.config.v1beta1.EmailMessage.CustomArgsEntry
	58,  // 121: indykite.config.v1beta1.EmailMessage.dynamic_template_values:type_name -> indykite.config.v1beta1.EmailMessage.DynamicTemplateValuesEntry
	41,  // 122: indykite.config.v1beta1.EmailMessage.attachments:type_name -> indykite.config.v1beta1.EmailAttachment
	63,  // 123: indykite.config.v1beta1.EmailMessage.event_payload:type_name -> google.protobuf.StringValue
	44,  // 124: indykite.config.v1beta1.PasswordProviderConfig.username_policy:type_name -> indykite.config.v1beta1.UsernamePolicy
	45,  // 125: indykite.config.v1beta1.PasswordProviderConfig.password_policy:type_name -> indykite.config.v1beta1.PasswordPolicy
	65,  // 126: indykite.config.v1beta1.PasswordProviderConfig.fail_interval:type_name -> google.protobuf.Duration
	65,  // 127: indykite.config.v1beta1.PasswordProviderConfig.minimum_password_lifetime:type_name -> google.protobuf.Duration
	65,  // 128: indykite.config.v1beta1.PasswordProviderConfig.maximum_password_lifetime:type_name -> google.protobuf.Duration
	65,  // 129: indykite.config.v1beta1.PasswordProviderConfig.lockout_time:type_name -> google.protobuf.Duration
	9,   // 130: indykite.config.v1beta1.PasswordPolicy.template:type_name -> indykite.config.v1beta1.PasswordPolicyTemplate
	68,  // 131: indykite.config.v1beta1.PasswordPolicy.minimum_length:type_name -> google.protobuf.Int64Value
	59,  // 132: indykite.config.v1beta1.IngestMappingConfig.upsert:type_name -> indykite.config.v1beta1.IngestMappingConfig.UpsertData
	69,  // 133: indykite.config.v1beta1.AuthorizationPolicyConfig.policy:type_name -> indykite.knowledge_graph.v1beta1.Policy
	70,  // 134: indykite.config.v1beta1.KnowledgeGraphSchemaConfig.schema:type_name -> indykite.knowledge_graph.v1beta1.Schema
	71,  // 135: indykite.config.v1beta1.EmailTemplate.DynamicTemplateValuesEntry.value:type_name -> indykite.objects.v1beta1.Value
	71,  // 136: indykite.config.v1beta1.EmailMessage.DynamicTemplateValuesEntry.value:type_name -> indykite.objects.v1beta1.Value
	60,  // 137: indykite.config.v1beta1.IngestMappingConfig.UpsertData.entities:type_name -> indykite.config.v1beta1.IngestMappingConfig.Entity
	61,  // 138: indykite.config.v1beta1.IngestMappingConfig.Entity.external_id:type_name -> indykite.config.v1beta1.IngestMappingConfig.Property
	61,  // 139: indykite.config.v1beta1.IngestMappingConfig.Entity.properties:type_name -> indykite.config.v1beta1.IngestMappingConfig.Property
	62,  // 140: indykite.config.v1beta1.IngestMappingConfig.Entity.relationships:type_name -> indykite.config.v1beta1.IngestMappingConfig.Relationship
	11,  // 141: indykite.config.v1beta1.IngestMappingConfig.Relationship.direction:type_name -> indykite.config.v1beta1.IngestMappingConfig.Direction
	142, // [142:142] is the sub-list for method output_type
	142, // [142:142] is the sub-list for method input_type
	142, // [142:142] is the sub-list for extension type_name
	142, // [142:142] is the sub-list for extension extendee
	0,   // [0:142] is the sub-list for field type_name
}

func init() { file_indykite_config_v1beta1_model_proto_init() }
func file_indykite_config_v1beta1_model_proto_init() {
	if File_indykite_config_v1beta1_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indykite_config_v1beta1_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueNameIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationAgentCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccountCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2ClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2ApplicationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2ProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAuthnProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAuthnSiteDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthFlowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenteqProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAFRProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMSServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGridProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailJetProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailgunProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmazonSESProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernamePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestMappingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnowledgeGraphSchemaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestMappingConfig_UpsertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestMappingConfig_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestMappingConfig_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestMappingConfig_Relationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_config_v1beta1_model_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ConfigNode_AuthFlowConfig)(nil),
		(*ConfigNode_EmailServiceConfig)(nil),
		(*ConfigNode_Oauth2ClientConfig)(nil),
		(*ConfigNode_PasswordProviderConfig)(nil),
		(*ConfigNode_WebauthnProviderConfig)(nil),
		(*ConfigNode_AuthenteqProviderConfig)(nil),
		(*ConfigNode_SafrProviderConfig)(nil),
		(*ConfigNode_IngestMappingConfig)(nil),
		(*ConfigNode_AuthorizationPolicyConfig)(nil),
		(*ConfigNode_KnowledgeGraphSchemaConfig)(nil),
	}
	file_indykite_config_v1beta1_model_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*EmailServiceConfig_Sendgrid)(nil),
		(*EmailServiceConfig_Mailjet)(nil),
		(*EmailServiceConfig_Mailgun)(nil),
		(*EmailServiceConfig_Amazon)(nil),
	}
	file_indykite_config_v1beta1_model_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*EmailDefinition_Template)(nil),
		(*EmailDefinition_Message)(nil),
	}
	file_indykite_config_v1beta1_model_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*IngestMappingConfig_Upsert)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_config_v1beta1_model_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_config_v1beta1_model_proto_goTypes,
		DependencyIndexes: file_indykite_config_v1beta1_model_proto_depIdxs,
		EnumInfos:         file_indykite_config_v1beta1_model_proto_enumTypes,
		MessageInfos:      file_indykite_config_v1beta1_model_proto_msgTypes,
	}.Build()
	File_indykite_config_v1beta1_model_proto = out.File
	file_indykite_config_v1beta1_model_proto_rawDesc = nil
	file_indykite_config_v1beta1_model_proto_goTypes = nil
	file_indykite_config_v1beta1_model_proto_depIdxs = nil
}
