// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: indykite/config/v1beta1/model.proto

package configv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

	v1beta1 "github.com/indykite/indykite-sdk-go/gen/indykite/objects/v1beta1"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppSpaceIKGStatus int32

const (
	AppSpaceIKGStatus_APP_SPACE_IKG_STATUS_STATUS_INVALID AppSpaceIKGStatus = 0
	AppSpaceIKGStatus_APP_SPACE_IKG_STATUS_STATUS_PENDING AppSpaceIKGStatus = 1
	AppSpaceIKGStatus_APP_SPACE_IKG_STATUS_STATUS_ACTIVE  AppSpaceIKGStatus = 2
	AppSpaceIKGStatus_APP_SPACE_IKG_STATUS_STATUS_FAILED  AppSpaceIKGStatus = 3
	AppSpaceIKGStatus_APP_SPACE_IKG_STATUS_STATUS_PAUSED  AppSpaceIKGStatus = 4
)

// Enum value maps for AppSpaceIKGStatus.
var (
	AppSpaceIKGStatus_name = map[int32]string{
		0: "APP_SPACE_IKG_STATUS_STATUS_INVALID",
		1: "APP_SPACE_IKG_STATUS_STATUS_PENDING",
		2: "APP_SPACE_IKG_STATUS_STATUS_ACTIVE",
		3: "APP_SPACE_IKG_STATUS_STATUS_FAILED",
		4: "APP_SPACE_IKG_STATUS_STATUS_PAUSED",
	}
	AppSpaceIKGStatus_value = map[string]int32{
		"APP_SPACE_IKG_STATUS_STATUS_INVALID": 0,
		"APP_SPACE_IKG_STATUS_STATUS_PENDING": 1,
		"APP_SPACE_IKG_STATUS_STATUS_ACTIVE":  2,
		"APP_SPACE_IKG_STATUS_STATUS_FAILED":  3,
		"APP_SPACE_IKG_STATUS_STATUS_PAUSED":  4,
	}
)

func (x AppSpaceIKGStatus) Enum() *AppSpaceIKGStatus {
	p := new(AppSpaceIKGStatus)
	*p = x
	return p
}

func (x AppSpaceIKGStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppSpaceIKGStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[0].Descriptor()
}

func (AppSpaceIKGStatus) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[0]
}

func (x AppSpaceIKGStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppSpaceIKGStatus.Descriptor instead.
func (AppSpaceIKGStatus) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{0}
}

// ProviderType is a list of supported OAuth2 providers.
type ProviderType int32

const (
	ProviderType_PROVIDER_TYPE_INVALID               ProviderType = 0
	ProviderType_PROVIDER_TYPE_AMAZON_COM            ProviderType = 1
	ProviderType_PROVIDER_TYPE_AMAZONCOGNITO_COM     ProviderType = 34
	ProviderType_PROVIDER_TYPE_APPLE_COM             ProviderType = 41
	ProviderType_PROVIDER_TYPE_AUTHENTEQ_COM         ProviderType = 33
	ProviderType_PROVIDER_TYPE_BANKID_COM            ProviderType = 38
	ProviderType_PROVIDER_TYPE_BANKID_NO             ProviderType = 37
	ProviderType_PROVIDER_TYPE_BITBUCKET             ProviderType = 2
	ProviderType_PROVIDER_TYPE_CERN_CH               ProviderType = 3
	ProviderType_PROVIDER_TYPE_CUSTOM                ProviderType = 39
	ProviderType_PROVIDER_TYPE_FACEBOOK_COM          ProviderType = 4
	ProviderType_PROVIDER_TYPE_FITBIT_COM            ProviderType = 5
	ProviderType_PROVIDER_TYPE_FOURSQUARE_COM        ProviderType = 6
	ProviderType_PROVIDER_TYPE_GITHUB_COM            ProviderType = 7
	ProviderType_PROVIDER_TYPE_GITLAB_COM            ProviderType = 8
	ProviderType_PROVIDER_TYPE_GOOGLE_COM            ProviderType = 9
	ProviderType_PROVIDER_TYPE_HEROKU_COM            ProviderType = 10
	ProviderType_PROVIDER_TYPE_HIPCHAT_COM           ProviderType = 11
	ProviderType_PROVIDER_TYPE_INDYKITE_ID           ProviderType = 35
	ProviderType_PROVIDER_TYPE_INDYKITE_ME           ProviderType = 36
	ProviderType_PROVIDER_TYPE_INSTAGRAM_COM         ProviderType = 12
	ProviderType_PROVIDER_TYPE_KAKAO_COM             ProviderType = 13
	ProviderType_PROVIDER_TYPE_LINKEDIN_COM          ProviderType = 14
	ProviderType_PROVIDER_TYPE_MAILCHIMP_COM         ProviderType = 15
	ProviderType_PROVIDER_TYPE_MAIL_RU               ProviderType = 16
	ProviderType_PROVIDER_TYPE_MEDIAMATH_COM         ProviderType = 17
	ProviderType_PROVIDER_TYPE_SANDBOX_MEDIAMATH_COM ProviderType = 18
	ProviderType_PROVIDER_TYPE_LIVE_COM              ProviderType = 32
	ProviderType_PROVIDER_TYPE_MICROSOFT_COM         ProviderType = 19
	ProviderType_PROVIDER_TYPE_HEALTH_NOKIA_COM      ProviderType = 20
	ProviderType_PROVIDER_TYPE_ODNOKLASSNIKI_RU      ProviderType = 21
	ProviderType_PROVIDER_TYPE_PAYPAL_COM            ProviderType = 22
	ProviderType_PROVIDER_TYPE_SANDBOX_PAYPAL_COM    ProviderType = 23
	ProviderType_PROVIDER_TYPE_SLACK_COM             ProviderType = 24
	ProviderType_PROVIDER_TYPE_SPOTIFY_COM           ProviderType = 25
	ProviderType_PROVIDER_TYPE_STACKOVERFLOW_COM     ProviderType = 26
	ProviderType_PROVIDER_TYPE_TWITCH_TV             ProviderType = 27
	ProviderType_PROVIDER_TYPE_UBER_COM              ProviderType = 28
	ProviderType_PROVIDER_TYPE_VIPPS_NO              ProviderType = 40
	ProviderType_PROVIDER_TYPE_VK_COM                ProviderType = 29
	ProviderType_PROVIDER_TYPE_YAHOO_COM             ProviderType = 30
	ProviderType_PROVIDER_TYPE_YANDEX_COM            ProviderType = 31
)

// Enum value maps for ProviderType.
var (
	ProviderType_name = map[int32]string{
		0:  "PROVIDER_TYPE_INVALID",
		1:  "PROVIDER_TYPE_AMAZON_COM",
		34: "PROVIDER_TYPE_AMAZONCOGNITO_COM",
		41: "PROVIDER_TYPE_APPLE_COM",
		33: "PROVIDER_TYPE_AUTHENTEQ_COM",
		38: "PROVIDER_TYPE_BANKID_COM",
		37: "PROVIDER_TYPE_BANKID_NO",
		2:  "PROVIDER_TYPE_BITBUCKET",
		3:  "PROVIDER_TYPE_CERN_CH",
		39: "PROVIDER_TYPE_CUSTOM",
		4:  "PROVIDER_TYPE_FACEBOOK_COM",
		5:  "PROVIDER_TYPE_FITBIT_COM",
		6:  "PROVIDER_TYPE_FOURSQUARE_COM",
		7:  "PROVIDER_TYPE_GITHUB_COM",
		8:  "PROVIDER_TYPE_GITLAB_COM",
		9:  "PROVIDER_TYPE_GOOGLE_COM",
		10: "PROVIDER_TYPE_HEROKU_COM",
		11: "PROVIDER_TYPE_HIPCHAT_COM",
		35: "PROVIDER_TYPE_INDYKITE_ID",
		36: "PROVIDER_TYPE_INDYKITE_ME",
		12: "PROVIDER_TYPE_INSTAGRAM_COM",
		13: "PROVIDER_TYPE_KAKAO_COM",
		14: "PROVIDER_TYPE_LINKEDIN_COM",
		15: "PROVIDER_TYPE_MAILCHIMP_COM",
		16: "PROVIDER_TYPE_MAIL_RU",
		17: "PROVIDER_TYPE_MEDIAMATH_COM",
		18: "PROVIDER_TYPE_SANDBOX_MEDIAMATH_COM",
		32: "PROVIDER_TYPE_LIVE_COM",
		19: "PROVIDER_TYPE_MICROSOFT_COM",
		20: "PROVIDER_TYPE_HEALTH_NOKIA_COM",
		21: "PROVIDER_TYPE_ODNOKLASSNIKI_RU",
		22: "PROVIDER_TYPE_PAYPAL_COM",
		23: "PROVIDER_TYPE_SANDBOX_PAYPAL_COM",
		24: "PROVIDER_TYPE_SLACK_COM",
		25: "PROVIDER_TYPE_SPOTIFY_COM",
		26: "PROVIDER_TYPE_STACKOVERFLOW_COM",
		27: "PROVIDER_TYPE_TWITCH_TV",
		28: "PROVIDER_TYPE_UBER_COM",
		40: "PROVIDER_TYPE_VIPPS_NO",
		29: "PROVIDER_TYPE_VK_COM",
		30: "PROVIDER_TYPE_YAHOO_COM",
		31: "PROVIDER_TYPE_YANDEX_COM",
	}
	ProviderType_value = map[string]int32{
		"PROVIDER_TYPE_INVALID":               0,
		"PROVIDER_TYPE_AMAZON_COM":            1,
		"PROVIDER_TYPE_AMAZONCOGNITO_COM":     34,
		"PROVIDER_TYPE_APPLE_COM":             41,
		"PROVIDER_TYPE_AUTHENTEQ_COM":         33,
		"PROVIDER_TYPE_BANKID_COM":            38,
		"PROVIDER_TYPE_BANKID_NO":             37,
		"PROVIDER_TYPE_BITBUCKET":             2,
		"PROVIDER_TYPE_CERN_CH":               3,
		"PROVIDER_TYPE_CUSTOM":                39,
		"PROVIDER_TYPE_FACEBOOK_COM":          4,
		"PROVIDER_TYPE_FITBIT_COM":            5,
		"PROVIDER_TYPE_FOURSQUARE_COM":        6,
		"PROVIDER_TYPE_GITHUB_COM":            7,
		"PROVIDER_TYPE_GITLAB_COM":            8,
		"PROVIDER_TYPE_GOOGLE_COM":            9,
		"PROVIDER_TYPE_HEROKU_COM":            10,
		"PROVIDER_TYPE_HIPCHAT_COM":           11,
		"PROVIDER_TYPE_INDYKITE_ID":           35,
		"PROVIDER_TYPE_INDYKITE_ME":           36,
		"PROVIDER_TYPE_INSTAGRAM_COM":         12,
		"PROVIDER_TYPE_KAKAO_COM":             13,
		"PROVIDER_TYPE_LINKEDIN_COM":          14,
		"PROVIDER_TYPE_MAILCHIMP_COM":         15,
		"PROVIDER_TYPE_MAIL_RU":               16,
		"PROVIDER_TYPE_MEDIAMATH_COM":         17,
		"PROVIDER_TYPE_SANDBOX_MEDIAMATH_COM": 18,
		"PROVIDER_TYPE_LIVE_COM":              32,
		"PROVIDER_TYPE_MICROSOFT_COM":         19,
		"PROVIDER_TYPE_HEALTH_NOKIA_COM":      20,
		"PROVIDER_TYPE_ODNOKLASSNIKI_RU":      21,
		"PROVIDER_TYPE_PAYPAL_COM":            22,
		"PROVIDER_TYPE_SANDBOX_PAYPAL_COM":    23,
		"PROVIDER_TYPE_SLACK_COM":             24,
		"PROVIDER_TYPE_SPOTIFY_COM":           25,
		"PROVIDER_TYPE_STACKOVERFLOW_COM":     26,
		"PROVIDER_TYPE_TWITCH_TV":             27,
		"PROVIDER_TYPE_UBER_COM":              28,
		"PROVIDER_TYPE_VIPPS_NO":              40,
		"PROVIDER_TYPE_VK_COM":                29,
		"PROVIDER_TYPE_YAHOO_COM":             30,
		"PROVIDER_TYPE_YANDEX_COM":            31,
	}
)

func (x ProviderType) Enum() *ProviderType {
	p := new(ProviderType)
	*p = x
	return p
}

func (x ProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[1].Descriptor()
}

func (ProviderType) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[1]
}

func (x ProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderType.Descriptor instead.
func (ProviderType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{1}
}

// AuthStyle represents how requests for tokens are authenticated
// to the server.
type AuthStyle int32

const (
	AuthStyle_AUTH_STYLE_INVALID AuthStyle = 0
	// AuthStyleAutoDetect means to auto-detect which authentication
	// style the provider wants by trying both ways and caching
	// the successful way for the future.
	AuthStyle_AUTH_STYLE_AUTO_DETECT AuthStyle = 1
	// AuthStyleInParams sends the "client_id" and "client_secret"
	// in the POST body as application/x-www-form-urlencoded parameters.
	AuthStyle_AUTH_STYLE_IN_PARAMS AuthStyle = 2
	// AuthStyleInHeader sends the client_id and client_password
	// using HTTP Basic Authorization. This is an optional style
	// described in the OAuth2 RFC 6749 section 2.3.1.
	AuthStyle_AUTH_STYLE_IN_HEADER AuthStyle = 3
)

// Enum value maps for AuthStyle.
var (
	AuthStyle_name = map[int32]string{
		0: "AUTH_STYLE_INVALID",
		1: "AUTH_STYLE_AUTO_DETECT",
		2: "AUTH_STYLE_IN_PARAMS",
		3: "AUTH_STYLE_IN_HEADER",
	}
	AuthStyle_value = map[string]int32{
		"AUTH_STYLE_INVALID":     0,
		"AUTH_STYLE_AUTO_DETECT": 1,
		"AUTH_STYLE_IN_PARAMS":   2,
		"AUTH_STYLE_IN_HEADER":   3,
	}
)

func (x AuthStyle) Enum() *AuthStyle {
	p := new(AuthStyle)
	*p = x
	return p
}

func (x AuthStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[2].Descriptor()
}

func (AuthStyle) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[2]
}

func (x AuthStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthStyle.Descriptor instead.
func (AuthStyle) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{2}
}

type GrantType int32

const (
	GrantType_GRANT_TYPE_INVALID GrantType = 0
	// https://tools.ietf.org/html/rfc6749#section-4.1
	GrantType_GRANT_TYPE_AUTHORIZATION_CODE GrantType = 1
	// https://tools.ietf.org/html/rfc6749#section-4.2
	GrantType_GRANT_TYPE_IMPLICIT GrantType = 2
	// https://tools.ietf.org/html/rfc6749#section-4.3
	GrantType_GRANT_TYPE_PASSWORD GrantType = 3
	// https://tools.ietf.org/html/rfc6749#section-4.4
	GrantType_GRANT_TYPE_CLIENT_CREDENTIALS GrantType = 4
	// https://tools.ietf.org/html/rfc6749#section-6
	GrantType_GRANT_TYPE_REFRESH_TOKEN GrantType = 5
)

// Enum value maps for GrantType.
var (
	GrantType_name = map[int32]string{
		0: "GRANT_TYPE_INVALID",
		1: "GRANT_TYPE_AUTHORIZATION_CODE",
		2: "GRANT_TYPE_IMPLICIT",
		3: "GRANT_TYPE_PASSWORD",
		4: "GRANT_TYPE_CLIENT_CREDENTIALS",
		5: "GRANT_TYPE_REFRESH_TOKEN",
	}
	GrantType_value = map[string]int32{
		"GRANT_TYPE_INVALID":            0,
		"GRANT_TYPE_AUTHORIZATION_CODE": 1,
		"GRANT_TYPE_IMPLICIT":           2,
		"GRANT_TYPE_PASSWORD":           3,
		"GRANT_TYPE_CLIENT_CREDENTIALS": 4,
		"GRANT_TYPE_REFRESH_TOKEN":      5,
	}
)

func (x GrantType) Enum() *GrantType {
	p := new(GrantType)
	*p = x
	return p
}

func (x GrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[3].Descriptor()
}

func (GrantType) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[3]
}

func (x GrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantType.Descriptor instead.
func (GrantType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{3}
}

type ResponseType int32

const (
	ResponseType_RESPONSE_TYPE_INVALID  ResponseType = 0
	ResponseType_RESPONSE_TYPE_TOKEN    ResponseType = 1
	ResponseType_RESPONSE_TYPE_CODE     ResponseType = 2
	ResponseType_RESPONSE_TYPE_ID_TOKEN ResponseType = 3
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "RESPONSE_TYPE_INVALID",
		1: "RESPONSE_TYPE_TOKEN",
		2: "RESPONSE_TYPE_CODE",
		3: "RESPONSE_TYPE_ID_TOKEN",
	}
	ResponseType_value = map[string]int32{
		"RESPONSE_TYPE_INVALID":  0,
		"RESPONSE_TYPE_TOKEN":    1,
		"RESPONSE_TYPE_CODE":     2,
		"RESPONSE_TYPE_ID_TOKEN": 3,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[4].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[4]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{4}
}

type ClientSubjectType int32

const (
	ClientSubjectType_CLIENT_SUBJECT_TYPE_INVALID  ClientSubjectType = 0
	ClientSubjectType_CLIENT_SUBJECT_TYPE_PUBLIC   ClientSubjectType = 1
	ClientSubjectType_CLIENT_SUBJECT_TYPE_PAIRWISE ClientSubjectType = 2
)

// Enum value maps for ClientSubjectType.
var (
	ClientSubjectType_name = map[int32]string{
		0: "CLIENT_SUBJECT_TYPE_INVALID",
		1: "CLIENT_SUBJECT_TYPE_PUBLIC",
		2: "CLIENT_SUBJECT_TYPE_PAIRWISE",
	}
	ClientSubjectType_value = map[string]int32{
		"CLIENT_SUBJECT_TYPE_INVALID":  0,
		"CLIENT_SUBJECT_TYPE_PUBLIC":   1,
		"CLIENT_SUBJECT_TYPE_PAIRWISE": 2,
	}
)

func (x ClientSubjectType) Enum() *ClientSubjectType {
	p := new(ClientSubjectType)
	*p = x
	return p
}

func (x ClientSubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientSubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[5].Descriptor()
}

func (ClientSubjectType) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[5]
}

func (x ClientSubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientSubjectType.Descriptor instead.
func (ClientSubjectType) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{5}
}

type TokenEndpointAuthMethod int32

const (
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_INVALID             TokenEndpointAuthMethod = 0
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC TokenEndpointAuthMethod = 1
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST  TokenEndpointAuthMethod = 2
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT     TokenEndpointAuthMethod = 3
	TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_NONE                TokenEndpointAuthMethod = 4
)

// Enum value maps for TokenEndpointAuthMethod.
var (
	TokenEndpointAuthMethod_name = map[int32]string{
		0: "TOKEN_ENDPOINT_AUTH_METHOD_INVALID",
		1: "TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC",
		2: "TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST",
		3: "TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT",
		4: "TOKEN_ENDPOINT_AUTH_METHOD_NONE",
	}
	TokenEndpointAuthMethod_value = map[string]int32{
		"TOKEN_ENDPOINT_AUTH_METHOD_INVALID":             0,
		"TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC": 1,
		"TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST":  2,
		"TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT":     3,
		"TOKEN_ENDPOINT_AUTH_METHOD_NONE":                4,
	}
)

func (x TokenEndpointAuthMethod) Enum() *TokenEndpointAuthMethod {
	p := new(TokenEndpointAuthMethod)
	*p = x
	return p
}

func (x TokenEndpointAuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenEndpointAuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[6].Descriptor()
}

func (TokenEndpointAuthMethod) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[6]
}

func (x TokenEndpointAuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenEndpointAuthMethod.Descriptor instead.
func (TokenEndpointAuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{6}
}

type ConveyancePreference int32

const (
	ConveyancePreference_CONVEYANCE_PREFERENCE_INVALID  ConveyancePreference = 0
	ConveyancePreference_CONVEYANCE_PREFERENCE_NONE     ConveyancePreference = 1
	ConveyancePreference_CONVEYANCE_PREFERENCE_INDIRECT ConveyancePreference = 2
	ConveyancePreference_CONVEYANCE_PREFERENCE_DIRECT   ConveyancePreference = 3
)

// Enum value maps for ConveyancePreference.
var (
	ConveyancePreference_name = map[int32]string{
		0: "CONVEYANCE_PREFERENCE_INVALID",
		1: "CONVEYANCE_PREFERENCE_NONE",
		2: "CONVEYANCE_PREFERENCE_INDIRECT",
		3: "CONVEYANCE_PREFERENCE_DIRECT",
	}
	ConveyancePreference_value = map[string]int32{
		"CONVEYANCE_PREFERENCE_INVALID":  0,
		"CONVEYANCE_PREFERENCE_NONE":     1,
		"CONVEYANCE_PREFERENCE_INDIRECT": 2,
		"CONVEYANCE_PREFERENCE_DIRECT":   3,
	}
)

func (x ConveyancePreference) Enum() *ConveyancePreference {
	p := new(ConveyancePreference)
	*p = x
	return p
}

func (x ConveyancePreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConveyancePreference) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[7].Descriptor()
}

func (ConveyancePreference) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[7]
}

func (x ConveyancePreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConveyancePreference.Descriptor instead.
func (ConveyancePreference) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{7}
}

type AuthenticatorAttachment int32

const (
	AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_INVALID        AuthenticatorAttachment = 0
	AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_DEFAULT        AuthenticatorAttachment = 1
	AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_PLATFORM       AuthenticatorAttachment = 2
	AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM AuthenticatorAttachment = 3
)

// Enum value maps for AuthenticatorAttachment.
var (
	AuthenticatorAttachment_name = map[int32]string{
		0: "AUTHENTICATOR_ATTACHMENT_INVALID",
		1: "AUTHENTICATOR_ATTACHMENT_DEFAULT",
		2: "AUTHENTICATOR_ATTACHMENT_PLATFORM",
		3: "AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM",
	}
	AuthenticatorAttachment_value = map[string]int32{
		"AUTHENTICATOR_ATTACHMENT_INVALID":        0,
		"AUTHENTICATOR_ATTACHMENT_DEFAULT":        1,
		"AUTHENTICATOR_ATTACHMENT_PLATFORM":       2,
		"AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM": 3,
	}
)

func (x AuthenticatorAttachment) Enum() *AuthenticatorAttachment {
	p := new(AuthenticatorAttachment)
	*p = x
	return p
}

func (x AuthenticatorAttachment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticatorAttachment) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[8].Descriptor()
}

func (AuthenticatorAttachment) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[8]
}

func (x AuthenticatorAttachment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticatorAttachment.Descriptor instead.
func (AuthenticatorAttachment) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{8}
}

type UserVerificationRequirement int32

const (
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_INVALID     UserVerificationRequirement = 0
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_PREFERRED   UserVerificationRequirement = 1
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_REQUIRED    UserVerificationRequirement = 2
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_DISCOURAGED UserVerificationRequirement = 3
)

// Enum value maps for UserVerificationRequirement.
var (
	UserVerificationRequirement_name = map[int32]string{
		0: "USER_VERIFICATION_REQUIREMENT_INVALID",
		1: "USER_VERIFICATION_REQUIREMENT_PREFERRED",
		2: "USER_VERIFICATION_REQUIREMENT_REQUIRED",
		3: "USER_VERIFICATION_REQUIREMENT_DISCOURAGED",
	}
	UserVerificationRequirement_value = map[string]int32{
		"USER_VERIFICATION_REQUIREMENT_INVALID":     0,
		"USER_VERIFICATION_REQUIREMENT_PREFERRED":   1,
		"USER_VERIFICATION_REQUIREMENT_REQUIRED":    2,
		"USER_VERIFICATION_REQUIREMENT_DISCOURAGED": 3,
	}
)

func (x UserVerificationRequirement) Enum() *UserVerificationRequirement {
	p := new(UserVerificationRequirement)
	*p = x
	return p
}

func (x UserVerificationRequirement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserVerificationRequirement) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[9].Descriptor()
}

func (UserVerificationRequirement) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[9]
}

func (x UserVerificationRequirement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserVerificationRequirement.Descriptor instead.
func (UserVerificationRequirement) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{9}
}

type AuthorizationPolicyConfig_Status int32

const (
	AuthorizationPolicyConfig_STATUS_INVALID  AuthorizationPolicyConfig_Status = 0
	AuthorizationPolicyConfig_STATUS_ACTIVE   AuthorizationPolicyConfig_Status = 1
	AuthorizationPolicyConfig_STATUS_INACTIVE AuthorizationPolicyConfig_Status = 2
	AuthorizationPolicyConfig_STATUS_DRAFT    AuthorizationPolicyConfig_Status = 3
)

// Enum value maps for AuthorizationPolicyConfig_Status.
var (
	AuthorizationPolicyConfig_Status_name = map[int32]string{
		0: "STATUS_INVALID",
		1: "STATUS_ACTIVE",
		2: "STATUS_INACTIVE",
		3: "STATUS_DRAFT",
	}
	AuthorizationPolicyConfig_Status_value = map[string]int32{
		"STATUS_INVALID":  0,
		"STATUS_ACTIVE":   1,
		"STATUS_INACTIVE": 2,
		"STATUS_DRAFT":    3,
	}
)

func (x AuthorizationPolicyConfig_Status) Enum() *AuthorizationPolicyConfig_Status {
	p := new(AuthorizationPolicyConfig_Status)
	*p = x
	return p
}

func (x AuthorizationPolicyConfig_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizationPolicyConfig_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_model_proto_enumTypes[10].Descriptor()
}

func (AuthorizationPolicyConfig_Status) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_model_proto_enumTypes[10]
}

func (x AuthorizationPolicyConfig_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizationPolicyConfig_Status.Descriptor instead.
func (AuthorizationPolicyConfig_Status) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{29, 0}
}

// UniqueNameIdentifier is an alternative to Globally Unique ID generated by the server.
//
// This identifier combines the Globally Unique ID of the location where to look for the name
// to find the object. It makes the object identification easier by the human readable name.
type UniqueNameIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UniqueNameIdentifier) Reset() {
	*x = UniqueNameIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueNameIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueNameIdentifier) ProtoMessage() {}

func (x *UniqueNameIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueNameIdentifier.ProtoReflect.Descriptor instead.
func (*UniqueNameIdentifier) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{0}
}

func (x *UniqueNameIdentifier) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UniqueNameIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Customer representing the Customer Node.
type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,11,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{1}
}

func (x *Customer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Customer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Customer) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Customer) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Customer) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Customer) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Customer) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Customer) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Customer) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *Customer) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Customer) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// ApplicationSpace representing the Application Space Node.
type ApplicationSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,13,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// IssuerId associated with this Application Space.
	IssuerId string `protobuf:"bytes,11,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
	// Read only. Status of the ikg db instance behind the Application Space.
	IkgStatus AppSpaceIKGStatus `protobuf:"varint,14,opt,name=ikg_status,json=ikgStatus,proto3,enum=indykite.config.v1beta1.AppSpaceIKGStatus" json:"ikg_status,omitempty"`
}

func (x *ApplicationSpace) Reset() {
	*x = ApplicationSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSpace) ProtoMessage() {}

func (x *ApplicationSpace) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSpace.ProtoReflect.Descriptor instead.
func (*ApplicationSpace) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{2}
}

func (x *ApplicationSpace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationSpace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationSpace) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationSpace) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ApplicationSpace) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApplicationSpace) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ApplicationSpace) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ApplicationSpace) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ApplicationSpace) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ApplicationSpace) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ApplicationSpace) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ApplicationSpace) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ApplicationSpace) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

func (x *ApplicationSpace) GetIkgStatus() AppSpaceIKGStatus {
	if x != nil {
		return x.IkgStatus
	}
	return AppSpaceIKGStatus_APP_SPACE_IKG_STATUS_STATUS_INVALID
}

// Tenant is a representation of an organization.
// Tenant is distinct and separate from other IndyKite tenants and has its own
// representation of objects.
type Tenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,14,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,15,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// IssuerId this object is directly or indirectly connected to.
	IssuerId string `protobuf:"bytes,12,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
	// Default is read only value indicating this instance is used by default.
	Default bool `protobuf:"varint,13,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{3}
}

func (x *Tenant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tenant) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Tenant) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Tenant) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Tenant) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Tenant) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Tenant) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Tenant) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *Tenant) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Tenant) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Tenant) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Tenant) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *Tenant) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

func (x *Tenant) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

// Application represents the customer application.
type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,13,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{4}
}

func (x *Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Application) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Application) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Application) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Application) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Application) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Application) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *Application) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Application) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Application) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Application) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

type ApplicationAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,13,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,14,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// ApplicationId this object is directly connected to.
	ApplicationId        string   `protobuf:"bytes,12,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApiAccessRestriction []string `protobuf:"bytes,15,rep,name=api_access_restriction,json=apiAccessRestriction,proto3" json:"api_access_restriction,omitempty"`
}

func (x *ApplicationAgent) Reset() {
	*x = ApplicationAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationAgent) ProtoMessage() {}

func (x *ApplicationAgent) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationAgent.ProtoReflect.Descriptor instead.
func (*ApplicationAgent) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationAgent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationAgent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationAgent) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationAgent) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ApplicationAgent) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApplicationAgent) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ApplicationAgent) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ApplicationAgent) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ApplicationAgent) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ApplicationAgent) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ApplicationAgent) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ApplicationAgent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ApplicationAgent) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ApplicationAgent) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ApplicationAgent) GetApiAccessRestriction() []string {
	if x != nil {
		return x.ApiAccessRestriction
	}
	return nil
}

type ApplicationAgentCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Kid is public key ID
	Kid string `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// ApplicationId this object is directly connected to.
	ApplicationId string `protobuf:"bytes,12,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// ApplicationAgentId this object is directly connected to.
	ApplicationAgentId string `protobuf:"bytes,9,opt,name=application_agent_id,json=applicationAgentId,proto3" json:"application_agent_id,omitempty"`
}

func (x *ApplicationAgentCredential) Reset() {
	*x = ApplicationAgentCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationAgentCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationAgentCredential) ProtoMessage() {}

func (x *ApplicationAgentCredential) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationAgentCredential.ProtoReflect.Descriptor instead.
func (*ApplicationAgentCredential) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationAgentCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationAgentCredential) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *ApplicationAgentCredential) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationAgentCredential) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApplicationAgentCredential) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ApplicationAgentCredential) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ApplicationAgentCredential) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ApplicationAgentCredential) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ApplicationAgentCredential) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ApplicationAgentCredential) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ApplicationAgentCredential) GetApplicationAgentId() string {
	if x != nil {
		return x.ApplicationAgentId
	}
	return ""
}

type ServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,13,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly connected to, might be empty if ServiceAccount is linked directly to Customer.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
}

func (x *ServiceAccount) Reset() {
	*x = ServiceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccount) ProtoMessage() {}

func (x *ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccount.ProtoReflect.Descriptor instead.
func (*ServiceAccount) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceAccount) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ServiceAccount) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ServiceAccount) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceAccount) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ServiceAccount) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ServiceAccount) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ServiceAccount) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ServiceAccount) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ServiceAccount) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ServiceAccount) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ServiceAccount) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

type ServiceAccountCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Kid is public key ID
	Kid string `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,13,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// CustomerId this object is indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// ServiceAccountId this object is directly connected to.
	ServiceAccountId string `protobuf:"bytes,12,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
}

func (x *ServiceAccountCredential) Reset() {
	*x = ServiceAccountCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccountCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccountCredential) ProtoMessage() {}

func (x *ServiceAccountCredential) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccountCredential.ProtoReflect.Descriptor instead.
func (*ServiceAccountCredential) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceAccountCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceAccountCredential) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *ServiceAccountCredential) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ServiceAccountCredential) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceAccountCredential) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ServiceAccountCredential) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ServiceAccountCredential) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ServiceAccountCredential) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ServiceAccountCredential) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ServiceAccountCredential) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

type ConfigNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,26,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,27,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is directly or indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is directly or indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// TenantId this object is directly or indirectly connected to.
	TenantId string `protobuf:"bytes,12,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Types that are assignable to Config:
	//
	//	*ConfigNode_EmailServiceConfig
	//	*ConfigNode_AuditSinkConfig
	//	*ConfigNode_Oauth2ClientConfig
	//	*ConfigNode_WebauthnProviderConfig
	//	*ConfigNode_SafrProviderConfig
	//	*ConfigNode_AuthorizationPolicyConfig
	//	*ConfigNode_ConsentConfig
	//	*ConfigNode_TokenIntrospectConfig
	Config isConfigNode_Config `protobuf_oneof:"config"`
	// Optional. If document is versioned, can be set to a specific document version
	Version int64 `protobuf:"varint,29,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConfigNode) Reset() {
	*x = ConfigNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigNode) ProtoMessage() {}

func (x *ConfigNode) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigNode.ProtoReflect.Descriptor instead.
func (*ConfigNode) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConfigNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigNode) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ConfigNode) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ConfigNode) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ConfigNode) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ConfigNode) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ConfigNode) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ConfigNode) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *ConfigNode) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *ConfigNode) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ConfigNode) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ConfigNode) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ConfigNode) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (m *ConfigNode) GetConfig() isConfigNode_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ConfigNode) GetEmailServiceConfig() *EmailServiceConfig {
	if x, ok := x.GetConfig().(*ConfigNode_EmailServiceConfig); ok {
		return x.EmailServiceConfig
	}
	return nil
}

func (x *ConfigNode) GetAuditSinkConfig() *AuditSinkConfig {
	if x, ok := x.GetConfig().(*ConfigNode_AuditSinkConfig); ok {
		return x.AuditSinkConfig
	}
	return nil
}

func (x *ConfigNode) GetOauth2ClientConfig() *OAuth2ClientConfig {
	if x, ok := x.GetConfig().(*ConfigNode_Oauth2ClientConfig); ok {
		return x.Oauth2ClientConfig
	}
	return nil
}

func (x *ConfigNode) GetWebauthnProviderConfig() *WebAuthnProviderConfig {
	if x, ok := x.GetConfig().(*ConfigNode_WebauthnProviderConfig); ok {
		return x.WebauthnProviderConfig
	}
	return nil
}

func (x *ConfigNode) GetSafrProviderConfig() *SAFRProviderConfig {
	if x, ok := x.GetConfig().(*ConfigNode_SafrProviderConfig); ok {
		return x.SafrProviderConfig
	}
	return nil
}

func (x *ConfigNode) GetAuthorizationPolicyConfig() *AuthorizationPolicyConfig {
	if x, ok := x.GetConfig().(*ConfigNode_AuthorizationPolicyConfig); ok {
		return x.AuthorizationPolicyConfig
	}
	return nil
}

func (x *ConfigNode) GetConsentConfig() *ConsentConfiguration {
	if x, ok := x.GetConfig().(*ConfigNode_ConsentConfig); ok {
		return x.ConsentConfig
	}
	return nil
}

func (x *ConfigNode) GetTokenIntrospectConfig() *TokenIntrospectConfig {
	if x, ok := x.GetConfig().(*ConfigNode_TokenIntrospectConfig); ok {
		return x.TokenIntrospectConfig
	}
	return nil
}

func (x *ConfigNode) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type isConfigNode_Config interface {
	isConfigNode_Config()
}

type ConfigNode_EmailServiceConfig struct {
	EmailServiceConfig *EmailServiceConfig `protobuf:"bytes,15,opt,name=email_service_config,json=emailServiceConfig,proto3,oneof"`
}

type ConfigNode_AuditSinkConfig struct {
	AuditSinkConfig *AuditSinkConfig `protobuf:"bytes,28,opt,name=audit_sink_config,json=auditSinkConfig,proto3,oneof"`
}

type ConfigNode_Oauth2ClientConfig struct {
	// OAuth2ClientConfig for third party OIDC clients.
	Oauth2ClientConfig *OAuth2ClientConfig `protobuf:"bytes,16,opt,name=oauth2_client_config,json=oauth2ClientConfig,proto3,oneof"`
}

type ConfigNode_WebauthnProviderConfig struct {
	WebauthnProviderConfig *WebAuthnProviderConfig `protobuf:"bytes,19,opt,name=webauthn_provider_config,json=webauthnProviderConfig,proto3,oneof"`
}

type ConfigNode_SafrProviderConfig struct {
	SafrProviderConfig *SAFRProviderConfig `protobuf:"bytes,21,opt,name=safr_provider_config,json=safrProviderConfig,proto3,oneof"`
}

type ConfigNode_AuthorizationPolicyConfig struct {
	AuthorizationPolicyConfig *AuthorizationPolicyConfig `protobuf:"bytes,23,opt,name=authorization_policy_config,json=authorizationPolicyConfig,proto3,oneof"`
}

type ConfigNode_ConsentConfig struct {
	ConsentConfig *ConsentConfiguration `protobuf:"bytes,30,opt,name=consent_config,json=consentConfig,proto3,oneof"`
}

type ConfigNode_TokenIntrospectConfig struct {
	TokenIntrospectConfig *TokenIntrospectConfig `protobuf:"bytes,31,opt,name=token_introspect_config,json=tokenIntrospectConfig,proto3,oneof"`
}

func (*ConfigNode_EmailServiceConfig) isConfigNode_Config() {}

func (*ConfigNode_AuditSinkConfig) isConfigNode_Config() {}

func (*ConfigNode_Oauth2ClientConfig) isConfigNode_Config() {}

func (*ConfigNode_WebauthnProviderConfig) isConfigNode_Config() {}

func (*ConfigNode_SafrProviderConfig) isConfigNode_Config() {}

func (*ConfigNode_AuthorizationPolicyConfig) isConfigNode_Config() {}

func (*ConfigNode_ConsentConfig) isConfigNode_Config() {}

func (*ConfigNode_TokenIntrospectConfig) isConfigNode_Config() {}

// OAuth2ClientConfig is a service specific set of parameters
type OAuth2ClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType ProviderType `protobuf:"varint,1,opt,name=provider_type,json=providerType,proto3,enum=indykite.config.v1beta1.ProviderType" json:"provider_type,omitempty"`
	ClientId     string       `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Client secret, must be provided when creating a new client config but is optional when updating.
	// If provided when updating, stored secret value will be updated with new value.
	// If not provided when updating, stored secret value will be kept.
	// When reading back client config, client secret will always be set to string empty.
	ClientSecret  string   `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	RedirectUri   []string `protobuf:"bytes,4,rep,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	DefaultScopes []string `protobuf:"bytes,17,rep,name=default_scopes,json=defaultScopes,proto3" json:"default_scopes,omitempty"`
	AllowedScopes []string `protobuf:"bytes,19,rep,name=allowed_scopes,json=allowedScopes,proto3" json:"allowed_scopes,omitempty"`
	// This is only for Github, might change to hint for UI.
	AllowSignup bool `protobuf:"varint,8,opt,name=allow_signup,json=allowSignup,proto3" json:"allow_signup,omitempty"`
	// URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier.
	// If Issuer discovery is supported (see Section 2), this value MUST be identical to the issuer value returned by WebFinger.
	// This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.
	// Example: `https://server/issuer/.well-known/openid-configuration`
	Issuer string `protobuf:"bytes,9,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// URL of the OP's OAuth 2.0 Authorization Endpoint
	// Example: `https://server/issuer/.well-known/openid-configuration`
	AuthorizationEndpoint string `protobuf:"bytes,10,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	// URL of the OP's OAuth 2.0 Token Endpoint
	TokenEndpoint string `protobuf:"bytes,11,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	DiscoveryUrl  string `protobuf:"bytes,16,opt,name=discovery_url,json=discoveryUrl,proto3" json:"discovery_url,omitempty"`
	// URL of the OP's UserInfo Endpoint
	// Example `https://server/issuer/.well-known/openid-configuration`
	UserinfoEndpoint string `protobuf:"bytes,12,opt,name=userinfo_endpoint,json=userinfoEndpoint,proto3" json:"userinfo_endpoint,omitempty"`
	// URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the
	// RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s),
	// which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available,
	// a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's
	// intended usage. Although some algorithms allow the same key to be used for both signatures and encryption,
	// doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509
	// representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
	JwksUri string `protobuf:"bytes,13,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	// Example `https://server/openid.png`
	ImageUrl string `protobuf:"bytes,14,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Example `login.microsoftonline.com/" + tenant + "/oauth2/v2.0/authorize`
	Tenant string `protobuf:"bytes,15,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// [Send Auth Request](https://developers.google.com/identity/protocols/oauth2/openid-connect#sendauthrequest)
	// [Authentication URI Parameters](https://developers.google.com/identity/protocols/oauth2/openid-connect#authenticationuriparameters)
	HostedDomain string `protobuf:"bytes,18,opt,name=hosted_domain,json=hostedDomain,proto3" json:"hosted_domain,omitempty"`
	// AuthStyle represents how requests for tokens are authenticated to the server.
	AuthStyle AuthStyle `protobuf:"varint,20,opt,name=auth_style,json=authStyle,proto3,enum=indykite.config.v1beta1.AuthStyle" json:"auth_style,omitempty"`
	// Required if using Apple as provider. Used to sign JWT token which acts as client_secret for
	// authorization code - token exchange.
	// Private key pem must be provided when creating a new client config but is optional when updating.
	// If provided when updating, stored secret value will be updated with new value.
	// If not provided when updating, stored secret value will be kept.
	// When reading back client config, private key pem will always be set to null.
	PrivateKeyPem []byte `protobuf:"bytes,21,opt,name=private_key_pem,json=privateKeyPem,proto3" json:"private_key_pem,omitempty"`
	// Required if using Apple as provider. Used to sign JWT token which acts as client_secret for
	// authorization code - token exchange.
	PrivateKeyId string `protobuf:"bytes,22,opt,name=private_key_id,json=privateKeyId,proto3" json:"private_key_id,omitempty"`
	// Required if using Apple as provider. Used to generate JWT token for authorization code - token exchange.
	TeamId string `protobuf:"bytes,23,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *OAuth2ClientConfig) Reset() {
	*x = OAuth2ClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ClientConfig) ProtoMessage() {}

func (x *OAuth2ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ClientConfig.ProtoReflect.Descriptor instead.
func (*OAuth2ClientConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{10}
}

func (x *OAuth2ClientConfig) GetProviderType() ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return ProviderType_PROVIDER_TYPE_INVALID
}

func (x *OAuth2ClientConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OAuth2ClientConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OAuth2ClientConfig) GetRedirectUri() []string {
	if x != nil {
		return x.RedirectUri
	}
	return nil
}

func (x *OAuth2ClientConfig) GetDefaultScopes() []string {
	if x != nil {
		return x.DefaultScopes
	}
	return nil
}

func (x *OAuth2ClientConfig) GetAllowedScopes() []string {
	if x != nil {
		return x.AllowedScopes
	}
	return nil
}

func (x *OAuth2ClientConfig) GetAllowSignup() bool {
	if x != nil {
		return x.AllowSignup
	}
	return false
}

func (x *OAuth2ClientConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *OAuth2ClientConfig) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *OAuth2ClientConfig) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *OAuth2ClientConfig) GetDiscoveryUrl() string {
	if x != nil {
		return x.DiscoveryUrl
	}
	return ""
}

func (x *OAuth2ClientConfig) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *OAuth2ClientConfig) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *OAuth2ClientConfig) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *OAuth2ClientConfig) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *OAuth2ClientConfig) GetHostedDomain() string {
	if x != nil {
		return x.HostedDomain
	}
	return ""
}

func (x *OAuth2ClientConfig) GetAuthStyle() AuthStyle {
	if x != nil {
		return x.AuthStyle
	}
	return AuthStyle_AUTH_STYLE_INVALID
}

func (x *OAuth2ClientConfig) GetPrivateKeyPem() []byte {
	if x != nil {
		return x.PrivateKeyPem
	}
	return nil
}

func (x *OAuth2ClientConfig) GetPrivateKeyId() string {
	if x != nil {
		return x.PrivateKeyId
	}
	return ""
}

func (x *OAuth2ClientConfig) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type OAuth2Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,14,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,15,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// oauth2_provider_id this object is directly connected to.
	Oauth2ProviderId string `protobuf:"bytes,12,opt,name=oauth2_provider_id,json=oauth2ProviderId,proto3" json:"oauth2_provider_id,omitempty"`
	// OAuth2ApplicationConfig IndyKite OIDC Application Config
	Config *OAuth2ApplicationConfig `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *OAuth2Application) Reset() {
	*x = OAuth2Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2Application) ProtoMessage() {}

func (x *OAuth2Application) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2Application.ProtoReflect.Descriptor instead.
func (*OAuth2Application) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{11}
}

func (x *OAuth2Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OAuth2Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OAuth2Application) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OAuth2Application) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *OAuth2Application) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OAuth2Application) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OAuth2Application) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *OAuth2Application) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OAuth2Application) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *OAuth2Application) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *OAuth2Application) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *OAuth2Application) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *OAuth2Application) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *OAuth2Application) GetOauth2ProviderId() string {
	if x != nil {
		return x.Oauth2ProviderId
	}
	return ""
}

func (x *OAuth2Application) GetConfig() *OAuth2ApplicationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type OAuth2ApplicationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClientId is the id for this client.
	// It is read-only and is ignored during create/update request.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// DisplayName is a human readable name to show in consent page etc, not in Console
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description to show in consent page etc, not in Console
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// RedirectURIs is an array of allowed redirect urls for the client, for example http://mydomain/oauth/callback .
	RedirectUris []string `protobuf:"bytes,5,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	// Owner is a string identifying the owner of the OAuth 2.0 Client.
	Owner string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	// PolicyURI is a URL string that points to a human-readable privacy policy document
	// that describes how the deployment organization collects, uses,
	// retains, and discloses personal data.
	PolicyUri string `protobuf:"bytes,7,opt,name=policy_uri,json=policyUri,proto3" json:"policy_uri,omitempty"`
	// AllowedCORSOrigins are one or more URLs (scheme://host[:port]) which are allowed to make CORS requests
	// to the /oauth/token endpoint. If this array is empty, the sever's CORS origin configuration (`CORS_ALLOWED_ORIGINS`)
	// will be used instead. If this array is set, the allowed origins are appended to the server's CORS origin configuration.
	// Be aware that environment variable `CORS_ENABLED` MUST be set to `true` for this to work.
	AllowedCorsOrigins []string `protobuf:"bytes,8,rep,name=allowed_cors_origins,json=allowedCorsOrigins,proto3" json:"allowed_cors_origins,omitempty"`
	// TermsOfServiceURI is a URL string that points to a human-readable terms of service
	// document for the client that describes a contractual relationship
	// between the end-user and the client that the end-user accepts when
	// authorizing the client.
	TermsOfServiceUri string `protobuf:"bytes,9,opt,name=terms_of_service_uri,json=termsOfServiceUri,proto3" json:"terms_of_service_uri,omitempty"`
	// ClientURI is an URL string of a web page providing information about the client.
	// If present, the server SHOULD display this URL to the end-user in
	// a clickable fashion.
	ClientUri string `protobuf:"bytes,10,opt,name=client_uri,json=clientUri,proto3" json:"client_uri,omitempty"`
	// LogoURI is an URL string that references a logo for the client.
	LogoUri string `protobuf:"bytes,11,opt,name=logo_uri,json=logoUri,proto3" json:"logo_uri,omitempty"`
	// UserSupportEmailAddress is main email contact for User support
	UserSupportEmailAddress string `protobuf:"bytes,12,opt,name=user_support_email_address,json=userSupportEmailAddress,proto3" json:"user_support_email_address,omitempty"`
	// AdditionalContacts is a array of strings representing ways to contact people responsible
	// for this client, typically email addresses.
	AdditionalContacts []string `protobuf:"bytes,13,rep,name=additional_contacts,json=additionalContacts,proto3" json:"additional_contacts,omitempty"`
	// SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a
	// list of the supported subject_type values for this server.
	SubjectType ClientSubjectType `protobuf:"varint,14,opt,name=subject_type,json=subjectType,proto3,enum=indykite.config.v1beta1.ClientSubjectType" json:"subject_type,omitempty"`
	// URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a
	// file with a single JSON array of redirect_uri values.
	SectorIdentifierUri string `protobuf:"bytes,15,opt,name=sector_identifier_uri,json=sectorIdentifierUri,proto3" json:"sector_identifier_uri,omitempty"`
	// GrantTypes is an array of grant types the client is allowed to use.
	GrantTypes []GrantType `protobuf:"varint,16,rep,packed,name=grant_types,json=grantTypes,proto3,enum=indykite.config.v1beta1.GrantType" json:"grant_types,omitempty"`
	// ResponseTypes is an array of the OAuth 2.0 response type strings that the client can
	// use at the authorization endpoint.
	ResponseTypes []ResponseType `protobuf:"varint,17,rep,packed,name=response_types,json=responseTypes,proto3,enum=indykite.config.v1beta1.ResponseType" json:"response_types,omitempty"`
	// Scope is a string containing a space-separated list of scope values (as
	// described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client
	// can use when requesting access tokens.
	//
	// Pattern: ^[!#-\[\]-~]{1,254}$
	Scopes []string `protobuf:"bytes,18,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Audience is a whitelist defining the audiences this client is allowed to request tokens for. An audience limits
	// the applicability of an OAuth 2.0 Access Token to, for example, certain API endpoints.
	Audiences []string `protobuf:"bytes,19,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// Requested Client Authentication method for the Token Endpoint.
	TokenEndpointAuthMethod TokenEndpointAuthMethod `protobuf:"varint,20,opt,name=token_endpoint_auth_method,json=tokenEndpointAuthMethod,proto3,enum=indykite.config.v1beta1.TokenEndpointAuthMethod" json:"token_endpoint_auth_method,omitempty"`
	// Requested Client Authentication signing algorithm for the Token Endpoint.
	TokenEndpointAuthSigningAlg string `protobuf:"bytes,21,opt,name=token_endpoint_auth_signing_alg,json=tokenEndpointAuthSigningAlg,proto3" json:"token_endpoint_auth_signing_alg,omitempty"`
	// JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT
	// [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims
	// as a UTF-8 encoded JSON object using the application/json content-type.
	UserinfoSignedResponseAlg string `protobuf:"bytes,22,opt,name=userinfo_signed_response_alg,json=userinfoSignedResponseAlg,proto3" json:"userinfo_signed_response_alg,omitempty"`
	Trusted                   bool   `protobuf:"varint,23,opt,name=trusted,proto3" json:"trusted,omitempty"`
}

func (x *OAuth2ApplicationConfig) Reset() {
	*x = OAuth2ApplicationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2ApplicationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ApplicationConfig) ProtoMessage() {}

func (x *OAuth2ApplicationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ApplicationConfig.ProtoReflect.Descriptor instead.
func (*OAuth2ApplicationConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{12}
}

func (x *OAuth2ApplicationConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetRedirectUris() []string {
	if x != nil {
		return x.RedirectUris
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetPolicyUri() string {
	if x != nil {
		return x.PolicyUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetAllowedCorsOrigins() []string {
	if x != nil {
		return x.AllowedCorsOrigins
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetTermsOfServiceUri() string {
	if x != nil {
		return x.TermsOfServiceUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetClientUri() string {
	if x != nil {
		return x.ClientUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetLogoUri() string {
	if x != nil {
		return x.LogoUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetUserSupportEmailAddress() string {
	if x != nil {
		return x.UserSupportEmailAddress
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetAdditionalContacts() []string {
	if x != nil {
		return x.AdditionalContacts
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetSubjectType() ClientSubjectType {
	if x != nil {
		return x.SubjectType
	}
	return ClientSubjectType_CLIENT_SUBJECT_TYPE_INVALID
}

func (x *OAuth2ApplicationConfig) GetSectorIdentifierUri() string {
	if x != nil {
		return x.SectorIdentifierUri
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetGrantTypes() []GrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetResponseTypes() []ResponseType {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *OAuth2ApplicationConfig) GetTokenEndpointAuthMethod() TokenEndpointAuthMethod {
	if x != nil {
		return x.TokenEndpointAuthMethod
	}
	return TokenEndpointAuthMethod_TOKEN_ENDPOINT_AUTH_METHOD_INVALID
}

func (x *OAuth2ApplicationConfig) GetTokenEndpointAuthSigningAlg() string {
	if x != nil {
		return x.TokenEndpointAuthSigningAlg
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetUserinfoSignedResponseAlg() string {
	if x != nil {
		return x.UserinfoSignedResponseAlg
	}
	return ""
}

func (x *OAuth2ApplicationConfig) GetTrusted() bool {
	if x != nil {
		return x.Trusted
	}
	return false
}

type OAuth2Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is unique name of configuration object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of configuration.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the configuration.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,13,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,14,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. The time this configuration was destroyed.
	//
	// Only present if deletion of object was requested.
	DestroyTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=destroy_time,json=destroyTime,proto3" json:"destroy_time,omitempty"`
	// Output only. The time this configuration will be entirely deleted.
	//
	// Only present if deletion of object was requested.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// CustomerId this object is indirectly connected to.
	CustomerId string `protobuf:"bytes,10,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// AppSpaceId this object is indirectly connected to.
	AppSpaceId string `protobuf:"bytes,11,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// OAuth2ApplicationConfig IndyKite OIDC Application Config
	Config *OAuth2ProviderConfig `protobuf:"bytes,12,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *OAuth2Provider) Reset() {
	*x = OAuth2Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2Provider) ProtoMessage() {}

func (x *OAuth2Provider) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2Provider.ProtoReflect.Descriptor instead.
func (*OAuth2Provider) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{13}
}

func (x *OAuth2Provider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OAuth2Provider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OAuth2Provider) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OAuth2Provider) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *OAuth2Provider) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OAuth2Provider) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OAuth2Provider) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *OAuth2Provider) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OAuth2Provider) GetDestroyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyTime
	}
	return nil
}

func (x *OAuth2Provider) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *OAuth2Provider) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *OAuth2Provider) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *OAuth2Provider) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *OAuth2Provider) GetConfig() *OAuth2ProviderConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type OAuth2ProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GrantTypes is an array of grant types the client is allowed to use.
	GrantTypes []GrantType `protobuf:"varint,1,rep,packed,name=grant_types,json=grantTypes,proto3,enum=indykite.config.v1beta1.GrantType" json:"grant_types,omitempty"`
	// ResponseTypes is an array of the OAuth 2.0 response type strings that the client can
	// use at the authorization endpoint.
	ResponseTypes []ResponseType `protobuf:"varint,2,rep,packed,name=response_types,json=responseTypes,proto3,enum=indykite.config.v1beta1.ResponseType" json:"response_types,omitempty"`
	// Scope is a string containing a space-separated list of scope values (as
	// described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client
	// can use when requesting access tokens.
	//
	// Pattern: ^[!#-\[\]-~]{1,254}$
	Scopes []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Requested Client Authentication method for the Token Endpoint.
	TokenEndpointAuthMethod []TokenEndpointAuthMethod `protobuf:"varint,4,rep,packed,name=token_endpoint_auth_method,json=tokenEndpointAuthMethod,proto3,enum=indykite.config.v1beta1.TokenEndpointAuthMethod" json:"token_endpoint_auth_method,omitempty"`
	// Requested Client Authentication signing algorithm for the Token Endpoint.
	TokenEndpointAuthSigningAlg []string `protobuf:"bytes,5,rep,name=token_endpoint_auth_signing_alg,json=tokenEndpointAuthSigningAlg,proto3" json:"token_endpoint_auth_signing_alg,omitempty"`
	// Array of request_uri values that are pre-registered by the RP for use at the OP. Servers MAY cache the
	// contents of the files referenced by these URIs and not retrieve them at the time they are used in a request.
	// OPs can require that request_uri values used be pre-registered with the require_request_uri_registration
	// discovery parameter.
	RequestUris []string `protobuf:"bytes,6,rep,name=request_uris,json=requestUris,proto3" json:"request_uris,omitempty"`
	// RequestObjectSigningAlg JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects
	// from this Client MUST be rejected, if not signed with this algorithm.
	RequestObjectSigningAlg string            `protobuf:"bytes,7,opt,name=request_object_signing_alg,json=requestObjectSigningAlg,proto3" json:"request_object_signing_alg,omitempty"`
	FrontChannelLoginUri    map[string]string `protobuf:"bytes,8,rep,name=front_channel_login_uri,json=frontChannelLoginUri,proto3" json:"front_channel_login_uri,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FrontChannelConsentUri  map[string]string `protobuf:"bytes,9,rep,name=front_channel_consent_uri,json=frontChannelConsentUri,proto3" json:"front_channel_consent_uri,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OAuth2ProviderConfig) Reset() {
	*x = OAuth2ProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2ProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ProviderConfig) ProtoMessage() {}

func (x *OAuth2ProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ProviderConfig.ProtoReflect.Descriptor instead.
func (*OAuth2ProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{14}
}

func (x *OAuth2ProviderConfig) GetGrantTypes() []GrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetResponseTypes() []ResponseType {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetTokenEndpointAuthMethod() []TokenEndpointAuthMethod {
	if x != nil {
		return x.TokenEndpointAuthMethod
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetTokenEndpointAuthSigningAlg() []string {
	if x != nil {
		return x.TokenEndpointAuthSigningAlg
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetRequestUris() []string {
	if x != nil {
		return x.RequestUris
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetRequestObjectSigningAlg() string {
	if x != nil {
		return x.RequestObjectSigningAlg
	}
	return ""
}

func (x *OAuth2ProviderConfig) GetFrontChannelLoginUri() map[string]string {
	if x != nil {
		return x.FrontChannelLoginUri
	}
	return nil
}

func (x *OAuth2ProviderConfig) GetFrontChannelConsentUri() map[string]string {
	if x != nil {
		return x.FrontChannelConsentUri
	}
	return nil
}

type WebAuthnProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelyingParties          map[string]string           `protobuf:"bytes,1,rep,name=relying_parties,json=relyingParties,proto3" json:"relying_parties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AttestationPreference   ConveyancePreference        `protobuf:"varint,2,opt,name=attestation_preference,json=attestationPreference,proto3,enum=indykite.config.v1beta1.ConveyancePreference" json:"attestation_preference,omitempty"`
	AuthenticatorAttachment AuthenticatorAttachment     `protobuf:"varint,3,opt,name=authenticator_attachment,json=authenticatorAttachment,proto3,enum=indykite.config.v1beta1.AuthenticatorAttachment" json:"authenticator_attachment,omitempty"`
	RequireResidentKey      bool                        `protobuf:"varint,7,opt,name=require_resident_key,json=requireResidentKey,proto3" json:"require_resident_key,omitempty"`
	UserVerification        UserVerificationRequirement `protobuf:"varint,4,opt,name=user_verification,json=userVerification,proto3,enum=indykite.config.v1beta1.UserVerificationRequirement" json:"user_verification,omitempty"`
	// specifies a time, in milliseconds
	RegistrationTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=registration_timeout,json=registrationTimeout,proto3" json:"registration_timeout,omitempty"`
	// specifies a time, in milliseconds
	AuthenticationTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=authentication_timeout,json=authenticationTimeout,proto3" json:"authentication_timeout,omitempty"`
}

func (x *WebAuthnProviderConfig) Reset() {
	*x = WebAuthnProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAuthnProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAuthnProviderConfig) ProtoMessage() {}

func (x *WebAuthnProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAuthnProviderConfig.ProtoReflect.Descriptor instead.
func (*WebAuthnProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{15}
}

func (x *WebAuthnProviderConfig) GetRelyingParties() map[string]string {
	if x != nil {
		return x.RelyingParties
	}
	return nil
}

func (x *WebAuthnProviderConfig) GetAttestationPreference() ConveyancePreference {
	if x != nil {
		return x.AttestationPreference
	}
	return ConveyancePreference_CONVEYANCE_PREFERENCE_INVALID
}

func (x *WebAuthnProviderConfig) GetAuthenticatorAttachment() AuthenticatorAttachment {
	if x != nil {
		return x.AuthenticatorAttachment
	}
	return AuthenticatorAttachment_AUTHENTICATOR_ATTACHMENT_INVALID
}

func (x *WebAuthnProviderConfig) GetRequireResidentKey() bool {
	if x != nil {
		return x.RequireResidentKey
	}
	return false
}

func (x *WebAuthnProviderConfig) GetUserVerification() UserVerificationRequirement {
	if x != nil {
		return x.UserVerification
	}
	return UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_INVALID
}

func (x *WebAuthnProviderConfig) GetRegistrationTimeout() *durationpb.Duration {
	if x != nil {
		return x.RegistrationTimeout
	}
	return nil
}

func (x *WebAuthnProviderConfig) GetAuthenticationTimeout() *durationpb.Duration {
	if x != nil {
		return x.AuthenticationTimeout
	}
	return nil
}

type WebAuthnSiteDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Origin      string `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	Icon        string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *WebAuthnSiteDefinition) Reset() {
	*x = WebAuthnSiteDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAuthnSiteDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAuthnSiteDefinition) ProtoMessage() {}

func (x *WebAuthnSiteDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAuthnSiteDefinition.ProtoReflect.Descriptor instead.
func (*WebAuthnSiteDefinition) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{16}
}

func (x *WebAuthnSiteDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebAuthnSiteDefinition) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *WebAuthnSiteDefinition) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *WebAuthnSiteDefinition) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type SAFRProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Password, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored password value will be updated with new value.
	// If not provided when updating, stored password value will be kept.
	// When reading back config, password will always be set to string empty.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Directory has default value : main
	Directory string `protobuf:"bytes,3,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *SAFRProviderConfig) Reset() {
	*x = SAFRProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAFRProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAFRProviderConfig) ProtoMessage() {}

func (x *SAFRProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAFRProviderConfig.ProtoReflect.Descriptor instead.
func (*SAFRProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{17}
}

func (x *SAFRProviderConfig) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SAFRProviderConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SAFRProviderConfig) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

// SMSServiceConfig is not supported yet, but is used as type in many endpoints
type SMSServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SMSServiceConfig) Reset() {
	*x = SMSServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMSServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMSServiceConfig) ProtoMessage() {}

func (x *SMSServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMSServiceConfig.ProtoReflect.Descriptor instead.
func (*SMSServiceConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{18}
}

type EmailServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultFromAddress *Email `protobuf:"bytes,1,opt,name=default_from_address,json=defaultFromAddress,proto3" json:"default_from_address,omitempty"`
	// Default is read only value indicating this instance is used by default.
	Default bool `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	// Types that are assignable to Provider:
	//
	//	*EmailServiceConfig_Sendgrid
	//	*EmailServiceConfig_Mailjet
	//	*EmailServiceConfig_Mailgun
	//	*EmailServiceConfig_Amazon
	Provider                  isEmailServiceConfig_Provider `protobuf_oneof:"provider"`
	InvitationMessage         *EmailDefinition              `protobuf:"bytes,9,opt,name=invitation_message,json=invitationMessage,proto3" json:"invitation_message,omitempty"`
	ResetPasswordMessage      *EmailDefinition              `protobuf:"bytes,10,opt,name=reset_password_message,json=resetPasswordMessage,proto3" json:"reset_password_message,omitempty"`
	VerificationMessage       *EmailDefinition              `protobuf:"bytes,11,opt,name=verification_message,json=verificationMessage,proto3" json:"verification_message,omitempty"`
	OneTimePasswordMessage    *EmailDefinition              `protobuf:"bytes,13,opt,name=one_time_password_message,json=oneTimePasswordMessage,proto3" json:"one_time_password_message,omitempty"`
	AppSpaceReadyToUseMessage *EmailDefinition              `protobuf:"bytes,14,opt,name=app_space_ready_to_use_message,json=appSpaceReadyToUseMessage,proto3" json:"app_space_ready_to_use_message,omitempty"`
}

func (x *EmailServiceConfig) Reset() {
	*x = EmailServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailServiceConfig) ProtoMessage() {}

func (x *EmailServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailServiceConfig.ProtoReflect.Descriptor instead.
func (*EmailServiceConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{19}
}

func (x *EmailServiceConfig) GetDefaultFromAddress() *Email {
	if x != nil {
		return x.DefaultFromAddress
	}
	return nil
}

func (x *EmailServiceConfig) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (m *EmailServiceConfig) GetProvider() isEmailServiceConfig_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *EmailServiceConfig) GetSendgrid() *SendGridProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Sendgrid); ok {
		return x.Sendgrid
	}
	return nil
}

func (x *EmailServiceConfig) GetMailjet() *MailJetProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Mailjet); ok {
		return x.Mailjet
	}
	return nil
}

func (x *EmailServiceConfig) GetMailgun() *MailgunProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Mailgun); ok {
		return x.Mailgun
	}
	return nil
}

func (x *EmailServiceConfig) GetAmazon() *AmazonSESProviderConfig {
	if x, ok := x.GetProvider().(*EmailServiceConfig_Amazon); ok {
		return x.Amazon
	}
	return nil
}

func (x *EmailServiceConfig) GetInvitationMessage() *EmailDefinition {
	if x != nil {
		return x.InvitationMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetResetPasswordMessage() *EmailDefinition {
	if x != nil {
		return x.ResetPasswordMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetVerificationMessage() *EmailDefinition {
	if x != nil {
		return x.VerificationMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetOneTimePasswordMessage() *EmailDefinition {
	if x != nil {
		return x.OneTimePasswordMessage
	}
	return nil
}

func (x *EmailServiceConfig) GetAppSpaceReadyToUseMessage() *EmailDefinition {
	if x != nil {
		return x.AppSpaceReadyToUseMessage
	}
	return nil
}

type isEmailServiceConfig_Provider interface {
	isEmailServiceConfig_Provider()
}

type EmailServiceConfig_Sendgrid struct {
	Sendgrid *SendGridProviderConfig `protobuf:"bytes,4,opt,name=sendgrid,proto3,oneof"`
}

type EmailServiceConfig_Mailjet struct {
	Mailjet *MailJetProviderConfig `protobuf:"bytes,5,opt,name=mailjet,proto3,oneof"`
}

type EmailServiceConfig_Mailgun struct {
	Mailgun *MailgunProviderConfig `protobuf:"bytes,6,opt,name=mailgun,proto3,oneof"`
}

type EmailServiceConfig_Amazon struct {
	Amazon *AmazonSESProviderConfig `protobuf:"bytes,7,opt,name=amazon,proto3,oneof"`
}

func (*EmailServiceConfig_Sendgrid) isEmailServiceConfig_Provider() {}

func (*EmailServiceConfig_Mailjet) isEmailServiceConfig_Provider() {}

func (*EmailServiceConfig_Mailgun) isEmailServiceConfig_Provider() {}

func (*EmailServiceConfig_Amazon) isEmailServiceConfig_Provider() {}

// Email holds email name and address info.
type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{20}
}

func (x *Email) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Email) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SendGridProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Api key, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored api key value will be updated with new value.
	// If not provided when updating, stored api key value will be kept.
	// When reading back config, api key will always be set to string empty.
	ApiKey      string                  `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	SandboxMode bool                    `protobuf:"varint,2,opt,name=sandbox_mode,json=sandboxMode,proto3" json:"sandbox_mode,omitempty"`
	IpPoolName  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ip_pool_name,json=ipPoolName,proto3" json:"ip_pool_name,omitempty"`
	// Host default to https://api.sendgrid.com
	Host *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *SendGridProviderConfig) Reset() {
	*x = SendGridProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGridProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGridProviderConfig) ProtoMessage() {}

func (x *SendGridProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGridProviderConfig.ProtoReflect.Descriptor instead.
func (*SendGridProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{21}
}

func (x *SendGridProviderConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *SendGridProviderConfig) GetSandboxMode() bool {
	if x != nil {
		return x.SandboxMode
	}
	return false
}

func (x *SendGridProviderConfig) GetIpPoolName() *wrapperspb.StringValue {
	if x != nil {
		return x.IpPoolName
	}
	return nil
}

func (x *SendGridProviderConfig) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

type MailJetProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Api key, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored api key value will be updated with new value.
	// If not provided when updating, stored api key value will be kept.
	// When reading back config, api key will always be set to string empty.
	ApiKey         string                  `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	SandboxMode    bool                    `protobuf:"varint,2,opt,name=sandbox_mode,json=sandboxMode,proto3" json:"sandbox_mode,omitempty"`
	UrlTags        map[string]string       `protobuf:"bytes,8,rep,name=url_tags,json=urlTags,proto3" json:"url_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomCampaign *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=custom_campaign,json=customCampaign,proto3" json:"custom_campaign,omitempty"`
}

func (x *MailJetProviderConfig) Reset() {
	*x = MailJetProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailJetProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailJetProviderConfig) ProtoMessage() {}

func (x *MailJetProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailJetProviderConfig.ProtoReflect.Descriptor instead.
func (*MailJetProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{22}
}

func (x *MailJetProviderConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *MailJetProviderConfig) GetSandboxMode() bool {
	if x != nil {
		return x.SandboxMode
	}
	return false
}

func (x *MailJetProviderConfig) GetUrlTags() map[string]string {
	if x != nil {
		return x.UrlTags
	}
	return nil
}

func (x *MailJetProviderConfig) GetCustomCampaign() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomCampaign
	}
	return nil
}

type MailgunProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Api key, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored api key value will be updated with new value.
	// If not provided when updating, stored api key value will be kept.
	// When reading back config, api key will always be set to string empty.
	ApiKey             string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	DefaultFromAddress *Email `protobuf:"bytes,2,opt,name=default_from_address,json=defaultFromAddress,proto3" json:"default_from_address,omitempty"`
}

func (x *MailgunProviderConfig) Reset() {
	*x = MailgunProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailgunProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailgunProviderConfig) ProtoMessage() {}

func (x *MailgunProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailgunProviderConfig.ProtoReflect.Descriptor instead.
func (*MailgunProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{23}
}

func (x *MailgunProviderConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *MailgunProviderConfig) GetDefaultFromAddress() *Email {
	if x != nil {
		return x.DefaultFromAddress
	}
	return nil
}

type AmazonSESProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWS Access key ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// AWS Secret Access Key, must be provided when creating a new config but is optional when updating.
	// If provided when updating, stored access key value will be updated with new value.
	// If not provided when updating, stored access key value will be kept.
	// When reading back config, access key will always be set to string empty.
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	// The region to send requests to. This parameter is required and must
	// be configured globally or on a per-client basis unless otherwise
	// noted. A full list of regions is found in the "Regions and Endpoints"
	// document.
	//
	// See (Regions)[http://docs.aws.amazon.com/general/latest/gr/rande.html] for AWS
	// Regions and Endpoints.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// ConfigurationSetName The name of the configuration set that you want to use when sending the email.
	ConfigurationSetName string `protobuf:"bytes,5,opt,name=configuration_set_name,json=configurationSetName,proto3" json:"configuration_set_name,omitempty"`
	DefaultFromAddress   *Email `protobuf:"bytes,6,opt,name=default_from_address,json=defaultFromAddress,proto3" json:"default_from_address,omitempty"`
	// FeedbackForwardingEmailAddress The address that you want bounce and complaint notifications to be sent to.
	FeedbackForwardingEmailAddress string `protobuf:"bytes,7,opt,name=feedback_forwarding_email_address,json=feedbackForwardingEmailAddress,proto3" json:"feedback_forwarding_email_address,omitempty"`
	// ReplyToAddresses The "Reply-to" email addresses for the message.
	//
	// When the recipient replies  to the message, each Reply-to address receives the reply.
	ReplyToAddresses []string `protobuf:"bytes,8,rep,name=reply_to_addresses,json=replyToAddresses,proto3" json:"reply_to_addresses,omitempty"`
}

func (x *AmazonSESProviderConfig) Reset() {
	*x = AmazonSESProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmazonSESProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmazonSESProviderConfig) ProtoMessage() {}

func (x *AmazonSESProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmazonSESProviderConfig.ProtoReflect.Descriptor instead.
func (*AmazonSESProviderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{24}
}

func (x *AmazonSESProviderConfig) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetConfigurationSetName() string {
	if x != nil {
		return x.ConfigurationSetName
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetDefaultFromAddress() *Email {
	if x != nil {
		return x.DefaultFromAddress
	}
	return nil
}

func (x *AmazonSESProviderConfig) GetFeedbackForwardingEmailAddress() string {
	if x != nil {
		return x.FeedbackForwardingEmailAddress
	}
	return ""
}

func (x *AmazonSESProviderConfig) GetReplyToAddresses() []string {
	if x != nil {
		return x.ReplyToAddresses
	}
	return nil
}

type EmailDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Email:
	//
	//	*EmailDefinition_Template
	//	*EmailDefinition_Message
	Email isEmailDefinition_Email `protobuf_oneof:"email"`
}

func (x *EmailDefinition) Reset() {
	*x = EmailDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailDefinition) ProtoMessage() {}

func (x *EmailDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailDefinition.ProtoReflect.Descriptor instead.
func (*EmailDefinition) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{25}
}

func (m *EmailDefinition) GetEmail() isEmailDefinition_Email {
	if m != nil {
		return m.Email
	}
	return nil
}

func (x *EmailDefinition) GetTemplate() *EmailTemplate {
	if x, ok := x.GetEmail().(*EmailDefinition_Template); ok {
		return x.Template
	}
	return nil
}

func (x *EmailDefinition) GetMessage() *EmailMessage {
	if x, ok := x.GetEmail().(*EmailDefinition_Message); ok {
		return x.Message
	}
	return nil
}

type isEmailDefinition_Email interface {
	isEmailDefinition_Email()
}

type EmailDefinition_Template struct {
	Template *EmailTemplate `protobuf:"bytes,2,opt,name=template,proto3,oneof"`
}

type EmailDefinition_Message struct {
	Message *EmailMessage `protobuf:"bytes,3,opt,name=message,proto3,oneof"`
}

func (*EmailDefinition_Template) isEmailDefinition_Email() {}

func (*EmailDefinition_Message) isEmailDefinition_Email() {}

type EmailTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId            string                    `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateVersion       *wrapperspb.StringValue   `protobuf:"bytes,20,opt,name=template_version,json=templateVersion,proto3" json:"template_version,omitempty"`
	From                  *Email                    `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	ReplyTo               *Email                    `protobuf:"bytes,3,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	To                    []*Email                  `protobuf:"bytes,4,rep,name=to,proto3" json:"to,omitempty"`
	Cc                    []*Email                  `protobuf:"bytes,5,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc                   []*Email                  `protobuf:"bytes,6,rep,name=bcc,proto3" json:"bcc,omitempty"`
	Subject               string                    `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	Headers               map[string]string         `protobuf:"bytes,8,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomArgs            map[string]string         `protobuf:"bytes,11,rep,name=custom_args,json=customArgs,proto3" json:"custom_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DynamicTemplateValues map[string]*v1beta1.Value `protobuf:"bytes,12,rep,name=dynamic_template_values,json=dynamicTemplateValues,proto3" json:"dynamic_template_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Categories            []string                  `protobuf:"bytes,13,rep,name=categories,proto3" json:"categories,omitempty"`
	Attachments           []*EmailAttachment        `protobuf:"bytes,14,rep,name=attachments,proto3" json:"attachments,omitempty"`
	EventPayload          *wrapperspb.StringValue   `protobuf:"bytes,15,opt,name=event_payload,json=eventPayload,proto3" json:"event_payload,omitempty"`
	// The Amazon Resource Name (ARN) of the template.
	TemplateArn string `protobuf:"bytes,16,opt,name=template_arn,json=templateArn,proto3" json:"template_arn,omitempty"`
}

func (x *EmailTemplate) Reset() {
	*x = EmailTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailTemplate) ProtoMessage() {}

func (x *EmailTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailTemplate.ProtoReflect.Descriptor instead.
func (*EmailTemplate) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{26}
}

func (x *EmailTemplate) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *EmailTemplate) GetTemplateVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.TemplateVersion
	}
	return nil
}

func (x *EmailTemplate) GetFrom() *Email {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EmailTemplate) GetReplyTo() *Email {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *EmailTemplate) GetTo() []*Email {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EmailTemplate) GetCc() []*Email {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *EmailTemplate) GetBcc() []*Email {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *EmailTemplate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailTemplate) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *EmailTemplate) GetCustomArgs() map[string]string {
	if x != nil {
		return x.CustomArgs
	}
	return nil
}

func (x *EmailTemplate) GetDynamicTemplateValues() map[string]*v1beta1.Value {
	if x != nil {
		return x.DynamicTemplateValues
	}
	return nil
}

func (x *EmailTemplate) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *EmailTemplate) GetAttachments() []*EmailAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *EmailTemplate) GetEventPayload() *wrapperspb.StringValue {
	if x != nil {
		return x.EventPayload
	}
	return nil
}

func (x *EmailTemplate) GetTemplateArn() string {
	if x != nil {
		return x.TemplateArn
	}
	return ""
}

type EmailAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType string                  `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentId   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Inline      bool                    `protobuf:"varint,3,opt,name=inline,proto3" json:"inline,omitempty"`
	FileName    string                  `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Content     []byte                  `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EmailAttachment) Reset() {
	*x = EmailAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAttachment) ProtoMessage() {}

func (x *EmailAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAttachment.ProtoReflect.Descriptor instead.
func (*EmailAttachment) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{27}
}

func (x *EmailAttachment) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *EmailAttachment) GetContentId() *wrapperspb.StringValue {
	if x != nil {
		return x.ContentId
	}
	return nil
}

func (x *EmailAttachment) GetInline() bool {
	if x != nil {
		return x.Inline
	}
	return false
}

func (x *EmailAttachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *EmailAttachment) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type EmailMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From                  *Email                    `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ReplyTo               *Email                    `protobuf:"bytes,2,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	To                    []*Email                  `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	Cc                    []*Email                  `protobuf:"bytes,4,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc                   []*Email                  `protobuf:"bytes,5,rep,name=bcc,proto3" json:"bcc,omitempty"`
	Subject               string                    `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	TextContent           string                    `protobuf:"bytes,7,opt,name=text_content,json=textContent,proto3" json:"text_content,omitempty"`
	HtmlContent           string                    `protobuf:"bytes,8,opt,name=html_content,json=htmlContent,proto3" json:"html_content,omitempty"`
	Headers               map[string]string         `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomArgs            map[string]string         `protobuf:"bytes,11,rep,name=custom_args,json=customArgs,proto3" json:"custom_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DynamicTemplateValues map[string]*v1beta1.Value `protobuf:"bytes,10,rep,name=dynamic_template_values,json=dynamicTemplateValues,proto3" json:"dynamic_template_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Categories            []string                  `protobuf:"bytes,12,rep,name=categories,proto3" json:"categories,omitempty"`
	Attachments           []*EmailAttachment        `protobuf:"bytes,13,rep,name=attachments,proto3" json:"attachments,omitempty"`
	EventPayload          *wrapperspb.StringValue   `protobuf:"bytes,14,opt,name=event_payload,json=eventPayload,proto3" json:"event_payload,omitempty"`
}

func (x *EmailMessage) Reset() {
	*x = EmailMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailMessage) ProtoMessage() {}

func (x *EmailMessage) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailMessage.ProtoReflect.Descriptor instead.
func (*EmailMessage) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{28}
}

func (x *EmailMessage) GetFrom() *Email {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EmailMessage) GetReplyTo() *Email {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *EmailMessage) GetTo() []*Email {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EmailMessage) GetCc() []*Email {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *EmailMessage) GetBcc() []*Email {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *EmailMessage) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailMessage) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *EmailMessage) GetHtmlContent() string {
	if x != nil {
		return x.HtmlContent
	}
	return ""
}

func (x *EmailMessage) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *EmailMessage) GetCustomArgs() map[string]string {
	if x != nil {
		return x.CustomArgs
	}
	return nil
}

func (x *EmailMessage) GetDynamicTemplateValues() map[string]*v1beta1.Value {
	if x != nil {
		return x.DynamicTemplateValues
	}
	return nil
}

func (x *EmailMessage) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *EmailMessage) GetAttachments() []*EmailAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *EmailMessage) GetEventPayload() *wrapperspb.StringValue {
	if x != nil {
		return x.EventPayload
	}
	return nil
}

type AuthorizationPolicyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policy in JSON string format.
	Policy string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"` // 0.5Mb
	// Policy status.
	Status AuthorizationPolicyConfig_Status `protobuf:"varint,2,opt,name=status,proto3,enum=indykite.config.v1beta1.AuthorizationPolicyConfig_Status" json:"status,omitempty"`
	// Optional policy tags
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional policy builder config
	Builder *PolicyBuilderConfig `protobuf:"bytes,4,opt,name=builder,proto3" json:"builder,omitempty"`
}

func (x *AuthorizationPolicyConfig) Reset() {
	*x = AuthorizationPolicyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyConfig) ProtoMessage() {}

func (x *AuthorizationPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyConfig.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{29}
}

func (x *AuthorizationPolicyConfig) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *AuthorizationPolicyConfig) GetStatus() AuthorizationPolicyConfig_Status {
	if x != nil {
		return x.Status
	}
	return AuthorizationPolicyConfig_STATUS_INVALID
}

func (x *AuthorizationPolicyConfig) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AuthorizationPolicyConfig) GetBuilder() *PolicyBuilderConfig {
	if x != nil {
		return x.Builder
	}
	return nil
}

type AuditSinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Provider:
	//
	//	*AuditSinkConfig_Kafka
	Provider isAuditSinkConfig_Provider `protobuf_oneof:"provider"`
}

func (x *AuditSinkConfig) Reset() {
	*x = AuditSinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditSinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditSinkConfig) ProtoMessage() {}

func (x *AuditSinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditSinkConfig.ProtoReflect.Descriptor instead.
func (*AuditSinkConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{30}
}

func (m *AuditSinkConfig) GetProvider() isAuditSinkConfig_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *AuditSinkConfig) GetKafka() *KafkaSinkConfig {
	if x, ok := x.GetProvider().(*AuditSinkConfig_Kafka); ok {
		return x.Kafka
	}
	return nil
}

type isAuditSinkConfig_Provider interface {
	isAuditSinkConfig_Provider()
}

type AuditSinkConfig_Kafka struct {
	Kafka *KafkaSinkConfig `protobuf:"bytes,1,opt,name=kafka,proto3,oneof"`
}

func (*AuditSinkConfig_Kafka) isAuditSinkConfig_Provider() {}

type KafkaSinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Brokers specify Kafka destinations to connect to.
	Brokers []string `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	// Topic name must be valid based on source code:
	// https://github.com/apache/kafka/blob/0.10.2/core/src/main/scala/kafka/common/Topic.scala#L29-L30
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// DisableTLS can force using non-secure connection.
	DisableTls bool `protobuf:"varint,3,opt,name=disable_tls,json=disableTls,proto3" json:"disable_tls,omitempty"`
	// TLSSkipVerify defines whenever not to verify TLS certificate. Ignored if TLS is disabled.
	TlsSkipVerify bool   `protobuf:"varint,4,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty"`
	Username      string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password      string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *KafkaSinkConfig) Reset() {
	*x = KafkaSinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaSinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSinkConfig) ProtoMessage() {}

func (x *KafkaSinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSinkConfig.ProtoReflect.Descriptor instead.
func (*KafkaSinkConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{31}
}

func (x *KafkaSinkConfig) GetBrokers() []string {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *KafkaSinkConfig) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaSinkConfig) GetDisableTls() bool {
	if x != nil {
		return x.DisableTls
	}
	return false
}

func (x *KafkaSinkConfig) GetTlsSkipVerify() bool {
	if x != nil {
		return x.TlsSkipVerify
	}
	return false
}

func (x *KafkaSinkConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *KafkaSinkConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ConsentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Purpose is a human readable description of the purpose of the consent.
	Purpose string `protobuf:"bytes,1,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Data points is a list of properties related to the Digital twin that the consent is for.
	DataPoints []string `protobuf:"bytes,2,rep,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"`
	// First iteration the Application is embedded in the config, but that won't be the case in the future
	// ApplicationId is the id of the application that the consent is for.
	ApplicationId string `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// ValidityPeriod is the time in seconds that the consent is valid for.
	// The minimum value is 1 day and the maximum value is 2 years.
	ValidityPeriod uint64 `protobuf:"varint,4,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	// Revoke after use is a boolean that determines if the consent should be revoked after it has been used.
	RevokeAfterUse bool `protobuf:"varint,5,opt,name=revoke_after_use,json=revokeAfterUse,proto3" json:"revoke_after_use,omitempty"`
}

func (x *ConsentConfiguration) Reset() {
	*x = ConsentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentConfiguration) ProtoMessage() {}

func (x *ConsentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentConfiguration.ProtoReflect.Descriptor instead.
func (*ConsentConfiguration) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{32}
}

func (x *ConsentConfiguration) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *ConsentConfiguration) GetDataPoints() []string {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

func (x *ConsentConfiguration) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ConsentConfiguration) GetValidityPeriod() uint64 {
	if x != nil {
		return x.ValidityPeriod
	}
	return 0
}

func (x *ConsentConfiguration) GetRevokeAfterUse() bool {
	if x != nil {
		return x.RevokeAfterUse
	}
	return false
}

// Token Introspect configuration for AppSpace.
type TokenIntrospectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token matcher specify for which token this configuration applies.
	//
	// Types that are assignable to TokenMatcher:
	//
	//	*TokenIntrospectConfig_Jwt
	//	*TokenIntrospectConfig_Opaque_
	TokenMatcher isTokenIntrospectConfig_TokenMatcher `protobuf_oneof:"token_matcher"`
	// Types that are assignable to Validation:
	//
	//	*TokenIntrospectConfig_Offline_
	//	*TokenIntrospectConfig_Online_
	Validation isTokenIntrospectConfig_Validation `protobuf_oneof:"validation"`
	// ClaimsMapping specify which claims from the token should be mapped to IKG Property with given name.
	// Remember, that 'email' claim is always extracted if exists and stored under 'email' key in IKG.
	//
	// Key specify name of property in IKG.
	// Value specify which claim to map and how.
	ClaimsMapping map[string]*TokenIntrospectConfig_Claim `protobuf:"bytes,7,rep,name=claims_mapping,json=claimsMapping,proto3" json:"claims_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Node type in IKG to which we will try to match sub claim with DT external_id.
	IkgNodeType string `protobuf:"bytes,5,opt,name=ikg_node_type,json=ikgNodeType,proto3" json:"ikg_node_type,omitempty"`
	// Perform Upsert specify, if we should create and/or update DigitalTwin in IKG if it doesn't exist with.
	// In future this will perform upsert also on properties that are derived from token.
	PerformUpsert bool `protobuf:"varint,6,opt,name=perform_upsert,json=performUpsert,proto3" json:"perform_upsert,omitempty"`
}

func (x *TokenIntrospectConfig) Reset() {
	*x = TokenIntrospectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig) ProtoMessage() {}

func (x *TokenIntrospectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{33}
}

func (m *TokenIntrospectConfig) GetTokenMatcher() isTokenIntrospectConfig_TokenMatcher {
	if m != nil {
		return m.TokenMatcher
	}
	return nil
}

func (x *TokenIntrospectConfig) GetJwt() *TokenIntrospectConfig_JWT {
	if x, ok := x.GetTokenMatcher().(*TokenIntrospectConfig_Jwt); ok {
		return x.Jwt
	}
	return nil
}

func (x *TokenIntrospectConfig) GetOpaque() *TokenIntrospectConfig_Opaque {
	if x, ok := x.GetTokenMatcher().(*TokenIntrospectConfig_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

func (m *TokenIntrospectConfig) GetValidation() isTokenIntrospectConfig_Validation {
	if m != nil {
		return m.Validation
	}
	return nil
}

func (x *TokenIntrospectConfig) GetOffline() *TokenIntrospectConfig_Offline {
	if x, ok := x.GetValidation().(*TokenIntrospectConfig_Offline_); ok {
		return x.Offline
	}
	return nil
}

func (x *TokenIntrospectConfig) GetOnline() *TokenIntrospectConfig_Online {
	if x, ok := x.GetValidation().(*TokenIntrospectConfig_Online_); ok {
		return x.Online
	}
	return nil
}

func (x *TokenIntrospectConfig) GetClaimsMapping() map[string]*TokenIntrospectConfig_Claim {
	if x != nil {
		return x.ClaimsMapping
	}
	return nil
}

func (x *TokenIntrospectConfig) GetIkgNodeType() string {
	if x != nil {
		return x.IkgNodeType
	}
	return ""
}

func (x *TokenIntrospectConfig) GetPerformUpsert() bool {
	if x != nil {
		return x.PerformUpsert
	}
	return false
}

type isTokenIntrospectConfig_TokenMatcher interface {
	isTokenIntrospectConfig_TokenMatcher()
}

type TokenIntrospectConfig_Jwt struct {
	Jwt *TokenIntrospectConfig_JWT `protobuf:"bytes,1,opt,name=jwt,proto3,oneof"`
}

type TokenIntrospectConfig_Opaque_ struct {
	Opaque *TokenIntrospectConfig_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

func (*TokenIntrospectConfig_Jwt) isTokenIntrospectConfig_TokenMatcher() {}

func (*TokenIntrospectConfig_Opaque_) isTokenIntrospectConfig_TokenMatcher() {}

type isTokenIntrospectConfig_Validation interface {
	isTokenIntrospectConfig_Validation()
}

type TokenIntrospectConfig_Offline_ struct {
	Offline *TokenIntrospectConfig_Offline `protobuf:"bytes,3,opt,name=offline,proto3,oneof"`
}

type TokenIntrospectConfig_Online_ struct {
	Online *TokenIntrospectConfig_Online `protobuf:"bytes,4,opt,name=online,proto3,oneof"`
}

func (*TokenIntrospectConfig_Offline_) isTokenIntrospectConfig_Validation() {}

func (*TokenIntrospectConfig_Online_) isTokenIntrospectConfig_Validation() {}

type ConsentDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query   string                     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Returns []*ConsentDataPoint_Return `protobuf:"bytes,2,rep,name=returns,proto3" json:"returns,omitempty"`
}

func (x *ConsentDataPoint) Reset() {
	*x = ConsentDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentDataPoint) ProtoMessage() {}

func (x *ConsentDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentDataPoint.ProtoReflect.Descriptor instead.
func (*ConsentDataPoint) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{34}
}

func (x *ConsentDataPoint) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ConsentDataPoint) GetReturns() []*ConsentDataPoint_Return {
	if x != nil {
		return x.Returns
	}
	return nil
}

// JWT specifies all attributes to match with received token.
type TokenIntrospectConfig_JWT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Issuer is used to exact match based on `iss` claim in JWT.
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Audience is used to exact match based on `aud` claim in JWT.
	Audience string `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
}

func (x *TokenIntrospectConfig_JWT) Reset() {
	*x = TokenIntrospectConfig_JWT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig_JWT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig_JWT) ProtoMessage() {}

func (x *TokenIntrospectConfig_JWT) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig_JWT.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig_JWT) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{33, 0}
}

func (x *TokenIntrospectConfig_JWT) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *TokenIntrospectConfig_JWT) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

// Opaque specifies the configuration is for opaque tokens.
// Currently we will support max 1 opaque token configuration per app space.
type TokenIntrospectConfig_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TokenIntrospectConfig_Opaque) Reset() {
	*x = TokenIntrospectConfig_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig_Opaque) ProtoMessage() {}

func (x *TokenIntrospectConfig_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig_Opaque.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig_Opaque) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{33, 1}
}

// Offline validation works only with JWT.
type TokenIntrospectConfig_Offline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public JWK to validate signature of JWT.
	// If there are no public keys specified, they will be fetched and cached from
	// jwks_uri at https://jwt-issuer.tld/.well-known/openid-configuration
	PublicJwks [][]byte `protobuf:"bytes,1,rep,name=public_jwks,json=publicJwks,proto3" json:"public_jwks,omitempty"`
}

func (x *TokenIntrospectConfig_Offline) Reset() {
	*x = TokenIntrospectConfig_Offline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig_Offline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig_Offline) ProtoMessage() {}

func (x *TokenIntrospectConfig_Offline) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig_Offline.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig_Offline) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{33, 2}
}

func (x *TokenIntrospectConfig_Offline) GetPublicJwks() [][]byte {
	if x != nil {
		return x.PublicJwks
	}
	return nil
}

// Online validation works with both JWT and Opaque tokens.
// It will call userinfo endpoint to validate token and fetch user claims.
type TokenIntrospectConfig_Online struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI of userinfo endpoint which will be used to validate access token.
	// And also fetch user claims when opaque token is received.
	//
	// It can remain empty, if JWT token matcher is used.
	// Then the URI under "userinfo_endpoint" in .well-known/openid-configuration endpoint is used.
	UserinfoEndpoint string `protobuf:"bytes,1,opt,name=userinfo_endpoint,json=userinfoEndpoint,proto3" json:"userinfo_endpoint,omitempty"`
	// Cache TTL of token validity can be used to minimize calls to userinfo endpoint.
	// The final cache TTL will be set to lower limit of this value and exp claim of JWT token.
	// If not set, token will not be cached and call to userinfo endpoint will be made on every request.
	//
	// However, token validity will be checked first if possible (JWT tokens).
	// If token is expired, userinfo endpoint will not be called, nor cache checked.
	CacheTtl *durationpb.Duration `protobuf:"bytes,2,opt,name=cache_ttl,json=cacheTtl,proto3" json:"cache_ttl,omitempty"`
}

func (x *TokenIntrospectConfig_Online) Reset() {
	*x = TokenIntrospectConfig_Online{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig_Online) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig_Online) ProtoMessage() {}

func (x *TokenIntrospectConfig_Online) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig_Online.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig_Online) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{33, 3}
}

func (x *TokenIntrospectConfig_Online) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *TokenIntrospectConfig_Online) GetCacheTtl() *durationpb.Duration {
	if x != nil {
		return x.CacheTtl
	}
	return nil
}

// Claim specify details about claim that will be mapped to IKG.
type TokenIntrospectConfig_Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON selector of property in token claims. Currently just name in top-level object is supported.
	//
	// By default we support all standard claims from OpenID specification https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims,
	// and mapping will fail if claim and data type will not match the standard.
	//
	// For non-standard claims the type will be derived from the JSON.
	Selector string `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *TokenIntrospectConfig_Claim) Reset() {
	*x = TokenIntrospectConfig_Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIntrospectConfig_Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIntrospectConfig_Claim) ProtoMessage() {}

func (x *TokenIntrospectConfig_Claim) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIntrospectConfig_Claim.ProtoReflect.Descriptor instead.
func (*TokenIntrospectConfig_Claim) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{33, 4}
}

func (x *TokenIntrospectConfig_Claim) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type ConsentDataPoint_Return struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable   string   `protobuf:"bytes,1,opt,name=variable,proto3" json:"variable,omitempty"`
	Properties []string `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *ConsentDataPoint_Return) Reset() {
	*x = ConsentDataPoint_Return{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_model_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentDataPoint_Return) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentDataPoint_Return) ProtoMessage() {}

func (x *ConsentDataPoint_Return) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_model_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentDataPoint_Return.ProtoReflect.Descriptor instead.
func (*ConsentDataPoint_Return) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_model_proto_rawDescGZIP(), []int{34, 0}
}

func (x *ConsentDataPoint_Return) GetVariable() string {
	if x != nil {
		return x.Variable
	}
	return ""
}

func (x *ConsentDataPoint_Return) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

var File_indykite_config_v1beta1_model_proto protoreflect.FileDescriptor

var file_indykite_config_v1beta1_model_proto_rawDesc = []byte{
	0x0a, 0x23, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01,
	0x0a, 0x14, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18,
	0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x04, 0x0a, 0x08,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42,
	0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28,
	0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31,
	0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x22, 0xa3, 0x06, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa,
	0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36,
	0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x49, 0x0a, 0x0a, 0x69, 0x6b, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x4b, 0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x69, 0x6b, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x06, 0x0a, 0x06, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28,
	0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b,
	0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xd8, 0x05,
	0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xe0, 0x06, 0x0a, 0x10, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x05, 0x0a, 0x1a,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa,
	0x42, 0x18, 0x72, 0x16, 0x10, 0x29, 0x18, 0x2d, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe,
	0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35,
	0x34, 0x7d, 0x24, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xde, 0x05, 0x0a, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x49, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xec, 0x04, 0x0a, 0x18,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18,
	0x72, 0x16, 0x10, 0x29, 0x18, 0x2d, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd4, 0x0d, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa,
	0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36,
	0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x01,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x14, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48,
	0x00, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x14, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x32, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x12,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x75, 0x0a, 0x18, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57,
	0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48,
	0x00, 0x52, 0x16, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x14, 0x73, 0x61, 0x66,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x53, 0x41, 0x46, 0x52, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x61, 0x66, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x19, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x72, 0x0a, 0x17, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x48, 0x00, 0x52, 0x15, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a,
	0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x19, 0x10, 0x1a, 0x4a, 0x04, 0x08, 0x18, 0x10,
	0x19, 0x22, 0x98, 0x09, 0x0a, 0x12, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x08, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x08, 0xd0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xfa,
	0x42, 0x10, 0x92, 0x01, 0x0d, 0x18, 0x01, 0x22, 0x07, 0x72, 0x05, 0x10, 0x08, 0x88, 0x01, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12,
	0x37, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x18,
	0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68,
	0x74, 0x74, 0x70, 0x73, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68, 0x74, 0x74,
	0x70, 0x73, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x09,
	0x3a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68, 0x74,
	0x74, 0x70, 0x73, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68, 0x74, 0x74,
	0x70, 0x73, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6a, 0x77,
	0x6b, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42,
	0x11, 0x72, 0x0f, 0x10, 0x09, 0x3a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0xd0, 0x01, 0x01, 0x88,
	0x01, 0x01, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72, 0x69, 0x12, 0x2a, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0x80, 0x08, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x10, 0x02, 0x18, 0xfe,
	0x01, 0xd0, 0x01, 0x01, 0x68, 0x01, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x65, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x44, 0xfa, 0x42, 0x41, 0x7a,
	0x3f, 0x10, 0x55, 0x18, 0x80, 0x40, 0x2a, 0x1b, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47,
	0x49, 0x4e, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x32, 0x19, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x70, 0x01,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12,
	0x33, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe,
	0x01, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xfc, 0x06, 0x0a,
	0x11, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18,
	0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d,
	0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a,
	0x12, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd8, 0x0b, 0x0a, 0x17,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xfa, 0x42, 0x0e,
	0x92, 0x01, 0x0b, 0x08, 0x01, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x20, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52,
	0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x69, 0x12, 0x44, 0x0a, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x92, 0x01, 0x0c,
	0x18, 0x01, 0x22, 0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52, 0x12, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xfa, 0x42, 0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52, 0x11, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x69, 0x12, 0x2a,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42,
	0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0x88, 0x01, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55,
	0x72, 0x69, 0x12, 0x47, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0xfe, 0x01,
	0x60, 0x01, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x72, 0x09, 0x18, 0xfe, 0x01,
	0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x56, 0x0a, 0x0b, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x11, 0xfa, 0x42, 0x0e, 0x92, 0x01, 0x0b, 0x18, 0x01, 0x22, 0x07,
	0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x11, 0xfa, 0x42, 0x0e, 0x92, 0x01, 0x0b, 0x18, 0x01, 0x22, 0x07, 0x82, 0x01,
	0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x31, 0xfa, 0x42, 0x2e, 0x92, 0x01, 0x2b, 0x08, 0x01, 0x18, 0x01,
	0x22, 0x25, 0x72, 0x23, 0x32, 0x21, 0x5e, 0x5b, 0x5c, 0x78, 0x32, 0x31, 0x5c, 0x78, 0x32, 0x33,
	0x2d, 0x5c, 0x78, 0x35, 0x62, 0x5c, 0x78, 0x35, 0x64, 0x2d, 0x5c, 0x78, 0x37, 0x65, 0x5d, 0x7b,
	0x31, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x79,
	0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00,
	0x52, 0x17, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0xae, 0x01, 0x0a, 0x1f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x68, 0xfa, 0x42, 0x65, 0x72, 0x63, 0x52, 0x05, 0x52, 0x53, 0x32, 0x35,
	0x36, 0x52, 0x05, 0x52, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x52, 0x53, 0x35, 0x31, 0x32, 0x52,
	0x05, 0x50, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x50, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x50,
	0x53, 0x35, 0x31, 0x32, 0x52, 0x05, 0x45, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x45, 0x53, 0x33,
	0x38, 0x34, 0x52, 0x05, 0x45, 0x53, 0x35, 0x31, 0x32, 0x52, 0x06, 0x45, 0x53, 0x32, 0x35, 0x36,
	0x4b, 0x52, 0x05, 0x48, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x48, 0x53, 0x33, 0x38, 0x34, 0x52,
	0x05, 0x48, 0x53, 0x35, 0x31, 0x32, 0x52, 0x05, 0x45, 0x64, 0x44, 0x53, 0x41, 0x52, 0x1b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x50, 0x0a, 0x1c, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x52, 0x05, 0x52, 0x53, 0x32, 0x35, 0x36, 0xd0, 0x01,
	0x01, 0x52, 0x19, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6c, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x22, 0xa2, 0x06, 0x0a, 0x0e, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa,
	0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36,
	0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x80, 0x0a, 0x0a, 0x14,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x13, 0xfa,
	0x42, 0x10, 0x92, 0x01, 0x0d, 0x08, 0x01, 0x18, 0x01, 0x22, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x61,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x13, 0xfa,
	0x42, 0x10, 0x92, 0x01, 0x0d, 0x08, 0x01, 0x18, 0x01, 0x22, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x31, 0xfa, 0x42, 0x2e, 0x92, 0x01, 0x2b, 0x08, 0x01, 0x18, 0x01, 0x22, 0x25, 0x72,
	0x23, 0x32, 0x21, 0x5e, 0x5b, 0x5c, 0x78, 0x32, 0x31, 0x5c, 0x78, 0x32, 0x33, 0x2d, 0x5c, 0x78,
	0x35, 0x62, 0x5c, 0x78, 0x35, 0x64, 0x2d, 0x5c, 0x78, 0x37, 0x65, 0x5d, 0x7b, 0x31, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x42, 0x11, 0xfa, 0x42, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x01, 0x22, 0x07, 0x82,
	0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x17, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0xb5, 0x01, 0x0a, 0x1f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x6f, 0xfa, 0x42, 0x6c, 0x92, 0x01,
	0x69, 0x08, 0x01, 0x22, 0x65, 0x72, 0x63, 0x52, 0x05, 0x52, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05,
	0x52, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x52, 0x53, 0x35, 0x31, 0x32, 0x52, 0x05, 0x50, 0x53,
	0x32, 0x35, 0x36, 0x52, 0x05, 0x50, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x50, 0x53, 0x35, 0x31,
	0x32, 0x52, 0x05, 0x45, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x45, 0x53, 0x33, 0x38, 0x34, 0x52,
	0x05, 0x45, 0x53, 0x35, 0x31, 0x32, 0x52, 0x06, 0x45, 0x53, 0x32, 0x35, 0x36, 0x4b, 0x52, 0x05,
	0x48, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x48, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x48, 0x53,
	0x35, 0x31, 0x32, 0x52, 0x05, 0x45, 0x64, 0x44, 0x53, 0x41, 0x52, 0x1b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x30, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xfa,
	0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x1a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6b,
	0xfa, 0x42, 0x68, 0x72, 0x66, 0x52, 0x05, 0x52, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x52, 0x53,
	0x33, 0x38, 0x34, 0x52, 0x05, 0x52, 0x53, 0x35, 0x31, 0x32, 0x52, 0x05, 0x50, 0x53, 0x32, 0x35,
	0x36, 0x52, 0x05, 0x50, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x50, 0x53, 0x35, 0x31, 0x32, 0x52,
	0x05, 0x45, 0x53, 0x32, 0x35, 0x36, 0x52, 0x05, 0x45, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x45,
	0x53, 0x35, 0x31, 0x32, 0x52, 0x06, 0x45, 0x53, 0x32, 0x35, 0x36, 0x4b, 0x52, 0x05, 0x48, 0x53,
	0x32, 0x35, 0x36, 0x52, 0x05, 0x48, 0x53, 0x33, 0x38, 0x34, 0x52, 0x05, 0x48, 0x53, 0x35, 0x31,
	0x32, 0x52, 0x05, 0x45, 0x64, 0x44, 0x53, 0x41, 0xd0, 0x01, 0x01, 0x52, 0x17, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x6c, 0x67, 0x12, 0x95, 0x01, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x15, 0xfa, 0x42, 0x12, 0x9a, 0x01, 0x0f, 0x08, 0x01, 0x22, 0x04, 0x72, 0x02, 0x18, 0x20, 0x2a,
	0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x9b, 0x01, 0x0a,
	0x19, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0xfa, 0x42, 0x12,
	0x9a, 0x01, 0x0f, 0x08, 0x01, 0x22, 0x04, 0x72, 0x02, 0x18, 0x20, 0x2a, 0x05, 0x72, 0x03, 0x88,
	0x01, 0x01, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x1a, 0x47, 0x0a, 0x19, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55,
	0x72, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8,
	0x06, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x65,
	0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x9a, 0x01, 0x12,
	0x08, 0x01, 0x22, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x2a, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0x80, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x6e, 0x0a, 0x16, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x15, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x75, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x6b, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0xaa, 0x01, 0x07, 0x22, 0x03, 0x08, 0x84, 0x07, 0x32, 0x00,
	0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5f, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0d, 0xfa, 0x42, 0x0a, 0xaa, 0x01, 0x07, 0x22, 0x03, 0x08, 0x84, 0x07, 0x32, 0x00, 0x52,
	0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x16, 0x57, 0x65, 0x62,
	0x41, 0x75, 0x74, 0x68, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x53, 0x41, 0x46, 0x52, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x04, 0x18,
	0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x28, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x4d, 0x53,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd5, 0x07,
	0x0a, 0x12, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x57, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x47, 0x72, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x07, 0x6d, 0x61, 0x69,
	0x6c, 0x6a, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x4a, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x6a, 0x65, 0x74, 0x12,
	0x54, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x67, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x67,
	0x75, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61,
	0x69, 0x6c, 0x67, 0x75, 0x6e, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x53, 0x45, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x12, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x63, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x1e, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x50, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0xfe, 0x01, 0x60, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x01, 0x18, 0xf7, 0x03, 0xd0, 0x01,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64,
	0x47, 0x72, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x19, 0x18, 0xfe, 0x01, 0xd0,
	0x01, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a,
	0x0c, 0x69, 0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10, 0x02, 0x18, 0x40, 0xd0, 0x01, 0x01, 0x52,
	0x0a, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x72, 0x0b, 0x10, 0x0a,
	0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22,
	0xbd, 0x02, 0x0a, 0x15, 0x4d, 0x61, 0x69, 0x6c, 0x4a, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72,
	0x08, 0x10, 0x19, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x4a, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x72, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x55, 0x72, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x91, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x69, 0x6c, 0x67, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72,
	0x08, 0x10, 0x19, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x50, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x17, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x53, 0x45,
	0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x19, 0x18,
	0xfe, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72,
	0x08, 0x10, 0x19, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x72, 0x06, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x58, 0x0a, 0x21, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa,
	0x42, 0x0a, 0x72, 0x08, 0x18, 0xf7, 0x03, 0xd0, 0x01, 0x01, 0x60, 0x01, 0x52, 0x1e, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09,
	0x22, 0x07, 0x72, 0x05, 0x18, 0xf7, 0x03, 0x60, 0x01, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x0f,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x96, 0x09, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xfe, 0x01, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xfe, 0x01, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x39, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x63, 0x63, 0x12, 0x30, 0x0a, 0x03, 0x62, 0x63, 0x63, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x62, 0x63, 0x63, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a,
	0x72, 0x08, 0x10, 0x01, 0x18, 0xf7, 0x03, 0xd0, 0x01, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x79, 0x0a, 0x17, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0,
	0x01, 0x0a, 0x0f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xb3, 0x08, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x02, 0x63,
	0x63, 0x12, 0x30, 0x0a, 0x03, 0x62, 0x63, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x03,
	0x62, 0x63, 0x63, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x01, 0x18, 0xf7, 0x03,
	0xd0, 0x01, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x56, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x78, 0x0a, 0x17, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x1a,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x02, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x28, 0x80, 0xa0, 0x1f,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x18, 0x01, 0x22, 0x16, 0x72,
	0x14, 0x10, 0x01, 0x18, 0x14, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x28, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x22, 0x6e, 0x0a,
	0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4a, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x0f, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xf6, 0x01,
	0x0a, 0x0f, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x92, 0x01, 0x0d, 0x18, 0x01, 0x22, 0x07, 0x72, 0x05,
	0x10, 0x08, 0x90, 0x01, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x33, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xfa, 0x42, 0x1a, 0x72, 0x18, 0x10, 0x01, 0x18, 0xf9, 0x01, 0x32, 0x11, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x74, 0x6c, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x13, 0x92, 0x01, 0x10,
	0x08, 0x01, 0x18, 0x01, 0x22, 0x0a, 0x72, 0x08, 0x10, 0x01, 0x18, 0x80, 0x08, 0x3a, 0x01, 0x7b,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x32, 0x09, 0x18, 0x80, 0xce, 0x89, 0x1e, 0x28, 0x80,
	0xa3, 0x05, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x22, 0xfc, 0x08, 0x0a,
	0x15, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4a, 0x57, 0x54, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x59, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x12, 0x5c, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x59, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x98, 0x01, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2e, 0xfa, 0x42, 0x2b, 0x9a, 0x01, 0x28,
	0x22, 0x1f, 0x72, 0x1d, 0x18, 0x80, 0x02, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b,
	0x24, 0x2a, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6b, 0x67, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x02, 0x18, 0x40, 0x32, 0x10, 0x5e, 0x28, 0x5b, 0x41, 0x2d,
	0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x52, 0x0b, 0x69, 0x6b, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x1a,
	0x4f, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x20, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0x96, 0x01, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x1a, 0x08, 0x0a, 0x06, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0x43, 0x0a, 0x07, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6a, 0x77, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x92,
	0x01, 0x11, 0x10, 0x0a, 0x22, 0x0d, 0x7a, 0x0b, 0x10, 0x60, 0x18, 0x80, 0x40, 0x2a, 0x01, 0x7b,
	0x32, 0x01, 0x7d, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4a, 0x77, 0x6b, 0x73, 0x1a,
	0x87, 0x01, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0x88,
	0x01, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x74,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0xaa, 0x01, 0x05, 0x22, 0x03, 0x08, 0x90, 0x1c, 0x52,
	0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x54, 0x74, 0x6c, 0x1a, 0x2f, 0x0a, 0x05, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x26, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x76, 0x0a, 0x12, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x14, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x42, 0x11, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x56, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x14, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x1a, 0x57, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x12, 0x23, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x08, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x10, 0x32, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2a, 0xdd, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x4b,
	0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x50, 0x50, 0x5f, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4b, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4b,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50, 0x50,
	0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4b, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49,
	0x4b, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50, 0x50,
	0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4b, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x04, 0x2a, 0xa4, 0x0a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4d, 0x41, 0x5a, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d, 0x41,
	0x5a, 0x4f, 0x4e, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x22,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x29, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x45, 0x51, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x21, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x4e, 0x4b, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x26, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41,
	0x4e, 0x4b, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x42, 0x55,
	0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x4e, 0x5f, 0x43, 0x48, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x27, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x54,
	0x42, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x53,
	0x51, 0x55, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54,
	0x48, 0x55, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41,
	0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x4b, 0x55, 0x5f, 0x43, 0x4f,
	0x4d, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x50, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x59, 0x4b, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x23, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x59, 0x4b, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x10, 0x24,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x10,
	0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4b, 0x41, 0x4b, 0x41, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x0d, 0x12, 0x1e,
	0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x0e, 0x12, 0x1f,
	0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x49, 0x4c, 0x43, 0x48, 0x49, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x0f, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x55, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4e,
	0x44, 0x42, 0x4f, 0x58, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x43,
	0x4f, 0x4d, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x20,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x10,
	0x13, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x4b, 0x49, 0x41, 0x5f,
	0x43, 0x4f, 0x4d, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x44, 0x4e, 0x4f, 0x4b, 0x4c, 0x41, 0x53, 0x53,
	0x4e, 0x49, 0x4b, 0x49, 0x5f, 0x52, 0x55, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x50, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x16, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58,
	0x5f, 0x50, 0x41, 0x59, 0x50, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x17, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x19, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1a, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x56, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x42, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x50, 0x50, 0x53, 0x5f, 0x4e,
	0x4f, 0x10, 0x28, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1d, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59,
	0x41, 0x48, 0x4f, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x41, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1f, 0x2a, 0x73, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x54,
	0x59, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x59, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xb9, 0x01,
	0x0a, 0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x47,
	0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x05, 0x2a, 0x76, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10,
	0x03, 0x2a, 0x76, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x49, 0x52, 0x57, 0x49, 0x53, 0x45, 0x10, 0x02, 0x2a, 0xfd, 0x01, 0x0a, 0x17, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a,
	0x2e, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e,
	0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4a,
	0x57, 0x54, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e,
	0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x9f, 0x01, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x59, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x59, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x59, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49,
	0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x59, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x03, 0x2a, 0xb9, 0x01, 0x0a, 0x17,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41,
	0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x2a, 0xd0, 0x01, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x55, 0x52, 0x41, 0x47, 0x45, 0x44, 0x10, 0x03, 0x42, 0xf6, 0x01, 0x0a, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x43, 0x58, 0xaa, 0x02, 0x17,
	0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0xe2, 0x02, 0x23, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_config_v1beta1_model_proto_rawDescOnce sync.Once
	file_indykite_config_v1beta1_model_proto_rawDescData = file_indykite_config_v1beta1_model_proto_rawDesc
)

func file_indykite_config_v1beta1_model_proto_rawDescGZIP() []byte {
	file_indykite_config_v1beta1_model_proto_rawDescOnce.Do(func() {
		file_indykite_config_v1beta1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_config_v1beta1_model_proto_rawDescData)
	})
	return file_indykite_config_v1beta1_model_proto_rawDescData
}

var file_indykite_config_v1beta1_model_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_indykite_config_v1beta1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_indykite_config_v1beta1_model_proto_goTypes = []any{
	(AppSpaceIKGStatus)(0),                // 0: indykite.config.v1beta1.AppSpaceIKGStatus
	(ProviderType)(0),                     // 1: indykite.config.v1beta1.ProviderType
	(AuthStyle)(0),                        // 2: indykite.config.v1beta1.AuthStyle
	(GrantType)(0),                        // 3: indykite.config.v1beta1.GrantType
	(ResponseType)(0),                     // 4: indykite.config.v1beta1.ResponseType
	(ClientSubjectType)(0),                // 5: indykite.config.v1beta1.ClientSubjectType
	(TokenEndpointAuthMethod)(0),          // 6: indykite.config.v1beta1.TokenEndpointAuthMethod
	(ConveyancePreference)(0),             // 7: indykite.config.v1beta1.ConveyancePreference
	(AuthenticatorAttachment)(0),          // 8: indykite.config.v1beta1.AuthenticatorAttachment
	(UserVerificationRequirement)(0),      // 9: indykite.config.v1beta1.UserVerificationRequirement
	(AuthorizationPolicyConfig_Status)(0), // 10: indykite.config.v1beta1.AuthorizationPolicyConfig.Status
	(*UniqueNameIdentifier)(nil),          // 11: indykite.config.v1beta1.UniqueNameIdentifier
	(*Customer)(nil),                      // 12: indykite.config.v1beta1.Customer
	(*ApplicationSpace)(nil),              // 13: indykite.config.v1beta1.ApplicationSpace
	(*Tenant)(nil),                        // 14: indykite.config.v1beta1.Tenant
	(*Application)(nil),                   // 15: indykite.config.v1beta1.Application
	(*ApplicationAgent)(nil),              // 16: indykite.config.v1beta1.ApplicationAgent
	(*ApplicationAgentCredential)(nil),    // 17: indykite.config.v1beta1.ApplicationAgentCredential
	(*ServiceAccount)(nil),                // 18: indykite.config.v1beta1.ServiceAccount
	(*ServiceAccountCredential)(nil),      // 19: indykite.config.v1beta1.ServiceAccountCredential
	(*ConfigNode)(nil),                    // 20: indykite.config.v1beta1.ConfigNode
	(*OAuth2ClientConfig)(nil),            // 21: indykite.config.v1beta1.OAuth2ClientConfig
	(*OAuth2Application)(nil),             // 22: indykite.config.v1beta1.OAuth2Application
	(*OAuth2ApplicationConfig)(nil),       // 23: indykite.config.v1beta1.OAuth2ApplicationConfig
	(*OAuth2Provider)(nil),                // 24: indykite.config.v1beta1.OAuth2Provider
	(*OAuth2ProviderConfig)(nil),          // 25: indykite.config.v1beta1.OAuth2ProviderConfig
	(*WebAuthnProviderConfig)(nil),        // 26: indykite.config.v1beta1.WebAuthnProviderConfig
	(*WebAuthnSiteDefinition)(nil),        // 27: indykite.config.v1beta1.WebAuthnSiteDefinition
	(*SAFRProviderConfig)(nil),            // 28: indykite.config.v1beta1.SAFRProviderConfig
	(*SMSServiceConfig)(nil),              // 29: indykite.config.v1beta1.SMSServiceConfig
	(*EmailServiceConfig)(nil),            // 30: indykite.config.v1beta1.EmailServiceConfig
	(*Email)(nil),                         // 31: indykite.config.v1beta1.Email
	(*SendGridProviderConfig)(nil),        // 32: indykite.config.v1beta1.SendGridProviderConfig
	(*MailJetProviderConfig)(nil),         // 33: indykite.config.v1beta1.MailJetProviderConfig
	(*MailgunProviderConfig)(nil),         // 34: indykite.config.v1beta1.MailgunProviderConfig
	(*AmazonSESProviderConfig)(nil),       // 35: indykite.config.v1beta1.AmazonSESProviderConfig
	(*EmailDefinition)(nil),               // 36: indykite.config.v1beta1.EmailDefinition
	(*EmailTemplate)(nil),                 // 37: indykite.config.v1beta1.EmailTemplate
	(*EmailAttachment)(nil),               // 38: indykite.config.v1beta1.EmailAttachment
	(*EmailMessage)(nil),                  // 39: indykite.config.v1beta1.EmailMessage
	(*AuthorizationPolicyConfig)(nil),     // 40: indykite.config.v1beta1.AuthorizationPolicyConfig
	(*AuditSinkConfig)(nil),               // 41: indykite.config.v1beta1.AuditSinkConfig
	(*KafkaSinkConfig)(nil),               // 42: indykite.config.v1beta1.KafkaSinkConfig
	(*ConsentConfiguration)(nil),          // 43: indykite.config.v1beta1.ConsentConfiguration
	(*TokenIntrospectConfig)(nil),         // 44: indykite.config.v1beta1.TokenIntrospectConfig
	(*ConsentDataPoint)(nil),              // 45: indykite.config.v1beta1.ConsentDataPoint
	nil,                                   // 46: indykite.config.v1beta1.OAuth2ProviderConfig.FrontChannelLoginUriEntry
	nil,                                   // 47: indykite.config.v1beta1.OAuth2ProviderConfig.FrontChannelConsentUriEntry
	nil,                                   // 48: indykite.config.v1beta1.WebAuthnProviderConfig.RelyingPartiesEntry
	nil,                                   // 49: indykite.config.v1beta1.MailJetProviderConfig.UrlTagsEntry
	nil,                                   // 50: indykite.config.v1beta1.EmailTemplate.HeadersEntry
	nil,                                   // 51: indykite.config.v1beta1.EmailTemplate.CustomArgsEntry
	nil,                                   // 52: indykite.config.v1beta1.EmailTemplate.DynamicTemplateValuesEntry
	nil,                                   // 53: indykite.config.v1beta1.EmailMessage.HeadersEntry
	nil,                                   // 54: indykite.config.v1beta1.EmailMessage.CustomArgsEntry
	nil,                                   // 55: indykite.config.v1beta1.EmailMessage.DynamicTemplateValuesEntry
	(*TokenIntrospectConfig_JWT)(nil),     // 56: indykite.config.v1beta1.TokenIntrospectConfig.JWT
	(*TokenIntrospectConfig_Opaque)(nil),  // 57: indykite.config.v1beta1.TokenIntrospectConfig.Opaque
	(*TokenIntrospectConfig_Offline)(nil), // 58: indykite.config.v1beta1.TokenIntrospectConfig.Offline
	(*TokenIntrospectConfig_Online)(nil),  // 59: indykite.config.v1beta1.TokenIntrospectConfig.Online
	(*TokenIntrospectConfig_Claim)(nil),   // 60: indykite.config.v1beta1.TokenIntrospectConfig.Claim
	nil,                                   // 61: indykite.config.v1beta1.TokenIntrospectConfig.ClaimsMappingEntry
	(*ConsentDataPoint_Return)(nil),       // 62: indykite.config.v1beta1.ConsentDataPoint.Return
	(*wrapperspb.StringValue)(nil),        // 63: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),         // 64: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),           // 65: google.protobuf.Duration
	(*PolicyBuilderConfig)(nil),           // 66: indykite.config.v1beta1.PolicyBuilderConfig
	(*v1beta1.Value)(nil),                 // 67: indykite.objects.v1beta1.Value
}
var file_indykite_config_v1beta1_model_proto_depIdxs = []int32{
	63,  // 0: indykite.config.v1beta1.Customer.description:type_name -> google.protobuf.StringValue
	64,  // 1: indykite.config.v1beta1.Customer.create_time:type_name -> google.protobuf.Timestamp
	64,  // 2: indykite.config.v1beta1.Customer.update_time:type_name -> google.protobuf.Timestamp
	64,  // 3: indykite.config.v1beta1.Customer.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 4: indykite.config.v1beta1.Customer.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 5: indykite.config.v1beta1.ApplicationSpace.description:type_name -> google.protobuf.StringValue
	64,  // 6: indykite.config.v1beta1.ApplicationSpace.create_time:type_name -> google.protobuf.Timestamp
	64,  // 7: indykite.config.v1beta1.ApplicationSpace.update_time:type_name -> google.protobuf.Timestamp
	64,  // 8: indykite.config.v1beta1.ApplicationSpace.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 9: indykite.config.v1beta1.ApplicationSpace.delete_time:type_name -> google.protobuf.Timestamp
	0,   // 10: indykite.config.v1beta1.ApplicationSpace.ikg_status:type_name -> indykite.config.v1beta1.AppSpaceIKGStatus
	63,  // 11: indykite.config.v1beta1.Tenant.description:type_name -> google.protobuf.StringValue
	64,  // 12: indykite.config.v1beta1.Tenant.create_time:type_name -> google.protobuf.Timestamp
	64,  // 13: indykite.config.v1beta1.Tenant.update_time:type_name -> google.protobuf.Timestamp
	64,  // 14: indykite.config.v1beta1.Tenant.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 15: indykite.config.v1beta1.Tenant.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 16: indykite.config.v1beta1.Application.description:type_name -> google.protobuf.StringValue
	64,  // 17: indykite.config.v1beta1.Application.create_time:type_name -> google.protobuf.Timestamp
	64,  // 18: indykite.config.v1beta1.Application.update_time:type_name -> google.protobuf.Timestamp
	64,  // 19: indykite.config.v1beta1.Application.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 20: indykite.config.v1beta1.Application.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 21: indykite.config.v1beta1.ApplicationAgent.description:type_name -> google.protobuf.StringValue
	64,  // 22: indykite.config.v1beta1.ApplicationAgent.create_time:type_name -> google.protobuf.Timestamp
	64,  // 23: indykite.config.v1beta1.ApplicationAgent.update_time:type_name -> google.protobuf.Timestamp
	64,  // 24: indykite.config.v1beta1.ApplicationAgent.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 25: indykite.config.v1beta1.ApplicationAgent.delete_time:type_name -> google.protobuf.Timestamp
	64,  // 26: indykite.config.v1beta1.ApplicationAgentCredential.create_time:type_name -> google.protobuf.Timestamp
	64,  // 27: indykite.config.v1beta1.ApplicationAgentCredential.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 28: indykite.config.v1beta1.ApplicationAgentCredential.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 29: indykite.config.v1beta1.ServiceAccount.description:type_name -> google.protobuf.StringValue
	64,  // 30: indykite.config.v1beta1.ServiceAccount.create_time:type_name -> google.protobuf.Timestamp
	64,  // 31: indykite.config.v1beta1.ServiceAccount.update_time:type_name -> google.protobuf.Timestamp
	64,  // 32: indykite.config.v1beta1.ServiceAccount.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 33: indykite.config.v1beta1.ServiceAccount.delete_time:type_name -> google.protobuf.Timestamp
	64,  // 34: indykite.config.v1beta1.ServiceAccountCredential.create_time:type_name -> google.protobuf.Timestamp
	64,  // 35: indykite.config.v1beta1.ServiceAccountCredential.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 36: indykite.config.v1beta1.ServiceAccountCredential.delete_time:type_name -> google.protobuf.Timestamp
	63,  // 37: indykite.config.v1beta1.ConfigNode.description:type_name -> google.protobuf.StringValue
	64,  // 38: indykite.config.v1beta1.ConfigNode.create_time:type_name -> google.protobuf.Timestamp
	64,  // 39: indykite.config.v1beta1.ConfigNode.update_time:type_name -> google.protobuf.Timestamp
	64,  // 40: indykite.config.v1beta1.ConfigNode.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 41: indykite.config.v1beta1.ConfigNode.delete_time:type_name -> google.protobuf.Timestamp
	30,  // 42: indykite.config.v1beta1.ConfigNode.email_service_config:type_name -> indykite.config.v1beta1.EmailServiceConfig
	41,  // 43: indykite.config.v1beta1.ConfigNode.audit_sink_config:type_name -> indykite.config.v1beta1.AuditSinkConfig
	21,  // 44: indykite.config.v1beta1.ConfigNode.oauth2_client_config:type_name -> indykite.config.v1beta1.OAuth2ClientConfig
	26,  // 45: indykite.config.v1beta1.ConfigNode.webauthn_provider_config:type_name -> indykite.config.v1beta1.WebAuthnProviderConfig
	28,  // 46: indykite.config.v1beta1.ConfigNode.safr_provider_config:type_name -> indykite.config.v1beta1.SAFRProviderConfig
	40,  // 47: indykite.config.v1beta1.ConfigNode.authorization_policy_config:type_name -> indykite.config.v1beta1.AuthorizationPolicyConfig
	43,  // 48: indykite.config.v1beta1.ConfigNode.consent_config:type_name -> indykite.config.v1beta1.ConsentConfiguration
	44,  // 49: indykite.config.v1beta1.ConfigNode.token_introspect_config:type_name -> indykite.config.v1beta1.TokenIntrospectConfig
	1,   // 50: indykite.config.v1beta1.OAuth2ClientConfig.provider_type:type_name -> indykite.config.v1beta1.ProviderType
	2,   // 51: indykite.config.v1beta1.OAuth2ClientConfig.auth_style:type_name -> indykite.config.v1beta1.AuthStyle
	63,  // 52: indykite.config.v1beta1.OAuth2Application.description:type_name -> google.protobuf.StringValue
	64,  // 53: indykite.config.v1beta1.OAuth2Application.create_time:type_name -> google.protobuf.Timestamp
	64,  // 54: indykite.config.v1beta1.OAuth2Application.update_time:type_name -> google.protobuf.Timestamp
	64,  // 55: indykite.config.v1beta1.OAuth2Application.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 56: indykite.config.v1beta1.OAuth2Application.delete_time:type_name -> google.protobuf.Timestamp
	23,  // 57: indykite.config.v1beta1.OAuth2Application.config:type_name -> indykite.config.v1beta1.OAuth2ApplicationConfig
	5,   // 58: indykite.config.v1beta1.OAuth2ApplicationConfig.subject_type:type_name -> indykite.config.v1beta1.ClientSubjectType
	3,   // 59: indykite.config.v1beta1.OAuth2ApplicationConfig.grant_types:type_name -> indykite.config.v1beta1.GrantType
	4,   // 60: indykite.config.v1beta1.OAuth2ApplicationConfig.response_types:type_name -> indykite.config.v1beta1.ResponseType
	6,   // 61: indykite.config.v1beta1.OAuth2ApplicationConfig.token_endpoint_auth_method:type_name -> indykite.config.v1beta1.TokenEndpointAuthMethod
	63,  // 62: indykite.config.v1beta1.OAuth2Provider.description:type_name -> google.protobuf.StringValue
	64,  // 63: indykite.config.v1beta1.OAuth2Provider.create_time:type_name -> google.protobuf.Timestamp
	64,  // 64: indykite.config.v1beta1.OAuth2Provider.update_time:type_name -> google.protobuf.Timestamp
	64,  // 65: indykite.config.v1beta1.OAuth2Provider.destroy_time:type_name -> google.protobuf.Timestamp
	64,  // 66: indykite.config.v1beta1.OAuth2Provider.delete_time:type_name -> google.protobuf.Timestamp
	25,  // 67: indykite.config.v1beta1.OAuth2Provider.config:type_name -> indykite.config.v1beta1.OAuth2ProviderConfig
	3,   // 68: indykite.config.v1beta1.OAuth2ProviderConfig.grant_types:type_name -> indykite.config.v1beta1.GrantType
	4,   // 69: indykite.config.v1beta1.OAuth2ProviderConfig.response_types:type_name -> indykite.config.v1beta1.ResponseType
	6,   // 70: indykite.config.v1beta1.OAuth2ProviderConfig.token_endpoint_auth_method:type_name -> indykite.config.v1beta1.TokenEndpointAuthMethod
	46,  // 71: indykite.config.v1beta1.OAuth2ProviderConfig.front_channel_login_uri:type_name -> indykite.config.v1beta1.OAuth2ProviderConfig.FrontChannelLoginUriEntry
	47,  // 72: indykite.config.v1beta1.OAuth2ProviderConfig.front_channel_consent_uri:type_name -> indykite.config.v1beta1.OAuth2ProviderConfig.FrontChannelConsentUriEntry
	48,  // 73: indykite.config.v1beta1.WebAuthnProviderConfig.relying_parties:type_name -> indykite.config.v1beta1.WebAuthnProviderConfig.RelyingPartiesEntry
	7,   // 74: indykite.config.v1beta1.WebAuthnProviderConfig.attestation_preference:type_name -> indykite.config.v1beta1.ConveyancePreference
	8,   // 75: indykite.config.v1beta1.WebAuthnProviderConfig.authenticator_attachment:type_name -> indykite.config.v1beta1.AuthenticatorAttachment
	9,   // 76: indykite.config.v1beta1.WebAuthnProviderConfig.user_verification:type_name -> indykite.config.v1beta1.UserVerificationRequirement
	65,  // 77: indykite.config.v1beta1.WebAuthnProviderConfig.registration_timeout:type_name -> google.protobuf.Duration
	65,  // 78: indykite.config.v1beta1.WebAuthnProviderConfig.authentication_timeout:type_name -> google.protobuf.Duration
	31,  // 79: indykite.config.v1beta1.EmailServiceConfig.default_from_address:type_name -> indykite.config.v1beta1.Email
	32,  // 80: indykite.config.v1beta1.EmailServiceConfig.sendgrid:type_name -> indykite.config.v1beta1.SendGridProviderConfig
	33,  // 81: indykite.config.v1beta1.EmailServiceConfig.mailjet:type_name -> indykite.config.v1beta1.MailJetProviderConfig
	34,  // 82: indykite.config.v1beta1.EmailServiceConfig.mailgun:type_name -> indykite.config.v1beta1.MailgunProviderConfig
	35,  // 83: indykite.config.v1beta1.EmailServiceConfig.amazon:type_name -> indykite.config.v1beta1.AmazonSESProviderConfig
	36,  // 84: indykite.config.v1beta1.EmailServiceConfig.invitation_message:type_name -> indykite.config.v1beta1.EmailDefinition
	36,  // 85: indykite.config.v1beta1.EmailServiceConfig.reset_password_message:type_name -> indykite.config.v1beta1.EmailDefinition
	36,  // 86: indykite.config.v1beta1.EmailServiceConfig.verification_message:type_name -> indykite.config.v1beta1.EmailDefinition
	36,  // 87: indykite.config.v1beta1.EmailServiceConfig.one_time_password_message:type_name -> indykite.config.v1beta1.EmailDefinition
	36,  // 88: indykite.config.v1beta1.EmailServiceConfig.app_space_ready_to_use_message:type_name -> indykite.config.v1beta1.EmailDefinition
	63,  // 89: indykite.config.v1beta1.SendGridProviderConfig.ip_pool_name:type_name -> google.protobuf.StringValue
	63,  // 90: indykite.config.v1beta1.SendGridProviderConfig.host:type_name -> google.protobuf.StringValue
	49,  // 91: indykite.config.v1beta1.MailJetProviderConfig.url_tags:type_name -> indykite.config.v1beta1.MailJetProviderConfig.UrlTagsEntry
	63,  // 92: indykite.config.v1beta1.MailJetProviderConfig.custom_campaign:type_name -> google.protobuf.StringValue
	31,  // 93: indykite.config.v1beta1.MailgunProviderConfig.default_from_address:type_name -> indykite.config.v1beta1.Email
	31,  // 94: indykite.config.v1beta1.AmazonSESProviderConfig.default_from_address:type_name -> indykite.config.v1beta1.Email
	37,  // 95: indykite.config.v1beta1.EmailDefinition.template:type_name -> indykite.config.v1beta1.EmailTemplate
	39,  // 96: indykite.config.v1beta1.EmailDefinition.message:type_name -> indykite.config.v1beta1.EmailMessage
	63,  // 97: indykite.config.v1beta1.EmailTemplate.template_version:type_name -> google.protobuf.StringValue
	31,  // 98: indykite.config.v1beta1.EmailTemplate.from:type_name -> indykite.config.v1beta1.Email
	31,  // 99: indykite.config.v1beta1.EmailTemplate.reply_to:type_name -> indykite.config.v1beta1.Email
	31,  // 100: indykite.config.v1beta1.EmailTemplate.to:type_name -> indykite.config.v1beta1.Email
	31,  // 101: indykite.config.v1beta1.EmailTemplate.cc:type_name -> indykite.config.v1beta1.Email
	31,  // 102: indykite.config.v1beta1.EmailTemplate.bcc:type_name -> indykite.config.v1beta1.Email
	50,  // 103: indykite.config.v1beta1.EmailTemplate.headers:type_name -> indykite.config.v1beta1.EmailTemplate.HeadersEntry
	51,  // 104: indykite.config.v1beta1.EmailTemplate.custom_args:type_name -> indykite.config.v1beta1.EmailTemplate.CustomArgsEntry
	52,  // 105: indykite.config.v1beta1.EmailTemplate.dynamic_template_values:type_name -> indykite.config.v1beta1.EmailTemplate.DynamicTemplateValuesEntry
	38,  // 106: indykite.config.v1beta1.EmailTemplate.attachments:type_name -> indykite.config.v1beta1.EmailAttachment
	63,  // 107: indykite.config.v1beta1.EmailTemplate.event_payload:type_name -> google.protobuf.StringValue
	63,  // 108: indykite.config.v1beta1.EmailAttachment.content_id:type_name -> google.protobuf.StringValue
	31,  // 109: indykite.config.v1beta1.EmailMessage.from:type_name -> indykite.config.v1beta1.Email
	31,  // 110: indykite.config.v1beta1.EmailMessage.reply_to:type_name -> indykite.config.v1beta1.Email
	31,  // 111: indykite.config.v1beta1.EmailMessage.to:type_name -> indykite.config.v1beta1.Email
	31,  // 112: indykite.config.v1beta1.EmailMessage.cc:type_name -> indykite.config.v1beta1.Email
	31,  // 113: indykite.config.v1beta1.EmailMessage.bcc:type_name -> indykite.config.v1beta1.Email
	53,  // 114: indykite.config.v1beta1.EmailMessage.headers:type_name -> indykite.config.v1beta1.EmailMessage.HeadersEntry
	54,  // 115: indykite.config.v1beta1.EmailMessage.custom_args:type_name -> indykite.config.v1beta1.EmailMessage.CustomArgsEntry
	55,  // 116: indykite.config.v1beta1.EmailMessage.dynamic_template_values:type_name -> indykite.config.v1beta1.EmailMessage.DynamicTemplateValuesEntry
	38,  // 117: indykite.config.v1beta1.EmailMessage.attachments:type_name -> indykite.config.v1beta1.EmailAttachment
	63,  // 118: indykite.config.v1beta1.EmailMessage.event_payload:type_name -> google.protobuf.StringValue
	10,  // 119: indykite.config.v1beta1.AuthorizationPolicyConfig.status:type_name -> indykite.config.v1beta1.AuthorizationPolicyConfig.Status
	66,  // 120: indykite.config.v1beta1.AuthorizationPolicyConfig.builder:type_name -> indykite.config.v1beta1.PolicyBuilderConfig
	42,  // 121: indykite.config.v1beta1.AuditSinkConfig.kafka:type_name -> indykite.config.v1beta1.KafkaSinkConfig
	56,  // 122: indykite.config.v1beta1.TokenIntrospectConfig.jwt:type_name -> indykite.config.v1beta1.TokenIntrospectConfig.JWT
	57,  // 123: indykite.config.v1beta1.TokenIntrospectConfig.opaque:type_name -> indykite.config.v1beta1.TokenIntrospectConfig.Opaque
	58,  // 124: indykite.config.v1beta1.TokenIntrospectConfig.offline:type_name -> indykite.config.v1beta1.TokenIntrospectConfig.Offline
	59,  // 125: indykite.config.v1beta1.TokenIntrospectConfig.online:type_name -> indykite.config.v1beta1.TokenIntrospectConfig.Online
	61,  // 126: indykite.config.v1beta1.TokenIntrospectConfig.claims_mapping:type_name -> indykite.config.v1beta1.TokenIntrospectConfig.ClaimsMappingEntry
	62,  // 127: indykite.config.v1beta1.ConsentDataPoint.returns:type_name -> indykite.config.v1beta1.ConsentDataPoint.Return
	67,  // 128: indykite.config.v1beta1.EmailTemplate.DynamicTemplateValuesEntry.value:type_name -> indykite.objects.v1beta1.Value
	67,  // 129: indykite.config.v1beta1.EmailMessage.DynamicTemplateValuesEntry.value:type_name -> indykite.objects.v1beta1.Value
	65,  // 130: indykite.config.v1beta1.TokenIntrospectConfig.Online.cache_ttl:type_name -> google.protobuf.Duration
	60,  // 131: indykite.config.v1beta1.TokenIntrospectConfig.ClaimsMappingEntry.value:type_name -> indykite.config.v1beta1.TokenIntrospectConfig.Claim
	132, // [132:132] is the sub-list for method output_type
	132, // [132:132] is the sub-list for method input_type
	132, // [132:132] is the sub-list for extension type_name
	132, // [132:132] is the sub-list for extension extendee
	0,   // [0:132] is the sub-list for field type_name
}

func init() { file_indykite_config_v1beta1_model_proto_init() }
func file_indykite_config_v1beta1_model_proto_init() {
	if File_indykite_config_v1beta1_model_proto != nil {
		return
	}
	file_indykite_config_v1beta1_policy_builder_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_indykite_config_v1beta1_model_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UniqueNameIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ApplicationSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Tenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ApplicationAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ApplicationAgentCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ServiceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ServiceAccountCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*OAuth2ClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*OAuth2Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*OAuth2ApplicationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*OAuth2Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*OAuth2ProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*WebAuthnProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*WebAuthnSiteDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SAFRProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SMSServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*EmailServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SendGridProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*MailJetProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*MailgunProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*AmazonSESProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*EmailDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*EmailTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*EmailAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*EmailMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizationPolicyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*AuditSinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*KafkaSinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ConsentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*ConsentDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig_JWT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig_Offline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig_Online); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*TokenIntrospectConfig_Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_model_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*ConsentDataPoint_Return); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_config_v1beta1_model_proto_msgTypes[9].OneofWrappers = []any{
		(*ConfigNode_EmailServiceConfig)(nil),
		(*ConfigNode_AuditSinkConfig)(nil),
		(*ConfigNode_Oauth2ClientConfig)(nil),
		(*ConfigNode_WebauthnProviderConfig)(nil),
		(*ConfigNode_SafrProviderConfig)(nil),
		(*ConfigNode_AuthorizationPolicyConfig)(nil),
		(*ConfigNode_ConsentConfig)(nil),
		(*ConfigNode_TokenIntrospectConfig)(nil),
	}
	file_indykite_config_v1beta1_model_proto_msgTypes[19].OneofWrappers = []any{
		(*EmailServiceConfig_Sendgrid)(nil),
		(*EmailServiceConfig_Mailjet)(nil),
		(*EmailServiceConfig_Mailgun)(nil),
		(*EmailServiceConfig_Amazon)(nil),
	}
	file_indykite_config_v1beta1_model_proto_msgTypes[25].OneofWrappers = []any{
		(*EmailDefinition_Template)(nil),
		(*EmailDefinition_Message)(nil),
	}
	file_indykite_config_v1beta1_model_proto_msgTypes[30].OneofWrappers = []any{
		(*AuditSinkConfig_Kafka)(nil),
	}
	file_indykite_config_v1beta1_model_proto_msgTypes[33].OneofWrappers = []any{
		(*TokenIntrospectConfig_Jwt)(nil),
		(*TokenIntrospectConfig_Opaque_)(nil),
		(*TokenIntrospectConfig_Offline_)(nil),
		(*TokenIntrospectConfig_Online_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_config_v1beta1_model_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_config_v1beta1_model_proto_goTypes,
		DependencyIndexes: file_indykite_config_v1beta1_model_proto_depIdxs,
		EnumInfos:         file_indykite_config_v1beta1_model_proto_enumTypes,
		MessageInfos:      file_indykite_config_v1beta1_model_proto_msgTypes,
	}.Build()
	File_indykite_config_v1beta1_model_proto = out.File
	file_indykite_config_v1beta1_model_proto_rawDesc = nil
	file_indykite_config_v1beta1_model_proto_goTypes = nil
	file_indykite_config_v1beta1_model_proto_depIdxs = nil
}
