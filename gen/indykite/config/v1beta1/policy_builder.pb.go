// Copyright (c) 2024 IndyKite AS.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: indykite/config/v1beta1/policy_builder.proto

package configv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComparisonOperator int32

const (
	ComparisonOperator_COMPARISON_OPERATOR_INVALID          ComparisonOperator = 0
	ComparisonOperator_COMPARISON_OPERATOR_EQUAL            ComparisonOperator = 1
	ComparisonOperator_COMPARISON_OPERATOR_NOT_EQUAL        ComparisonOperator = 2
	ComparisonOperator_COMPARISON_OPERATOR_GREATER          ComparisonOperator = 3
	ComparisonOperator_COMPARISON_OPERATOR_GREATER_OR_EQUAL ComparisonOperator = 4
	ComparisonOperator_COMPARISON_OPERATOR_LESS             ComparisonOperator = 5
	ComparisonOperator_COMPARISON_OPERATOR_LESS_OR_EQUAL    ComparisonOperator = 6
)

// Enum value maps for ComparisonOperator.
var (
	ComparisonOperator_name = map[int32]string{
		0: "COMPARISON_OPERATOR_INVALID",
		1: "COMPARISON_OPERATOR_EQUAL",
		2: "COMPARISON_OPERATOR_NOT_EQUAL",
		3: "COMPARISON_OPERATOR_GREATER",
		4: "COMPARISON_OPERATOR_GREATER_OR_EQUAL",
		5: "COMPARISON_OPERATOR_LESS",
		6: "COMPARISON_OPERATOR_LESS_OR_EQUAL",
	}
	ComparisonOperator_value = map[string]int32{
		"COMPARISON_OPERATOR_INVALID":          0,
		"COMPARISON_OPERATOR_EQUAL":            1,
		"COMPARISON_OPERATOR_NOT_EQUAL":        2,
		"COMPARISON_OPERATOR_GREATER":          3,
		"COMPARISON_OPERATOR_GREATER_OR_EQUAL": 4,
		"COMPARISON_OPERATOR_LESS":             5,
		"COMPARISON_OPERATOR_LESS_OR_EQUAL":    6,
	}
)

func (x ComparisonOperator) Enum() *ComparisonOperator {
	p := new(ComparisonOperator)
	*p = x
	return p
}

func (x ComparisonOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_policy_builder_proto_enumTypes[0].Descriptor()
}

func (ComparisonOperator) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_policy_builder_proto_enumTypes[0]
}

func (x ComparisonOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOperator.Descriptor instead.
func (ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{0}
}

type BoolOperator int32

const (
	BoolOperator_BOOL_OPERATOR_INVALID BoolOperator = 0
	BoolOperator_BOOL_OPERATOR_AND     BoolOperator = 1
	BoolOperator_BOOL_OPERATOR_OR      BoolOperator = 2
	BoolOperator_BOOL_OPERATOR_XOR     BoolOperator = 3
)

// Enum value maps for BoolOperator.
var (
	BoolOperator_name = map[int32]string{
		0: "BOOL_OPERATOR_INVALID",
		1: "BOOL_OPERATOR_AND",
		2: "BOOL_OPERATOR_OR",
		3: "BOOL_OPERATOR_XOR",
	}
	BoolOperator_value = map[string]int32{
		"BOOL_OPERATOR_INVALID": 0,
		"BOOL_OPERATOR_AND":     1,
		"BOOL_OPERATOR_OR":      2,
		"BOOL_OPERATOR_XOR":     3,
	}
)

func (x BoolOperator) Enum() *BoolOperator {
	p := new(BoolOperator)
	*p = x
	return p
}

func (x BoolOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoolOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_indykite_config_v1beta1_policy_builder_proto_enumTypes[1].Descriptor()
}

func (BoolOperator) Type() protoreflect.EnumType {
	return &file_indykite_config_v1beta1_policy_builder_proto_enumTypes[1]
}

func (x BoolOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoolOperator.Descriptor instead.
func (BoolOperator) EnumDescriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{1}
}

type PolicyBuilderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectType  string                   `protobuf:"bytes,1,opt,name=subject_type,json=subjectType,proto3" json:"subject_type,omitempty"`
	ResourceType string                   `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Actions      []string                 `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	Conditions   *PolicyBuilderConditions `protobuf:"bytes,4,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *PolicyBuilderConfig) Reset() {
	*x = PolicyBuilderConfig{}
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyBuilderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyBuilderConfig) ProtoMessage() {}

func (x *PolicyBuilderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyBuilderConfig.ProtoReflect.Descriptor instead.
func (*PolicyBuilderConfig) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyBuilderConfig) GetSubjectType() string {
	if x != nil {
		return x.SubjectType
	}
	return ""
}

func (x *PolicyBuilderConfig) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PolicyBuilderConfig) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *PolicyBuilderConfig) GetConditions() *PolicyBuilderConditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type PolicyBuilderConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes         []*PolicyBuilderNode         `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Relationships []*PolicyBuilderRelationship `protobuf:"bytes,2,rep,name=relationships,proto3" json:"relationships,omitempty"`
}

func (x *PolicyBuilderConditions) Reset() {
	*x = PolicyBuilderConditions{}
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyBuilderConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyBuilderConditions) ProtoMessage() {}

func (x *PolicyBuilderConditions) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyBuilderConditions.ProtoReflect.Descriptor instead.
func (*PolicyBuilderConditions) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyBuilderConditions) GetNodes() []*PolicyBuilderNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *PolicyBuilderConditions) GetRelationships() []*PolicyBuilderRelationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

type PolicyBuilderNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias  string   `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Labels []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	Filter *Filter  `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *PolicyBuilderNode) Reset() {
	*x = PolicyBuilderNode{}
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyBuilderNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyBuilderNode) ProtoMessage() {}

func (x *PolicyBuilderNode) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyBuilderNode.ProtoReflect.Descriptor instead.
func (*PolicyBuilderNode) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyBuilderNode) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *PolicyBuilderNode) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PolicyBuilderNode) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type PolicyBuilderRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Undirected       bool    `protobuf:"varint,1,opt,name=undirected,proto3" json:"undirected,omitempty"`
	SourceAlias      string  `protobuf:"bytes,2,opt,name=source_alias,json=sourceAlias,proto3" json:"source_alias,omitempty"`
	TargetAlias      string  `protobuf:"bytes,3,opt,name=target_alias,json=targetAlias,proto3" json:"target_alias,omitempty"`
	RelationshipType string  `protobuf:"bytes,4,opt,name=relationship_type,json=relationshipType,proto3" json:"relationship_type,omitempty"`
	Filter           *Filter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *PolicyBuilderRelationship) Reset() {
	*x = PolicyBuilderRelationship{}
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyBuilderRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyBuilderRelationship) ProtoMessage() {}

func (x *PolicyBuilderRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyBuilderRelationship.ProtoReflect.Descriptor instead.
func (*PolicyBuilderRelationship) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{3}
}

func (x *PolicyBuilderRelationship) GetUndirected() bool {
	if x != nil {
		return x.Undirected
	}
	return false
}

func (x *PolicyBuilderRelationship) GetSourceAlias() string {
	if x != nil {
		return x.SourceAlias
	}
	return ""
}

func (x *PolicyBuilderRelationship) GetTargetAlias() string {
	if x != nil {
		return x.TargetAlias
	}
	return ""
}

func (x *PolicyBuilderRelationship) GetRelationshipType() string {
	if x != nil {
		return x.RelationshipType
	}
	return ""
}

func (x *PolicyBuilderRelationship) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*Filter_NotFilter
	//	*Filter_SimpleFilter
	//	*Filter_ComplexFilter
	Filter isFilter_Filter `protobuf_oneof:"filter"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{4}
}

func (m *Filter) GetFilter() isFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *Filter) GetNotFilter() *NotFilter {
	if x, ok := x.GetFilter().(*Filter_NotFilter); ok {
		return x.NotFilter
	}
	return nil
}

func (x *Filter) GetSimpleFilter() *SimpleFilter {
	if x, ok := x.GetFilter().(*Filter_SimpleFilter); ok {
		return x.SimpleFilter
	}
	return nil
}

func (x *Filter) GetComplexFilter() *ComplexFilter {
	if x, ok := x.GetFilter().(*Filter_ComplexFilter); ok {
		return x.ComplexFilter
	}
	return nil
}

type isFilter_Filter interface {
	isFilter_Filter()
}

type Filter_NotFilter struct {
	NotFilter *NotFilter `protobuf:"bytes,1,opt,name=not_filter,json=notFilter,proto3,oneof"`
}

type Filter_SimpleFilter struct {
	SimpleFilter *SimpleFilter `protobuf:"bytes,2,opt,name=simple_filter,json=simpleFilter,proto3,oneof"`
}

type Filter_ComplexFilter struct {
	ComplexFilter *ComplexFilter `protobuf:"bytes,3,opt,name=complex_filter,json=complexFilter,proto3,oneof"`
}

func (*Filter_NotFilter) isFilter_Filter() {}

func (*Filter_SimpleFilter) isFilter_Filter() {}

func (*Filter_ComplexFilter) isFilter_Filter() {}

type NotFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *NotFilter) Reset() {
	*x = NotFilter{}
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotFilter) ProtoMessage() {}

func (x *NotFilter) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotFilter.ProtoReflect.Descriptor instead.
func (*NotFilter) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{5}
}

func (x *NotFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SimpleFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyName  string             `protobuf:"bytes,1,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
	PropertyValue *PropertyValueType `protobuf:"bytes,2,opt,name=property_value,json=propertyValue,proto3" json:"property_value,omitempty"`
	Operator      ComparisonOperator `protobuf:"varint,3,opt,name=operator,proto3,enum=indykite.config.v1beta1.ComparisonOperator" json:"operator,omitempty"`
}

func (x *SimpleFilter) Reset() {
	*x = SimpleFilter{}
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleFilter) ProtoMessage() {}

func (x *SimpleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleFilter.ProtoReflect.Descriptor instead.
func (*SimpleFilter) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{6}
}

func (x *SimpleFilter) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *SimpleFilter) GetPropertyValue() *PropertyValueType {
	if x != nil {
		return x.PropertyValue
	}
	return nil
}

func (x *SimpleFilter) GetOperator() ComparisonOperator {
	if x != nil {
		return x.Operator
	}
	return ComparisonOperator_COMPARISON_OPERATOR_INVALID
}

type ComplexFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters  []*Filter    `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Operator BoolOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=indykite.config.v1beta1.BoolOperator" json:"operator,omitempty"`
}

func (x *ComplexFilter) Reset() {
	*x = ComplexFilter{}
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComplexFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexFilter) ProtoMessage() {}

func (x *ComplexFilter) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexFilter.ProtoReflect.Descriptor instead.
func (*ComplexFilter) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{7}
}

func (x *ComplexFilter) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ComplexFilter) GetOperator() BoolOperator {
	if x != nil {
		return x.Operator
	}
	return BoolOperator_BOOL_OPERATOR_INVALID
}

type PropertyValueType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*PropertyValueType_BoolValue
	//	*PropertyValueType_IntValue
	//	*PropertyValueType_FloatValue
	//	*PropertyValueType_TimeValue
	//	*PropertyValueType_DurationValue
	//	*PropertyValueType_StringValue
	Value isPropertyValueType_Value `protobuf_oneof:"value"`
}

func (x *PropertyValueType) Reset() {
	*x = PropertyValueType{}
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertyValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueType) ProtoMessage() {}

func (x *PropertyValueType) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_policy_builder_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueType.ProtoReflect.Descriptor instead.
func (*PropertyValueType) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP(), []int{8}
}

func (m *PropertyValueType) GetValue() isPropertyValueType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PropertyValueType) GetBoolValue() bool {
	if x, ok := x.GetValue().(*PropertyValueType_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *PropertyValueType) GetIntValue() int32 {
	if x, ok := x.GetValue().(*PropertyValueType_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *PropertyValueType) GetFloatValue() float64 {
	if x, ok := x.GetValue().(*PropertyValueType_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *PropertyValueType) GetTimeValue() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*PropertyValueType_TimeValue); ok {
		return x.TimeValue
	}
	return nil
}

func (x *PropertyValueType) GetDurationValue() *durationpb.Duration {
	if x, ok := x.GetValue().(*PropertyValueType_DurationValue); ok {
		return x.DurationValue
	}
	return nil
}

func (x *PropertyValueType) GetStringValue() string {
	if x, ok := x.GetValue().(*PropertyValueType_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isPropertyValueType_Value interface {
	isPropertyValueType_Value()
}

type PropertyValueType_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type PropertyValueType_IntValue struct {
	IntValue int32 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type PropertyValueType_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type PropertyValueType_TimeValue struct {
	TimeValue *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time_value,json=timeValue,proto3,oneof"`
}

type PropertyValueType_DurationValue struct {
	DurationValue *durationpb.Duration `protobuf:"bytes,5,opt,name=duration_value,json=durationValue,proto3,oneof"`
}

type PropertyValueType_StringValue struct {
	StringValue string `protobuf:"bytes,6,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*PropertyValueType_BoolValue) isPropertyValueType_Value() {}

func (*PropertyValueType_IntValue) isPropertyValueType_Value() {}

func (*PropertyValueType_FloatValue) isPropertyValueType_Value() {}

func (*PropertyValueType_TimeValue) isPropertyValueType_Value() {}

func (*PropertyValueType_DurationValue) isPropertyValueType_Value() {}

func (*PropertyValueType_StringValue) isPropertyValueType_Value() {}

var File_indykite_config_v1beta1_policy_builder_proto protoreflect.FileDescriptor

var file_indykite_config_v1beta1_policy_builder_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x02, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x02, 0x18,
	0x32, 0x32, 0x13, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xba, 0x48, 0x1e, 0xc8,
	0x01, 0x01, 0x72, 0x19, 0x10, 0x02, 0x18, 0x32, 0x32, 0x13, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48,
	0x2b, 0x92, 0x01, 0x28, 0x08, 0x01, 0x10, 0x05, 0x18, 0x01, 0x22, 0x20, 0x72, 0x1e, 0x10, 0x02,
	0x18, 0x64, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e,
	0x3a, 0x5f, 0x5c, 0x2d, 0x5c, 0x2f, 0x5d, 0x7b, 0x32, 0x2c, 0x7d, 0x24, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01,
	0x02, 0x08, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19,
	0x10, 0x02, 0x18, 0x32, 0x32, 0x13, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x25, 0xba, 0x48, 0x22, 0x92, 0x01, 0x1f, 0x18, 0x01, 0x22, 0x1b, 0x72, 0x19, 0x10, 0x02,
	0x18, 0x32, 0x32, 0x13, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x37, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xcd, 0x02, 0x0a, 0x19, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xba, 0x48,
	0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x02, 0x18, 0x32, 0x32, 0x13, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x44, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x02, 0x18, 0x32,
	0x32, 0x13, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba,
	0x48, 0x1b, 0x72, 0x19, 0x10, 0x02, 0x18, 0x32, 0x32, 0x13, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x4c, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xee, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x56, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0d,
	0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x10, 0xba, 0x48, 0x0d,
	0xc8, 0x01, 0x01, 0x92, 0x01, 0x07, 0x08, 0x01, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xac, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x2a, 0x87, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x06, 0x2a, 0x6d, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x4f,
	0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x03,
	0x42, 0xfe, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x42, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x43, 0x58, 0xaa, 0x02, 0x17, 0x49, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2,
	0x02, 0x23, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_config_v1beta1_policy_builder_proto_rawDescOnce sync.Once
	file_indykite_config_v1beta1_policy_builder_proto_rawDescData = file_indykite_config_v1beta1_policy_builder_proto_rawDesc
)

func file_indykite_config_v1beta1_policy_builder_proto_rawDescGZIP() []byte {
	file_indykite_config_v1beta1_policy_builder_proto_rawDescOnce.Do(func() {
		file_indykite_config_v1beta1_policy_builder_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_config_v1beta1_policy_builder_proto_rawDescData)
	})
	return file_indykite_config_v1beta1_policy_builder_proto_rawDescData
}

var file_indykite_config_v1beta1_policy_builder_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_indykite_config_v1beta1_policy_builder_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_indykite_config_v1beta1_policy_builder_proto_goTypes = []any{
	(ComparisonOperator)(0),           // 0: indykite.config.v1beta1.ComparisonOperator
	(BoolOperator)(0),                 // 1: indykite.config.v1beta1.BoolOperator
	(*PolicyBuilderConfig)(nil),       // 2: indykite.config.v1beta1.PolicyBuilderConfig
	(*PolicyBuilderConditions)(nil),   // 3: indykite.config.v1beta1.PolicyBuilderConditions
	(*PolicyBuilderNode)(nil),         // 4: indykite.config.v1beta1.PolicyBuilderNode
	(*PolicyBuilderRelationship)(nil), // 5: indykite.config.v1beta1.PolicyBuilderRelationship
	(*Filter)(nil),                    // 6: indykite.config.v1beta1.Filter
	(*NotFilter)(nil),                 // 7: indykite.config.v1beta1.NotFilter
	(*SimpleFilter)(nil),              // 8: indykite.config.v1beta1.SimpleFilter
	(*ComplexFilter)(nil),             // 9: indykite.config.v1beta1.ComplexFilter
	(*PropertyValueType)(nil),         // 10: indykite.config.v1beta1.PropertyValueType
	(*timestamppb.Timestamp)(nil),     // 11: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 12: google.protobuf.Duration
}
var file_indykite_config_v1beta1_policy_builder_proto_depIdxs = []int32{
	3,  // 0: indykite.config.v1beta1.PolicyBuilderConfig.conditions:type_name -> indykite.config.v1beta1.PolicyBuilderConditions
	4,  // 1: indykite.config.v1beta1.PolicyBuilderConditions.nodes:type_name -> indykite.config.v1beta1.PolicyBuilderNode
	5,  // 2: indykite.config.v1beta1.PolicyBuilderConditions.relationships:type_name -> indykite.config.v1beta1.PolicyBuilderRelationship
	6,  // 3: indykite.config.v1beta1.PolicyBuilderNode.filter:type_name -> indykite.config.v1beta1.Filter
	6,  // 4: indykite.config.v1beta1.PolicyBuilderRelationship.filter:type_name -> indykite.config.v1beta1.Filter
	7,  // 5: indykite.config.v1beta1.Filter.not_filter:type_name -> indykite.config.v1beta1.NotFilter
	8,  // 6: indykite.config.v1beta1.Filter.simple_filter:type_name -> indykite.config.v1beta1.SimpleFilter
	9,  // 7: indykite.config.v1beta1.Filter.complex_filter:type_name -> indykite.config.v1beta1.ComplexFilter
	6,  // 8: indykite.config.v1beta1.NotFilter.filter:type_name -> indykite.config.v1beta1.Filter
	10, // 9: indykite.config.v1beta1.SimpleFilter.property_value:type_name -> indykite.config.v1beta1.PropertyValueType
	0,  // 10: indykite.config.v1beta1.SimpleFilter.operator:type_name -> indykite.config.v1beta1.ComparisonOperator
	6,  // 11: indykite.config.v1beta1.ComplexFilter.filters:type_name -> indykite.config.v1beta1.Filter
	1,  // 12: indykite.config.v1beta1.ComplexFilter.operator:type_name -> indykite.config.v1beta1.BoolOperator
	11, // 13: indykite.config.v1beta1.PropertyValueType.time_value:type_name -> google.protobuf.Timestamp
	12, // 14: indykite.config.v1beta1.PropertyValueType.duration_value:type_name -> google.protobuf.Duration
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_indykite_config_v1beta1_policy_builder_proto_init() }
func file_indykite_config_v1beta1_policy_builder_proto_init() {
	if File_indykite_config_v1beta1_policy_builder_proto != nil {
		return
	}
	file_indykite_config_v1beta1_policy_builder_proto_msgTypes[4].OneofWrappers = []any{
		(*Filter_NotFilter)(nil),
		(*Filter_SimpleFilter)(nil),
		(*Filter_ComplexFilter)(nil),
	}
	file_indykite_config_v1beta1_policy_builder_proto_msgTypes[8].OneofWrappers = []any{
		(*PropertyValueType_BoolValue)(nil),
		(*PropertyValueType_IntValue)(nil),
		(*PropertyValueType_FloatValue)(nil),
		(*PropertyValueType_TimeValue)(nil),
		(*PropertyValueType_DurationValue)(nil),
		(*PropertyValueType_StringValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_config_v1beta1_policy_builder_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_indykite_config_v1beta1_policy_builder_proto_goTypes,
		DependencyIndexes: file_indykite_config_v1beta1_policy_builder_proto_depIdxs,
		EnumInfos:         file_indykite_config_v1beta1_policy_builder_proto_enumTypes,
		MessageInfos:      file_indykite_config_v1beta1_policy_builder_proto_msgTypes,
	}.Build()
	File_indykite_config_v1beta1_policy_builder_proto = out.File
	file_indykite_config_v1beta1_policy_builder_proto_rawDesc = nil
	file_indykite_config_v1beta1_policy_builder_proto_goTypes = nil
	file_indykite_config_v1beta1_policy_builder_proto_depIdxs = nil
}
