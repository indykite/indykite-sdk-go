// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: indykite/config/v1beta1/config_management_api.proto

package configv1beta1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigManagementAPI_ReadCustomer_FullMethodName                       = "/indykite.config.v1beta1.ConfigManagementAPI/ReadCustomer"
	ConfigManagementAPI_ReadCustomerConfig_FullMethodName                 = "/indykite.config.v1beta1.ConfigManagementAPI/ReadCustomerConfig"
	ConfigManagementAPI_UpdateCustomerConfig_FullMethodName               = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateCustomerConfig"
	ConfigManagementAPI_CreateApplicationSpace_FullMethodName             = "/indykite.config.v1beta1.ConfigManagementAPI/CreateApplicationSpace"
	ConfigManagementAPI_ReadApplicationSpace_FullMethodName               = "/indykite.config.v1beta1.ConfigManagementAPI/ReadApplicationSpace"
	ConfigManagementAPI_ListApplicationSpaces_FullMethodName              = "/indykite.config.v1beta1.ConfigManagementAPI/ListApplicationSpaces"
	ConfigManagementAPI_UpdateApplicationSpace_FullMethodName             = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateApplicationSpace"
	ConfigManagementAPI_DeleteApplicationSpace_FullMethodName             = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteApplicationSpace"
	ConfigManagementAPI_ReadApplicationSpaceConfig_FullMethodName         = "/indykite.config.v1beta1.ConfigManagementAPI/ReadApplicationSpaceConfig"
	ConfigManagementAPI_UpdateApplicationSpaceConfig_FullMethodName       = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateApplicationSpaceConfig"
	ConfigManagementAPI_CreateApplication_FullMethodName                  = "/indykite.config.v1beta1.ConfigManagementAPI/CreateApplication"
	ConfigManagementAPI_ReadApplication_FullMethodName                    = "/indykite.config.v1beta1.ConfigManagementAPI/ReadApplication"
	ConfigManagementAPI_ListApplications_FullMethodName                   = "/indykite.config.v1beta1.ConfigManagementAPI/ListApplications"
	ConfigManagementAPI_UpdateApplication_FullMethodName                  = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateApplication"
	ConfigManagementAPI_DeleteApplication_FullMethodName                  = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteApplication"
	ConfigManagementAPI_CreateApplicationAgent_FullMethodName             = "/indykite.config.v1beta1.ConfigManagementAPI/CreateApplicationAgent"
	ConfigManagementAPI_ReadApplicationAgent_FullMethodName               = "/indykite.config.v1beta1.ConfigManagementAPI/ReadApplicationAgent"
	ConfigManagementAPI_ListApplicationAgents_FullMethodName              = "/indykite.config.v1beta1.ConfigManagementAPI/ListApplicationAgents"
	ConfigManagementAPI_UpdateApplicationAgent_FullMethodName             = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateApplicationAgent"
	ConfigManagementAPI_DeleteApplicationAgent_FullMethodName             = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteApplicationAgent"
	ConfigManagementAPI_RegisterApplicationAgentCredential_FullMethodName = "/indykite.config.v1beta1.ConfigManagementAPI/RegisterApplicationAgentCredential"
	ConfigManagementAPI_ReadApplicationAgentCredential_FullMethodName     = "/indykite.config.v1beta1.ConfigManagementAPI/ReadApplicationAgentCredential"
	ConfigManagementAPI_DeleteApplicationAgentCredential_FullMethodName   = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteApplicationAgentCredential"
	ConfigManagementAPI_CreateServiceAccount_FullMethodName               = "/indykite.config.v1beta1.ConfigManagementAPI/CreateServiceAccount"
	ConfigManagementAPI_ReadServiceAccount_FullMethodName                 = "/indykite.config.v1beta1.ConfigManagementAPI/ReadServiceAccount"
	ConfigManagementAPI_UpdateServiceAccount_FullMethodName               = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateServiceAccount"
	ConfigManagementAPI_DeleteServiceAccount_FullMethodName               = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteServiceAccount"
	ConfigManagementAPI_RegisterServiceAccountCredential_FullMethodName   = "/indykite.config.v1beta1.ConfigManagementAPI/RegisterServiceAccountCredential"
	ConfigManagementAPI_ReadServiceAccountCredential_FullMethodName       = "/indykite.config.v1beta1.ConfigManagementAPI/ReadServiceAccountCredential"
	ConfigManagementAPI_DeleteServiceAccountCredential_FullMethodName     = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteServiceAccountCredential"
	ConfigManagementAPI_CreateTenant_FullMethodName                       = "/indykite.config.v1beta1.ConfigManagementAPI/CreateTenant"
	ConfigManagementAPI_ReadTenant_FullMethodName                         = "/indykite.config.v1beta1.ConfigManagementAPI/ReadTenant"
	ConfigManagementAPI_ListTenants_FullMethodName                        = "/indykite.config.v1beta1.ConfigManagementAPI/ListTenants"
	ConfigManagementAPI_UpdateTenant_FullMethodName                       = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateTenant"
	ConfigManagementAPI_DeleteTenant_FullMethodName                       = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteTenant"
	ConfigManagementAPI_ReadTenantConfig_FullMethodName                   = "/indykite.config.v1beta1.ConfigManagementAPI/ReadTenantConfig"
	ConfigManagementAPI_UpdateTenantConfig_FullMethodName                 = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateTenantConfig"
	ConfigManagementAPI_CreateConfigNode_FullMethodName                   = "/indykite.config.v1beta1.ConfigManagementAPI/CreateConfigNode"
	ConfigManagementAPI_ReadConfigNode_FullMethodName                     = "/indykite.config.v1beta1.ConfigManagementAPI/ReadConfigNode"
	ConfigManagementAPI_UpdateConfigNode_FullMethodName                   = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateConfigNode"
	ConfigManagementAPI_DeleteConfigNode_FullMethodName                   = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteConfigNode"
	ConfigManagementAPI_ListConfigNodeVersions_FullMethodName             = "/indykite.config.v1beta1.ConfigManagementAPI/ListConfigNodeVersions"
	ConfigManagementAPI_CreateOAuth2Provider_FullMethodName               = "/indykite.config.v1beta1.ConfigManagementAPI/CreateOAuth2Provider"
	ConfigManagementAPI_ReadOAuth2Provider_FullMethodName                 = "/indykite.config.v1beta1.ConfigManagementAPI/ReadOAuth2Provider"
	ConfigManagementAPI_UpdateOAuth2Provider_FullMethodName               = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateOAuth2Provider"
	ConfigManagementAPI_DeleteOAuth2Provider_FullMethodName               = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteOAuth2Provider"
	ConfigManagementAPI_CreateOAuth2Application_FullMethodName            = "/indykite.config.v1beta1.ConfigManagementAPI/CreateOAuth2Application"
	ConfigManagementAPI_ReadOAuth2Application_FullMethodName              = "/indykite.config.v1beta1.ConfigManagementAPI/ReadOAuth2Application"
	ConfigManagementAPI_UpdateOAuth2Application_FullMethodName            = "/indykite.config.v1beta1.ConfigManagementAPI/UpdateOAuth2Application"
	ConfigManagementAPI_DeleteOAuth2Application_FullMethodName            = "/indykite.config.v1beta1.ConfigManagementAPI/DeleteOAuth2Application"
	ConfigManagementAPI_AssignPermissions_FullMethodName                  = "/indykite.config.v1beta1.ConfigManagementAPI/AssignPermissions"
	ConfigManagementAPI_RevokePermissions_FullMethodName                  = "/indykite.config.v1beta1.ConfigManagementAPI/RevokePermissions"
	ConfigManagementAPI_ListPermissions_FullMethodName                    = "/indykite.config.v1beta1.ConfigManagementAPI/ListPermissions"
	ConfigManagementAPI_GetSchemaHelpers_FullMethodName                   = "/indykite.config.v1beta1.ConfigManagementAPI/GetSchemaHelpers"
)

// ConfigManagementAPIClient is the client API for ConfigManagementAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigManagementAPIClient interface {
	// ReadCustomer by ID or name, or gets it from a service account and returns all attributes.
	ReadCustomer(ctx context.Context, in *ReadCustomerRequest, opts ...grpc.CallOption) (*ReadCustomerResponse, error)
	// ReadApplicationSpaceConfig reads the default settings of the ApplicationSpace.
	ReadCustomerConfig(ctx context.Context, in *ReadCustomerConfigRequest, opts ...grpc.CallOption) (*ReadCustomerConfigResponse, error)
	// UpdateApplicationSpaceConfig updates the default settings of the ApplicationSpace.
	UpdateCustomerConfig(ctx context.Context, in *UpdateCustomerConfigRequest, opts ...grpc.CallOption) (*UpdateCustomerConfigResponse, error)
	// CreateApplicationSpace for a customer.
	// For now, we do not support creating custom Issuers, so implicit Issuer is created automatically with this call.
	// To get IssuerID, which is required to create Tenant later, use ReadApplicationSpace.
	CreateApplicationSpace(ctx context.Context, in *CreateApplicationSpaceRequest, opts ...grpc.CallOption) (*CreateApplicationSpaceResponse, error)
	// ReadApplicationSpace by ID or name and returns all attributes including Issuer ID.
	ReadApplicationSpace(ctx context.Context, in *ReadApplicationSpaceRequest, opts ...grpc.CallOption) (*ReadApplicationSpaceResponse, error)
	// ListApplicationSpaces in a given customer space with list of names.
	ListApplicationSpaces(ctx context.Context, in *ListApplicationSpacesRequest, opts ...grpc.CallOption) (ConfigManagementAPI_ListApplicationSpacesClient, error)
	// UpdateApplicationSpace by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateApplicationSpace(ctx context.Context, in *UpdateApplicationSpaceRequest, opts ...grpc.CallOption) (*UpdateApplicationSpaceResponse, error)
	// DeleteApplicationSpace by ID with optional etag, to prevent deleting AppSpace currently changed by others.
	DeleteApplicationSpace(ctx context.Context, in *DeleteApplicationSpaceRequest, opts ...grpc.CallOption) (*DeleteApplicationSpaceResponse, error)
	// ReadApplicationSpaceConfig reads the default settings of the ApplicationSpace.
	ReadApplicationSpaceConfig(ctx context.Context, in *ReadApplicationSpaceConfigRequest, opts ...grpc.CallOption) (*ReadApplicationSpaceConfigResponse, error)
	// UpdateApplicationSpaceConfig updates the default settings of the ApplicationSpace.
	UpdateApplicationSpaceConfig(ctx context.Context, in *UpdateApplicationSpaceConfigRequest, opts ...grpc.CallOption) (*UpdateApplicationSpaceConfigResponse, error)
	// CreateApplication in an Application Space.
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	// ReadApplication by ID or name and returns all attributes.
	ReadApplication(ctx context.Context, in *ReadApplicationRequest, opts ...grpc.CallOption) (*ReadApplicationResponse, error)
	// ListApplications in a given Application Space with list of names.
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (ConfigManagementAPI_ListApplicationsClient, error)
	// UpdateApplication by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	// DeleteApplication by ID with optional etag, to prevent deleting Application currently changed by others.
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error)
	// CreateApplicationAgent for an Application.
	CreateApplicationAgent(ctx context.Context, in *CreateApplicationAgentRequest, opts ...grpc.CallOption) (*CreateApplicationAgentResponse, error)
	// ReadApplicationAgent by ID or name and returns all attributes.
	ReadApplicationAgent(ctx context.Context, in *ReadApplicationAgentRequest, opts ...grpc.CallOption) (*ReadApplicationAgentResponse, error)
	// ListApplicationAgents in a given Application Space with list of names.
	// The starting point here is Application Space, not Application!
	ListApplicationAgents(ctx context.Context, in *ListApplicationAgentsRequest, opts ...grpc.CallOption) (ConfigManagementAPI_ListApplicationAgentsClient, error)
	// UpdateApplicationAgent by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateApplicationAgent(ctx context.Context, in *UpdateApplicationAgentRequest, opts ...grpc.CallOption) (*UpdateApplicationAgentResponse, error)
	// DeleteApplicationAgent by ID with optional etag, to prevent deleting ApplicationAgent currently changed by others.
	DeleteApplicationAgent(ctx context.Context, in *DeleteApplicationAgentRequest, opts ...grpc.CallOption) (*DeleteApplicationAgentResponse, error)
	// RegisterApplicationAgentCredential creates new credentials for given application.
	// Methods either accept Public key, which is registered with credentials.
	// Or will generate new Public-Private pair and Private key is returned in Response.
	// Be aware, that in this case, Private key is sent back only once and cannot be retrieved ever again.
	RegisterApplicationAgentCredential(ctx context.Context, in *RegisterApplicationAgentCredentialRequest, opts ...grpc.CallOption) (*RegisterApplicationAgentCredentialResponse, error)
	// ReadApplicationAgentCredential by ID and returns all attributes. But not Private or Public key, so keep them saved.
	ReadApplicationAgentCredential(ctx context.Context, in *ReadApplicationAgentCredentialRequest, opts ...grpc.CallOption) (*ReadApplicationAgentCredentialResponse, error)
	// DeleteApplicationAgentCredential by ID.
	DeleteApplicationAgentCredential(ctx context.Context, in *DeleteApplicationAgentCredentialRequest, opts ...grpc.CallOption) (*DeleteApplicationAgentCredentialResponse, error)
	// CreateServiceAccount for Customer or Application Space.
	CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*CreateServiceAccountResponse, error)
	// ReadServiceAccount by ID or name and returns all attributes.
	ReadServiceAccount(ctx context.Context, in *ReadServiceAccountRequest, opts ...grpc.CallOption) (*ReadServiceAccountResponse, error)
	// UpdateServiceAccount by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateServiceAccount(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*UpdateServiceAccountResponse, error)
	// DeleteServiceAccount by ID with optional etag, to prevent deleting ServiceAccount currently changed by others.
	DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*DeleteServiceAccountResponse, error)
	// RegisterServiceAccountCredential creates new credentials for given Service Account.
	// Methods either accept Public key, which is registered with credentials.
	// Or will generate new Public-Private pair and Private key is returned in Response.
	// Be aware, that in this case, Private key is sent back only once and cannot be retrieved ever again.
	RegisterServiceAccountCredential(ctx context.Context, in *RegisterServiceAccountCredentialRequest, opts ...grpc.CallOption) (*RegisterServiceAccountCredentialResponse, error)
	// ReadServiceAccountCredential by ID and returns all attributes. But not Private or Public key, so keep them saved.
	ReadServiceAccountCredential(ctx context.Context, in *ReadServiceAccountCredentialRequest, opts ...grpc.CallOption) (*ReadServiceAccountCredentialResponse, error)
	// DeleteServiceAccountCredential by ID.
	DeleteServiceAccountCredential(ctx context.Context, in *DeleteServiceAccountCredentialRequest, opts ...grpc.CallOption) (*DeleteServiceAccountCredentialResponse, error)
	// CreateTenant for given Issuer. See CreateApplicationSpace method description to get more knowledge
	// about Application Space and Issuer relation.
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	// ReadTenant by ID or name and returns all attributes.
	ReadTenant(ctx context.Context, in *ReadTenantRequest, opts ...grpc.CallOption) (*ReadTenantResponse, error)
	// ListTenants in a given Application Space with list of names.
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (ConfigManagementAPI_ListTenantsClient, error)
	// UpdateTenant by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error)
	// DeleteTenant by ID with optional etag, to prevent deleting Tenant currently changed by others.
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error)
	// ReadTenantConfig reads the default settings of the Tenant.
	ReadTenantConfig(ctx context.Context, in *ReadTenantConfigRequest, opts ...grpc.CallOption) (*ReadTenantConfigResponse, error)
	// UpdateTenantConfig updates the default settings of the Tenant.
	UpdateTenantConfig(ctx context.Context, in *UpdateTenantConfigRequest, opts ...grpc.CallOption) (*UpdateTenantConfigResponse, error)
	// CreateConfigNode on Customer, Application Space or Tenant level.
	// All generic configuration nodes are created by this endpoint.
	CreateConfigNode(ctx context.Context, in *CreateConfigNodeRequest, opts ...grpc.CallOption) (*CreateConfigNodeResponse, error)
	// ReadConfigNode by ID. Method works with all generic configuration objects.
	ReadConfigNode(ctx context.Context, in *ReadConfigNodeRequest, opts ...grpc.CallOption) (*ReadConfigNodeResponse, error)
	// UpdateConfigNode by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateConfigNode(ctx context.Context, in *UpdateConfigNodeRequest, opts ...grpc.CallOption) (*UpdateConfigNodeResponse, error)
	// DeleteConfigNode by ID with optional etag, to prevent deleting configuration object currently changed by others.
	DeleteConfigNode(ctx context.Context, in *DeleteConfigNodeRequest, opts ...grpc.CallOption) (*DeleteConfigNodeResponse, error)
	// ListConfigNodeVersions list previous versions of a given ConfigNode.
	ListConfigNodeVersions(ctx context.Context, in *ListConfigNodeVersionsRequest, opts ...grpc.CallOption) (*ListConfigNodeVersionsResponse, error)
	// CreateOAuth2Provider under given Application Space.
	CreateOAuth2Provider(ctx context.Context, in *CreateOAuth2ProviderRequest, opts ...grpc.CallOption) (*CreateOAuth2ProviderResponse, error)
	// ReadOAuth2Provider by ID and returns all attributes and configuration.
	ReadOAuth2Provider(ctx context.Context, in *ReadOAuth2ProviderRequest, opts ...grpc.CallOption) (*ReadOAuth2ProviderResponse, error)
	// UpdateOAuth2Provider by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateOAuth2Provider(ctx context.Context, in *UpdateOAuth2ProviderRequest, opts ...grpc.CallOption) (*UpdateOAuth2ProviderResponse, error)
	// DeleteOAuth2Provider by ID with optional etag, to prevent deleting Provider currently changed by others.
	DeleteOAuth2Provider(ctx context.Context, in *DeleteOAuth2ProviderRequest, opts ...grpc.CallOption) (*DeleteOAuth2ProviderResponse, error)
	// CreateOAuth2Application under given OAuth2 Provider.
	CreateOAuth2Application(ctx context.Context, in *CreateOAuth2ApplicationRequest, opts ...grpc.CallOption) (*CreateOAuth2ApplicationResponse, error)
	// ReadOAuth2Application by ID and returns all attributes and configuration.
	ReadOAuth2Application(ctx context.Context, in *ReadOAuth2ApplicationRequest, opts ...grpc.CallOption) (*ReadOAuth2ApplicationResponse, error)
	// UpdateOAuth2Application by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateOAuth2Application(ctx context.Context, in *UpdateOAuth2ApplicationRequest, opts ...grpc.CallOption) (*UpdateOAuth2ApplicationResponse, error)
	// DeleteOAuth2Application by ID with optional etag, to prevent deleting OAuth2 Application currently changed by others.
	DeleteOAuth2Application(ctx context.Context, in *DeleteOAuth2ApplicationRequest, opts ...grpc.CallOption) (*DeleteOAuth2ApplicationResponse, error)
	// AssignPermissions to a digital twin.
	AssignPermissions(ctx context.Context, in *AssignPermissionsRequest, opts ...grpc.CallOption) (*AssignPermissionsResponse, error)
	// RevokePermissions for a digital twin.
	RevokePermissions(ctx context.Context, in *RevokePermissionsRequest, opts ...grpc.CallOption) (*RevokePermissionsResponse, error)
	// ListPermissions of Digital twins and Invitations related to a customer.
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	// GetSchemaHelpers for knowledge graph schema
	GetSchemaHelpers(ctx context.Context, in *GetSchemaHelpersRequest, opts ...grpc.CallOption) (*GetSchemaHelpersResponse, error)
}

type configManagementAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigManagementAPIClient(cc grpc.ClientConnInterface) ConfigManagementAPIClient {
	return &configManagementAPIClient{cc}
}

func (c *configManagementAPIClient) ReadCustomer(ctx context.Context, in *ReadCustomerRequest, opts ...grpc.CallOption) (*ReadCustomerResponse, error) {
	out := new(ReadCustomerResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadCustomerConfig(ctx context.Context, in *ReadCustomerConfigRequest, opts ...grpc.CallOption) (*ReadCustomerConfigResponse, error) {
	out := new(ReadCustomerConfigResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadCustomerConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) UpdateCustomerConfig(ctx context.Context, in *UpdateCustomerConfigRequest, opts ...grpc.CallOption) (*UpdateCustomerConfigResponse, error) {
	out := new(UpdateCustomerConfigResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateCustomerConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) CreateApplicationSpace(ctx context.Context, in *CreateApplicationSpaceRequest, opts ...grpc.CallOption) (*CreateApplicationSpaceResponse, error) {
	out := new(CreateApplicationSpaceResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_CreateApplicationSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadApplicationSpace(ctx context.Context, in *ReadApplicationSpaceRequest, opts ...grpc.CallOption) (*ReadApplicationSpaceResponse, error) {
	out := new(ReadApplicationSpaceResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadApplicationSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ListApplicationSpaces(ctx context.Context, in *ListApplicationSpacesRequest, opts ...grpc.CallOption) (ConfigManagementAPI_ListApplicationSpacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigManagementAPI_ServiceDesc.Streams[0], ConfigManagementAPI_ListApplicationSpaces_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagementAPIListApplicationSpacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigManagementAPI_ListApplicationSpacesClient interface {
	Recv() (*ListApplicationSpacesResponse, error)
	grpc.ClientStream
}

type configManagementAPIListApplicationSpacesClient struct {
	grpc.ClientStream
}

func (x *configManagementAPIListApplicationSpacesClient) Recv() (*ListApplicationSpacesResponse, error) {
	m := new(ListApplicationSpacesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configManagementAPIClient) UpdateApplicationSpace(ctx context.Context, in *UpdateApplicationSpaceRequest, opts ...grpc.CallOption) (*UpdateApplicationSpaceResponse, error) {
	out := new(UpdateApplicationSpaceResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateApplicationSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteApplicationSpace(ctx context.Context, in *DeleteApplicationSpaceRequest, opts ...grpc.CallOption) (*DeleteApplicationSpaceResponse, error) {
	out := new(DeleteApplicationSpaceResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteApplicationSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadApplicationSpaceConfig(ctx context.Context, in *ReadApplicationSpaceConfigRequest, opts ...grpc.CallOption) (*ReadApplicationSpaceConfigResponse, error) {
	out := new(ReadApplicationSpaceConfigResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadApplicationSpaceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) UpdateApplicationSpaceConfig(ctx context.Context, in *UpdateApplicationSpaceConfigRequest, opts ...grpc.CallOption) (*UpdateApplicationSpaceConfigResponse, error) {
	out := new(UpdateApplicationSpaceConfigResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateApplicationSpaceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_CreateApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadApplication(ctx context.Context, in *ReadApplicationRequest, opts ...grpc.CallOption) (*ReadApplicationResponse, error) {
	out := new(ReadApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (ConfigManagementAPI_ListApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigManagementAPI_ServiceDesc.Streams[1], ConfigManagementAPI_ListApplications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagementAPIListApplicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigManagementAPI_ListApplicationsClient interface {
	Recv() (*ListApplicationsResponse, error)
	grpc.ClientStream
}

type configManagementAPIListApplicationsClient struct {
	grpc.ClientStream
}

func (x *configManagementAPIListApplicationsClient) Recv() (*ListApplicationsResponse, error) {
	m := new(ListApplicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configManagementAPIClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	out := new(UpdateApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error) {
	out := new(DeleteApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) CreateApplicationAgent(ctx context.Context, in *CreateApplicationAgentRequest, opts ...grpc.CallOption) (*CreateApplicationAgentResponse, error) {
	out := new(CreateApplicationAgentResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_CreateApplicationAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadApplicationAgent(ctx context.Context, in *ReadApplicationAgentRequest, opts ...grpc.CallOption) (*ReadApplicationAgentResponse, error) {
	out := new(ReadApplicationAgentResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadApplicationAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ListApplicationAgents(ctx context.Context, in *ListApplicationAgentsRequest, opts ...grpc.CallOption) (ConfigManagementAPI_ListApplicationAgentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigManagementAPI_ServiceDesc.Streams[2], ConfigManagementAPI_ListApplicationAgents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagementAPIListApplicationAgentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigManagementAPI_ListApplicationAgentsClient interface {
	Recv() (*ListApplicationAgentsResponse, error)
	grpc.ClientStream
}

type configManagementAPIListApplicationAgentsClient struct {
	grpc.ClientStream
}

func (x *configManagementAPIListApplicationAgentsClient) Recv() (*ListApplicationAgentsResponse, error) {
	m := new(ListApplicationAgentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configManagementAPIClient) UpdateApplicationAgent(ctx context.Context, in *UpdateApplicationAgentRequest, opts ...grpc.CallOption) (*UpdateApplicationAgentResponse, error) {
	out := new(UpdateApplicationAgentResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateApplicationAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteApplicationAgent(ctx context.Context, in *DeleteApplicationAgentRequest, opts ...grpc.CallOption) (*DeleteApplicationAgentResponse, error) {
	out := new(DeleteApplicationAgentResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteApplicationAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) RegisterApplicationAgentCredential(ctx context.Context, in *RegisterApplicationAgentCredentialRequest, opts ...grpc.CallOption) (*RegisterApplicationAgentCredentialResponse, error) {
	out := new(RegisterApplicationAgentCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_RegisterApplicationAgentCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadApplicationAgentCredential(ctx context.Context, in *ReadApplicationAgentCredentialRequest, opts ...grpc.CallOption) (*ReadApplicationAgentCredentialResponse, error) {
	out := new(ReadApplicationAgentCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadApplicationAgentCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteApplicationAgentCredential(ctx context.Context, in *DeleteApplicationAgentCredentialRequest, opts ...grpc.CallOption) (*DeleteApplicationAgentCredentialResponse, error) {
	out := new(DeleteApplicationAgentCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteApplicationAgentCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*CreateServiceAccountResponse, error) {
	out := new(CreateServiceAccountResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_CreateServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadServiceAccount(ctx context.Context, in *ReadServiceAccountRequest, opts ...grpc.CallOption) (*ReadServiceAccountResponse, error) {
	out := new(ReadServiceAccountResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) UpdateServiceAccount(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*UpdateServiceAccountResponse, error) {
	out := new(UpdateServiceAccountResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*DeleteServiceAccountResponse, error) {
	out := new(DeleteServiceAccountResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) RegisterServiceAccountCredential(ctx context.Context, in *RegisterServiceAccountCredentialRequest, opts ...grpc.CallOption) (*RegisterServiceAccountCredentialResponse, error) {
	out := new(RegisterServiceAccountCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_RegisterServiceAccountCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadServiceAccountCredential(ctx context.Context, in *ReadServiceAccountCredentialRequest, opts ...grpc.CallOption) (*ReadServiceAccountCredentialResponse, error) {
	out := new(ReadServiceAccountCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadServiceAccountCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteServiceAccountCredential(ctx context.Context, in *DeleteServiceAccountCredentialRequest, opts ...grpc.CallOption) (*DeleteServiceAccountCredentialResponse, error) {
	out := new(DeleteServiceAccountCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteServiceAccountCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_CreateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadTenant(ctx context.Context, in *ReadTenantRequest, opts ...grpc.CallOption) (*ReadTenantResponse, error) {
	out := new(ReadTenantResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (ConfigManagementAPI_ListTenantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigManagementAPI_ServiceDesc.Streams[3], ConfigManagementAPI_ListTenants_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagementAPIListTenantsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigManagementAPI_ListTenantsClient interface {
	Recv() (*ListTenantsResponse, error)
	grpc.ClientStream
}

type configManagementAPIListTenantsClient struct {
	grpc.ClientStream
}

func (x *configManagementAPIListTenantsClient) Recv() (*ListTenantsResponse, error) {
	m := new(ListTenantsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configManagementAPIClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error) {
	out := new(UpdateTenantResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error) {
	out := new(DeleteTenantResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadTenantConfig(ctx context.Context, in *ReadTenantConfigRequest, opts ...grpc.CallOption) (*ReadTenantConfigResponse, error) {
	out := new(ReadTenantConfigResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadTenantConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) UpdateTenantConfig(ctx context.Context, in *UpdateTenantConfigRequest, opts ...grpc.CallOption) (*UpdateTenantConfigResponse, error) {
	out := new(UpdateTenantConfigResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateTenantConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) CreateConfigNode(ctx context.Context, in *CreateConfigNodeRequest, opts ...grpc.CallOption) (*CreateConfigNodeResponse, error) {
	out := new(CreateConfigNodeResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_CreateConfigNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadConfigNode(ctx context.Context, in *ReadConfigNodeRequest, opts ...grpc.CallOption) (*ReadConfigNodeResponse, error) {
	out := new(ReadConfigNodeResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadConfigNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) UpdateConfigNode(ctx context.Context, in *UpdateConfigNodeRequest, opts ...grpc.CallOption) (*UpdateConfigNodeResponse, error) {
	out := new(UpdateConfigNodeResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateConfigNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteConfigNode(ctx context.Context, in *DeleteConfigNodeRequest, opts ...grpc.CallOption) (*DeleteConfigNodeResponse, error) {
	out := new(DeleteConfigNodeResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteConfigNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ListConfigNodeVersions(ctx context.Context, in *ListConfigNodeVersionsRequest, opts ...grpc.CallOption) (*ListConfigNodeVersionsResponse, error) {
	out := new(ListConfigNodeVersionsResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ListConfigNodeVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) CreateOAuth2Provider(ctx context.Context, in *CreateOAuth2ProviderRequest, opts ...grpc.CallOption) (*CreateOAuth2ProviderResponse, error) {
	out := new(CreateOAuth2ProviderResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_CreateOAuth2Provider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadOAuth2Provider(ctx context.Context, in *ReadOAuth2ProviderRequest, opts ...grpc.CallOption) (*ReadOAuth2ProviderResponse, error) {
	out := new(ReadOAuth2ProviderResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadOAuth2Provider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) UpdateOAuth2Provider(ctx context.Context, in *UpdateOAuth2ProviderRequest, opts ...grpc.CallOption) (*UpdateOAuth2ProviderResponse, error) {
	out := new(UpdateOAuth2ProviderResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateOAuth2Provider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteOAuth2Provider(ctx context.Context, in *DeleteOAuth2ProviderRequest, opts ...grpc.CallOption) (*DeleteOAuth2ProviderResponse, error) {
	out := new(DeleteOAuth2ProviderResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteOAuth2Provider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) CreateOAuth2Application(ctx context.Context, in *CreateOAuth2ApplicationRequest, opts ...grpc.CallOption) (*CreateOAuth2ApplicationResponse, error) {
	out := new(CreateOAuth2ApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_CreateOAuth2Application_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ReadOAuth2Application(ctx context.Context, in *ReadOAuth2ApplicationRequest, opts ...grpc.CallOption) (*ReadOAuth2ApplicationResponse, error) {
	out := new(ReadOAuth2ApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ReadOAuth2Application_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) UpdateOAuth2Application(ctx context.Context, in *UpdateOAuth2ApplicationRequest, opts ...grpc.CallOption) (*UpdateOAuth2ApplicationResponse, error) {
	out := new(UpdateOAuth2ApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_UpdateOAuth2Application_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) DeleteOAuth2Application(ctx context.Context, in *DeleteOAuth2ApplicationRequest, opts ...grpc.CallOption) (*DeleteOAuth2ApplicationResponse, error) {
	out := new(DeleteOAuth2ApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_DeleteOAuth2Application_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) AssignPermissions(ctx context.Context, in *AssignPermissionsRequest, opts ...grpc.CallOption) (*AssignPermissionsResponse, error) {
	out := new(AssignPermissionsResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_AssignPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) RevokePermissions(ctx context.Context, in *RevokePermissionsRequest, opts ...grpc.CallOption) (*RevokePermissionsResponse, error) {
	out := new(RevokePermissionsResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_RevokePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementAPIClient) GetSchemaHelpers(ctx context.Context, in *GetSchemaHelpersRequest, opts ...grpc.CallOption) (*GetSchemaHelpersResponse, error) {
	out := new(GetSchemaHelpersResponse)
	err := c.cc.Invoke(ctx, ConfigManagementAPI_GetSchemaHelpers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigManagementAPIServer is the server API for ConfigManagementAPI service.
// All implementations should embed UnimplementedConfigManagementAPIServer
// for forward compatibility
type ConfigManagementAPIServer interface {
	// ReadCustomer by ID or name, or gets it from a service account and returns all attributes.
	ReadCustomer(context.Context, *ReadCustomerRequest) (*ReadCustomerResponse, error)
	// ReadApplicationSpaceConfig reads the default settings of the ApplicationSpace.
	ReadCustomerConfig(context.Context, *ReadCustomerConfigRequest) (*ReadCustomerConfigResponse, error)
	// UpdateApplicationSpaceConfig updates the default settings of the ApplicationSpace.
	UpdateCustomerConfig(context.Context, *UpdateCustomerConfigRequest) (*UpdateCustomerConfigResponse, error)
	// CreateApplicationSpace for a customer.
	// For now, we do not support creating custom Issuers, so implicit Issuer is created automatically with this call.
	// To get IssuerID, which is required to create Tenant later, use ReadApplicationSpace.
	CreateApplicationSpace(context.Context, *CreateApplicationSpaceRequest) (*CreateApplicationSpaceResponse, error)
	// ReadApplicationSpace by ID or name and returns all attributes including Issuer ID.
	ReadApplicationSpace(context.Context, *ReadApplicationSpaceRequest) (*ReadApplicationSpaceResponse, error)
	// ListApplicationSpaces in a given customer space with list of names.
	ListApplicationSpaces(*ListApplicationSpacesRequest, ConfigManagementAPI_ListApplicationSpacesServer) error
	// UpdateApplicationSpace by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateApplicationSpace(context.Context, *UpdateApplicationSpaceRequest) (*UpdateApplicationSpaceResponse, error)
	// DeleteApplicationSpace by ID with optional etag, to prevent deleting AppSpace currently changed by others.
	DeleteApplicationSpace(context.Context, *DeleteApplicationSpaceRequest) (*DeleteApplicationSpaceResponse, error)
	// ReadApplicationSpaceConfig reads the default settings of the ApplicationSpace.
	ReadApplicationSpaceConfig(context.Context, *ReadApplicationSpaceConfigRequest) (*ReadApplicationSpaceConfigResponse, error)
	// UpdateApplicationSpaceConfig updates the default settings of the ApplicationSpace.
	UpdateApplicationSpaceConfig(context.Context, *UpdateApplicationSpaceConfigRequest) (*UpdateApplicationSpaceConfigResponse, error)
	// CreateApplication in an Application Space.
	CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	// ReadApplication by ID or name and returns all attributes.
	ReadApplication(context.Context, *ReadApplicationRequest) (*ReadApplicationResponse, error)
	// ListApplications in a given Application Space with list of names.
	ListApplications(*ListApplicationsRequest, ConfigManagementAPI_ListApplicationsServer) error
	// UpdateApplication by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error)
	// DeleteApplication by ID with optional etag, to prevent deleting Application currently changed by others.
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error)
	// CreateApplicationAgent for an Application.
	CreateApplicationAgent(context.Context, *CreateApplicationAgentRequest) (*CreateApplicationAgentResponse, error)
	// ReadApplicationAgent by ID or name and returns all attributes.
	ReadApplicationAgent(context.Context, *ReadApplicationAgentRequest) (*ReadApplicationAgentResponse, error)
	// ListApplicationAgents in a given Application Space with list of names.
	// The starting point here is Application Space, not Application!
	ListApplicationAgents(*ListApplicationAgentsRequest, ConfigManagementAPI_ListApplicationAgentsServer) error
	// UpdateApplicationAgent by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateApplicationAgent(context.Context, *UpdateApplicationAgentRequest) (*UpdateApplicationAgentResponse, error)
	// DeleteApplicationAgent by ID with optional etag, to prevent deleting ApplicationAgent currently changed by others.
	DeleteApplicationAgent(context.Context, *DeleteApplicationAgentRequest) (*DeleteApplicationAgentResponse, error)
	// RegisterApplicationAgentCredential creates new credentials for given application.
	// Methods either accept Public key, which is registered with credentials.
	// Or will generate new Public-Private pair and Private key is returned in Response.
	// Be aware, that in this case, Private key is sent back only once and cannot be retrieved ever again.
	RegisterApplicationAgentCredential(context.Context, *RegisterApplicationAgentCredentialRequest) (*RegisterApplicationAgentCredentialResponse, error)
	// ReadApplicationAgentCredential by ID and returns all attributes. But not Private or Public key, so keep them saved.
	ReadApplicationAgentCredential(context.Context, *ReadApplicationAgentCredentialRequest) (*ReadApplicationAgentCredentialResponse, error)
	// DeleteApplicationAgentCredential by ID.
	DeleteApplicationAgentCredential(context.Context, *DeleteApplicationAgentCredentialRequest) (*DeleteApplicationAgentCredentialResponse, error)
	// CreateServiceAccount for Customer or Application Space.
	CreateServiceAccount(context.Context, *CreateServiceAccountRequest) (*CreateServiceAccountResponse, error)
	// ReadServiceAccount by ID or name and returns all attributes.
	ReadServiceAccount(context.Context, *ReadServiceAccountRequest) (*ReadServiceAccountResponse, error)
	// UpdateServiceAccount by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateServiceAccount(context.Context, *UpdateServiceAccountRequest) (*UpdateServiceAccountResponse, error)
	// DeleteServiceAccount by ID with optional etag, to prevent deleting ServiceAccount currently changed by others.
	DeleteServiceAccount(context.Context, *DeleteServiceAccountRequest) (*DeleteServiceAccountResponse, error)
	// RegisterServiceAccountCredential creates new credentials for given Service Account.
	// Methods either accept Public key, which is registered with credentials.
	// Or will generate new Public-Private pair and Private key is returned in Response.
	// Be aware, that in this case, Private key is sent back only once and cannot be retrieved ever again.
	RegisterServiceAccountCredential(context.Context, *RegisterServiceAccountCredentialRequest) (*RegisterServiceAccountCredentialResponse, error)
	// ReadServiceAccountCredential by ID and returns all attributes. But not Private or Public key, so keep them saved.
	ReadServiceAccountCredential(context.Context, *ReadServiceAccountCredentialRequest) (*ReadServiceAccountCredentialResponse, error)
	// DeleteServiceAccountCredential by ID.
	DeleteServiceAccountCredential(context.Context, *DeleteServiceAccountCredentialRequest) (*DeleteServiceAccountCredentialResponse, error)
	// CreateTenant for given Issuer. See CreateApplicationSpace method description to get more knowledge
	// about Application Space and Issuer relation.
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	// ReadTenant by ID or name and returns all attributes.
	ReadTenant(context.Context, *ReadTenantRequest) (*ReadTenantResponse, error)
	// ListTenants in a given Application Space with list of names.
	ListTenants(*ListTenantsRequest, ConfigManagementAPI_ListTenantsServer) error
	// UpdateTenant by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error)
	// DeleteTenant by ID with optional etag, to prevent deleting Tenant currently changed by others.
	DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error)
	// ReadTenantConfig reads the default settings of the Tenant.
	ReadTenantConfig(context.Context, *ReadTenantConfigRequest) (*ReadTenantConfigResponse, error)
	// UpdateTenantConfig updates the default settings of the Tenant.
	UpdateTenantConfig(context.Context, *UpdateTenantConfigRequest) (*UpdateTenantConfigResponse, error)
	// CreateConfigNode on Customer, Application Space or Tenant level.
	// All generic configuration nodes are created by this endpoint.
	CreateConfigNode(context.Context, *CreateConfigNodeRequest) (*CreateConfigNodeResponse, error)
	// ReadConfigNode by ID. Method works with all generic configuration objects.
	ReadConfigNode(context.Context, *ReadConfigNodeRequest) (*ReadConfigNodeResponse, error)
	// UpdateConfigNode by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateConfigNode(context.Context, *UpdateConfigNodeRequest) (*UpdateConfigNodeResponse, error)
	// DeleteConfigNode by ID with optional etag, to prevent deleting configuration object currently changed by others.
	DeleteConfigNode(context.Context, *DeleteConfigNodeRequest) (*DeleteConfigNodeResponse, error)
	// ListConfigNodeVersions list previous versions of a given ConfigNode.
	ListConfigNodeVersions(context.Context, *ListConfigNodeVersionsRequest) (*ListConfigNodeVersionsResponse, error)
	// CreateOAuth2Provider under given Application Space.
	CreateOAuth2Provider(context.Context, *CreateOAuth2ProviderRequest) (*CreateOAuth2ProviderResponse, error)
	// ReadOAuth2Provider by ID and returns all attributes and configuration.
	ReadOAuth2Provider(context.Context, *ReadOAuth2ProviderRequest) (*ReadOAuth2ProviderResponse, error)
	// UpdateOAuth2Provider by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateOAuth2Provider(context.Context, *UpdateOAuth2ProviderRequest) (*UpdateOAuth2ProviderResponse, error)
	// DeleteOAuth2Provider by ID with optional etag, to prevent deleting Provider currently changed by others.
	DeleteOAuth2Provider(context.Context, *DeleteOAuth2ProviderRequest) (*DeleteOAuth2ProviderResponse, error)
	// CreateOAuth2Application under given OAuth2 Provider.
	CreateOAuth2Application(context.Context, *CreateOAuth2ApplicationRequest) (*CreateOAuth2ApplicationResponse, error)
	// ReadOAuth2Application by ID and returns all attributes and configuration.
	ReadOAuth2Application(context.Context, *ReadOAuth2ApplicationRequest) (*ReadOAuth2ApplicationResponse, error)
	// UpdateOAuth2Application by ID with optional etag, to prevent overwriting changes made by others in the same time.
	UpdateOAuth2Application(context.Context, *UpdateOAuth2ApplicationRequest) (*UpdateOAuth2ApplicationResponse, error)
	// DeleteOAuth2Application by ID with optional etag, to prevent deleting OAuth2 Application currently changed by others.
	DeleteOAuth2Application(context.Context, *DeleteOAuth2ApplicationRequest) (*DeleteOAuth2ApplicationResponse, error)
	// AssignPermissions to a digital twin.
	AssignPermissions(context.Context, *AssignPermissionsRequest) (*AssignPermissionsResponse, error)
	// RevokePermissions for a digital twin.
	RevokePermissions(context.Context, *RevokePermissionsRequest) (*RevokePermissionsResponse, error)
	// ListPermissions of Digital twins and Invitations related to a customer.
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	// GetSchemaHelpers for knowledge graph schema
	GetSchemaHelpers(context.Context, *GetSchemaHelpersRequest) (*GetSchemaHelpersResponse, error)
}

// UnimplementedConfigManagementAPIServer should be embedded to have forward compatible implementations.
type UnimplementedConfigManagementAPIServer struct {
}

func (UnimplementedConfigManagementAPIServer) ReadCustomer(context.Context, *ReadCustomerRequest) (*ReadCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCustomer not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadCustomerConfig(context.Context, *ReadCustomerConfigRequest) (*ReadCustomerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCustomerConfig not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateCustomerConfig(context.Context, *UpdateCustomerConfigRequest) (*UpdateCustomerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerConfig not implemented")
}
func (UnimplementedConfigManagementAPIServer) CreateApplicationSpace(context.Context, *CreateApplicationSpaceRequest) (*CreateApplicationSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationSpace not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadApplicationSpace(context.Context, *ReadApplicationSpaceRequest) (*ReadApplicationSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplicationSpace not implemented")
}
func (UnimplementedConfigManagementAPIServer) ListApplicationSpaces(*ListApplicationSpacesRequest, ConfigManagementAPI_ListApplicationSpacesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListApplicationSpaces not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateApplicationSpace(context.Context, *UpdateApplicationSpaceRequest) (*UpdateApplicationSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationSpace not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteApplicationSpace(context.Context, *DeleteApplicationSpaceRequest) (*DeleteApplicationSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationSpace not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadApplicationSpaceConfig(context.Context, *ReadApplicationSpaceConfigRequest) (*ReadApplicationSpaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplicationSpaceConfig not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateApplicationSpaceConfig(context.Context, *UpdateApplicationSpaceConfigRequest) (*UpdateApplicationSpaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationSpaceConfig not implemented")
}
func (UnimplementedConfigManagementAPIServer) CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadApplication(context.Context, *ReadApplicationRequest) (*ReadApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplication not implemented")
}
func (UnimplementedConfigManagementAPIServer) ListApplications(*ListApplicationsRequest, ConfigManagementAPI_ListApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedConfigManagementAPIServer) CreateApplicationAgent(context.Context, *CreateApplicationAgentRequest) (*CreateApplicationAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationAgent not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadApplicationAgent(context.Context, *ReadApplicationAgentRequest) (*ReadApplicationAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplicationAgent not implemented")
}
func (UnimplementedConfigManagementAPIServer) ListApplicationAgents(*ListApplicationAgentsRequest, ConfigManagementAPI_ListApplicationAgentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListApplicationAgents not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateApplicationAgent(context.Context, *UpdateApplicationAgentRequest) (*UpdateApplicationAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationAgent not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteApplicationAgent(context.Context, *DeleteApplicationAgentRequest) (*DeleteApplicationAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationAgent not implemented")
}
func (UnimplementedConfigManagementAPIServer) RegisterApplicationAgentCredential(context.Context, *RegisterApplicationAgentCredentialRequest) (*RegisterApplicationAgentCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApplicationAgentCredential not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadApplicationAgentCredential(context.Context, *ReadApplicationAgentCredentialRequest) (*ReadApplicationAgentCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplicationAgentCredential not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteApplicationAgentCredential(context.Context, *DeleteApplicationAgentCredentialRequest) (*DeleteApplicationAgentCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationAgentCredential not implemented")
}
func (UnimplementedConfigManagementAPIServer) CreateServiceAccount(context.Context, *CreateServiceAccountRequest) (*CreateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccount not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadServiceAccount(context.Context, *ReadServiceAccountRequest) (*ReadServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadServiceAccount not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateServiceAccount(context.Context, *UpdateServiceAccountRequest) (*UpdateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceAccount not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteServiceAccount(context.Context, *DeleteServiceAccountRequest) (*DeleteServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceAccount not implemented")
}
func (UnimplementedConfigManagementAPIServer) RegisterServiceAccountCredential(context.Context, *RegisterServiceAccountCredentialRequest) (*RegisterServiceAccountCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServiceAccountCredential not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadServiceAccountCredential(context.Context, *ReadServiceAccountCredentialRequest) (*ReadServiceAccountCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadServiceAccountCredential not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteServiceAccountCredential(context.Context, *DeleteServiceAccountCredentialRequest) (*DeleteServiceAccountCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceAccountCredential not implemented")
}
func (UnimplementedConfigManagementAPIServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadTenant(context.Context, *ReadTenantRequest) (*ReadTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTenant not implemented")
}
func (UnimplementedConfigManagementAPIServer) ListTenants(*ListTenantsRequest, ConfigManagementAPI_ListTenantsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadTenantConfig(context.Context, *ReadTenantConfigRequest) (*ReadTenantConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTenantConfig not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateTenantConfig(context.Context, *UpdateTenantConfigRequest) (*UpdateTenantConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantConfig not implemented")
}
func (UnimplementedConfigManagementAPIServer) CreateConfigNode(context.Context, *CreateConfigNodeRequest) (*CreateConfigNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigNode not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadConfigNode(context.Context, *ReadConfigNodeRequest) (*ReadConfigNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadConfigNode not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateConfigNode(context.Context, *UpdateConfigNodeRequest) (*UpdateConfigNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigNode not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteConfigNode(context.Context, *DeleteConfigNodeRequest) (*DeleteConfigNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigNode not implemented")
}
func (UnimplementedConfigManagementAPIServer) ListConfigNodeVersions(context.Context, *ListConfigNodeVersionsRequest) (*ListConfigNodeVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigNodeVersions not implemented")
}
func (UnimplementedConfigManagementAPIServer) CreateOAuth2Provider(context.Context, *CreateOAuth2ProviderRequest) (*CreateOAuth2ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAuth2Provider not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadOAuth2Provider(context.Context, *ReadOAuth2ProviderRequest) (*ReadOAuth2ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOAuth2Provider not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateOAuth2Provider(context.Context, *UpdateOAuth2ProviderRequest) (*UpdateOAuth2ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOAuth2Provider not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteOAuth2Provider(context.Context, *DeleteOAuth2ProviderRequest) (*DeleteOAuth2ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOAuth2Provider not implemented")
}
func (UnimplementedConfigManagementAPIServer) CreateOAuth2Application(context.Context, *CreateOAuth2ApplicationRequest) (*CreateOAuth2ApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAuth2Application not implemented")
}
func (UnimplementedConfigManagementAPIServer) ReadOAuth2Application(context.Context, *ReadOAuth2ApplicationRequest) (*ReadOAuth2ApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOAuth2Application not implemented")
}
func (UnimplementedConfigManagementAPIServer) UpdateOAuth2Application(context.Context, *UpdateOAuth2ApplicationRequest) (*UpdateOAuth2ApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOAuth2Application not implemented")
}
func (UnimplementedConfigManagementAPIServer) DeleteOAuth2Application(context.Context, *DeleteOAuth2ApplicationRequest) (*DeleteOAuth2ApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOAuth2Application not implemented")
}
func (UnimplementedConfigManagementAPIServer) AssignPermissions(context.Context, *AssignPermissionsRequest) (*AssignPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPermissions not implemented")
}
func (UnimplementedConfigManagementAPIServer) RevokePermissions(context.Context, *RevokePermissionsRequest) (*RevokePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePermissions not implemented")
}
func (UnimplementedConfigManagementAPIServer) ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedConfigManagementAPIServer) GetSchemaHelpers(context.Context, *GetSchemaHelpersRequest) (*GetSchemaHelpersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaHelpers not implemented")
}

// UnsafeConfigManagementAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigManagementAPIServer will
// result in compilation errors.
type UnsafeConfigManagementAPIServer interface {
	mustEmbedUnimplementedConfigManagementAPIServer()
}

func RegisterConfigManagementAPIServer(s grpc.ServiceRegistrar, srv ConfigManagementAPIServer) {
	s.RegisterService(&ConfigManagementAPI_ServiceDesc, srv)
}

func _ConfigManagementAPI_ReadCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadCustomer(ctx, req.(*ReadCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadCustomerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCustomerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadCustomerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadCustomerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadCustomerConfig(ctx, req.(*ReadCustomerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_UpdateCustomerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateCustomerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateCustomerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateCustomerConfig(ctx, req.(*UpdateCustomerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_CreateApplicationSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).CreateApplicationSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_CreateApplicationSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).CreateApplicationSpace(ctx, req.(*CreateApplicationSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadApplicationSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadApplicationSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadApplicationSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadApplicationSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadApplicationSpace(ctx, req.(*ReadApplicationSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ListApplicationSpaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListApplicationSpacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigManagementAPIServer).ListApplicationSpaces(m, &configManagementAPIListApplicationSpacesServer{stream})
}

type ConfigManagementAPI_ListApplicationSpacesServer interface {
	Send(*ListApplicationSpacesResponse) error
	grpc.ServerStream
}

type configManagementAPIListApplicationSpacesServer struct {
	grpc.ServerStream
}

func (x *configManagementAPIListApplicationSpacesServer) Send(m *ListApplicationSpacesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigManagementAPI_UpdateApplicationSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateApplicationSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateApplicationSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateApplicationSpace(ctx, req.(*UpdateApplicationSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteApplicationSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteApplicationSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteApplicationSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteApplicationSpace(ctx, req.(*DeleteApplicationSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadApplicationSpaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadApplicationSpaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadApplicationSpaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadApplicationSpaceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadApplicationSpaceConfig(ctx, req.(*ReadApplicationSpaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_UpdateApplicationSpaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationSpaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateApplicationSpaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateApplicationSpaceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateApplicationSpaceConfig(ctx, req.(*UpdateApplicationSpaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_CreateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadApplication(ctx, req.(*ReadApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ListApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListApplicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigManagementAPIServer).ListApplications(m, &configManagementAPIListApplicationsServer{stream})
}

type ConfigManagementAPI_ListApplicationsServer interface {
	Send(*ListApplicationsResponse) error
	grpc.ServerStream
}

type configManagementAPIListApplicationsServer struct {
	grpc.ServerStream
}

func (x *configManagementAPIListApplicationsServer) Send(m *ListApplicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigManagementAPI_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_CreateApplicationAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).CreateApplicationAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_CreateApplicationAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).CreateApplicationAgent(ctx, req.(*CreateApplicationAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadApplicationAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadApplicationAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadApplicationAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadApplicationAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadApplicationAgent(ctx, req.(*ReadApplicationAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ListApplicationAgents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListApplicationAgentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigManagementAPIServer).ListApplicationAgents(m, &configManagementAPIListApplicationAgentsServer{stream})
}

type ConfigManagementAPI_ListApplicationAgentsServer interface {
	Send(*ListApplicationAgentsResponse) error
	grpc.ServerStream
}

type configManagementAPIListApplicationAgentsServer struct {
	grpc.ServerStream
}

func (x *configManagementAPIListApplicationAgentsServer) Send(m *ListApplicationAgentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigManagementAPI_UpdateApplicationAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateApplicationAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateApplicationAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateApplicationAgent(ctx, req.(*UpdateApplicationAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteApplicationAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteApplicationAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteApplicationAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteApplicationAgent(ctx, req.(*DeleteApplicationAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_RegisterApplicationAgentCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterApplicationAgentCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).RegisterApplicationAgentCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_RegisterApplicationAgentCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).RegisterApplicationAgentCredential(ctx, req.(*RegisterApplicationAgentCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadApplicationAgentCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadApplicationAgentCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadApplicationAgentCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadApplicationAgentCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadApplicationAgentCredential(ctx, req.(*ReadApplicationAgentCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteApplicationAgentCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationAgentCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteApplicationAgentCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteApplicationAgentCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteApplicationAgentCredential(ctx, req.(*DeleteApplicationAgentCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_CreateServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).CreateServiceAccount(ctx, req.(*CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadServiceAccount(ctx, req.(*ReadServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_UpdateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateServiceAccount(ctx, req.(*UpdateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteServiceAccount(ctx, req.(*DeleteServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_RegisterServiceAccountCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceAccountCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).RegisterServiceAccountCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_RegisterServiceAccountCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).RegisterServiceAccountCredential(ctx, req.(*RegisterServiceAccountCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadServiceAccountCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadServiceAccountCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadServiceAccountCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadServiceAccountCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadServiceAccountCredential(ctx, req.(*ReadServiceAccountCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteServiceAccountCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceAccountCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteServiceAccountCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteServiceAccountCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteServiceAccountCredential(ctx, req.(*DeleteServiceAccountCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadTenant(ctx, req.(*ReadTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ListTenants_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTenantsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigManagementAPIServer).ListTenants(m, &configManagementAPIListTenantsServer{stream})
}

type ConfigManagementAPI_ListTenantsServer interface {
	Send(*ListTenantsResponse) error
	grpc.ServerStream
}

type configManagementAPIListTenantsServer struct {
	grpc.ServerStream
}

func (x *configManagementAPIListTenantsServer) Send(m *ListTenantsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigManagementAPI_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadTenantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTenantConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadTenantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadTenantConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadTenantConfig(ctx, req.(*ReadTenantConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_UpdateTenantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateTenantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateTenantConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateTenantConfig(ctx, req.(*UpdateTenantConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_CreateConfigNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).CreateConfigNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_CreateConfigNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).CreateConfigNode(ctx, req.(*CreateConfigNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadConfigNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadConfigNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadConfigNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadConfigNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadConfigNode(ctx, req.(*ReadConfigNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_UpdateConfigNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateConfigNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateConfigNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateConfigNode(ctx, req.(*UpdateConfigNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteConfigNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteConfigNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteConfigNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteConfigNode(ctx, req.(*DeleteConfigNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ListConfigNodeVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigNodeVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ListConfigNodeVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ListConfigNodeVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ListConfigNodeVersions(ctx, req.(*ListConfigNodeVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_CreateOAuth2Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOAuth2ProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).CreateOAuth2Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_CreateOAuth2Provider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).CreateOAuth2Provider(ctx, req.(*CreateOAuth2ProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadOAuth2Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOAuth2ProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadOAuth2Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadOAuth2Provider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadOAuth2Provider(ctx, req.(*ReadOAuth2ProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_UpdateOAuth2Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOAuth2ProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateOAuth2Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateOAuth2Provider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateOAuth2Provider(ctx, req.(*UpdateOAuth2ProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteOAuth2Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOAuth2ProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteOAuth2Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteOAuth2Provider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteOAuth2Provider(ctx, req.(*DeleteOAuth2ProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_CreateOAuth2Application_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOAuth2ApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).CreateOAuth2Application(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_CreateOAuth2Application_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).CreateOAuth2Application(ctx, req.(*CreateOAuth2ApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ReadOAuth2Application_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOAuth2ApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ReadOAuth2Application(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ReadOAuth2Application_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ReadOAuth2Application(ctx, req.(*ReadOAuth2ApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_UpdateOAuth2Application_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOAuth2ApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).UpdateOAuth2Application(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_UpdateOAuth2Application_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).UpdateOAuth2Application(ctx, req.(*UpdateOAuth2ApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_DeleteOAuth2Application_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOAuth2ApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).DeleteOAuth2Application(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_DeleteOAuth2Application_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).DeleteOAuth2Application(ctx, req.(*DeleteOAuth2ApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_AssignPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).AssignPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_AssignPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).AssignPermissions(ctx, req.(*AssignPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_RevokePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).RevokePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_RevokePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).RevokePermissions(ctx, req.(*RevokePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).ListPermissions(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementAPI_GetSchemaHelpers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaHelpersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementAPIServer).GetSchemaHelpers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementAPI_GetSchemaHelpers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementAPIServer).GetSchemaHelpers(ctx, req.(*GetSchemaHelpersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigManagementAPI_ServiceDesc is the grpc.ServiceDesc for ConfigManagementAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigManagementAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indykite.config.v1beta1.ConfigManagementAPI",
	HandlerType: (*ConfigManagementAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadCustomer",
			Handler:    _ConfigManagementAPI_ReadCustomer_Handler,
		},
		{
			MethodName: "ReadCustomerConfig",
			Handler:    _ConfigManagementAPI_ReadCustomerConfig_Handler,
		},
		{
			MethodName: "UpdateCustomerConfig",
			Handler:    _ConfigManagementAPI_UpdateCustomerConfig_Handler,
		},
		{
			MethodName: "CreateApplicationSpace",
			Handler:    _ConfigManagementAPI_CreateApplicationSpace_Handler,
		},
		{
			MethodName: "ReadApplicationSpace",
			Handler:    _ConfigManagementAPI_ReadApplicationSpace_Handler,
		},
		{
			MethodName: "UpdateApplicationSpace",
			Handler:    _ConfigManagementAPI_UpdateApplicationSpace_Handler,
		},
		{
			MethodName: "DeleteApplicationSpace",
			Handler:    _ConfigManagementAPI_DeleteApplicationSpace_Handler,
		},
		{
			MethodName: "ReadApplicationSpaceConfig",
			Handler:    _ConfigManagementAPI_ReadApplicationSpaceConfig_Handler,
		},
		{
			MethodName: "UpdateApplicationSpaceConfig",
			Handler:    _ConfigManagementAPI_UpdateApplicationSpaceConfig_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _ConfigManagementAPI_CreateApplication_Handler,
		},
		{
			MethodName: "ReadApplication",
			Handler:    _ConfigManagementAPI_ReadApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _ConfigManagementAPI_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ConfigManagementAPI_DeleteApplication_Handler,
		},
		{
			MethodName: "CreateApplicationAgent",
			Handler:    _ConfigManagementAPI_CreateApplicationAgent_Handler,
		},
		{
			MethodName: "ReadApplicationAgent",
			Handler:    _ConfigManagementAPI_ReadApplicationAgent_Handler,
		},
		{
			MethodName: "UpdateApplicationAgent",
			Handler:    _ConfigManagementAPI_UpdateApplicationAgent_Handler,
		},
		{
			MethodName: "DeleteApplicationAgent",
			Handler:    _ConfigManagementAPI_DeleteApplicationAgent_Handler,
		},
		{
			MethodName: "RegisterApplicationAgentCredential",
			Handler:    _ConfigManagementAPI_RegisterApplicationAgentCredential_Handler,
		},
		{
			MethodName: "ReadApplicationAgentCredential",
			Handler:    _ConfigManagementAPI_ReadApplicationAgentCredential_Handler,
		},
		{
			MethodName: "DeleteApplicationAgentCredential",
			Handler:    _ConfigManagementAPI_DeleteApplicationAgentCredential_Handler,
		},
		{
			MethodName: "CreateServiceAccount",
			Handler:    _ConfigManagementAPI_CreateServiceAccount_Handler,
		},
		{
			MethodName: "ReadServiceAccount",
			Handler:    _ConfigManagementAPI_ReadServiceAccount_Handler,
		},
		{
			MethodName: "UpdateServiceAccount",
			Handler:    _ConfigManagementAPI_UpdateServiceAccount_Handler,
		},
		{
			MethodName: "DeleteServiceAccount",
			Handler:    _ConfigManagementAPI_DeleteServiceAccount_Handler,
		},
		{
			MethodName: "RegisterServiceAccountCredential",
			Handler:    _ConfigManagementAPI_RegisterServiceAccountCredential_Handler,
		},
		{
			MethodName: "ReadServiceAccountCredential",
			Handler:    _ConfigManagementAPI_ReadServiceAccountCredential_Handler,
		},
		{
			MethodName: "DeleteServiceAccountCredential",
			Handler:    _ConfigManagementAPI_DeleteServiceAccountCredential_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _ConfigManagementAPI_CreateTenant_Handler,
		},
		{
			MethodName: "ReadTenant",
			Handler:    _ConfigManagementAPI_ReadTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _ConfigManagementAPI_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _ConfigManagementAPI_DeleteTenant_Handler,
		},
		{
			MethodName: "ReadTenantConfig",
			Handler:    _ConfigManagementAPI_ReadTenantConfig_Handler,
		},
		{
			MethodName: "UpdateTenantConfig",
			Handler:    _ConfigManagementAPI_UpdateTenantConfig_Handler,
		},
		{
			MethodName: "CreateConfigNode",
			Handler:    _ConfigManagementAPI_CreateConfigNode_Handler,
		},
		{
			MethodName: "ReadConfigNode",
			Handler:    _ConfigManagementAPI_ReadConfigNode_Handler,
		},
		{
			MethodName: "UpdateConfigNode",
			Handler:    _ConfigManagementAPI_UpdateConfigNode_Handler,
		},
		{
			MethodName: "DeleteConfigNode",
			Handler:    _ConfigManagementAPI_DeleteConfigNode_Handler,
		},
		{
			MethodName: "ListConfigNodeVersions",
			Handler:    _ConfigManagementAPI_ListConfigNodeVersions_Handler,
		},
		{
			MethodName: "CreateOAuth2Provider",
			Handler:    _ConfigManagementAPI_CreateOAuth2Provider_Handler,
		},
		{
			MethodName: "ReadOAuth2Provider",
			Handler:    _ConfigManagementAPI_ReadOAuth2Provider_Handler,
		},
		{
			MethodName: "UpdateOAuth2Provider",
			Handler:    _ConfigManagementAPI_UpdateOAuth2Provider_Handler,
		},
		{
			MethodName: "DeleteOAuth2Provider",
			Handler:    _ConfigManagementAPI_DeleteOAuth2Provider_Handler,
		},
		{
			MethodName: "CreateOAuth2Application",
			Handler:    _ConfigManagementAPI_CreateOAuth2Application_Handler,
		},
		{
			MethodName: "ReadOAuth2Application",
			Handler:    _ConfigManagementAPI_ReadOAuth2Application_Handler,
		},
		{
			MethodName: "UpdateOAuth2Application",
			Handler:    _ConfigManagementAPI_UpdateOAuth2Application_Handler,
		},
		{
			MethodName: "DeleteOAuth2Application",
			Handler:    _ConfigManagementAPI_DeleteOAuth2Application_Handler,
		},
		{
			MethodName: "AssignPermissions",
			Handler:    _ConfigManagementAPI_AssignPermissions_Handler,
		},
		{
			MethodName: "RevokePermissions",
			Handler:    _ConfigManagementAPI_RevokePermissions_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _ConfigManagementAPI_ListPermissions_Handler,
		},
		{
			MethodName: "GetSchemaHelpers",
			Handler:    _ConfigManagementAPI_GetSchemaHelpers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListApplicationSpaces",
			Handler:       _ConfigManagementAPI_ListApplicationSpaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListApplications",
			Handler:       _ConfigManagementAPI_ListApplications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListApplicationAgents",
			Handler:       _ConfigManagementAPI_ListApplicationAgents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTenants",
			Handler:       _ConfigManagementAPI_ListTenants_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "indykite/config/v1beta1/config_management_api.proto",
}
