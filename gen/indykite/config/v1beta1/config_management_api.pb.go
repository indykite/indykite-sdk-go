// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: indykite/config/v1beta1/config_management_api.proto

package configv1beta1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadCustomerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*ReadCustomerRequest_Id
	//	*ReadCustomerRequest_Name
	Identifier isReadCustomerRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadCustomerRequest) Reset() {
	*x = ReadCustomerRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCustomerRequest) ProtoMessage() {}

func (x *ReadCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCustomerRequest.ProtoReflect.Descriptor instead.
func (*ReadCustomerRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{0}
}

func (x *ReadCustomerRequest) GetIdentifier() isReadCustomerRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ReadCustomerRequest) GetId() string {
	if x != nil {
		if x, ok := x.Identifier.(*ReadCustomerRequest_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *ReadCustomerRequest) GetName() string {
	if x != nil {
		if x, ok := x.Identifier.(*ReadCustomerRequest_Name); ok {
			return x.Name
		}
	}
	return ""
}

func (x *ReadCustomerRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadCustomerRequest_Identifier interface {
	isReadCustomerRequest_Identifier()
}

type ReadCustomerRequest_Id struct {
	// Id is globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadCustomerRequest_Name struct {
	// Name is unique domain name of customer.
	// The name value is immutable.
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadCustomerRequest_Id) isReadCustomerRequest_Identifier() {}

func (*ReadCustomerRequest_Name) isReadCustomerRequest_Identifier() {}

type ReadCustomerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Customer      *Customer              `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadCustomerResponse) Reset() {
	*x = ReadCustomerResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCustomerResponse) ProtoMessage() {}

func (x *ReadCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCustomerResponse.ProtoReflect.Descriptor instead.
func (*ReadCustomerResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{1}
}

func (x *ReadCustomerResponse) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

type CreateApplicationSpaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CustomerId associated with the request.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Name is unique and immutable name. It's not globally unique, but only unique in a customer scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	Region        string   `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateApplicationSpaceRequest) Reset() {
	*x = CreateApplicationSpaceRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationSpaceRequest) ProtoMessage() {}

func (x *CreateApplicationSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationSpaceRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationSpaceRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateApplicationSpaceRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *CreateApplicationSpaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateApplicationSpaceRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateApplicationSpaceRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateApplicationSpaceRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

func (x *CreateApplicationSpaceRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type CreateApplicationSpaceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateApplicationSpaceResponse) Reset() {
	*x = CreateApplicationSpaceResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationSpaceResponse) ProtoMessage() {}

func (x *CreateApplicationSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationSpaceResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationSpaceResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{3}
}

func (x *CreateApplicationSpaceResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationSpaceResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateApplicationSpaceResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateApplicationSpaceResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateApplicationSpaceResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreateApplicationSpaceResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateApplicationSpaceResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadApplicationSpaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*ReadApplicationSpaceRequest_Id
	//	*ReadApplicationSpaceRequest_Name
	Identifier isReadApplicationSpaceRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadApplicationSpaceRequest) Reset() {
	*x = ReadApplicationSpaceRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationSpaceRequest) ProtoMessage() {}

func (x *ReadApplicationSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationSpaceRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationSpaceRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{4}
}

func (x *ReadApplicationSpaceRequest) GetIdentifier() isReadApplicationSpaceRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ReadApplicationSpaceRequest) GetId() string {
	if x != nil {
		if x, ok := x.Identifier.(*ReadApplicationSpaceRequest_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *ReadApplicationSpaceRequest) GetName() *UniqueNameIdentifier {
	if x != nil {
		if x, ok := x.Identifier.(*ReadApplicationSpaceRequest_Name); ok {
			return x.Name
		}
	}
	return nil
}

func (x *ReadApplicationSpaceRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadApplicationSpaceRequest_Identifier interface {
	isReadApplicationSpaceRequest_Identifier()
}

type ReadApplicationSpaceRequest_Id struct {
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadApplicationSpaceRequest_Name struct {
	// Name contains the client generated unique identifier with name.
	Name *UniqueNameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadApplicationSpaceRequest_Id) isReadApplicationSpaceRequest_Identifier() {}

func (*ReadApplicationSpaceRequest_Name) isReadApplicationSpaceRequest_Identifier() {}

type ReadApplicationSpaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppSpace      *ApplicationSpace      `protobuf:"bytes,2,opt,name=app_space,json=appSpace,proto3" json:"app_space,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadApplicationSpaceResponse) Reset() {
	*x = ReadApplicationSpaceResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationSpaceResponse) ProtoMessage() {}

func (x *ReadApplicationSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationSpaceResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationSpaceResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{5}
}

func (x *ReadApplicationSpaceResponse) GetAppSpace() *ApplicationSpace {
	if x != nil {
		return x.AppSpace
	}
	return nil
}

type ListApplicationSpacesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Match documents with exact name search.
	Match []string `protobuf:"bytes,2,rep,name=match,proto3" json:"match,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApplicationSpacesRequest) Reset() {
	*x = ListApplicationSpacesRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApplicationSpacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationSpacesRequest) ProtoMessage() {}

func (x *ListApplicationSpacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationSpacesRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationSpacesRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{6}
}

func (x *ListApplicationSpacesRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ListApplicationSpacesRequest) GetMatch() []string {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ListApplicationSpacesRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListApplicationSpacesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppSpace      *ApplicationSpace      `protobuf:"bytes,1,opt,name=app_space,json=appSpace,proto3" json:"app_space,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApplicationSpacesResponse) Reset() {
	*x = ListApplicationSpacesResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApplicationSpacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationSpacesResponse) ProtoMessage() {}

func (x *ListApplicationSpacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationSpacesResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationSpacesResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{7}
}

func (x *ListApplicationSpacesResponse) GetAppSpace() *ApplicationSpace {
	if x != nil {
		return x.AppSpace
	}
	return nil
}

type UpdateApplicationSpaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationSpaceRequest) Reset() {
	*x = UpdateApplicationSpaceRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationSpaceRequest) ProtoMessage() {}

func (x *UpdateApplicationSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationSpaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationSpaceRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateApplicationSpaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationSpaceRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateApplicationSpaceRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateApplicationSpaceRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateApplicationSpaceRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type UpdateApplicationSpaceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationSpaceResponse) Reset() {
	*x = UpdateApplicationSpaceResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationSpaceResponse) ProtoMessage() {}

func (x *UpdateApplicationSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationSpaceResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationSpaceResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateApplicationSpaceResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationSpaceResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UpdateApplicationSpaceResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpdateApplicationSpaceResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateApplicationSpaceResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdateApplicationSpaceResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateApplicationSpaceResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type DeleteApplicationSpaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the Globally unique identifier of object to delete.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationSpaceRequest) Reset() {
	*x = DeleteApplicationSpaceRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationSpaceRequest) ProtoMessage() {}

func (x *DeleteApplicationSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationSpaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationSpaceRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteApplicationSpaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationSpaceRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteApplicationSpaceRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteApplicationSpaceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationSpaceResponse) Reset() {
	*x = DeleteApplicationSpaceResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationSpaceResponse) ProtoMessage() {}

func (x *DeleteApplicationSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationSpaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationSpaceResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteApplicationSpaceResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type CreateApplicationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ApplicationSpaceId defines the parent container identifier.
	AppSpaceId string `protobuf:"bytes,1,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateApplicationRequest) Reset() {
	*x = CreateApplicationRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationRequest) ProtoMessage() {}

func (x *CreateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{12}
}

func (x *CreateApplicationRequest) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *CreateApplicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateApplicationRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateApplicationRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type CreateApplicationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateApplicationResponse) Reset() {
	*x = CreateApplicationResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationResponse) ProtoMessage() {}

func (x *CreateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{13}
}

func (x *CreateApplicationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateApplicationResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateApplicationResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateApplicationResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreateApplicationResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateApplicationResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadApplicationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*ReadApplicationRequest_Id
	//	*ReadApplicationRequest_Name
	Identifier isReadApplicationRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadApplicationRequest) Reset() {
	*x = ReadApplicationRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationRequest) ProtoMessage() {}

func (x *ReadApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{14}
}

func (x *ReadApplicationRequest) GetIdentifier() isReadApplicationRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ReadApplicationRequest) GetId() string {
	if x != nil {
		if x, ok := x.Identifier.(*ReadApplicationRequest_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *ReadApplicationRequest) GetName() *UniqueNameIdentifier {
	if x != nil {
		if x, ok := x.Identifier.(*ReadApplicationRequest_Name); ok {
			return x.Name
		}
	}
	return nil
}

func (x *ReadApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadApplicationRequest_Identifier interface {
	isReadApplicationRequest_Identifier()
}

type ReadApplicationRequest_Id struct {
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadApplicationRequest_Name struct {
	// Name contains the client generated unique identifier with name.
	Name *UniqueNameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadApplicationRequest_Id) isReadApplicationRequest_Identifier() {}

func (*ReadApplicationRequest_Name) isReadApplicationRequest_Identifier() {}

type ReadApplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Application   *Application           `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadApplicationResponse) Reset() {
	*x = ReadApplicationResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationResponse) ProtoMessage() {}

func (x *ReadApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{15}
}

func (x *ReadApplicationResponse) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

type ListApplicationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	AppSpaceId string `protobuf:"bytes,1,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// Match documents with exact name search.
	Match []string `protobuf:"bytes,2,rep,name=match,proto3" json:"match,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApplicationsRequest) Reset() {
	*x = ListApplicationsRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsRequest) ProtoMessage() {}

func (x *ListApplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{16}
}

func (x *ListApplicationsRequest) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ListApplicationsRequest) GetMatch() []string {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ListApplicationsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListApplicationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Application   *Application           `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApplicationsResponse) Reset() {
	*x = ListApplicationsResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsResponse) ProtoMessage() {}

func (x *ListApplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListApplicationsResponse) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

type UpdateApplicationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationRequest) Reset() {
	*x = UpdateApplicationRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationRequest) ProtoMessage() {}

func (x *UpdateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateApplicationRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateApplicationRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type UpdateApplicationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationResponse) Reset() {
	*x = UpdateApplicationResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationResponse) ProtoMessage() {}

func (x *UpdateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateApplicationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UpdateApplicationResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpdateApplicationResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateApplicationResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdateApplicationResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateApplicationResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type DeleteApplicationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the Globally unique identifier of object to delete.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationRequest) Reset() {
	*x = DeleteApplicationRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationRequest) ProtoMessage() {}

func (x *DeleteApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteApplicationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationResponse) Reset() {
	*x = DeleteApplicationResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationResponse) ProtoMessage() {}

func (x *DeleteApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteApplicationResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type CreateApplicationAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ApplicationId is the Parent Application ID.
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of ApplicationAgent.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of ApplicationAgent.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks      []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	ApiPermissions []string `protobuf:"bytes,6,rep,name=api_permissions,json=apiPermissions,proto3" json:"api_permissions,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateApplicationAgentRequest) Reset() {
	*x = CreateApplicationAgentRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationAgentRequest) ProtoMessage() {}

func (x *CreateApplicationAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationAgentRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationAgentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{22}
}

func (x *CreateApplicationAgentRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CreateApplicationAgentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateApplicationAgentRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateApplicationAgentRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateApplicationAgentRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

func (x *CreateApplicationAgentRequest) GetApiPermissions() []string {
	if x != nil {
		return x.ApiPermissions
	}
	return nil
}

type CreateApplicationAgentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,8,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,5,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,6,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateApplicationAgentResponse) Reset() {
	*x = CreateApplicationAgentResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationAgentResponse) ProtoMessage() {}

func (x *CreateApplicationAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationAgentResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationAgentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{23}
}

func (x *CreateApplicationAgentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationAgentResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateApplicationAgentResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateApplicationAgentResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateApplicationAgentResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreateApplicationAgentResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateApplicationAgentResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadApplicationAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*ReadApplicationAgentRequest_Id
	//	*ReadApplicationAgentRequest_Name
	Identifier isReadApplicationAgentRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadApplicationAgentRequest) Reset() {
	*x = ReadApplicationAgentRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAgentRequest) ProtoMessage() {}

func (x *ReadApplicationAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAgentRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationAgentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{24}
}

func (x *ReadApplicationAgentRequest) GetIdentifier() isReadApplicationAgentRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ReadApplicationAgentRequest) GetId() string {
	if x != nil {
		if x, ok := x.Identifier.(*ReadApplicationAgentRequest_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *ReadApplicationAgentRequest) GetName() *UniqueNameIdentifier {
	if x != nil {
		if x, ok := x.Identifier.(*ReadApplicationAgentRequest_Name); ok {
			return x.Name
		}
	}
	return nil
}

func (x *ReadApplicationAgentRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadApplicationAgentRequest_Identifier interface {
	isReadApplicationAgentRequest_Identifier()
}

type ReadApplicationAgentRequest_Id struct {
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadApplicationAgentRequest_Name struct {
	// Name contains the client generated unique identifier with name.
	Name *UniqueNameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadApplicationAgentRequest_Id) isReadApplicationAgentRequest_Identifier() {}

func (*ReadApplicationAgentRequest_Name) isReadApplicationAgentRequest_Identifier() {}

type ReadApplicationAgentResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ApplicationAgent *ApplicationAgent      `protobuf:"bytes,2,opt,name=application_agent,json=applicationAgent,proto3" json:"application_agent,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ReadApplicationAgentResponse) Reset() {
	*x = ReadApplicationAgentResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAgentResponse) ProtoMessage() {}

func (x *ReadApplicationAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAgentResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationAgentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{25}
}

func (x *ReadApplicationAgentResponse) GetApplicationAgent() *ApplicationAgent {
	if x != nil {
		return x.ApplicationAgent
	}
	return nil
}

type ListApplicationAgentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	AppSpaceId string `protobuf:"bytes,1,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// Match documents with exact name search.
	Match []string `protobuf:"bytes,2,rep,name=match,proto3" json:"match,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApplicationAgentsRequest) Reset() {
	*x = ListApplicationAgentsRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApplicationAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationAgentsRequest) ProtoMessage() {}

func (x *ListApplicationAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationAgentsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{26}
}

func (x *ListApplicationAgentsRequest) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ListApplicationAgentsRequest) GetMatch() []string {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ListApplicationAgentsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListApplicationAgentsResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ApplicationAgent *ApplicationAgent      `protobuf:"bytes,1,opt,name=application_agent,json=applicationAgent,proto3" json:"application_agent,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListApplicationAgentsResponse) Reset() {
	*x = ListApplicationAgentsResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApplicationAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationAgentsResponse) ProtoMessage() {}

func (x *ListApplicationAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationAgentsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{27}
}

func (x *ListApplicationAgentsResponse) GetApplicationAgent() *ApplicationAgent {
	if x != nil {
		return x.ApplicationAgent
	}
	return nil
}

type UpdateApplicationAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationAgentRequest) Reset() {
	*x = UpdateApplicationAgentRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationAgentRequest) ProtoMessage() {}

func (x *UpdateApplicationAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationAgentRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationAgentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateApplicationAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationAgentRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateApplicationAgentRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateApplicationAgentRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateApplicationAgentRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type UpdateApplicationAgentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationAgentResponse) Reset() {
	*x = UpdateApplicationAgentResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationAgentResponse) ProtoMessage() {}

func (x *UpdateApplicationAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationAgentResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationAgentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateApplicationAgentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationAgentResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UpdateApplicationAgentResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpdateApplicationAgentResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateApplicationAgentResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdateApplicationAgentResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateApplicationAgentResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type DeleteApplicationAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the Globally unique identifier of object to delete.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationAgentRequest) Reset() {
	*x = DeleteApplicationAgentRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAgentRequest) ProtoMessage() {}

func (x *DeleteApplicationAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAgentRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAgentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteApplicationAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationAgentRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteApplicationAgentRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteApplicationAgentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationAgentResponse) Reset() {
	*x = DeleteApplicationAgentResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAgentResponse) ProtoMessage() {}

func (x *DeleteApplicationAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAgentResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAgentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteApplicationAgentResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type RegisterApplicationAgentCredentialRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The application agent to create the credential for.
	ApplicationAgentId string `protobuf:"bytes,1,opt,name=application_agent_id,json=applicationAgentId,proto3" json:"application_agent_id,omitempty"`
	// The human readable name for this credential. The name will be SHA256 Thumbprint of the public key to identify this
	// credential and it can't be changed. That value is hard to recognise so better identification you can set a
	// display name.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The PublicKey is optional when generate the supported secret RSA, EC or Ed25519 key locally and only upload
	// the public key. If this field is empty the server generate one EC256 keypair and inserts it into the configuration.
	//
	// Types that are valid to be assigned to PublicKey:
	//
	//	*RegisterApplicationAgentCredentialRequest_Jwk
	//	*RegisterApplicationAgentCredentialRequest_Pem
	PublicKey isRegisterApplicationAgentCredentialRequest_PublicKey `protobuf_oneof:"public_key"`
	// The expiration time sets the last time when client connecting with this credential is accepted.
	// If this time is within 2 years the server automatically generates a token with the same lifetime else the
	// client SDK must generate JWT token to connect to API.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,7,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterApplicationAgentCredentialRequest) Reset() {
	*x = RegisterApplicationAgentCredentialRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterApplicationAgentCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterApplicationAgentCredentialRequest) ProtoMessage() {}

func (x *RegisterApplicationAgentCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterApplicationAgentCredentialRequest.ProtoReflect.Descriptor instead.
func (*RegisterApplicationAgentCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{32}
}

func (x *RegisterApplicationAgentCredentialRequest) GetApplicationAgentId() string {
	if x != nil {
		return x.ApplicationAgentId
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialRequest) GetPublicKey() isRegisterApplicationAgentCredentialRequest_PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialRequest) GetJwk() []byte {
	if x != nil {
		if x, ok := x.PublicKey.(*RegisterApplicationAgentCredentialRequest_Jwk); ok {
			return x.Jwk
		}
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialRequest) GetPem() []byte {
	if x != nil {
		if x, ok := x.PublicKey.(*RegisterApplicationAgentCredentialRequest_Pem); ok {
			return x.Pem
		}
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialRequest) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isRegisterApplicationAgentCredentialRequest_PublicKey interface {
	isRegisterApplicationAgentCredentialRequest_PublicKey()
}

type RegisterApplicationAgentCredentialRequest_Jwk struct {
	// RSA, EC or Ed25519 key encoded in JWK format. Both secret and public key formats are supported but for security
	// reason we recommend to use only the public key to upload and keep the secret key locally so it does not goes
	// over internet.
	Jwk []byte `protobuf:"bytes,3,opt,name=jwk,proto3,oneof"`
}

type RegisterApplicationAgentCredentialRequest_Pem struct {
	// RSA, EC or Ed25519 key encoded in PEM format. Both secret and public key formats are supported but for security
	// reason we recommend to use only the public key to upload and keep the secret key locally so it does not goes
	// over internet.
	Pem []byte `protobuf:"bytes,4,opt,name=pem,proto3,oneof"`
}

func (*RegisterApplicationAgentCredentialRequest_Jwk) isRegisterApplicationAgentCredentialRequest_PublicKey() {
}

func (*RegisterApplicationAgentCredentialRequest_Pem) isRegisterApplicationAgentCredentialRequest_PublicKey() {
}

type RegisterApplicationAgentCredentialResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationAgentId string                 `protobuf:"bytes,2,opt,name=application_agent_id,json=applicationAgentId,proto3" json:"application_agent_id,omitempty"`
	Kid                string                 `protobuf:"bytes,3,opt,name=kid,proto3" json:"kid,omitempty"`
	// The JSON configuration that contains the required and optional parameters for SDK to connect. If you uploaded
	// only the public key you must insert the JWK secret key into the file before providing it to the SDK.
	AgentConfig []byte                 `protobuf:"bytes,4,opt,name=agent_config,json=agentConfig,proto3" json:"agent_config,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,7,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	// Display name of the credential.
	DisplayName   string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterApplicationAgentCredentialResponse) Reset() {
	*x = RegisterApplicationAgentCredentialResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterApplicationAgentCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterApplicationAgentCredentialResponse) ProtoMessage() {}

func (x *RegisterApplicationAgentCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterApplicationAgentCredentialResponse.ProtoReflect.Descriptor instead.
func (*RegisterApplicationAgentCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{33}
}

func (x *RegisterApplicationAgentCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialResponse) GetApplicationAgentId() string {
	if x != nil {
		return x.ApplicationAgentId
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialResponse) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialResponse) GetAgentConfig() []byte {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialResponse) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type ReadApplicationAgentCredentialRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadApplicationAgentCredentialRequest) Reset() {
	*x = ReadApplicationAgentCredentialRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationAgentCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAgentCredentialRequest) ProtoMessage() {}

func (x *ReadApplicationAgentCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAgentCredentialRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationAgentCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{34}
}

func (x *ReadApplicationAgentCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationAgentCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ReadApplicationAgentCredentialResponse struct {
	state                      protoimpl.MessageState      `protogen:"open.v1"`
	ApplicationAgentCredential *ApplicationAgentCredential `protobuf:"bytes,1,opt,name=application_agent_credential,json=applicationAgentCredential,proto3" json:"application_agent_credential,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ReadApplicationAgentCredentialResponse) Reset() {
	*x = ReadApplicationAgentCredentialResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationAgentCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAgentCredentialResponse) ProtoMessage() {}

func (x *ReadApplicationAgentCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAgentCredentialResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationAgentCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{35}
}

func (x *ReadApplicationAgentCredentialResponse) GetApplicationAgentCredential() *ApplicationAgentCredential {
	if x != nil {
		return x.ApplicationAgentCredential
	}
	return nil
}

type DeleteApplicationAgentCredentialRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the Globally unique identifier of object to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string                `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	Etag          *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationAgentCredentialRequest) Reset() {
	*x = DeleteApplicationAgentCredentialRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationAgentCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAgentCredentialRequest) ProtoMessage() {}

func (x *DeleteApplicationAgentCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAgentCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAgentCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteApplicationAgentCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationAgentCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

func (x *DeleteApplicationAgentCredentialRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

type DeleteApplicationAgentCredentialResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationAgentCredentialResponse) Reset() {
	*x = DeleteApplicationAgentCredentialResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationAgentCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAgentCredentialResponse) ProtoMessage() {}

func (x *DeleteApplicationAgentCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAgentCredentialResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAgentCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteApplicationAgentCredentialResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type CreateServiceAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Location is the place where configuration object is created and associated with.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of ServiceAccount.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of ServiceAccount.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Permission role id to be assigned
	Role string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,6,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateServiceAccountRequest) Reset() {
	*x = CreateServiceAccountRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceAccountRequest) ProtoMessage() {}

func (x *CreateServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{38}
}

func (x *CreateServiceAccountRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateServiceAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateServiceAccountRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateServiceAccountRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateServiceAccountRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateServiceAccountRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type CreateServiceAccountResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateServiceAccountResponse) Reset() {
	*x = CreateServiceAccountResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceAccountResponse) ProtoMessage() {}

func (x *CreateServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{39}
}

func (x *CreateServiceAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateServiceAccountResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateServiceAccountResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateServiceAccountResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateServiceAccountResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreateServiceAccountResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateServiceAccountResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadServiceAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*ReadServiceAccountRequest_Id
	//	*ReadServiceAccountRequest_Name
	Identifier isReadServiceAccountRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadServiceAccountRequest) Reset() {
	*x = ReadServiceAccountRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServiceAccountRequest) ProtoMessage() {}

func (x *ReadServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*ReadServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{40}
}

func (x *ReadServiceAccountRequest) GetIdentifier() isReadServiceAccountRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ReadServiceAccountRequest) GetId() string {
	if x != nil {
		if x, ok := x.Identifier.(*ReadServiceAccountRequest_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *ReadServiceAccountRequest) GetName() *UniqueNameIdentifier {
	if x != nil {
		if x, ok := x.Identifier.(*ReadServiceAccountRequest_Name); ok {
			return x.Name
		}
	}
	return nil
}

func (x *ReadServiceAccountRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadServiceAccountRequest_Identifier interface {
	isReadServiceAccountRequest_Identifier()
}

type ReadServiceAccountRequest_Id struct {
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadServiceAccountRequest_Name struct {
	// Name contains the client generated unique identifier with name.
	Name *UniqueNameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadServiceAccountRequest_Id) isReadServiceAccountRequest_Identifier() {}

func (*ReadServiceAccountRequest_Name) isReadServiceAccountRequest_Identifier() {}

type ReadServiceAccountResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServiceAccount *ServiceAccount        `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReadServiceAccountResponse) Reset() {
	*x = ReadServiceAccountResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServiceAccountResponse) ProtoMessage() {}

func (x *ReadServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*ReadServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{41}
}

func (x *ReadServiceAccountResponse) GetServiceAccount() *ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

type UpdateServiceAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateServiceAccountRequest) Reset() {
	*x = UpdateServiceAccountRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceAccountRequest) ProtoMessage() {}

func (x *UpdateServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateServiceAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateServiceAccountRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateServiceAccountRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateServiceAccountRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateServiceAccountRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type UpdateServiceAccountResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateServiceAccountResponse) Reset() {
	*x = UpdateServiceAccountResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceAccountResponse) ProtoMessage() {}

func (x *UpdateServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateServiceAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateServiceAccountResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UpdateServiceAccountResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpdateServiceAccountResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateServiceAccountResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdateServiceAccountResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateServiceAccountResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type DeleteServiceAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the Globally unique identifier of object to delete.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteServiceAccountRequest) Reset() {
	*x = DeleteServiceAccountRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountRequest) ProtoMessage() {}

func (x *DeleteServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteServiceAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteServiceAccountRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteServiceAccountRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteServiceAccountResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteServiceAccountResponse) Reset() {
	*x = DeleteServiceAccountResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountResponse) ProtoMessage() {}

func (x *DeleteServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteServiceAccountResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type RegisterServiceAccountCredentialRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServiceAccountId string                 `protobuf:"bytes,1,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	DisplayName      string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Types that are valid to be assigned to PublicKey:
	//
	//	*RegisterServiceAccountCredentialRequest_Jwk
	//	*RegisterServiceAccountCredentialRequest_Pem
	PublicKey  isRegisterServiceAccountCredentialRequest_PublicKey `protobuf_oneof:"public_key"`
	ExpireTime *timestamppb.Timestamp                              `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,6,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterServiceAccountCredentialRequest) Reset() {
	*x = RegisterServiceAccountCredentialRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterServiceAccountCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterServiceAccountCredentialRequest) ProtoMessage() {}

func (x *RegisterServiceAccountCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterServiceAccountCredentialRequest.ProtoReflect.Descriptor instead.
func (*RegisterServiceAccountCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{46}
}

func (x *RegisterServiceAccountCredentialRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *RegisterServiceAccountCredentialRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RegisterServiceAccountCredentialRequest) GetPublicKey() isRegisterServiceAccountCredentialRequest_PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RegisterServiceAccountCredentialRequest) GetJwk() []byte {
	if x != nil {
		if x, ok := x.PublicKey.(*RegisterServiceAccountCredentialRequest_Jwk); ok {
			return x.Jwk
		}
	}
	return nil
}

func (x *RegisterServiceAccountCredentialRequest) GetPem() []byte {
	if x != nil {
		if x, ok := x.PublicKey.(*RegisterServiceAccountCredentialRequest_Pem); ok {
			return x.Pem
		}
	}
	return nil
}

func (x *RegisterServiceAccountCredentialRequest) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RegisterServiceAccountCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isRegisterServiceAccountCredentialRequest_PublicKey interface {
	isRegisterServiceAccountCredentialRequest_PublicKey()
}

type RegisterServiceAccountCredentialRequest_Jwk struct {
	Jwk []byte `protobuf:"bytes,3,opt,name=jwk,proto3,oneof"`
}

type RegisterServiceAccountCredentialRequest_Pem struct {
	Pem []byte `protobuf:"bytes,4,opt,name=pem,proto3,oneof"`
}

func (*RegisterServiceAccountCredentialRequest_Jwk) isRegisterServiceAccountCredentialRequest_PublicKey() {
}

func (*RegisterServiceAccountCredentialRequest_Pem) isRegisterServiceAccountCredentialRequest_PublicKey() {
}

type RegisterServiceAccountCredentialResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceAccountId     string                 `protobuf:"bytes,2,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	Kid                  string                 `protobuf:"bytes,3,opt,name=kid,proto3" json:"kid,omitempty"`
	ServiceAccountConfig []byte                 `protobuf:"bytes,4,opt,name=service_account_config,json=serviceAccountConfig,proto3" json:"service_account_config,omitempty"`
	CreateTime           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,7,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	DisplayName   string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterServiceAccountCredentialResponse) Reset() {
	*x = RegisterServiceAccountCredentialResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterServiceAccountCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterServiceAccountCredentialResponse) ProtoMessage() {}

func (x *RegisterServiceAccountCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterServiceAccountCredentialResponse.ProtoReflect.Descriptor instead.
func (*RegisterServiceAccountCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{47}
}

func (x *RegisterServiceAccountCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterServiceAccountCredentialResponse) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *RegisterServiceAccountCredentialResponse) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *RegisterServiceAccountCredentialResponse) GetServiceAccountConfig() []byte {
	if x != nil {
		return x.ServiceAccountConfig
	}
	return nil
}

func (x *RegisterServiceAccountCredentialResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RegisterServiceAccountCredentialResponse) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RegisterServiceAccountCredentialResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

func (x *RegisterServiceAccountCredentialResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type ReadServiceAccountCredentialRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadServiceAccountCredentialRequest) Reset() {
	*x = ReadServiceAccountCredentialRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadServiceAccountCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServiceAccountCredentialRequest) ProtoMessage() {}

func (x *ReadServiceAccountCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServiceAccountCredentialRequest.ProtoReflect.Descriptor instead.
func (*ReadServiceAccountCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{48}
}

func (x *ReadServiceAccountCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadServiceAccountCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ReadServiceAccountCredentialResponse struct {
	state                    protoimpl.MessageState    `protogen:"open.v1"`
	ServiceAccountCredential *ServiceAccountCredential `protobuf:"bytes,1,opt,name=service_account_credential,json=serviceAccountCredential,proto3" json:"service_account_credential,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ReadServiceAccountCredentialResponse) Reset() {
	*x = ReadServiceAccountCredentialResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadServiceAccountCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServiceAccountCredentialResponse) ProtoMessage() {}

func (x *ReadServiceAccountCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServiceAccountCredentialResponse.ProtoReflect.Descriptor instead.
func (*ReadServiceAccountCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{49}
}

func (x *ReadServiceAccountCredentialResponse) GetServiceAccountCredential() *ServiceAccountCredential {
	if x != nil {
		return x.ServiceAccountCredential
	}
	return nil
}

type DeleteServiceAccountCredentialRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the Globally unique identifier of object to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string                `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	Etag          *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteServiceAccountCredentialRequest) Reset() {
	*x = DeleteServiceAccountCredentialRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceAccountCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountCredentialRequest) ProtoMessage() {}

func (x *DeleteServiceAccountCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteServiceAccountCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteServiceAccountCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

func (x *DeleteServiceAccountCredentialRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

type DeleteServiceAccountCredentialResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteServiceAccountCredentialResponse) Reset() {
	*x = DeleteServiceAccountCredentialResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceAccountCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountCredentialResponse) ProtoMessage() {}

func (x *DeleteServiceAccountCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountCredentialResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteServiceAccountCredentialResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type CreateConfigNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Location is the place where configuration object is created and associated with.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are valid to be assigned to Config:
	//
	//	*CreateConfigNodeRequest_AuditSinkConfig
	//	*CreateConfigNodeRequest_AuthorizationPolicyConfig
	//	*CreateConfigNodeRequest_ConsentConfig
	//	*CreateConfigNodeRequest_TokenIntrospectConfig
	//	*CreateConfigNodeRequest_IngestPipelineConfig
	//	*CreateConfigNodeRequest_EntityMatchingPipelineConfig
	//	*CreateConfigNodeRequest_ExternalDataResolverConfig
	//	*CreateConfigNodeRequest_TrustScoreProfileConfig
	Config isCreateConfigNodeRequest_Config `protobuf_oneof:"config"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,7,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConfigNodeRequest) Reset() {
	*x = CreateConfigNodeRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConfigNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConfigNodeRequest) ProtoMessage() {}

func (x *CreateConfigNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConfigNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateConfigNodeRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{52}
}

func (x *CreateConfigNodeRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateConfigNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateConfigNodeRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetConfig() isCreateConfigNodeRequest_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetAuditSinkConfig() *AuditSinkConfig {
	if x != nil {
		if x, ok := x.Config.(*CreateConfigNodeRequest_AuditSinkConfig); ok {
			return x.AuditSinkConfig
		}
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetAuthorizationPolicyConfig() *AuthorizationPolicyConfig {
	if x != nil {
		if x, ok := x.Config.(*CreateConfigNodeRequest_AuthorizationPolicyConfig); ok {
			return x.AuthorizationPolicyConfig
		}
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetConsentConfig() *ConsentConfiguration {
	if x != nil {
		if x, ok := x.Config.(*CreateConfigNodeRequest_ConsentConfig); ok {
			return x.ConsentConfig
		}
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetTokenIntrospectConfig() *TokenIntrospectConfig {
	if x != nil {
		if x, ok := x.Config.(*CreateConfigNodeRequest_TokenIntrospectConfig); ok {
			return x.TokenIntrospectConfig
		}
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetIngestPipelineConfig() *IngestPipelineConfig {
	if x != nil {
		if x, ok := x.Config.(*CreateConfigNodeRequest_IngestPipelineConfig); ok {
			return x.IngestPipelineConfig
		}
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetEntityMatchingPipelineConfig() *EntityMatchingPipelineConfig {
	if x != nil {
		if x, ok := x.Config.(*CreateConfigNodeRequest_EntityMatchingPipelineConfig); ok {
			return x.EntityMatchingPipelineConfig
		}
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetExternalDataResolverConfig() *ExternalDataResolverConfig {
	if x != nil {
		if x, ok := x.Config.(*CreateConfigNodeRequest_ExternalDataResolverConfig); ok {
			return x.ExternalDataResolverConfig
		}
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetTrustScoreProfileConfig() *TrustScoreProfileConfig {
	if x != nil {
		if x, ok := x.Config.(*CreateConfigNodeRequest_TrustScoreProfileConfig); ok {
			return x.TrustScoreProfileConfig
		}
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isCreateConfigNodeRequest_Config interface {
	isCreateConfigNodeRequest_Config()
}

type CreateConfigNodeRequest_AuditSinkConfig struct {
	AuditSinkConfig *AuditSinkConfig `protobuf:"bytes,28,opt,name=audit_sink_config,json=auditSinkConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_AuthorizationPolicyConfig struct {
	AuthorizationPolicyConfig *AuthorizationPolicyConfig `protobuf:"bytes,25,opt,name=authorization_policy_config,json=authorizationPolicyConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_ConsentConfig struct {
	ConsentConfig *ConsentConfiguration `protobuf:"bytes,29,opt,name=consent_config,json=consentConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_TokenIntrospectConfig struct {
	TokenIntrospectConfig *TokenIntrospectConfig `protobuf:"bytes,30,opt,name=token_introspect_config,json=tokenIntrospectConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_IngestPipelineConfig struct {
	IngestPipelineConfig *IngestPipelineConfig `protobuf:"bytes,31,opt,name=ingest_pipeline_config,json=ingestPipelineConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_EntityMatchingPipelineConfig struct {
	EntityMatchingPipelineConfig *EntityMatchingPipelineConfig `protobuf:"bytes,32,opt,name=entity_matching_pipeline_config,json=entityMatchingPipelineConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_ExternalDataResolverConfig struct {
	ExternalDataResolverConfig *ExternalDataResolverConfig `protobuf:"bytes,33,opt,name=external_data_resolver_config,json=externalDataResolverConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_TrustScoreProfileConfig struct {
	TrustScoreProfileConfig *TrustScoreProfileConfig `protobuf:"bytes,34,opt,name=trust_score_profile_config,json=trustScoreProfileConfig,proto3,oneof"`
}

func (*CreateConfigNodeRequest_AuditSinkConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_AuthorizationPolicyConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_ConsentConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_TokenIntrospectConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_IngestPipelineConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_EntityMatchingPipelineConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_ExternalDataResolverConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_TrustScoreProfileConfig) isCreateConfigNodeRequest_Config() {}

type CreateConfigNodeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// LocationID identifies which container configuration this config directly belongs to.
	// It can be a Customer, or AppSpace.
	LocationId string `protobuf:"bytes,8,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConfigNodeResponse) Reset() {
	*x = CreateConfigNodeResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConfigNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConfigNodeResponse) ProtoMessage() {}

func (x *CreateConfigNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConfigNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateConfigNodeResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{53}
}

func (x *CreateConfigNodeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateConfigNodeResponse) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *CreateConfigNodeResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateConfigNodeResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateConfigNodeResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateConfigNodeResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CreateConfigNodeResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateConfigNodeResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// ReadConfigNodeRequest represents a request to find a new Configuration object.
type ReadConfigNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	Version       int64    `protobuf:"varint,28,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadConfigNodeRequest) Reset() {
	*x = ReadConfigNodeRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadConfigNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConfigNodeRequest) ProtoMessage() {}

func (x *ReadConfigNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConfigNodeRequest.ProtoReflect.Descriptor instead.
func (*ReadConfigNodeRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{54}
}

func (x *ReadConfigNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadConfigNodeRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

func (x *ReadConfigNodeRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// ReadConfigNodeResponse represents a result of operation request.
type ReadConfigNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigNode    *ConfigNode            `protobuf:"bytes,1,opt,name=config_node,json=configNode,proto3" json:"config_node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadConfigNodeResponse) Reset() {
	*x = ReadConfigNodeResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadConfigNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConfigNodeResponse) ProtoMessage() {}

func (x *ReadConfigNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConfigNodeResponse.ProtoReflect.Descriptor instead.
func (*ReadConfigNodeResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{55}
}

func (x *ReadConfigNodeResponse) GetConfigNode() *ConfigNode {
	if x != nil {
		return x.ConfigNode
	}
	return nil
}

// UpdateConfigNodeRequest represents a request to update a Configuration object.
type UpdateConfigNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are valid to be assigned to Config:
	//
	//	*UpdateConfigNodeRequest_AuditSinkConfig
	//	*UpdateConfigNodeRequest_AuthorizationPolicyConfig
	//	*UpdateConfigNodeRequest_ConsentConfig
	//	*UpdateConfigNodeRequest_TokenIntrospectConfig
	//	*UpdateConfigNodeRequest_IngestPipelineConfig
	//	*UpdateConfigNodeRequest_EntityMatchingPipelineConfig
	//	*UpdateConfigNodeRequest_ExternalDataResolverConfig
	//	*UpdateConfigNodeRequest_TrustScoreProfileConfig
	Config isUpdateConfigNodeRequest_Config `protobuf_oneof:"config"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigNodeRequest) Reset() {
	*x = UpdateConfigNodeRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigNodeRequest) ProtoMessage() {}

func (x *UpdateConfigNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigNodeRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateConfigNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateConfigNodeRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetConfig() isUpdateConfigNodeRequest_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetAuditSinkConfig() *AuditSinkConfig {
	if x != nil {
		if x, ok := x.Config.(*UpdateConfigNodeRequest_AuditSinkConfig); ok {
			return x.AuditSinkConfig
		}
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetAuthorizationPolicyConfig() *AuthorizationPolicyConfig {
	if x != nil {
		if x, ok := x.Config.(*UpdateConfigNodeRequest_AuthorizationPolicyConfig); ok {
			return x.AuthorizationPolicyConfig
		}
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetConsentConfig() *ConsentConfiguration {
	if x != nil {
		if x, ok := x.Config.(*UpdateConfigNodeRequest_ConsentConfig); ok {
			return x.ConsentConfig
		}
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetTokenIntrospectConfig() *TokenIntrospectConfig {
	if x != nil {
		if x, ok := x.Config.(*UpdateConfigNodeRequest_TokenIntrospectConfig); ok {
			return x.TokenIntrospectConfig
		}
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetIngestPipelineConfig() *IngestPipelineConfig {
	if x != nil {
		if x, ok := x.Config.(*UpdateConfigNodeRequest_IngestPipelineConfig); ok {
			return x.IngestPipelineConfig
		}
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetEntityMatchingPipelineConfig() *EntityMatchingPipelineConfig {
	if x != nil {
		if x, ok := x.Config.(*UpdateConfigNodeRequest_EntityMatchingPipelineConfig); ok {
			return x.EntityMatchingPipelineConfig
		}
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetExternalDataResolverConfig() *ExternalDataResolverConfig {
	if x != nil {
		if x, ok := x.Config.(*UpdateConfigNodeRequest_ExternalDataResolverConfig); ok {
			return x.ExternalDataResolverConfig
		}
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetTrustScoreProfileConfig() *TrustScoreProfileConfig {
	if x != nil {
		if x, ok := x.Config.(*UpdateConfigNodeRequest_TrustScoreProfileConfig); ok {
			return x.TrustScoreProfileConfig
		}
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isUpdateConfigNodeRequest_Config interface {
	isUpdateConfigNodeRequest_Config()
}

type UpdateConfigNodeRequest_AuditSinkConfig struct {
	AuditSinkConfig *AuditSinkConfig `protobuf:"bytes,28,opt,name=audit_sink_config,json=auditSinkConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_AuthorizationPolicyConfig struct {
	AuthorizationPolicyConfig *AuthorizationPolicyConfig `protobuf:"bytes,25,opt,name=authorization_policy_config,json=authorizationPolicyConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_ConsentConfig struct {
	ConsentConfig *ConsentConfiguration `protobuf:"bytes,29,opt,name=consent_config,json=consentConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_TokenIntrospectConfig struct {
	TokenIntrospectConfig *TokenIntrospectConfig `protobuf:"bytes,30,opt,name=token_introspect_config,json=tokenIntrospectConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_IngestPipelineConfig struct {
	IngestPipelineConfig *IngestPipelineConfig `protobuf:"bytes,31,opt,name=ingest_pipeline_config,json=ingestPipelineConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_EntityMatchingPipelineConfig struct {
	EntityMatchingPipelineConfig *EntityMatchingPipelineConfig `protobuf:"bytes,33,opt,name=entity_matching_pipeline_config,json=entityMatchingPipelineConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_ExternalDataResolverConfig struct {
	ExternalDataResolverConfig *ExternalDataResolverConfig `protobuf:"bytes,34,opt,name=external_data_resolver_config,json=externalDataResolverConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_TrustScoreProfileConfig struct {
	TrustScoreProfileConfig *TrustScoreProfileConfig `protobuf:"bytes,35,opt,name=trust_score_profile_config,json=trustScoreProfileConfig,proto3,oneof"`
}

func (*UpdateConfigNodeRequest_AuditSinkConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_AuthorizationPolicyConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_ConsentConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_TokenIntrospectConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_IngestPipelineConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_EntityMatchingPipelineConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_ExternalDataResolverConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_TrustScoreProfileConfig) isUpdateConfigNodeRequest_Config() {}

// UpdateConfigNodeResponse represents a result of operation request.
type UpdateConfigNodeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// LocationID identifies which container configuration this config directly belongs to.
	// It can be a Customer, or AppSpace.
	LocationId string `protobuf:"bytes,8,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user/service id who created the configuration.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Output only. The user/service id who last changed the configuration.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigNodeResponse) Reset() {
	*x = UpdateConfigNodeResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigNodeResponse) ProtoMessage() {}

func (x *UpdateConfigNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigNodeResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateConfigNodeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateConfigNodeResponse) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *UpdateConfigNodeResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UpdateConfigNodeResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateConfigNodeResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpdateConfigNodeResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpdateConfigNodeResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateConfigNodeResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// DeleteConfigNodeRequest represents a request to delete a Configuration object.
type DeleteConfigNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,4,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConfigNodeRequest) Reset() {
	*x = DeleteConfigNodeRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConfigNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigNodeRequest) ProtoMessage() {}

func (x *DeleteConfigNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteConfigNodeRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteConfigNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteConfigNodeRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteConfigNodeRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// ListConfigNodeVersionsRequest list all previous versions, including live, versions of a Configuration object.
type ListConfigNodeVersionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConfigNodeVersionsRequest) Reset() {
	*x = ListConfigNodeVersionsRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigNodeVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigNodeVersionsRequest) ProtoMessage() {}

func (x *ListConfigNodeVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigNodeVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListConfigNodeVersionsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{59}
}

func (x *ListConfigNodeVersionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListConfigNodeVersionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigNodes   []*ConfigNode          `protobuf:"bytes,1,rep,name=config_nodes,json=configNodes,proto3" json:"config_nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConfigNodeVersionsResponse) Reset() {
	*x = ListConfigNodeVersionsResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigNodeVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigNodeVersionsResponse) ProtoMessage() {}

func (x *ListConfigNodeVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigNodeVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListConfigNodeVersionsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{60}
}

func (x *ListConfigNodeVersionsResponse) GetConfigNodes() []*ConfigNode {
	if x != nil {
		return x.ConfigNodes
	}
	return nil
}

type DeleteConfigNodeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConfigNodeResponse) Reset() {
	*x = DeleteConfigNodeResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConfigNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigNodeResponse) ProtoMessage() {}

func (x *DeleteConfigNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteConfigNodeResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{61}
}

func (x *DeleteConfigNodeResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type AssignPermissionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TargetIdentifier is gid identifier of Service Account or DigitalTwin
	TargetIdentifier string `protobuf:"bytes,1,opt,name=target_identifier,json=targetIdentifier,proto3" json:"target_identifier,omitempty"`
	// Permission role id to be assigned
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// CustomerId under which to assign permissions.
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Object to which Permission will be linked to. Can be Customer or AppSpace.
	ObjectId string `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPermissionsRequest) Reset() {
	*x = AssignPermissionsRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionsRequest) ProtoMessage() {}

func (x *AssignPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionsRequest.ProtoReflect.Descriptor instead.
func (*AssignPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{62}
}

func (x *AssignPermissionsRequest) GetTargetIdentifier() string {
	if x != nil {
		return x.TargetIdentifier
	}
	return ""
}

func (x *AssignPermissionsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *AssignPermissionsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *AssignPermissionsRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *AssignPermissionsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type AssignPermissionsResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,2,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPermissionsResponse) Reset() {
	*x = AssignPermissionsResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionsResponse) ProtoMessage() {}

func (x *AssignPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionsResponse.ProtoReflect.Descriptor instead.
func (*AssignPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{63}
}

func (x *AssignPermissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AssignPermissionsResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type RevokePermissionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TargetIdentifier is gid identifier of Service Account or DigitalTwin
	TargetIdentifier string `protobuf:"bytes,1,opt,name=target_identifier,json=targetIdentifier,proto3" json:"target_identifier,omitempty"`
	// Permission role id to be assigned
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// CustomerId under which to assign permissions.
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Object to which Permission will be linked to. Can be Customer or AppSpace.
	ObjectId string `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokePermissionsRequest) Reset() {
	*x = RevokePermissionsRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokePermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokePermissionsRequest) ProtoMessage() {}

func (x *RevokePermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokePermissionsRequest.ProtoReflect.Descriptor instead.
func (*RevokePermissionsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{64}
}

func (x *RevokePermissionsRequest) GetTargetIdentifier() string {
	if x != nil {
		return x.TargetIdentifier
	}
	return ""
}

func (x *RevokePermissionsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RevokePermissionsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *RevokePermissionsRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *RevokePermissionsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type RevokePermissionsResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark      string `protobuf:"bytes,2,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokePermissionsResponse) Reset() {
	*x = RevokePermissionsResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokePermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokePermissionsResponse) ProtoMessage() {}

func (x *RevokePermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokePermissionsResponse.ProtoReflect.Descriptor instead.
func (*RevokePermissionsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{65}
}

func (x *RevokePermissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RevokePermissionsResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ListPermissionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Location under which to retrieve permissions. Can be Customer
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks     []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPermissionsRequest) Reset() {
	*x = ListPermissionsRequest{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsRequest) ProtoMessage() {}

func (x *ListPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsRequest.ProtoReflect.Descriptor instead.
func (*ListPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{66}
}

func (x *ListPermissionsRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListPermissionsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListPermissionsResponse struct {
	state           protoimpl.MessageState                    `protogen:"open.v1"`
	Users           []*ListPermissionsResponse_User           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	ServiceAccounts []*ListPermissionsResponse_ServiceAccount `protobuf:"bytes,2,rep,name=service_accounts,json=serviceAccounts,proto3" json:"service_accounts,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListPermissionsResponse) Reset() {
	*x = ListPermissionsResponse{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse) ProtoMessage() {}

func (x *ListPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{67}
}

func (x *ListPermissionsResponse) GetUsers() []*ListPermissionsResponse_User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListPermissionsResponse) GetServiceAccounts() []*ListPermissionsResponse_ServiceAccount {
	if x != nil {
		return x.ServiceAccounts
	}
	return nil
}

type ListPermissionsResponse_PermissionRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPermissionsResponse_PermissionRole) Reset() {
	*x = ListPermissionsResponse_PermissionRole{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsResponse_PermissionRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse_PermissionRole) ProtoMessage() {}

func (x *ListPermissionsResponse_PermissionRole) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse_PermissionRole.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse_PermissionRole) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{67, 0}
}

func (x *ListPermissionsResponse_PermissionRole) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPermissionsResponse_PermissionRole) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type ListPermissionsResponse_User struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Id            string                                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Roles         []*ListPermissionsResponse_PermissionRole `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPermissionsResponse_User) Reset() {
	*x = ListPermissionsResponse_User{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsResponse_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse_User) ProtoMessage() {}

func (x *ListPermissionsResponse_User) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse_User.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse_User) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{67, 1}
}

func (x *ListPermissionsResponse_User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPermissionsResponse_User) GetRoles() []*ListPermissionsResponse_PermissionRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

type ListPermissionsResponse_ServiceAccount struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Name          string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id            string                                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Roles         []*ListPermissionsResponse_PermissionRole `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPermissionsResponse_ServiceAccount) Reset() {
	*x = ListPermissionsResponse_ServiceAccount{}
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsResponse_ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse_ServiceAccount) ProtoMessage() {}

func (x *ListPermissionsResponse_ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse_ServiceAccount.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse_ServiceAccount) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{67, 2}
}

func (x *ListPermissionsResponse_ServiceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPermissionsResponse_ServiceAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPermissionsResponse_ServiceAccount) GetRoles() []*ListPermissionsResponse_PermissionRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

var File_indykite_config_v1beta1_config_management_api_proto protoreflect.FileDescriptor

var file_indykite_config_v1beta1_config_management_api_proto_rawDesc = []byte{
	0x0a, 0x33, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a,
	0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f,
	0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72,
	0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x00, 0x22, 0x55, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xc2,
	0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f,
	0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a,
	0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x02, 0x18, 0x3f,
	0x52, 0x0c, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x2d, 0x77, 0x65, 0x73, 0x74, 0x31, 0x52, 0x08,
	0x75, 0x73, 0x2d, 0x65, 0x61, 0x73, 0x74, 0x31, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0xef, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18,
	0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x66, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0xf7,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x38, 0xfa, 0x42, 0x35, 0x92, 0x01, 0x32, 0x08, 0x01, 0x18,
	0x01, 0x22, 0x2c, 0x72, 0x2a, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x32, 0x23, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30,
	0x2c, 0x32, 0x35, 0x32, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01,
	0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x67, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x8d, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12,
	0x32, 0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d,
	0x7b, 0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01,
	0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0,
	0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28,
	0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d,
	0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0xbe, 0x02, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0xee, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18,
	0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18,
	0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x22, 0x3c, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0x80, 0x03, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32,
	0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72,
	0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xea, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f,
	0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x61, 0x0a,
	0x17, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf3, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x38, 0xfa, 0x42, 0x35, 0x92, 0x01, 0x32, 0x08, 0x01, 0x18, 0x01, 0x22,
	0x2c, 0x72, 0x2a, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x32, 0x23, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x32,
	0x35, 0x32, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22,
	0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x62, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x03, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e,
	0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a,
	0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0xe9, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38,
	0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c,
	0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x37, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc5, 0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18,
	0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42,
	0x0d, 0x92, 0x01, 0x0a, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x28, 0x01, 0x52, 0x0e,
	0x61, 0x70, 0x69, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbe,
	0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35,
	0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0xef, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30,
	0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x11,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42,
	0x01, 0x22, 0x76, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x38, 0xfa, 0x42, 0x35, 0x92, 0x01, 0x32, 0x08, 0x01, 0x18, 0x01, 0x22, 0x2c, 0x72,
	0x2a, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x32, 0x23, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f,
	0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x32, 0x35, 0x32,
	0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72,
	0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x22, 0x77, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x03,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31,
	0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c,
	0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xbe, 0x02,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xee,
	0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c,
	0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40, 0x0a,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34,
	0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0x3c, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x94, 0x03,
	0x0a, 0x29, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08,
	0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x77, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x7a, 0x0b, 0x10, 0x60, 0x18, 0x80, 0x40, 0x2a, 0x01,
	0x7b, 0x32, 0x01, 0x7d, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x77, 0x6b, 0x12, 0x1e, 0x0a, 0x03, 0x70,
	0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x7a, 0x05, 0x10,
	0x60, 0x18, 0x80, 0x40, 0x48, 0x00, 0x52, 0x03, 0x70, 0x65, 0x6d, 0x12, 0x47, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0xb2, 0x01, 0x04, 0x08, 0x00, 0x40, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22,
	0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x22, 0xa8, 0x03, 0x0a, 0x2a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x9f, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28,
	0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d,
	0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0x9f, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x1c,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x22, 0xf8, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c,
	0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38,
	0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x46,
	0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xb0, 0x03, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18,
	0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42, 0x1a, 0x72, 0x18, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92,
	0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xed, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a,
	0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x6e, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x03, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72,
	0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08,
	0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22,
	0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xec, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08,
	0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72,
	0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x22, 0x3a, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xc5, 0x03, 0x0a, 0x27, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18,
	0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x77, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x10, 0xfa, 0x42, 0x0d, 0x7a, 0x0b, 0x10, 0x60, 0x18, 0x80, 0x40, 0x2a, 0x01, 0x7b, 0x32, 0x01,
	0x7d, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x77, 0x6b, 0x12, 0x55, 0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x41, 0xfa, 0x42, 0x3e, 0x7a, 0x3c, 0x10, 0x80, 0x02, 0x18,
	0x80, 0x40, 0x2a, 0x1a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x32, 0x18,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20,
	0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x48, 0x00, 0x52, 0x03, 0x70, 0x65, 0x6d, 0x12,
	0x47, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0xb2, 0x01, 0x04, 0x08, 0x00, 0x40, 0x01, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f,
	0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xb5, 0x03, 0x0a, 0x28, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x9d, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32,
	0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b,
	0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x22, 0x97, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x25, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d,
	0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x44,
	0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0xfe, 0x0a, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08,
	0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x19, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x72, 0x0a, 0x17, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x15, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x16,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01,
	0x0a, 0x1f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x1d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48,
	0x00, 0x52, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a,
	0x1a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52,
	0x17, 0x74, 0x72, 0x75, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f,
	0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0d, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a,
	0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10,
	0x12, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x4a, 0x04, 0x08,
	0x16, 0x10, 0x17, 0x4a, 0x04, 0x08, 0x17, 0x10, 0x18, 0x4a, 0x04, 0x08, 0x1b, 0x10, 0x1c, 0x4a,
	0x04, 0x08, 0x1a, 0x10, 0x1b, 0x22, 0xff, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35,
	0x34, 0x7d, 0x24, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35,
	0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92,
	0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x22, 0xdc, 0x0a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a,
	0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72,
	0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x69,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x19, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x72, 0x0a, 0x17, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x15, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f,
	0x0a, 0x16, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x88, 0x01, 0x0a, 0x1f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x1d, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x79, 0x0a, 0x1a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48,
	0x00, 0x52, 0x17, 0x74, 0x72, 0x75, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d,
	0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x14,
	0x10, 0x15, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04,
	0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17,
	0x4a, 0x04, 0x08, 0x17, 0x10, 0x18, 0x4a, 0x04, 0x08, 0x1b, 0x10, 0x1c, 0x4a, 0x04, 0x08, 0x1a,
	0x10, 0x1b, 0x22, 0xff, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0xe8, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c,
	0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40, 0x0a,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34,
	0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0x55, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x36, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xec, 0x02, 0x0a, 0x18, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42, 0x1a, 0x72, 0x18, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c,
	0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x51, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xec, 0x02, 0x0a, 0x18, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42, 0x1a, 0x72, 0x18, 0x52,
	0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92,
	0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x51, 0x0a, 0x19, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9c, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42,
	0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x94, 0x04, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x1a, 0x43, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x6d, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x32, 0xa4, 0x24, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x12, 0x6b, 0x0a, 0x0c, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x89, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x89,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x42, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x43, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x40, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x12, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x83, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x40, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x9b, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01,
	0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x77, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x89, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x84, 0x02, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x43, 0x58, 0xaa, 0x02, 0x17, 0x49, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02,
	0x23, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x3a,
	0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_config_v1beta1_config_management_api_proto_rawDescOnce sync.Once
	file_indykite_config_v1beta1_config_management_api_proto_rawDescData = file_indykite_config_v1beta1_config_management_api_proto_rawDesc
)

func file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP() []byte {
	file_indykite_config_v1beta1_config_management_api_proto_rawDescOnce.Do(func() {
		file_indykite_config_v1beta1_config_management_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_config_v1beta1_config_management_api_proto_rawDescData)
	})
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescData
}

var file_indykite_config_v1beta1_config_management_api_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_indykite_config_v1beta1_config_management_api_proto_goTypes = []any{
	(*ReadCustomerRequest)(nil),                        // 0: indykite.config.v1beta1.ReadCustomerRequest
	(*ReadCustomerResponse)(nil),                       // 1: indykite.config.v1beta1.ReadCustomerResponse
	(*CreateApplicationSpaceRequest)(nil),              // 2: indykite.config.v1beta1.CreateApplicationSpaceRequest
	(*CreateApplicationSpaceResponse)(nil),             // 3: indykite.config.v1beta1.CreateApplicationSpaceResponse
	(*ReadApplicationSpaceRequest)(nil),                // 4: indykite.config.v1beta1.ReadApplicationSpaceRequest
	(*ReadApplicationSpaceResponse)(nil),               // 5: indykite.config.v1beta1.ReadApplicationSpaceResponse
	(*ListApplicationSpacesRequest)(nil),               // 6: indykite.config.v1beta1.ListApplicationSpacesRequest
	(*ListApplicationSpacesResponse)(nil),              // 7: indykite.config.v1beta1.ListApplicationSpacesResponse
	(*UpdateApplicationSpaceRequest)(nil),              // 8: indykite.config.v1beta1.UpdateApplicationSpaceRequest
	(*UpdateApplicationSpaceResponse)(nil),             // 9: indykite.config.v1beta1.UpdateApplicationSpaceResponse
	(*DeleteApplicationSpaceRequest)(nil),              // 10: indykite.config.v1beta1.DeleteApplicationSpaceRequest
	(*DeleteApplicationSpaceResponse)(nil),             // 11: indykite.config.v1beta1.DeleteApplicationSpaceResponse
	(*CreateApplicationRequest)(nil),                   // 12: indykite.config.v1beta1.CreateApplicationRequest
	(*CreateApplicationResponse)(nil),                  // 13: indykite.config.v1beta1.CreateApplicationResponse
	(*ReadApplicationRequest)(nil),                     // 14: indykite.config.v1beta1.ReadApplicationRequest
	(*ReadApplicationResponse)(nil),                    // 15: indykite.config.v1beta1.ReadApplicationResponse
	(*ListApplicationsRequest)(nil),                    // 16: indykite.config.v1beta1.ListApplicationsRequest
	(*ListApplicationsResponse)(nil),                   // 17: indykite.config.v1beta1.ListApplicationsResponse
	(*UpdateApplicationRequest)(nil),                   // 18: indykite.config.v1beta1.UpdateApplicationRequest
	(*UpdateApplicationResponse)(nil),                  // 19: indykite.config.v1beta1.UpdateApplicationResponse
	(*DeleteApplicationRequest)(nil),                   // 20: indykite.config.v1beta1.DeleteApplicationRequest
	(*DeleteApplicationResponse)(nil),                  // 21: indykite.config.v1beta1.DeleteApplicationResponse
	(*CreateApplicationAgentRequest)(nil),              // 22: indykite.config.v1beta1.CreateApplicationAgentRequest
	(*CreateApplicationAgentResponse)(nil),             // 23: indykite.config.v1beta1.CreateApplicationAgentResponse
	(*ReadApplicationAgentRequest)(nil),                // 24: indykite.config.v1beta1.ReadApplicationAgentRequest
	(*ReadApplicationAgentResponse)(nil),               // 25: indykite.config.v1beta1.ReadApplicationAgentResponse
	(*ListApplicationAgentsRequest)(nil),               // 26: indykite.config.v1beta1.ListApplicationAgentsRequest
	(*ListApplicationAgentsResponse)(nil),              // 27: indykite.config.v1beta1.ListApplicationAgentsResponse
	(*UpdateApplicationAgentRequest)(nil),              // 28: indykite.config.v1beta1.UpdateApplicationAgentRequest
	(*UpdateApplicationAgentResponse)(nil),             // 29: indykite.config.v1beta1.UpdateApplicationAgentResponse
	(*DeleteApplicationAgentRequest)(nil),              // 30: indykite.config.v1beta1.DeleteApplicationAgentRequest
	(*DeleteApplicationAgentResponse)(nil),             // 31: indykite.config.v1beta1.DeleteApplicationAgentResponse
	(*RegisterApplicationAgentCredentialRequest)(nil),  // 32: indykite.config.v1beta1.RegisterApplicationAgentCredentialRequest
	(*RegisterApplicationAgentCredentialResponse)(nil), // 33: indykite.config.v1beta1.RegisterApplicationAgentCredentialResponse
	(*ReadApplicationAgentCredentialRequest)(nil),      // 34: indykite.config.v1beta1.ReadApplicationAgentCredentialRequest
	(*ReadApplicationAgentCredentialResponse)(nil),     // 35: indykite.config.v1beta1.ReadApplicationAgentCredentialResponse
	(*DeleteApplicationAgentCredentialRequest)(nil),    // 36: indykite.config.v1beta1.DeleteApplicationAgentCredentialRequest
	(*DeleteApplicationAgentCredentialResponse)(nil),   // 37: indykite.config.v1beta1.DeleteApplicationAgentCredentialResponse
	(*CreateServiceAccountRequest)(nil),                // 38: indykite.config.v1beta1.CreateServiceAccountRequest
	(*CreateServiceAccountResponse)(nil),               // 39: indykite.config.v1beta1.CreateServiceAccountResponse
	(*ReadServiceAccountRequest)(nil),                  // 40: indykite.config.v1beta1.ReadServiceAccountRequest
	(*ReadServiceAccountResponse)(nil),                 // 41: indykite.config.v1beta1.ReadServiceAccountResponse
	(*UpdateServiceAccountRequest)(nil),                // 42: indykite.config.v1beta1.UpdateServiceAccountRequest
	(*UpdateServiceAccountResponse)(nil),               // 43: indykite.config.v1beta1.UpdateServiceAccountResponse
	(*DeleteServiceAccountRequest)(nil),                // 44: indykite.config.v1beta1.DeleteServiceAccountRequest
	(*DeleteServiceAccountResponse)(nil),               // 45: indykite.config.v1beta1.DeleteServiceAccountResponse
	(*RegisterServiceAccountCredentialRequest)(nil),    // 46: indykite.config.v1beta1.RegisterServiceAccountCredentialRequest
	(*RegisterServiceAccountCredentialResponse)(nil),   // 47: indykite.config.v1beta1.RegisterServiceAccountCredentialResponse
	(*ReadServiceAccountCredentialRequest)(nil),        // 48: indykite.config.v1beta1.ReadServiceAccountCredentialRequest
	(*ReadServiceAccountCredentialResponse)(nil),       // 49: indykite.config.v1beta1.ReadServiceAccountCredentialResponse
	(*DeleteServiceAccountCredentialRequest)(nil),      // 50: indykite.config.v1beta1.DeleteServiceAccountCredentialRequest
	(*DeleteServiceAccountCredentialResponse)(nil),     // 51: indykite.config.v1beta1.DeleteServiceAccountCredentialResponse
	(*CreateConfigNodeRequest)(nil),                    // 52: indykite.config.v1beta1.CreateConfigNodeRequest
	(*CreateConfigNodeResponse)(nil),                   // 53: indykite.config.v1beta1.CreateConfigNodeResponse
	(*ReadConfigNodeRequest)(nil),                      // 54: indykite.config.v1beta1.ReadConfigNodeRequest
	(*ReadConfigNodeResponse)(nil),                     // 55: indykite.config.v1beta1.ReadConfigNodeResponse
	(*UpdateConfigNodeRequest)(nil),                    // 56: indykite.config.v1beta1.UpdateConfigNodeRequest
	(*UpdateConfigNodeResponse)(nil),                   // 57: indykite.config.v1beta1.UpdateConfigNodeResponse
	(*DeleteConfigNodeRequest)(nil),                    // 58: indykite.config.v1beta1.DeleteConfigNodeRequest
	(*ListConfigNodeVersionsRequest)(nil),              // 59: indykite.config.v1beta1.ListConfigNodeVersionsRequest
	(*ListConfigNodeVersionsResponse)(nil),             // 60: indykite.config.v1beta1.ListConfigNodeVersionsResponse
	(*DeleteConfigNodeResponse)(nil),                   // 61: indykite.config.v1beta1.DeleteConfigNodeResponse
	(*AssignPermissionsRequest)(nil),                   // 62: indykite.config.v1beta1.AssignPermissionsRequest
	(*AssignPermissionsResponse)(nil),                  // 63: indykite.config.v1beta1.AssignPermissionsResponse
	(*RevokePermissionsRequest)(nil),                   // 64: indykite.config.v1beta1.RevokePermissionsRequest
	(*RevokePermissionsResponse)(nil),                  // 65: indykite.config.v1beta1.RevokePermissionsResponse
	(*ListPermissionsRequest)(nil),                     // 66: indykite.config.v1beta1.ListPermissionsRequest
	(*ListPermissionsResponse)(nil),                    // 67: indykite.config.v1beta1.ListPermissionsResponse
	(*ListPermissionsResponse_PermissionRole)(nil),     // 68: indykite.config.v1beta1.ListPermissionsResponse.PermissionRole
	(*ListPermissionsResponse_User)(nil),               // 69: indykite.config.v1beta1.ListPermissionsResponse.User
	(*ListPermissionsResponse_ServiceAccount)(nil),     // 70: indykite.config.v1beta1.ListPermissionsResponse.ServiceAccount
	(*Customer)(nil),                                   // 71: indykite.config.v1beta1.Customer
	(*wrapperspb.StringValue)(nil),                     // 72: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                      // 73: google.protobuf.Timestamp
	(*UniqueNameIdentifier)(nil),                       // 74: indykite.config.v1beta1.UniqueNameIdentifier
	(*ApplicationSpace)(nil),                           // 75: indykite.config.v1beta1.ApplicationSpace
	(*Application)(nil),                                // 76: indykite.config.v1beta1.Application
	(*ApplicationAgent)(nil),                           // 77: indykite.config.v1beta1.ApplicationAgent
	(*ApplicationAgentCredential)(nil),                 // 78: indykite.config.v1beta1.ApplicationAgentCredential
	(*ServiceAccount)(nil),                             // 79: indykite.config.v1beta1.ServiceAccount
	(*ServiceAccountCredential)(nil),                   // 80: indykite.config.v1beta1.ServiceAccountCredential
	(*AuditSinkConfig)(nil),                            // 81: indykite.config.v1beta1.AuditSinkConfig
	(*AuthorizationPolicyConfig)(nil),                  // 82: indykite.config.v1beta1.AuthorizationPolicyConfig
	(*ConsentConfiguration)(nil),                       // 83: indykite.config.v1beta1.ConsentConfiguration
	(*TokenIntrospectConfig)(nil),                      // 84: indykite.config.v1beta1.TokenIntrospectConfig
	(*IngestPipelineConfig)(nil),                       // 85: indykite.config.v1beta1.IngestPipelineConfig
	(*EntityMatchingPipelineConfig)(nil),               // 86: indykite.config.v1beta1.EntityMatchingPipelineConfig
	(*ExternalDataResolverConfig)(nil),                 // 87: indykite.config.v1beta1.ExternalDataResolverConfig
	(*TrustScoreProfileConfig)(nil),                    // 88: indykite.config.v1beta1.TrustScoreProfileConfig
	(*ConfigNode)(nil),                                 // 89: indykite.config.v1beta1.ConfigNode
}
var file_indykite_config_v1beta1_config_management_api_proto_depIdxs = []int32{
	71,  // 0: indykite.config.v1beta1.ReadCustomerResponse.customer:type_name -> indykite.config.v1beta1.Customer
	72,  // 1: indykite.config.v1beta1.CreateApplicationSpaceRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 2: indykite.config.v1beta1.CreateApplicationSpaceRequest.description:type_name -> google.protobuf.StringValue
	73,  // 3: indykite.config.v1beta1.CreateApplicationSpaceResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 4: indykite.config.v1beta1.CreateApplicationSpaceResponse.update_time:type_name -> google.protobuf.Timestamp
	74,  // 5: indykite.config.v1beta1.ReadApplicationSpaceRequest.name:type_name -> indykite.config.v1beta1.UniqueNameIdentifier
	75,  // 6: indykite.config.v1beta1.ReadApplicationSpaceResponse.app_space:type_name -> indykite.config.v1beta1.ApplicationSpace
	75,  // 7: indykite.config.v1beta1.ListApplicationSpacesResponse.app_space:type_name -> indykite.config.v1beta1.ApplicationSpace
	72,  // 8: indykite.config.v1beta1.UpdateApplicationSpaceRequest.etag:type_name -> google.protobuf.StringValue
	72,  // 9: indykite.config.v1beta1.UpdateApplicationSpaceRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 10: indykite.config.v1beta1.UpdateApplicationSpaceRequest.description:type_name -> google.protobuf.StringValue
	73,  // 11: indykite.config.v1beta1.UpdateApplicationSpaceResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 12: indykite.config.v1beta1.UpdateApplicationSpaceResponse.update_time:type_name -> google.protobuf.Timestamp
	72,  // 13: indykite.config.v1beta1.DeleteApplicationSpaceRequest.etag:type_name -> google.protobuf.StringValue
	72,  // 14: indykite.config.v1beta1.CreateApplicationRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 15: indykite.config.v1beta1.CreateApplicationRequest.description:type_name -> google.protobuf.StringValue
	73,  // 16: indykite.config.v1beta1.CreateApplicationResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 17: indykite.config.v1beta1.CreateApplicationResponse.update_time:type_name -> google.protobuf.Timestamp
	74,  // 18: indykite.config.v1beta1.ReadApplicationRequest.name:type_name -> indykite.config.v1beta1.UniqueNameIdentifier
	76,  // 19: indykite.config.v1beta1.ReadApplicationResponse.application:type_name -> indykite.config.v1beta1.Application
	76,  // 20: indykite.config.v1beta1.ListApplicationsResponse.application:type_name -> indykite.config.v1beta1.Application
	72,  // 21: indykite.config.v1beta1.UpdateApplicationRequest.etag:type_name -> google.protobuf.StringValue
	72,  // 22: indykite.config.v1beta1.UpdateApplicationRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 23: indykite.config.v1beta1.UpdateApplicationRequest.description:type_name -> google.protobuf.StringValue
	73,  // 24: indykite.config.v1beta1.UpdateApplicationResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 25: indykite.config.v1beta1.UpdateApplicationResponse.update_time:type_name -> google.protobuf.Timestamp
	72,  // 26: indykite.config.v1beta1.DeleteApplicationRequest.etag:type_name -> google.protobuf.StringValue
	72,  // 27: indykite.config.v1beta1.CreateApplicationAgentRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 28: indykite.config.v1beta1.CreateApplicationAgentRequest.description:type_name -> google.protobuf.StringValue
	73,  // 29: indykite.config.v1beta1.CreateApplicationAgentResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 30: indykite.config.v1beta1.CreateApplicationAgentResponse.update_time:type_name -> google.protobuf.Timestamp
	74,  // 31: indykite.config.v1beta1.ReadApplicationAgentRequest.name:type_name -> indykite.config.v1beta1.UniqueNameIdentifier
	77,  // 32: indykite.config.v1beta1.ReadApplicationAgentResponse.application_agent:type_name -> indykite.config.v1beta1.ApplicationAgent
	77,  // 33: indykite.config.v1beta1.ListApplicationAgentsResponse.application_agent:type_name -> indykite.config.v1beta1.ApplicationAgent
	72,  // 34: indykite.config.v1beta1.UpdateApplicationAgentRequest.etag:type_name -> google.protobuf.StringValue
	72,  // 35: indykite.config.v1beta1.UpdateApplicationAgentRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 36: indykite.config.v1beta1.UpdateApplicationAgentRequest.description:type_name -> google.protobuf.StringValue
	73,  // 37: indykite.config.v1beta1.UpdateApplicationAgentResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 38: indykite.config.v1beta1.UpdateApplicationAgentResponse.update_time:type_name -> google.protobuf.Timestamp
	72,  // 39: indykite.config.v1beta1.DeleteApplicationAgentRequest.etag:type_name -> google.protobuf.StringValue
	73,  // 40: indykite.config.v1beta1.RegisterApplicationAgentCredentialRequest.expire_time:type_name -> google.protobuf.Timestamp
	73,  // 41: indykite.config.v1beta1.RegisterApplicationAgentCredentialResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 42: indykite.config.v1beta1.RegisterApplicationAgentCredentialResponse.expire_time:type_name -> google.protobuf.Timestamp
	78,  // 43: indykite.config.v1beta1.ReadApplicationAgentCredentialResponse.application_agent_credential:type_name -> indykite.config.v1beta1.ApplicationAgentCredential
	72,  // 44: indykite.config.v1beta1.DeleteApplicationAgentCredentialRequest.etag:type_name -> google.protobuf.StringValue
	72,  // 45: indykite.config.v1beta1.CreateServiceAccountRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 46: indykite.config.v1beta1.CreateServiceAccountRequest.description:type_name -> google.protobuf.StringValue
	73,  // 47: indykite.config.v1beta1.CreateServiceAccountResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 48: indykite.config.v1beta1.CreateServiceAccountResponse.update_time:type_name -> google.protobuf.Timestamp
	74,  // 49: indykite.config.v1beta1.ReadServiceAccountRequest.name:type_name -> indykite.config.v1beta1.UniqueNameIdentifier
	79,  // 50: indykite.config.v1beta1.ReadServiceAccountResponse.service_account:type_name -> indykite.config.v1beta1.ServiceAccount
	72,  // 51: indykite.config.v1beta1.UpdateServiceAccountRequest.etag:type_name -> google.protobuf.StringValue
	72,  // 52: indykite.config.v1beta1.UpdateServiceAccountRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 53: indykite.config.v1beta1.UpdateServiceAccountRequest.description:type_name -> google.protobuf.StringValue
	73,  // 54: indykite.config.v1beta1.UpdateServiceAccountResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 55: indykite.config.v1beta1.UpdateServiceAccountResponse.update_time:type_name -> google.protobuf.Timestamp
	72,  // 56: indykite.config.v1beta1.DeleteServiceAccountRequest.etag:type_name -> google.protobuf.StringValue
	73,  // 57: indykite.config.v1beta1.RegisterServiceAccountCredentialRequest.expire_time:type_name -> google.protobuf.Timestamp
	73,  // 58: indykite.config.v1beta1.RegisterServiceAccountCredentialResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 59: indykite.config.v1beta1.RegisterServiceAccountCredentialResponse.expire_time:type_name -> google.protobuf.Timestamp
	80,  // 60: indykite.config.v1beta1.ReadServiceAccountCredentialResponse.service_account_credential:type_name -> indykite.config.v1beta1.ServiceAccountCredential
	72,  // 61: indykite.config.v1beta1.DeleteServiceAccountCredentialRequest.etag:type_name -> google.protobuf.StringValue
	72,  // 62: indykite.config.v1beta1.CreateConfigNodeRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 63: indykite.config.v1beta1.CreateConfigNodeRequest.description:type_name -> google.protobuf.StringValue
	81,  // 64: indykite.config.v1beta1.CreateConfigNodeRequest.audit_sink_config:type_name -> indykite.config.v1beta1.AuditSinkConfig
	82,  // 65: indykite.config.v1beta1.CreateConfigNodeRequest.authorization_policy_config:type_name -> indykite.config.v1beta1.AuthorizationPolicyConfig
	83,  // 66: indykite.config.v1beta1.CreateConfigNodeRequest.consent_config:type_name -> indykite.config.v1beta1.ConsentConfiguration
	84,  // 67: indykite.config.v1beta1.CreateConfigNodeRequest.token_introspect_config:type_name -> indykite.config.v1beta1.TokenIntrospectConfig
	85,  // 68: indykite.config.v1beta1.CreateConfigNodeRequest.ingest_pipeline_config:type_name -> indykite.config.v1beta1.IngestPipelineConfig
	86,  // 69: indykite.config.v1beta1.CreateConfigNodeRequest.entity_matching_pipeline_config:type_name -> indykite.config.v1beta1.EntityMatchingPipelineConfig
	87,  // 70: indykite.config.v1beta1.CreateConfigNodeRequest.external_data_resolver_config:type_name -> indykite.config.v1beta1.ExternalDataResolverConfig
	88,  // 71: indykite.config.v1beta1.CreateConfigNodeRequest.trust_score_profile_config:type_name -> indykite.config.v1beta1.TrustScoreProfileConfig
	73,  // 72: indykite.config.v1beta1.CreateConfigNodeResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 73: indykite.config.v1beta1.CreateConfigNodeResponse.update_time:type_name -> google.protobuf.Timestamp
	89,  // 74: indykite.config.v1beta1.ReadConfigNodeResponse.config_node:type_name -> indykite.config.v1beta1.ConfigNode
	72,  // 75: indykite.config.v1beta1.UpdateConfigNodeRequest.etag:type_name -> google.protobuf.StringValue
	72,  // 76: indykite.config.v1beta1.UpdateConfigNodeRequest.display_name:type_name -> google.protobuf.StringValue
	72,  // 77: indykite.config.v1beta1.UpdateConfigNodeRequest.description:type_name -> google.protobuf.StringValue
	81,  // 78: indykite.config.v1beta1.UpdateConfigNodeRequest.audit_sink_config:type_name -> indykite.config.v1beta1.AuditSinkConfig
	82,  // 79: indykite.config.v1beta1.UpdateConfigNodeRequest.authorization_policy_config:type_name -> indykite.config.v1beta1.AuthorizationPolicyConfig
	83,  // 80: indykite.config.v1beta1.UpdateConfigNodeRequest.consent_config:type_name -> indykite.config.v1beta1.ConsentConfiguration
	84,  // 81: indykite.config.v1beta1.UpdateConfigNodeRequest.token_introspect_config:type_name -> indykite.config.v1beta1.TokenIntrospectConfig
	85,  // 82: indykite.config.v1beta1.UpdateConfigNodeRequest.ingest_pipeline_config:type_name -> indykite.config.v1beta1.IngestPipelineConfig
	86,  // 83: indykite.config.v1beta1.UpdateConfigNodeRequest.entity_matching_pipeline_config:type_name -> indykite.config.v1beta1.EntityMatchingPipelineConfig
	87,  // 84: indykite.config.v1beta1.UpdateConfigNodeRequest.external_data_resolver_config:type_name -> indykite.config.v1beta1.ExternalDataResolverConfig
	88,  // 85: indykite.config.v1beta1.UpdateConfigNodeRequest.trust_score_profile_config:type_name -> indykite.config.v1beta1.TrustScoreProfileConfig
	73,  // 86: indykite.config.v1beta1.UpdateConfigNodeResponse.create_time:type_name -> google.protobuf.Timestamp
	73,  // 87: indykite.config.v1beta1.UpdateConfigNodeResponse.update_time:type_name -> google.protobuf.Timestamp
	72,  // 88: indykite.config.v1beta1.DeleteConfigNodeRequest.etag:type_name -> google.protobuf.StringValue
	89,  // 89: indykite.config.v1beta1.ListConfigNodeVersionsResponse.config_nodes:type_name -> indykite.config.v1beta1.ConfigNode
	69,  // 90: indykite.config.v1beta1.ListPermissionsResponse.users:type_name -> indykite.config.v1beta1.ListPermissionsResponse.User
	70,  // 91: indykite.config.v1beta1.ListPermissionsResponse.service_accounts:type_name -> indykite.config.v1beta1.ListPermissionsResponse.ServiceAccount
	68,  // 92: indykite.config.v1beta1.ListPermissionsResponse.User.roles:type_name -> indykite.config.v1beta1.ListPermissionsResponse.PermissionRole
	68,  // 93: indykite.config.v1beta1.ListPermissionsResponse.ServiceAccount.roles:type_name -> indykite.config.v1beta1.ListPermissionsResponse.PermissionRole
	0,   // 94: indykite.config.v1beta1.ConfigManagementAPI.ReadCustomer:input_type -> indykite.config.v1beta1.ReadCustomerRequest
	2,   // 95: indykite.config.v1beta1.ConfigManagementAPI.CreateApplicationSpace:input_type -> indykite.config.v1beta1.CreateApplicationSpaceRequest
	4,   // 96: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationSpace:input_type -> indykite.config.v1beta1.ReadApplicationSpaceRequest
	6,   // 97: indykite.config.v1beta1.ConfigManagementAPI.ListApplicationSpaces:input_type -> indykite.config.v1beta1.ListApplicationSpacesRequest
	8,   // 98: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplicationSpace:input_type -> indykite.config.v1beta1.UpdateApplicationSpaceRequest
	10,  // 99: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationSpace:input_type -> indykite.config.v1beta1.DeleteApplicationSpaceRequest
	12,  // 100: indykite.config.v1beta1.ConfigManagementAPI.CreateApplication:input_type -> indykite.config.v1beta1.CreateApplicationRequest
	14,  // 101: indykite.config.v1beta1.ConfigManagementAPI.ReadApplication:input_type -> indykite.config.v1beta1.ReadApplicationRequest
	16,  // 102: indykite.config.v1beta1.ConfigManagementAPI.ListApplications:input_type -> indykite.config.v1beta1.ListApplicationsRequest
	18,  // 103: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplication:input_type -> indykite.config.v1beta1.UpdateApplicationRequest
	20,  // 104: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplication:input_type -> indykite.config.v1beta1.DeleteApplicationRequest
	22,  // 105: indykite.config.v1beta1.ConfigManagementAPI.CreateApplicationAgent:input_type -> indykite.config.v1beta1.CreateApplicationAgentRequest
	24,  // 106: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationAgent:input_type -> indykite.config.v1beta1.ReadApplicationAgentRequest
	26,  // 107: indykite.config.v1beta1.ConfigManagementAPI.ListApplicationAgents:input_type -> indykite.config.v1beta1.ListApplicationAgentsRequest
	28,  // 108: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplicationAgent:input_type -> indykite.config.v1beta1.UpdateApplicationAgentRequest
	30,  // 109: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationAgent:input_type -> indykite.config.v1beta1.DeleteApplicationAgentRequest
	32,  // 110: indykite.config.v1beta1.ConfigManagementAPI.RegisterApplicationAgentCredential:input_type -> indykite.config.v1beta1.RegisterApplicationAgentCredentialRequest
	34,  // 111: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationAgentCredential:input_type -> indykite.config.v1beta1.ReadApplicationAgentCredentialRequest
	36,  // 112: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationAgentCredential:input_type -> indykite.config.v1beta1.DeleteApplicationAgentCredentialRequest
	38,  // 113: indykite.config.v1beta1.ConfigManagementAPI.CreateServiceAccount:input_type -> indykite.config.v1beta1.CreateServiceAccountRequest
	40,  // 114: indykite.config.v1beta1.ConfigManagementAPI.ReadServiceAccount:input_type -> indykite.config.v1beta1.ReadServiceAccountRequest
	42,  // 115: indykite.config.v1beta1.ConfigManagementAPI.UpdateServiceAccount:input_type -> indykite.config.v1beta1.UpdateServiceAccountRequest
	44,  // 116: indykite.config.v1beta1.ConfigManagementAPI.DeleteServiceAccount:input_type -> indykite.config.v1beta1.DeleteServiceAccountRequest
	46,  // 117: indykite.config.v1beta1.ConfigManagementAPI.RegisterServiceAccountCredential:input_type -> indykite.config.v1beta1.RegisterServiceAccountCredentialRequest
	48,  // 118: indykite.config.v1beta1.ConfigManagementAPI.ReadServiceAccountCredential:input_type -> indykite.config.v1beta1.ReadServiceAccountCredentialRequest
	50,  // 119: indykite.config.v1beta1.ConfigManagementAPI.DeleteServiceAccountCredential:input_type -> indykite.config.v1beta1.DeleteServiceAccountCredentialRequest
	52,  // 120: indykite.config.v1beta1.ConfigManagementAPI.CreateConfigNode:input_type -> indykite.config.v1beta1.CreateConfigNodeRequest
	54,  // 121: indykite.config.v1beta1.ConfigManagementAPI.ReadConfigNode:input_type -> indykite.config.v1beta1.ReadConfigNodeRequest
	56,  // 122: indykite.config.v1beta1.ConfigManagementAPI.UpdateConfigNode:input_type -> indykite.config.v1beta1.UpdateConfigNodeRequest
	58,  // 123: indykite.config.v1beta1.ConfigManagementAPI.DeleteConfigNode:input_type -> indykite.config.v1beta1.DeleteConfigNodeRequest
	59,  // 124: indykite.config.v1beta1.ConfigManagementAPI.ListConfigNodeVersions:input_type -> indykite.config.v1beta1.ListConfigNodeVersionsRequest
	62,  // 125: indykite.config.v1beta1.ConfigManagementAPI.AssignPermissions:input_type -> indykite.config.v1beta1.AssignPermissionsRequest
	64,  // 126: indykite.config.v1beta1.ConfigManagementAPI.RevokePermissions:input_type -> indykite.config.v1beta1.RevokePermissionsRequest
	66,  // 127: indykite.config.v1beta1.ConfigManagementAPI.ListPermissions:input_type -> indykite.config.v1beta1.ListPermissionsRequest
	1,   // 128: indykite.config.v1beta1.ConfigManagementAPI.ReadCustomer:output_type -> indykite.config.v1beta1.ReadCustomerResponse
	3,   // 129: indykite.config.v1beta1.ConfigManagementAPI.CreateApplicationSpace:output_type -> indykite.config.v1beta1.CreateApplicationSpaceResponse
	5,   // 130: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationSpace:output_type -> indykite.config.v1beta1.ReadApplicationSpaceResponse
	7,   // 131: indykite.config.v1beta1.ConfigManagementAPI.ListApplicationSpaces:output_type -> indykite.config.v1beta1.ListApplicationSpacesResponse
	9,   // 132: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplicationSpace:output_type -> indykite.config.v1beta1.UpdateApplicationSpaceResponse
	11,  // 133: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationSpace:output_type -> indykite.config.v1beta1.DeleteApplicationSpaceResponse
	13,  // 134: indykite.config.v1beta1.ConfigManagementAPI.CreateApplication:output_type -> indykite.config.v1beta1.CreateApplicationResponse
	15,  // 135: indykite.config.v1beta1.ConfigManagementAPI.ReadApplication:output_type -> indykite.config.v1beta1.ReadApplicationResponse
	17,  // 136: indykite.config.v1beta1.ConfigManagementAPI.ListApplications:output_type -> indykite.config.v1beta1.ListApplicationsResponse
	19,  // 137: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplication:output_type -> indykite.config.v1beta1.UpdateApplicationResponse
	21,  // 138: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplication:output_type -> indykite.config.v1beta1.DeleteApplicationResponse
	23,  // 139: indykite.config.v1beta1.ConfigManagementAPI.CreateApplicationAgent:output_type -> indykite.config.v1beta1.CreateApplicationAgentResponse
	25,  // 140: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationAgent:output_type -> indykite.config.v1beta1.ReadApplicationAgentResponse
	27,  // 141: indykite.config.v1beta1.ConfigManagementAPI.ListApplicationAgents:output_type -> indykite.config.v1beta1.ListApplicationAgentsResponse
	29,  // 142: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplicationAgent:output_type -> indykite.config.v1beta1.UpdateApplicationAgentResponse
	31,  // 143: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationAgent:output_type -> indykite.config.v1beta1.DeleteApplicationAgentResponse
	33,  // 144: indykite.config.v1beta1.ConfigManagementAPI.RegisterApplicationAgentCredential:output_type -> indykite.config.v1beta1.RegisterApplicationAgentCredentialResponse
	35,  // 145: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationAgentCredential:output_type -> indykite.config.v1beta1.ReadApplicationAgentCredentialResponse
	37,  // 146: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationAgentCredential:output_type -> indykite.config.v1beta1.DeleteApplicationAgentCredentialResponse
	39,  // 147: indykite.config.v1beta1.ConfigManagementAPI.CreateServiceAccount:output_type -> indykite.config.v1beta1.CreateServiceAccountResponse
	41,  // 148: indykite.config.v1beta1.ConfigManagementAPI.ReadServiceAccount:output_type -> indykite.config.v1beta1.ReadServiceAccountResponse
	43,  // 149: indykite.config.v1beta1.ConfigManagementAPI.UpdateServiceAccount:output_type -> indykite.config.v1beta1.UpdateServiceAccountResponse
	45,  // 150: indykite.config.v1beta1.ConfigManagementAPI.DeleteServiceAccount:output_type -> indykite.config.v1beta1.DeleteServiceAccountResponse
	47,  // 151: indykite.config.v1beta1.ConfigManagementAPI.RegisterServiceAccountCredential:output_type -> indykite.config.v1beta1.RegisterServiceAccountCredentialResponse
	49,  // 152: indykite.config.v1beta1.ConfigManagementAPI.ReadServiceAccountCredential:output_type -> indykite.config.v1beta1.ReadServiceAccountCredentialResponse
	51,  // 153: indykite.config.v1beta1.ConfigManagementAPI.DeleteServiceAccountCredential:output_type -> indykite.config.v1beta1.DeleteServiceAccountCredentialResponse
	53,  // 154: indykite.config.v1beta1.ConfigManagementAPI.CreateConfigNode:output_type -> indykite.config.v1beta1.CreateConfigNodeResponse
	55,  // 155: indykite.config.v1beta1.ConfigManagementAPI.ReadConfigNode:output_type -> indykite.config.v1beta1.ReadConfigNodeResponse
	57,  // 156: indykite.config.v1beta1.ConfigManagementAPI.UpdateConfigNode:output_type -> indykite.config.v1beta1.UpdateConfigNodeResponse
	61,  // 157: indykite.config.v1beta1.ConfigManagementAPI.DeleteConfigNode:output_type -> indykite.config.v1beta1.DeleteConfigNodeResponse
	60,  // 158: indykite.config.v1beta1.ConfigManagementAPI.ListConfigNodeVersions:output_type -> indykite.config.v1beta1.ListConfigNodeVersionsResponse
	63,  // 159: indykite.config.v1beta1.ConfigManagementAPI.AssignPermissions:output_type -> indykite.config.v1beta1.AssignPermissionsResponse
	65,  // 160: indykite.config.v1beta1.ConfigManagementAPI.RevokePermissions:output_type -> indykite.config.v1beta1.RevokePermissionsResponse
	67,  // 161: indykite.config.v1beta1.ConfigManagementAPI.ListPermissions:output_type -> indykite.config.v1beta1.ListPermissionsResponse
	128, // [128:162] is the sub-list for method output_type
	94,  // [94:128] is the sub-list for method input_type
	94,  // [94:94] is the sub-list for extension type_name
	94,  // [94:94] is the sub-list for extension extendee
	0,   // [0:94] is the sub-list for field type_name
}

func init() { file_indykite_config_v1beta1_config_management_api_proto_init() }
func file_indykite_config_v1beta1_config_management_api_proto_init() {
	if File_indykite_config_v1beta1_config_management_api_proto != nil {
		return
	}
	file_indykite_config_v1beta1_model_proto_init()
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[0].OneofWrappers = []any{
		(*ReadCustomerRequest_Id)(nil),
		(*ReadCustomerRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[4].OneofWrappers = []any{
		(*ReadApplicationSpaceRequest_Id)(nil),
		(*ReadApplicationSpaceRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[14].OneofWrappers = []any{
		(*ReadApplicationRequest_Id)(nil),
		(*ReadApplicationRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[24].OneofWrappers = []any{
		(*ReadApplicationAgentRequest_Id)(nil),
		(*ReadApplicationAgentRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[32].OneofWrappers = []any{
		(*RegisterApplicationAgentCredentialRequest_Jwk)(nil),
		(*RegisterApplicationAgentCredentialRequest_Pem)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[40].OneofWrappers = []any{
		(*ReadServiceAccountRequest_Id)(nil),
		(*ReadServiceAccountRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[46].OneofWrappers = []any{
		(*RegisterServiceAccountCredentialRequest_Jwk)(nil),
		(*RegisterServiceAccountCredentialRequest_Pem)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[52].OneofWrappers = []any{
		(*CreateConfigNodeRequest_AuditSinkConfig)(nil),
		(*CreateConfigNodeRequest_AuthorizationPolicyConfig)(nil),
		(*CreateConfigNodeRequest_ConsentConfig)(nil),
		(*CreateConfigNodeRequest_TokenIntrospectConfig)(nil),
		(*CreateConfigNodeRequest_IngestPipelineConfig)(nil),
		(*CreateConfigNodeRequest_EntityMatchingPipelineConfig)(nil),
		(*CreateConfigNodeRequest_ExternalDataResolverConfig)(nil),
		(*CreateConfigNodeRequest_TrustScoreProfileConfig)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[56].OneofWrappers = []any{
		(*UpdateConfigNodeRequest_AuditSinkConfig)(nil),
		(*UpdateConfigNodeRequest_AuthorizationPolicyConfig)(nil),
		(*UpdateConfigNodeRequest_ConsentConfig)(nil),
		(*UpdateConfigNodeRequest_TokenIntrospectConfig)(nil),
		(*UpdateConfigNodeRequest_IngestPipelineConfig)(nil),
		(*UpdateConfigNodeRequest_EntityMatchingPipelineConfig)(nil),
		(*UpdateConfigNodeRequest_ExternalDataResolverConfig)(nil),
		(*UpdateConfigNodeRequest_TrustScoreProfileConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_config_v1beta1_config_management_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indykite_config_v1beta1_config_management_api_proto_goTypes,
		DependencyIndexes: file_indykite_config_v1beta1_config_management_api_proto_depIdxs,
		MessageInfos:      file_indykite_config_v1beta1_config_management_api_proto_msgTypes,
	}.Build()
	File_indykite_config_v1beta1_config_management_api_proto = out.File
	file_indykite_config_v1beta1_config_management_api_proto_rawDesc = nil
	file_indykite_config_v1beta1_config_management_api_proto_goTypes = nil
	file_indykite_config_v1beta1_config_management_api_proto_depIdxs = nil
}
