// Copyright (c) 2020 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: indykite/config/v1beta1/config_management_api.proto

package configv1beta1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*ReadCustomerRequest_Id
	//	*ReadCustomerRequest_Name
	Identifier isReadCustomerRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadCustomerRequest) Reset() {
	*x = ReadCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCustomerRequest) ProtoMessage() {}

func (x *ReadCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCustomerRequest.ProtoReflect.Descriptor instead.
func (*ReadCustomerRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{0}
}

func (m *ReadCustomerRequest) GetIdentifier() isReadCustomerRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *ReadCustomerRequest) GetId() string {
	if x, ok := x.GetIdentifier().(*ReadCustomerRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *ReadCustomerRequest) GetName() string {
	if x, ok := x.GetIdentifier().(*ReadCustomerRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *ReadCustomerRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadCustomerRequest_Identifier interface {
	isReadCustomerRequest_Identifier()
}

type ReadCustomerRequest_Id struct {
	// Id is globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadCustomerRequest_Name struct {
	// Name is unique domain name of customer.
	// The name value is immutable.
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadCustomerRequest_Id) isReadCustomerRequest_Identifier() {}

func (*ReadCustomerRequest_Name) isReadCustomerRequest_Identifier() {}

type ReadCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *Customer `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
}

func (x *ReadCustomerResponse) Reset() {
	*x = ReadCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCustomerResponse) ProtoMessage() {}

func (x *ReadCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCustomerResponse.ProtoReflect.Descriptor instead.
func (*ReadCustomerResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{1}
}

func (x *ReadCustomerResponse) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

type CreateApplicationSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CustomerId associated with the request.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Name is unique and immutable name. It's not globally unique, but only unique in a customer scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *CreateApplicationSpaceRequest) Reset() {
	*x = CreateApplicationSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationSpaceRequest) ProtoMessage() {}

func (x *CreateApplicationSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationSpaceRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationSpaceRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateApplicationSpaceRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *CreateApplicationSpaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateApplicationSpaceRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateApplicationSpaceRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateApplicationSpaceRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type CreateApplicationSpaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateApplicationSpaceResponse) Reset() {
	*x = CreateApplicationSpaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationSpaceResponse) ProtoMessage() {}

func (x *CreateApplicationSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationSpaceResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationSpaceResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{3}
}

func (x *CreateApplicationSpaceResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationSpaceResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateApplicationSpaceResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateApplicationSpaceResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateApplicationSpaceResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadApplicationSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*ReadApplicationSpaceRequest_Id
	//	*ReadApplicationSpaceRequest_Name
	Identifier isReadApplicationSpaceRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadApplicationSpaceRequest) Reset() {
	*x = ReadApplicationSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadApplicationSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationSpaceRequest) ProtoMessage() {}

func (x *ReadApplicationSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationSpaceRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationSpaceRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{4}
}

func (m *ReadApplicationSpaceRequest) GetIdentifier() isReadApplicationSpaceRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *ReadApplicationSpaceRequest) GetId() string {
	if x, ok := x.GetIdentifier().(*ReadApplicationSpaceRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationSpaceRequest) GetName() *UniqueNameIdentifier {
	if x, ok := x.GetIdentifier().(*ReadApplicationSpaceRequest_Name); ok {
		return x.Name
	}
	return nil
}

func (x *ReadApplicationSpaceRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadApplicationSpaceRequest_Identifier interface {
	isReadApplicationSpaceRequest_Identifier()
}

type ReadApplicationSpaceRequest_Id struct {
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadApplicationSpaceRequest_Name struct {
	// Name contains the client generated unique identifier with name.
	Name *UniqueNameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadApplicationSpaceRequest_Id) isReadApplicationSpaceRequest_Identifier() {}

func (*ReadApplicationSpaceRequest_Name) isReadApplicationSpaceRequest_Identifier() {}

type ReadApplicationSpaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppSpace *ApplicationSpace `protobuf:"bytes,2,opt,name=app_space,json=appSpace,proto3" json:"app_space,omitempty"`
}

func (x *ReadApplicationSpaceResponse) Reset() {
	*x = ReadApplicationSpaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadApplicationSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationSpaceResponse) ProtoMessage() {}

func (x *ReadApplicationSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationSpaceResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationSpaceResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{5}
}

func (x *ReadApplicationSpaceResponse) GetAppSpace() *ApplicationSpace {
	if x != nil {
		return x.AppSpace
	}
	return nil
}

type ListApplicationSpacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Match documents with exact name search.
	Match []string `protobuf:"bytes,2,rep,name=match,proto3" json:"match,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ListApplicationSpacesRequest) Reset() {
	*x = ListApplicationSpacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationSpacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationSpacesRequest) ProtoMessage() {}

func (x *ListApplicationSpacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationSpacesRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationSpacesRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{6}
}

func (x *ListApplicationSpacesRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ListApplicationSpacesRequest) GetMatch() []string {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ListApplicationSpacesRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListApplicationSpacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppSpace *ApplicationSpace `protobuf:"bytes,1,opt,name=app_space,json=appSpace,proto3" json:"app_space,omitempty"`
}

func (x *ListApplicationSpacesResponse) Reset() {
	*x = ListApplicationSpacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationSpacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationSpacesResponse) ProtoMessage() {}

func (x *ListApplicationSpacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationSpacesResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationSpacesResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{7}
}

func (x *ListApplicationSpacesResponse) GetAppSpace() *ApplicationSpace {
	if x != nil {
		return x.AppSpace
	}
	return nil
}

type UpdateApplicationSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *UpdateApplicationSpaceRequest) Reset() {
	*x = UpdateApplicationSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationSpaceRequest) ProtoMessage() {}

func (x *UpdateApplicationSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationSpaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationSpaceRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateApplicationSpaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationSpaceRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateApplicationSpaceRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateApplicationSpaceRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateApplicationSpaceRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type UpdateApplicationSpaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *UpdateApplicationSpaceResponse) Reset() {
	*x = UpdateApplicationSpaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationSpaceResponse) ProtoMessage() {}

func (x *UpdateApplicationSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationSpaceResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationSpaceResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateApplicationSpaceResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationSpaceResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateApplicationSpaceResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateApplicationSpaceResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type DeleteApplicationSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the Globally unique identifier of object to delete.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteApplicationSpaceRequest) Reset() {
	*x = DeleteApplicationSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationSpaceRequest) ProtoMessage() {}

func (x *DeleteApplicationSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationSpaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationSpaceRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteApplicationSpaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationSpaceRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteApplicationSpaceRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteApplicationSpaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteApplicationSpaceResponse) Reset() {
	*x = DeleteApplicationSpaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationSpaceResponse) ProtoMessage() {}

func (x *DeleteApplicationSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationSpaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationSpaceResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteApplicationSpaceResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type CreateApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ApplicationSpaceId defines the parent container identifier.
	AppSpaceId string `protobuf:"bytes,1,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *CreateApplicationRequest) Reset() {
	*x = CreateApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationRequest) ProtoMessage() {}

func (x *CreateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{12}
}

func (x *CreateApplicationRequest) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *CreateApplicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateApplicationRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateApplicationRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type CreateApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateApplicationResponse) Reset() {
	*x = CreateApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationResponse) ProtoMessage() {}

func (x *CreateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{13}
}

func (x *CreateApplicationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateApplicationResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateApplicationResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateApplicationResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*ReadApplicationRequest_Id
	//	*ReadApplicationRequest_Name
	Identifier isReadApplicationRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadApplicationRequest) Reset() {
	*x = ReadApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationRequest) ProtoMessage() {}

func (x *ReadApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{14}
}

func (m *ReadApplicationRequest) GetIdentifier() isReadApplicationRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *ReadApplicationRequest) GetId() string {
	if x, ok := x.GetIdentifier().(*ReadApplicationRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationRequest) GetName() *UniqueNameIdentifier {
	if x, ok := x.GetIdentifier().(*ReadApplicationRequest_Name); ok {
		return x.Name
	}
	return nil
}

func (x *ReadApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadApplicationRequest_Identifier interface {
	isReadApplicationRequest_Identifier()
}

type ReadApplicationRequest_Id struct {
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadApplicationRequest_Name struct {
	// Name contains the client generated unique identifier with name.
	Name *UniqueNameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadApplicationRequest_Id) isReadApplicationRequest_Identifier() {}

func (*ReadApplicationRequest_Name) isReadApplicationRequest_Identifier() {}

type ReadApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application *Application `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
}

func (x *ReadApplicationResponse) Reset() {
	*x = ReadApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationResponse) ProtoMessage() {}

func (x *ReadApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{15}
}

func (x *ReadApplicationResponse) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

type ListApplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	AppSpaceId string `protobuf:"bytes,1,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// Match documents with exact name search.
	Match []string `protobuf:"bytes,2,rep,name=match,proto3" json:"match,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ListApplicationsRequest) Reset() {
	*x = ListApplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsRequest) ProtoMessage() {}

func (x *ListApplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{16}
}

func (x *ListApplicationsRequest) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ListApplicationsRequest) GetMatch() []string {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ListApplicationsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListApplicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application *Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
}

func (x *ListApplicationsResponse) Reset() {
	*x = ListApplicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsResponse) ProtoMessage() {}

func (x *ListApplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListApplicationsResponse) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

type UpdateApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *UpdateApplicationRequest) Reset() {
	*x = UpdateApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationRequest) ProtoMessage() {}

func (x *UpdateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateApplicationRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateApplicationRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type UpdateApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *UpdateApplicationResponse) Reset() {
	*x = UpdateApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationResponse) ProtoMessage() {}

func (x *UpdateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateApplicationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateApplicationResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateApplicationResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type DeleteApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the Globally unique identifier of object to delete.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteApplicationRequest) Reset() {
	*x = DeleteApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationRequest) ProtoMessage() {}

func (x *DeleteApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteApplicationResponse) Reset() {
	*x = DeleteApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationResponse) ProtoMessage() {}

func (x *DeleteApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteApplicationResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type CreateApplicationAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ApplicationId is the Parent Application ID.
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of ApplicationAgent.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of ApplicationAgent.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *CreateApplicationAgentRequest) Reset() {
	*x = CreateApplicationAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationAgentRequest) ProtoMessage() {}

func (x *CreateApplicationAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationAgentRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationAgentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{22}
}

func (x *CreateApplicationAgentRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CreateApplicationAgentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateApplicationAgentRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateApplicationAgentRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateApplicationAgentRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type CreateApplicationAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,5,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,6,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateApplicationAgentResponse) Reset() {
	*x = CreateApplicationAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationAgentResponse) ProtoMessage() {}

func (x *CreateApplicationAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationAgentResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationAgentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{23}
}

func (x *CreateApplicationAgentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationAgentResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateApplicationAgentResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateApplicationAgentResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateApplicationAgentResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadApplicationAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*ReadApplicationAgentRequest_Id
	//	*ReadApplicationAgentRequest_Name
	Identifier isReadApplicationAgentRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadApplicationAgentRequest) Reset() {
	*x = ReadApplicationAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadApplicationAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAgentRequest) ProtoMessage() {}

func (x *ReadApplicationAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAgentRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationAgentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{24}
}

func (m *ReadApplicationAgentRequest) GetIdentifier() isReadApplicationAgentRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *ReadApplicationAgentRequest) GetId() string {
	if x, ok := x.GetIdentifier().(*ReadApplicationAgentRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationAgentRequest) GetName() *UniqueNameIdentifier {
	if x, ok := x.GetIdentifier().(*ReadApplicationAgentRequest_Name); ok {
		return x.Name
	}
	return nil
}

func (x *ReadApplicationAgentRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadApplicationAgentRequest_Identifier interface {
	isReadApplicationAgentRequest_Identifier()
}

type ReadApplicationAgentRequest_Id struct {
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadApplicationAgentRequest_Name struct {
	// Name contains the client generated unique identifier with name.
	Name *UniqueNameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadApplicationAgentRequest_Id) isReadApplicationAgentRequest_Identifier() {}

func (*ReadApplicationAgentRequest_Name) isReadApplicationAgentRequest_Identifier() {}

type ReadApplicationAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationAgent *ApplicationAgent `protobuf:"bytes,2,opt,name=application_agent,json=applicationAgent,proto3" json:"application_agent,omitempty"`
}

func (x *ReadApplicationAgentResponse) Reset() {
	*x = ReadApplicationAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadApplicationAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAgentResponse) ProtoMessage() {}

func (x *ReadApplicationAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAgentResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationAgentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{25}
}

func (x *ReadApplicationAgentResponse) GetApplicationAgent() *ApplicationAgent {
	if x != nil {
		return x.ApplicationAgent
	}
	return nil
}

type ListApplicationAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	AppSpaceId string `protobuf:"bytes,1,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// Match documents with exact name search.
	Match []string `protobuf:"bytes,2,rep,name=match,proto3" json:"match,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ListApplicationAgentsRequest) Reset() {
	*x = ListApplicationAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationAgentsRequest) ProtoMessage() {}

func (x *ListApplicationAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationAgentsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{26}
}

func (x *ListApplicationAgentsRequest) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ListApplicationAgentsRequest) GetMatch() []string {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ListApplicationAgentsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListApplicationAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationAgent *ApplicationAgent `protobuf:"bytes,1,opt,name=application_agent,json=applicationAgent,proto3" json:"application_agent,omitempty"`
}

func (x *ListApplicationAgentsResponse) Reset() {
	*x = ListApplicationAgentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationAgentsResponse) ProtoMessage() {}

func (x *ListApplicationAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationAgentsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{27}
}

func (x *ListApplicationAgentsResponse) GetApplicationAgent() *ApplicationAgent {
	if x != nil {
		return x.ApplicationAgent
	}
	return nil
}

type UpdateApplicationAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *UpdateApplicationAgentRequest) Reset() {
	*x = UpdateApplicationAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationAgentRequest) ProtoMessage() {}

func (x *UpdateApplicationAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationAgentRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationAgentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateApplicationAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationAgentRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateApplicationAgentRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateApplicationAgentRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateApplicationAgentRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type UpdateApplicationAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *UpdateApplicationAgentResponse) Reset() {
	*x = UpdateApplicationAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationAgentResponse) ProtoMessage() {}

func (x *UpdateApplicationAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationAgentResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationAgentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateApplicationAgentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationAgentResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateApplicationAgentResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateApplicationAgentResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type DeleteApplicationAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the Globally unique identifier of object to delete.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteApplicationAgentRequest) Reset() {
	*x = DeleteApplicationAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAgentRequest) ProtoMessage() {}

func (x *DeleteApplicationAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAgentRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAgentRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteApplicationAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationAgentRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteApplicationAgentRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteApplicationAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteApplicationAgentResponse) Reset() {
	*x = DeleteApplicationAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAgentResponse) ProtoMessage() {}

func (x *DeleteApplicationAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAgentResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAgentResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteApplicationAgentResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type RegisterApplicationAgentCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationAgentId string `protobuf:"bytes,1,opt,name=application_agent_id,json=applicationAgentId,proto3" json:"application_agent_id,omitempty"`
	DisplayName        string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Types that are assignable to PublicKey:
	//	*RegisterApplicationAgentCredentialRequest_Jwk
	//	*RegisterApplicationAgentCredentialRequest_Pem
	PublicKey       isRegisterApplicationAgentCredentialRequest_PublicKey `protobuf_oneof:"public_key"`
	ExpireTime      *timestamppb.Timestamp                                `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	DefaultTenantId string                                                `protobuf:"bytes,6,opt,name=default_tenant_id,json=defaultTenantId,proto3" json:"default_tenant_id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,7,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *RegisterApplicationAgentCredentialRequest) Reset() {
	*x = RegisterApplicationAgentCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterApplicationAgentCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterApplicationAgentCredentialRequest) ProtoMessage() {}

func (x *RegisterApplicationAgentCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterApplicationAgentCredentialRequest.ProtoReflect.Descriptor instead.
func (*RegisterApplicationAgentCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{32}
}

func (x *RegisterApplicationAgentCredentialRequest) GetApplicationAgentId() string {
	if x != nil {
		return x.ApplicationAgentId
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (m *RegisterApplicationAgentCredentialRequest) GetPublicKey() isRegisterApplicationAgentCredentialRequest_PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialRequest) GetJwk() []byte {
	if x, ok := x.GetPublicKey().(*RegisterApplicationAgentCredentialRequest_Jwk); ok {
		return x.Jwk
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialRequest) GetPem() []byte {
	if x, ok := x.GetPublicKey().(*RegisterApplicationAgentCredentialRequest_Pem); ok {
		return x.Pem
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialRequest) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialRequest) GetDefaultTenantId() string {
	if x != nil {
		return x.DefaultTenantId
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isRegisterApplicationAgentCredentialRequest_PublicKey interface {
	isRegisterApplicationAgentCredentialRequest_PublicKey()
}

type RegisterApplicationAgentCredentialRequest_Jwk struct {
	Jwk []byte `protobuf:"bytes,3,opt,name=jwk,proto3,oneof"`
}

type RegisterApplicationAgentCredentialRequest_Pem struct {
	Pem []byte `protobuf:"bytes,4,opt,name=pem,proto3,oneof"`
}

func (*RegisterApplicationAgentCredentialRequest_Jwk) isRegisterApplicationAgentCredentialRequest_PublicKey() {
}

func (*RegisterApplicationAgentCredentialRequest_Pem) isRegisterApplicationAgentCredentialRequest_PublicKey() {
}

type RegisterApplicationAgentCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationAgentId string                 `protobuf:"bytes,2,opt,name=application_agent_id,json=applicationAgentId,proto3" json:"application_agent_id,omitempty"`
	Kid                string                 `protobuf:"bytes,3,opt,name=kid,proto3" json:"kid,omitempty"`
	AgentConfig        []byte                 `protobuf:"bytes,4,opt,name=agent_config,json=agentConfig,proto3" json:"agent_config,omitempty"`
	CreateTime         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,7,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *RegisterApplicationAgentCredentialResponse) Reset() {
	*x = RegisterApplicationAgentCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterApplicationAgentCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterApplicationAgentCredentialResponse) ProtoMessage() {}

func (x *RegisterApplicationAgentCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterApplicationAgentCredentialResponse.ProtoReflect.Descriptor instead.
func (*RegisterApplicationAgentCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{33}
}

func (x *RegisterApplicationAgentCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialResponse) GetApplicationAgentId() string {
	if x != nil {
		return x.ApplicationAgentId
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialResponse) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *RegisterApplicationAgentCredentialResponse) GetAgentConfig() []byte {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialResponse) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RegisterApplicationAgentCredentialResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadApplicationAgentCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadApplicationAgentCredentialRequest) Reset() {
	*x = ReadApplicationAgentCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadApplicationAgentCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAgentCredentialRequest) ProtoMessage() {}

func (x *ReadApplicationAgentCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAgentCredentialRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationAgentCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{34}
}

func (x *ReadApplicationAgentCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationAgentCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ReadApplicationAgentCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationAgentCredential *ApplicationAgentCredential `protobuf:"bytes,1,opt,name=application_agent_credential,json=applicationAgentCredential,proto3" json:"application_agent_credential,omitempty"`
}

func (x *ReadApplicationAgentCredentialResponse) Reset() {
	*x = ReadApplicationAgentCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadApplicationAgentCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAgentCredentialResponse) ProtoMessage() {}

func (x *ReadApplicationAgentCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAgentCredentialResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationAgentCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{35}
}

func (x *ReadApplicationAgentCredentialResponse) GetApplicationAgentCredential() *ApplicationAgentCredential {
	if x != nil {
		return x.ApplicationAgentCredential
	}
	return nil
}

type DeleteApplicationAgentCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the Globally unique identifier of object to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteApplicationAgentCredentialRequest) Reset() {
	*x = DeleteApplicationAgentCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationAgentCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAgentCredentialRequest) ProtoMessage() {}

func (x *DeleteApplicationAgentCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAgentCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAgentCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteApplicationAgentCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationAgentCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteApplicationAgentCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteApplicationAgentCredentialResponse) Reset() {
	*x = DeleteApplicationAgentCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationAgentCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAgentCredentialResponse) ProtoMessage() {}

func (x *DeleteApplicationAgentCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAgentCredentialResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAgentCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteApplicationAgentCredentialResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type CreateServiceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location is the place where configuration object is created and associated with.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable name of ServiceAccount.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of ServiceAccount.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Permission role id to be assigned
	Role string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,6,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *CreateServiceAccountRequest) Reset() {
	*x = CreateServiceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceAccountRequest) ProtoMessage() {}

func (x *CreateServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{38}
}

func (x *CreateServiceAccountRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateServiceAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateServiceAccountRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateServiceAccountRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateServiceAccountRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateServiceAccountRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type CreateServiceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateServiceAccountResponse) Reset() {
	*x = CreateServiceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceAccountResponse) ProtoMessage() {}

func (x *CreateServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{39}
}

func (x *CreateServiceAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateServiceAccountResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateServiceAccountResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateServiceAccountResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateServiceAccountResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadServiceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*ReadServiceAccountRequest_Id
	//	*ReadServiceAccountRequest_Name
	Identifier isReadServiceAccountRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadServiceAccountRequest) Reset() {
	*x = ReadServiceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServiceAccountRequest) ProtoMessage() {}

func (x *ReadServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*ReadServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{40}
}

func (m *ReadServiceAccountRequest) GetIdentifier() isReadServiceAccountRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *ReadServiceAccountRequest) GetId() string {
	if x, ok := x.GetIdentifier().(*ReadServiceAccountRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *ReadServiceAccountRequest) GetName() *UniqueNameIdentifier {
	if x, ok := x.GetIdentifier().(*ReadServiceAccountRequest_Name); ok {
		return x.Name
	}
	return nil
}

func (x *ReadServiceAccountRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadServiceAccountRequest_Identifier interface {
	isReadServiceAccountRequest_Identifier()
}

type ReadServiceAccountRequest_Id struct {
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadServiceAccountRequest_Name struct {
	// Name contains the client generated unique identifier with name.
	Name *UniqueNameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadServiceAccountRequest_Id) isReadServiceAccountRequest_Identifier() {}

func (*ReadServiceAccountRequest_Name) isReadServiceAccountRequest_Identifier() {}

type ReadServiceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceAccount *ServiceAccount `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *ReadServiceAccountResponse) Reset() {
	*x = ReadServiceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServiceAccountResponse) ProtoMessage() {}

func (x *ReadServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*ReadServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{41}
}

func (x *ReadServiceAccountResponse) GetServiceAccount() *ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

type UpdateServiceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *UpdateServiceAccountRequest) Reset() {
	*x = UpdateServiceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceAccountRequest) ProtoMessage() {}

func (x *UpdateServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateServiceAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateServiceAccountRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateServiceAccountRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateServiceAccountRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateServiceAccountRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type UpdateServiceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *UpdateServiceAccountResponse) Reset() {
	*x = UpdateServiceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceAccountResponse) ProtoMessage() {}

func (x *UpdateServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateServiceAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateServiceAccountResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateServiceAccountResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateServiceAccountResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type DeleteServiceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the Globally unique identifier of object to delete.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteServiceAccountRequest) Reset() {
	*x = DeleteServiceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountRequest) ProtoMessage() {}

func (x *DeleteServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteServiceAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteServiceAccountRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteServiceAccountRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteServiceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteServiceAccountResponse) Reset() {
	*x = DeleteServiceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountResponse) ProtoMessage() {}

func (x *DeleteServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteServiceAccountResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type RegisterServiceAccountCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceAccountId string `protobuf:"bytes,1,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	DisplayName      string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Types that are assignable to PublicKey:
	//	*RegisterServiceAccountCredentialRequest_Jwk
	//	*RegisterServiceAccountCredentialRequest_Pem
	PublicKey  isRegisterServiceAccountCredentialRequest_PublicKey `protobuf_oneof:"public_key"`
	ExpireTime *timestamppb.Timestamp                              `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,6,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *RegisterServiceAccountCredentialRequest) Reset() {
	*x = RegisterServiceAccountCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterServiceAccountCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterServiceAccountCredentialRequest) ProtoMessage() {}

func (x *RegisterServiceAccountCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterServiceAccountCredentialRequest.ProtoReflect.Descriptor instead.
func (*RegisterServiceAccountCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{46}
}

func (x *RegisterServiceAccountCredentialRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *RegisterServiceAccountCredentialRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (m *RegisterServiceAccountCredentialRequest) GetPublicKey() isRegisterServiceAccountCredentialRequest_PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (x *RegisterServiceAccountCredentialRequest) GetJwk() []byte {
	if x, ok := x.GetPublicKey().(*RegisterServiceAccountCredentialRequest_Jwk); ok {
		return x.Jwk
	}
	return nil
}

func (x *RegisterServiceAccountCredentialRequest) GetPem() []byte {
	if x, ok := x.GetPublicKey().(*RegisterServiceAccountCredentialRequest_Pem); ok {
		return x.Pem
	}
	return nil
}

func (x *RegisterServiceAccountCredentialRequest) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RegisterServiceAccountCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isRegisterServiceAccountCredentialRequest_PublicKey interface {
	isRegisterServiceAccountCredentialRequest_PublicKey()
}

type RegisterServiceAccountCredentialRequest_Jwk struct {
	Jwk []byte `protobuf:"bytes,3,opt,name=jwk,proto3,oneof"`
}

type RegisterServiceAccountCredentialRequest_Pem struct {
	Pem []byte `protobuf:"bytes,4,opt,name=pem,proto3,oneof"`
}

func (*RegisterServiceAccountCredentialRequest_Jwk) isRegisterServiceAccountCredentialRequest_PublicKey() {
}

func (*RegisterServiceAccountCredentialRequest_Pem) isRegisterServiceAccountCredentialRequest_PublicKey() {
}

type RegisterServiceAccountCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceAccountId     string                 `protobuf:"bytes,2,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	Kid                  string                 `protobuf:"bytes,3,opt,name=kid,proto3" json:"kid,omitempty"`
	ServiceAccountConfig []byte                 `protobuf:"bytes,4,opt,name=service_account_config,json=serviceAccountConfig,proto3" json:"service_account_config,omitempty"`
	CreateTime           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,7,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *RegisterServiceAccountCredentialResponse) Reset() {
	*x = RegisterServiceAccountCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterServiceAccountCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterServiceAccountCredentialResponse) ProtoMessage() {}

func (x *RegisterServiceAccountCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterServiceAccountCredentialResponse.ProtoReflect.Descriptor instead.
func (*RegisterServiceAccountCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{47}
}

func (x *RegisterServiceAccountCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterServiceAccountCredentialResponse) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *RegisterServiceAccountCredentialResponse) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *RegisterServiceAccountCredentialResponse) GetServiceAccountConfig() []byte {
	if x != nil {
		return x.ServiceAccountConfig
	}
	return nil
}

func (x *RegisterServiceAccountCredentialResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RegisterServiceAccountCredentialResponse) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RegisterServiceAccountCredentialResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadServiceAccountCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadServiceAccountCredentialRequest) Reset() {
	*x = ReadServiceAccountCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadServiceAccountCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServiceAccountCredentialRequest) ProtoMessage() {}

func (x *ReadServiceAccountCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServiceAccountCredentialRequest.ProtoReflect.Descriptor instead.
func (*ReadServiceAccountCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{48}
}

func (x *ReadServiceAccountCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadServiceAccountCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ReadServiceAccountCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceAccountCredential *ServiceAccountCredential `protobuf:"bytes,1,opt,name=service_account_credential,json=serviceAccountCredential,proto3" json:"service_account_credential,omitempty"`
}

func (x *ReadServiceAccountCredentialResponse) Reset() {
	*x = ReadServiceAccountCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadServiceAccountCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadServiceAccountCredentialResponse) ProtoMessage() {}

func (x *ReadServiceAccountCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadServiceAccountCredentialResponse.ProtoReflect.Descriptor instead.
func (*ReadServiceAccountCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{49}
}

func (x *ReadServiceAccountCredentialResponse) GetServiceAccountCredential() *ServiceAccountCredential {
	if x != nil {
		return x.ServiceAccountCredential
	}
	return nil
}

type DeleteServiceAccountCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the Globally unique identifier of object to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteServiceAccountCredentialRequest) Reset() {
	*x = DeleteServiceAccountCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountCredentialRequest) ProtoMessage() {}

func (x *DeleteServiceAccountCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountCredentialRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteServiceAccountCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteServiceAccountCredentialRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteServiceAccountCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteServiceAccountCredentialResponse) Reset() {
	*x = DeleteServiceAccountCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountCredentialResponse) ProtoMessage() {}

func (x *DeleteServiceAccountCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountCredentialResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountCredentialResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteServiceAccountCredentialResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type CreateTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IssuerId defines the parent container identifier.
	IssuerId string `protobuf:"bytes,5,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,6,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *CreateTenantRequest) Reset() {
	*x = CreateTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantRequest) ProtoMessage() {}

func (x *CreateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantRequest.ProtoReflect.Descriptor instead.
func (*CreateTenantRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{52}
}

func (x *CreateTenantRequest) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

func (x *CreateTenantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTenantRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateTenantRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateTenantRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type CreateTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateTenantResponse) Reset() {
	*x = CreateTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantResponse) ProtoMessage() {}

func (x *CreateTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantResponse.ProtoReflect.Descriptor instead.
func (*CreateTenantResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{53}
}

func (x *CreateTenantResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateTenantResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateTenantResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateTenantResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateTenantResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ReadTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*ReadTenantRequest_Id
	//	*ReadTenantRequest_Name
	Identifier isReadTenantRequest_Identifier `protobuf_oneof:"identifier"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadTenantRequest) Reset() {
	*x = ReadTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTenantRequest) ProtoMessage() {}

func (x *ReadTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTenantRequest.ProtoReflect.Descriptor instead.
func (*ReadTenantRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{54}
}

func (m *ReadTenantRequest) GetIdentifier() isReadTenantRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *ReadTenantRequest) GetId() string {
	if x, ok := x.GetIdentifier().(*ReadTenantRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *ReadTenantRequest) GetName() *UniqueNameIdentifier {
	if x, ok := x.GetIdentifier().(*ReadTenantRequest_Name); ok {
		return x.Name
	}
	return nil
}

func (x *ReadTenantRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isReadTenantRequest_Identifier interface {
	isReadTenantRequest_Identifier()
}

type ReadTenantRequest_Id struct {
	// Id contains the Globally Unique Identifier of the object with server generated id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ReadTenantRequest_Name struct {
	// Name contains the client generated unique identifier with name.
	Name *UniqueNameIdentifier `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ReadTenantRequest_Id) isReadTenantRequest_Identifier() {}

func (*ReadTenantRequest_Name) isReadTenantRequest_Identifier() {}

type ReadTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant *Tenant `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *ReadTenantResponse) Reset() {
	*x = ReadTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTenantResponse) ProtoMessage() {}

func (x *ReadTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTenantResponse.ProtoReflect.Descriptor instead.
func (*ReadTenantResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{55}
}

func (x *ReadTenantResponse) GetTenant() *Tenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

type ListTenantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	AppSpaceId string `protobuf:"bytes,1,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// Match documents with exact name search.
	Match []string `protobuf:"bytes,2,rep,name=match,proto3" json:"match,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ListTenantsRequest) Reset() {
	*x = ListTenantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTenantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantsRequest) ProtoMessage() {}

func (x *ListTenantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantsRequest.ProtoReflect.Descriptor instead.
func (*ListTenantsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{56}
}

func (x *ListTenantsRequest) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *ListTenantsRequest) GetMatch() []string {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ListTenantsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListTenantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant *Tenant `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *ListTenantsResponse) Reset() {
	*x = ListTenantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTenantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantsResponse) ProtoMessage() {}

func (x *ListTenantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantsResponse.ProtoReflect.Descriptor instead.
func (*ListTenantsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{57}
}

func (x *ListTenantsResponse) GetTenant() *Tenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

type UpdateTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *UpdateTenantRequest) Reset() {
	*x = UpdateTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantRequest) ProtoMessage() {}

func (x *UpdateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantRequest.ProtoReflect.Descriptor instead.
func (*UpdateTenantRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateTenantRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTenantRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateTenantRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateTenantRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateTenantRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type UpdateTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *UpdateTenantResponse) Reset() {
	*x = UpdateTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantResponse) ProtoMessage() {}

func (x *UpdateTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantResponse.ProtoReflect.Descriptor instead.
func (*UpdateTenantResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateTenantResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTenantResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateTenantResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateTenantResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type DeleteTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the Globally unique identifier of object to delete.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteTenantRequest) Reset() {
	*x = DeleteTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantRequest) ProtoMessage() {}

func (x *DeleteTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantRequest.ProtoReflect.Descriptor instead.
func (*DeleteTenantRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteTenantRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteTenantRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteTenantRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteTenantResponse) Reset() {
	*x = DeleteTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantResponse) ProtoMessage() {}

func (x *DeleteTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantResponse.ProtoReflect.Descriptor instead.
func (*DeleteTenantResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{61}
}

func (x *DeleteTenantResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type CreateConfigNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location is the place where configuration object is created and associated with.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are assignable to Config:
	//	*CreateConfigNodeRequest_AuthFlowConfig
	//	*CreateConfigNodeRequest_EmailServiceConfig
	//	*CreateConfigNodeRequest_SmsServiceConfig
	//	*CreateConfigNodeRequest_Oauth2ClientConfig
	//	*CreateConfigNodeRequest_PasswordProviderConfig
	//	*CreateConfigNodeRequest_WebauthnProviderConfig
	//	*CreateConfigNodeRequest_AuthenteqProviderConfig
	//	*CreateConfigNodeRequest_SafrProviderConfig
	//	*CreateConfigNodeRequest_IngestMappingConfig
	//	*CreateConfigNodeRequest_AuthorizationPolicyConfig
	//	*CreateConfigNodeRequest_KnowledgeGraphSchemaConfig
	//	*CreateConfigNodeRequest_ReadidProviderConfig
	Config isCreateConfigNodeRequest_Config `protobuf_oneof:"config"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,7,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *CreateConfigNodeRequest) Reset() {
	*x = CreateConfigNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConfigNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConfigNodeRequest) ProtoMessage() {}

func (x *CreateConfigNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConfigNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateConfigNodeRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{62}
}

func (x *CreateConfigNodeRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateConfigNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateConfigNodeRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (m *CreateConfigNodeRequest) GetConfig() isCreateConfigNodeRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetAuthFlowConfig() *AuthFlowConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_AuthFlowConfig); ok {
		return x.AuthFlowConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetEmailServiceConfig() *EmailServiceConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_EmailServiceConfig); ok {
		return x.EmailServiceConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetSmsServiceConfig() *SMSServiceConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_SmsServiceConfig); ok {
		return x.SmsServiceConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetOauth2ClientConfig() *OAuth2ClientConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_Oauth2ClientConfig); ok {
		return x.Oauth2ClientConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetPasswordProviderConfig() *PasswordProviderConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_PasswordProviderConfig); ok {
		return x.PasswordProviderConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetWebauthnProviderConfig() *WebAuthnProviderConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_WebauthnProviderConfig); ok {
		return x.WebauthnProviderConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetAuthenteqProviderConfig() *AuthenteqProviderConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_AuthenteqProviderConfig); ok {
		return x.AuthenteqProviderConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetSafrProviderConfig() *SAFRProviderConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_SafrProviderConfig); ok {
		return x.SafrProviderConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetIngestMappingConfig() *IngestMappingConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_IngestMappingConfig); ok {
		return x.IngestMappingConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetAuthorizationPolicyConfig() *AuthorizationPolicyConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_AuthorizationPolicyConfig); ok {
		return x.AuthorizationPolicyConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetKnowledgeGraphSchemaConfig() *KnowledgeGraphSchemaConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_KnowledgeGraphSchemaConfig); ok {
		return x.KnowledgeGraphSchemaConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetReadidProviderConfig() *ReadIDProviderConfig {
	if x, ok := x.GetConfig().(*CreateConfigNodeRequest_ReadidProviderConfig); ok {
		return x.ReadidProviderConfig
	}
	return nil
}

func (x *CreateConfigNodeRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isCreateConfigNodeRequest_Config interface {
	isCreateConfigNodeRequest_Config()
}

type CreateConfigNodeRequest_AuthFlowConfig struct {
	AuthFlowConfig *AuthFlowConfig `protobuf:"bytes,15,opt,name=auth_flow_config,json=authFlowConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_EmailServiceConfig struct {
	EmailServiceConfig *EmailServiceConfig `protobuf:"bytes,16,opt,name=email_service_config,json=emailServiceConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_SmsServiceConfig struct {
	SmsServiceConfig *SMSServiceConfig `protobuf:"bytes,17,opt,name=sms_service_config,json=smsServiceConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_Oauth2ClientConfig struct {
	// OAuth2ClientConfig for third party OIDC clients.
	Oauth2ClientConfig *OAuth2ClientConfig `protobuf:"bytes,18,opt,name=oauth2_client_config,json=oauth2ClientConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_PasswordProviderConfig struct {
	PasswordProviderConfig *PasswordProviderConfig `protobuf:"bytes,20,opt,name=password_provider_config,json=passwordProviderConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_WebauthnProviderConfig struct {
	WebauthnProviderConfig *WebAuthnProviderConfig `protobuf:"bytes,21,opt,name=webauthn_provider_config,json=webauthnProviderConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_AuthenteqProviderConfig struct {
	AuthenteqProviderConfig *AuthenteqProviderConfig `protobuf:"bytes,22,opt,name=authenteq_provider_config,json=authenteqProviderConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_SafrProviderConfig struct {
	SafrProviderConfig *SAFRProviderConfig `protobuf:"bytes,23,opt,name=safr_provider_config,json=safrProviderConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_IngestMappingConfig struct {
	IngestMappingConfig *IngestMappingConfig `protobuf:"bytes,24,opt,name=ingest_mapping_config,json=ingestMappingConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_AuthorizationPolicyConfig struct {
	AuthorizationPolicyConfig *AuthorizationPolicyConfig `protobuf:"bytes,25,opt,name=authorization_policy_config,json=authorizationPolicyConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_KnowledgeGraphSchemaConfig struct {
	KnowledgeGraphSchemaConfig *KnowledgeGraphSchemaConfig `protobuf:"bytes,26,opt,name=knowledge_graph_schema_config,json=knowledgeGraphSchemaConfig,proto3,oneof"`
}

type CreateConfigNodeRequest_ReadidProviderConfig struct {
	ReadidProviderConfig *ReadIDProviderConfig `protobuf:"bytes,27,opt,name=readid_provider_config,json=readidProviderConfig,proto3,oneof"`
}

func (*CreateConfigNodeRequest_AuthFlowConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_EmailServiceConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_SmsServiceConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_Oauth2ClientConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_PasswordProviderConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_WebauthnProviderConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_AuthenteqProviderConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_SafrProviderConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_IngestMappingConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_AuthorizationPolicyConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_KnowledgeGraphSchemaConfig) isCreateConfigNodeRequest_Config() {}

func (*CreateConfigNodeRequest_ReadidProviderConfig) isCreateConfigNodeRequest_Config() {}

type CreateConfigNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateConfigNodeResponse) Reset() {
	*x = CreateConfigNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConfigNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConfigNodeResponse) ProtoMessage() {}

func (x *CreateConfigNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConfigNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateConfigNodeResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{63}
}

func (x *CreateConfigNodeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateConfigNodeResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateConfigNodeResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateConfigNodeResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateConfigNodeResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// ReadConfigNodeRequest represents a request to find a new Configuration object.
type ReadConfigNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadConfigNodeRequest) Reset() {
	*x = ReadConfigNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadConfigNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConfigNodeRequest) ProtoMessage() {}

func (x *ReadConfigNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConfigNodeRequest.ProtoReflect.Descriptor instead.
func (*ReadConfigNodeRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{64}
}

func (x *ReadConfigNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadConfigNodeRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// ReadConfigNodeResponse represents a result of operation request.
type ReadConfigNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigNode *ConfigNode `protobuf:"bytes,1,opt,name=config_node,json=configNode,proto3" json:"config_node,omitempty"`
}

func (x *ReadConfigNodeResponse) Reset() {
	*x = ReadConfigNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadConfigNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConfigNodeResponse) ProtoMessage() {}

func (x *ReadConfigNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConfigNodeResponse.ProtoReflect.Descriptor instead.
func (*ReadConfigNodeResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{65}
}

func (x *ReadConfigNodeResponse) GetConfigNode() *ConfigNode {
	if x != nil {
		return x.ConfigNode
	}
	return nil
}

// UpdateConfigNodeRequest represents a request to update a Configuration object.
type UpdateConfigNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are assignable to Config:
	//	*UpdateConfigNodeRequest_AuthFlowConfig
	//	*UpdateConfigNodeRequest_EmailServiceConfig
	//	*UpdateConfigNodeRequest_SmsServiceConfig
	//	*UpdateConfigNodeRequest_Oauth2ClientConfig
	//	*UpdateConfigNodeRequest_PasswordProviderConfig
	//	*UpdateConfigNodeRequest_WebauthnProviderConfig
	//	*UpdateConfigNodeRequest_AuthenteqProviderConfig
	//	*UpdateConfigNodeRequest_SafrProviderConfig
	//	*UpdateConfigNodeRequest_IngestMappingConfig
	//	*UpdateConfigNodeRequest_AuthorizationPolicyConfig
	//	*UpdateConfigNodeRequest_KnowledgeGraphSchemaConfig
	//	*UpdateConfigNodeRequest_ReadidProviderConfig
	Config isUpdateConfigNodeRequest_Config `protobuf_oneof:"config"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *UpdateConfigNodeRequest) Reset() {
	*x = UpdateConfigNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigNodeRequest) ProtoMessage() {}

func (x *UpdateConfigNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigNodeRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateConfigNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateConfigNodeRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (m *UpdateConfigNodeRequest) GetConfig() isUpdateConfigNodeRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetAuthFlowConfig() *AuthFlowConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_AuthFlowConfig); ok {
		return x.AuthFlowConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetEmailServiceConfig() *EmailServiceConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_EmailServiceConfig); ok {
		return x.EmailServiceConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetSmsServiceConfig() *SMSServiceConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_SmsServiceConfig); ok {
		return x.SmsServiceConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetOauth2ClientConfig() *OAuth2ClientConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_Oauth2ClientConfig); ok {
		return x.Oauth2ClientConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetPasswordProviderConfig() *PasswordProviderConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_PasswordProviderConfig); ok {
		return x.PasswordProviderConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetWebauthnProviderConfig() *WebAuthnProviderConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_WebauthnProviderConfig); ok {
		return x.WebauthnProviderConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetAuthenteqProviderConfig() *AuthenteqProviderConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_AuthenteqProviderConfig); ok {
		return x.AuthenteqProviderConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetSafrProviderConfig() *SAFRProviderConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_SafrProviderConfig); ok {
		return x.SafrProviderConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetIngestMappingConfig() *IngestMappingConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_IngestMappingConfig); ok {
		return x.IngestMappingConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetAuthorizationPolicyConfig() *AuthorizationPolicyConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_AuthorizationPolicyConfig); ok {
		return x.AuthorizationPolicyConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetKnowledgeGraphSchemaConfig() *KnowledgeGraphSchemaConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_KnowledgeGraphSchemaConfig); ok {
		return x.KnowledgeGraphSchemaConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetReadidProviderConfig() *ReadIDProviderConfig {
	if x, ok := x.GetConfig().(*UpdateConfigNodeRequest_ReadidProviderConfig); ok {
		return x.ReadidProviderConfig
	}
	return nil
}

func (x *UpdateConfigNodeRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type isUpdateConfigNodeRequest_Config interface {
	isUpdateConfigNodeRequest_Config()
}

type UpdateConfigNodeRequest_AuthFlowConfig struct {
	AuthFlowConfig *AuthFlowConfig `protobuf:"bytes,15,opt,name=auth_flow_config,json=authFlowConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_EmailServiceConfig struct {
	EmailServiceConfig *EmailServiceConfig `protobuf:"bytes,16,opt,name=email_service_config,json=emailServiceConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_SmsServiceConfig struct {
	SmsServiceConfig *SMSServiceConfig `protobuf:"bytes,17,opt,name=sms_service_config,json=smsServiceConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_Oauth2ClientConfig struct {
	// OAuth2ClientConfig for third party OIDC clients.
	Oauth2ClientConfig *OAuth2ClientConfig `protobuf:"bytes,18,opt,name=oauth2_client_config,json=oauth2ClientConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_PasswordProviderConfig struct {
	PasswordProviderConfig *PasswordProviderConfig `protobuf:"bytes,20,opt,name=password_provider_config,json=passwordProviderConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_WebauthnProviderConfig struct {
	WebauthnProviderConfig *WebAuthnProviderConfig `protobuf:"bytes,21,opt,name=webauthn_provider_config,json=webauthnProviderConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_AuthenteqProviderConfig struct {
	AuthenteqProviderConfig *AuthenteqProviderConfig `protobuf:"bytes,22,opt,name=authenteq_provider_config,json=authenteqProviderConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_SafrProviderConfig struct {
	SafrProviderConfig *SAFRProviderConfig `protobuf:"bytes,23,opt,name=safr_provider_config,json=safrProviderConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_IngestMappingConfig struct {
	IngestMappingConfig *IngestMappingConfig `protobuf:"bytes,24,opt,name=ingest_mapping_config,json=ingestMappingConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_AuthorizationPolicyConfig struct {
	AuthorizationPolicyConfig *AuthorizationPolicyConfig `protobuf:"bytes,25,opt,name=authorization_policy_config,json=authorizationPolicyConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_KnowledgeGraphSchemaConfig struct {
	KnowledgeGraphSchemaConfig *KnowledgeGraphSchemaConfig `protobuf:"bytes,26,opt,name=knowledge_graph_schema_config,json=knowledgeGraphSchemaConfig,proto3,oneof"`
}

type UpdateConfigNodeRequest_ReadidProviderConfig struct {
	ReadidProviderConfig *ReadIDProviderConfig `protobuf:"bytes,27,opt,name=readid_provider_config,json=readidProviderConfig,proto3,oneof"`
}

func (*UpdateConfigNodeRequest_AuthFlowConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_EmailServiceConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_SmsServiceConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_Oauth2ClientConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_PasswordProviderConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_WebauthnProviderConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_AuthenteqProviderConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_SafrProviderConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_IngestMappingConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_AuthorizationPolicyConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_KnowledgeGraphSchemaConfig) isUpdateConfigNodeRequest_Config() {}

func (*UpdateConfigNodeRequest_ReadidProviderConfig) isUpdateConfigNodeRequest_Config() {}

// UpdateConfigNodeResponse represents a result of operation request.
type UpdateConfigNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *UpdateConfigNodeResponse) Reset() {
	*x = UpdateConfigNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigNodeResponse) ProtoMessage() {}

func (x *UpdateConfigNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigNodeResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateConfigNodeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateConfigNodeResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateConfigNodeResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateConfigNodeResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// DeleteConfigNodeRequest represents a request to delete a Configuration object.
type DeleteConfigNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,4,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteConfigNodeRequest) Reset() {
	*x = DeleteConfigNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigNodeRequest) ProtoMessage() {}

func (x *DeleteConfigNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteConfigNodeRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{68}
}

func (x *DeleteConfigNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteConfigNodeRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteConfigNodeRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteConfigNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteConfigNodeResponse) Reset() {
	*x = DeleteConfigNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigNodeResponse) ProtoMessage() {}

func (x *DeleteConfigNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteConfigNodeResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteConfigNodeResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// CreateOAuth2ProviderRequest represents a request to create a new Configuration object.
type CreateOAuth2ProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AppSpaceId is the place where configuration object is created and associated with.
	AppSpaceId string `protobuf:"bytes,1,opt,name=app_space_id,json=appSpaceId,proto3" json:"app_space_id,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Config      *OAuth2ProviderConfig   `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,6,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *CreateOAuth2ProviderRequest) Reset() {
	*x = CreateOAuth2ProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOAuth2ProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOAuth2ProviderRequest) ProtoMessage() {}

func (x *CreateOAuth2ProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOAuth2ProviderRequest.ProtoReflect.Descriptor instead.
func (*CreateOAuth2ProviderRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{70}
}

func (x *CreateOAuth2ProviderRequest) GetAppSpaceId() string {
	if x != nil {
		return x.AppSpaceId
	}
	return ""
}

func (x *CreateOAuth2ProviderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOAuth2ProviderRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateOAuth2ProviderRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateOAuth2ProviderRequest) GetConfig() *OAuth2ProviderConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateOAuth2ProviderRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// CreateOAuth2ProviderResponse represents a result of operation request.
type CreateOAuth2ProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateOAuth2ProviderResponse) Reset() {
	*x = CreateOAuth2ProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOAuth2ProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOAuth2ProviderResponse) ProtoMessage() {}

func (x *CreateOAuth2ProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOAuth2ProviderResponse.ProtoReflect.Descriptor instead.
func (*CreateOAuth2ProviderResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{71}
}

func (x *CreateOAuth2ProviderResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateOAuth2ProviderResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateOAuth2ProviderResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateOAuth2ProviderResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateOAuth2ProviderResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// ReadOAuth2ProviderRequest represents a request to find a new Configuration object.
type ReadOAuth2ProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadOAuth2ProviderRequest) Reset() {
	*x = ReadOAuth2ProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOAuth2ProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOAuth2ProviderRequest) ProtoMessage() {}

func (x *ReadOAuth2ProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOAuth2ProviderRequest.ProtoReflect.Descriptor instead.
func (*ReadOAuth2ProviderRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{72}
}

func (x *ReadOAuth2ProviderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadOAuth2ProviderRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// ReadOAuth2ProviderResponse represents a result of operation request.
type ReadOAuth2ProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oauth2Provider *OAuth2Provider `protobuf:"bytes,1,opt,name=oauth2_provider,json=oauth2Provider,proto3" json:"oauth2_provider,omitempty"`
}

func (x *ReadOAuth2ProviderResponse) Reset() {
	*x = ReadOAuth2ProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOAuth2ProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOAuth2ProviderResponse) ProtoMessage() {}

func (x *ReadOAuth2ProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOAuth2ProviderResponse.ProtoReflect.Descriptor instead.
func (*ReadOAuth2ProviderResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{73}
}

func (x *ReadOAuth2ProviderResponse) GetOauth2Provider() *OAuth2Provider {
	if x != nil {
		return x.Oauth2Provider
	}
	return nil
}

// UpdateOAuth2ProviderRequest represents a request to update a Configuration object.
type UpdateOAuth2ProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Config      *OAuth2ProviderConfig   `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,6,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *UpdateOAuth2ProviderRequest) Reset() {
	*x = UpdateOAuth2ProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOAuth2ProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOAuth2ProviderRequest) ProtoMessage() {}

func (x *UpdateOAuth2ProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOAuth2ProviderRequest.ProtoReflect.Descriptor instead.
func (*UpdateOAuth2ProviderRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{74}
}

func (x *UpdateOAuth2ProviderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOAuth2ProviderRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateOAuth2ProviderRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateOAuth2ProviderRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateOAuth2ProviderRequest) GetConfig() *OAuth2ProviderConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateOAuth2ProviderRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// UpdateOAuth2ProviderResponse represents a result of operation request.
type UpdateOAuth2ProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *UpdateOAuth2ProviderResponse) Reset() {
	*x = UpdateOAuth2ProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOAuth2ProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOAuth2ProviderResponse) ProtoMessage() {}

func (x *UpdateOAuth2ProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOAuth2ProviderResponse.ProtoReflect.Descriptor instead.
func (*UpdateOAuth2ProviderResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{75}
}

func (x *UpdateOAuth2ProviderResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOAuth2ProviderResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateOAuth2ProviderResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateOAuth2ProviderResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// DeleteOAuth2ProviderRequest represents a request to delete a Configuration object.
type DeleteOAuth2ProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteOAuth2ProviderRequest) Reset() {
	*x = DeleteOAuth2ProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOAuth2ProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOAuth2ProviderRequest) ProtoMessage() {}

func (x *DeleteOAuth2ProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOAuth2ProviderRequest.ProtoReflect.Descriptor instead.
func (*DeleteOAuth2ProviderRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteOAuth2ProviderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteOAuth2ProviderRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteOAuth2ProviderRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteOAuth2ProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteOAuth2ProviderResponse) Reset() {
	*x = DeleteOAuth2ProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOAuth2ProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOAuth2ProviderResponse) ProtoMessage() {}

func (x *DeleteOAuth2ProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOAuth2ProviderResponse.ProtoReflect.Descriptor instead.
func (*DeleteOAuth2ProviderResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{77}
}

func (x *DeleteOAuth2ProviderResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// CreateOAuth2ApplicationRequest represents a request to create a new Configuration object.
type CreateOAuth2ApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Oauth2ProviderId is the place where configuration object is created and associated with.
	Oauth2ProviderId string `protobuf:"bytes,1,opt,name=oauth2_provider_id,json=oauth2ProviderId,proto3" json:"oauth2_provider_id,omitempty"`
	// Name is unique and immutable name. It's not globally unique only unique in scope.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Config      *OAuth2ApplicationConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,6,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *CreateOAuth2ApplicationRequest) Reset() {
	*x = CreateOAuth2ApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOAuth2ApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOAuth2ApplicationRequest) ProtoMessage() {}

func (x *CreateOAuth2ApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOAuth2ApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateOAuth2ApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{78}
}

func (x *CreateOAuth2ApplicationRequest) GetOauth2ProviderId() string {
	if x != nil {
		return x.Oauth2ProviderId
	}
	return ""
}

func (x *CreateOAuth2ApplicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOAuth2ApplicationRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *CreateOAuth2ApplicationRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateOAuth2ApplicationRequest) GetConfig() *OAuth2ApplicationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateOAuth2ApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// CreateOAuth2ApplicationResponse represents a result of operation request.
type CreateOAuth2ApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag     string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	ClientId string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// ClientSecret will be included in the create response as cleartext, and then never again.
	// The secret is stored using BCrypt so it is impossible to recover it. Tell your users
	// that they need to write the secret down as it will not be made available again.
	ClientSecret string `protobuf:"bytes,6,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,7,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateOAuth2ApplicationResponse) Reset() {
	*x = CreateOAuth2ApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOAuth2ApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOAuth2ApplicationResponse) ProtoMessage() {}

func (x *CreateOAuth2ApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOAuth2ApplicationResponse.ProtoReflect.Descriptor instead.
func (*CreateOAuth2ApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{79}
}

func (x *CreateOAuth2ApplicationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateOAuth2ApplicationResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateOAuth2ApplicationResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateOAuth2ApplicationResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateOAuth2ApplicationResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateOAuth2ApplicationResponse) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *CreateOAuth2ApplicationResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// ReadOAuth2ApplicationRequest represents a request to find a new Configuration object.
type ReadOAuth2ApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ReadOAuth2ApplicationRequest) Reset() {
	*x = ReadOAuth2ApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOAuth2ApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOAuth2ApplicationRequest) ProtoMessage() {}

func (x *ReadOAuth2ApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOAuth2ApplicationRequest.ProtoReflect.Descriptor instead.
func (*ReadOAuth2ApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{80}
}

func (x *ReadOAuth2ApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadOAuth2ApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// ReadOAuth2ApplicationResponse represents a result of operation request.
type ReadOAuth2ApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oauth2Application *OAuth2Application `protobuf:"bytes,1,opt,name=oauth2_application,json=oauth2Application,proto3" json:"oauth2_application,omitempty"`
}

func (x *ReadOAuth2ApplicationResponse) Reset() {
	*x = ReadOAuth2ApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOAuth2ApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOAuth2ApplicationResponse) ProtoMessage() {}

func (x *ReadOAuth2ApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOAuth2ApplicationResponse.ProtoReflect.Descriptor instead.
func (*ReadOAuth2ApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{81}
}

func (x *ReadOAuth2ApplicationResponse) GetOauth2Application() *OAuth2Application {
	if x != nil {
		return x.Oauth2Application
	}
	return nil
}

// UpdateOAuth2ApplicationRequest represents a request to update a Configuration object.
type UpdateOAuth2ApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// DisplayName is a human readable name.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description is a optional description.
	Description *wrapperspb.StringValue  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Config      *OAuth2ApplicationConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,6,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *UpdateOAuth2ApplicationRequest) Reset() {
	*x = UpdateOAuth2ApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOAuth2ApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOAuth2ApplicationRequest) ProtoMessage() {}

func (x *UpdateOAuth2ApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOAuth2ApplicationRequest.ProtoReflect.Descriptor instead.
func (*UpdateOAuth2ApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateOAuth2ApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOAuth2ApplicationRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *UpdateOAuth2ApplicationRequest) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateOAuth2ApplicationRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateOAuth2ApplicationRequest) GetConfig() *OAuth2ApplicationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateOAuth2ApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// UpdateOAuth2ApplicationResponse represents a result of operation request.
type UpdateOAuth2ApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The time at which the configuration was last changed.
	//
	// This value is initially set to the `create_time` then increases monotonically with each change.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Multiversion concurrency control version.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,4,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *UpdateOAuth2ApplicationResponse) Reset() {
	*x = UpdateOAuth2ApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOAuth2ApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOAuth2ApplicationResponse) ProtoMessage() {}

func (x *UpdateOAuth2ApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOAuth2ApplicationResponse.ProtoReflect.Descriptor instead.
func (*UpdateOAuth2ApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{83}
}

func (x *UpdateOAuth2ApplicationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOAuth2ApplicationResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateOAuth2ApplicationResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateOAuth2ApplicationResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// DeleteOAuth2ApplicationRequest represents a request to delete a Configuration object.
type DeleteOAuth2ApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier.
	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *DeleteOAuth2ApplicationRequest) Reset() {
	*x = DeleteOAuth2ApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOAuth2ApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOAuth2ApplicationRequest) ProtoMessage() {}

func (x *DeleteOAuth2ApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOAuth2ApplicationRequest.ProtoReflect.Descriptor instead.
func (*DeleteOAuth2ApplicationRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteOAuth2ApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteOAuth2ApplicationRequest) GetEtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteOAuth2ApplicationRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteOAuth2ApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteOAuth2ApplicationResponse) Reset() {
	*x = DeleteOAuth2ApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOAuth2ApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOAuth2ApplicationResponse) ProtoMessage() {}

func (x *DeleteOAuth2ApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOAuth2ApplicationResponse.ProtoReflect.Descriptor instead.
func (*DeleteOAuth2ApplicationResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteOAuth2ApplicationResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type AssignPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TargetIdentifier is gid identifier of Service Account or DigitalTwin
	TargetIdentifier string `protobuf:"bytes,1,opt,name=target_identifier,json=targetIdentifier,proto3" json:"target_identifier,omitempty"`
	// Permission role id to be assigned
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// CustomerId under which to assign permissions.
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Object to which Permission will be linked to. Can be Customer, AppSpace or Tenant
	ObjectId string `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *AssignPermissionsRequest) Reset() {
	*x = AssignPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionsRequest) ProtoMessage() {}

func (x *AssignPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionsRequest.ProtoReflect.Descriptor instead.
func (*AssignPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{86}
}

func (x *AssignPermissionsRequest) GetTargetIdentifier() string {
	if x != nil {
		return x.TargetIdentifier
	}
	return ""
}

func (x *AssignPermissionsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *AssignPermissionsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *AssignPermissionsRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *AssignPermissionsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type AssignPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,2,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *AssignPermissionsResponse) Reset() {
	*x = AssignPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionsResponse) ProtoMessage() {}

func (x *AssignPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionsResponse.ProtoReflect.Descriptor instead.
func (*AssignPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{87}
}

func (x *AssignPermissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AssignPermissionsResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type RevokePermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TargetIdentifier is gid identifier of Service Account or DigitalTwin
	TargetIdentifier string `protobuf:"bytes,1,opt,name=target_identifier,json=targetIdentifier,proto3" json:"target_identifier,omitempty"`
	// Permission role id to be assigned
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// CustomerId under which to assign permissions.
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Object to which Permission will be linked to. Can be Customer, AppSpace or Tenant
	ObjectId string `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,5,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *RevokePermissionsRequest) Reset() {
	*x = RevokePermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokePermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokePermissionsRequest) ProtoMessage() {}

func (x *RevokePermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokePermissionsRequest.ProtoReflect.Descriptor instead.
func (*RevokePermissionsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{88}
}

func (x *RevokePermissionsRequest) GetTargetIdentifier() string {
	if x != nil {
		return x.TargetIdentifier
	}
	return ""
}

func (x *RevokePermissionsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RevokePermissionsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *RevokePermissionsRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *RevokePermissionsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type RevokePermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Database bookmark to handle Read-after-Write consistency.
	Bookmark string `protobuf:"bytes,2,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *RevokePermissionsResponse) Reset() {
	*x = RevokePermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokePermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokePermissionsResponse) ProtoMessage() {}

func (x *RevokePermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokePermissionsResponse.ProtoReflect.Descriptor instead.
func (*RevokePermissionsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{89}
}

func (x *RevokePermissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RevokePermissionsResponse) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

type ListPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location under which to retrieve permissions. Can be Customer
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Database bookmarks to handle Read-after-Write consistency.
	// Insert one or multiple bookmarks returned from the previous Write operation if needed.
	Bookmarks []string `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ListPermissionsRequest) Reset() {
	*x = ListPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsRequest) ProtoMessage() {}

func (x *ListPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsRequest.ProtoReflect.Descriptor instead.
func (*ListPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{90}
}

func (x *ListPermissionsRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListPermissionsRequest) GetBookmarks() []string {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users           []*ListPermissionsResponse_User           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	ServiceAccounts []*ListPermissionsResponse_ServiceAccount `protobuf:"bytes,2,rep,name=service_accounts,json=serviceAccounts,proto3" json:"service_accounts,omitempty"`
	Invitations     []*ListPermissionsResponse_Invitation     `protobuf:"bytes,3,rep,name=invitations,proto3" json:"invitations,omitempty"`
}

func (x *ListPermissionsResponse) Reset() {
	*x = ListPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse) ProtoMessage() {}

func (x *ListPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{91}
}

func (x *ListPermissionsResponse) GetUsers() []*ListPermissionsResponse_User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListPermissionsResponse) GetServiceAccounts() []*ListPermissionsResponse_ServiceAccount {
	if x != nil {
		return x.ServiceAccounts
	}
	return nil
}

func (x *ListPermissionsResponse) GetInvitations() []*ListPermissionsResponse_Invitation {
	if x != nil {
		return x.Invitations
	}
	return nil
}

type ListPermissionsResponse_PermissionRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *ListPermissionsResponse_PermissionRole) Reset() {
	*x = ListPermissionsResponse_PermissionRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsResponse_PermissionRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse_PermissionRole) ProtoMessage() {}

func (x *ListPermissionsResponse_PermissionRole) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse_PermissionRole.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse_PermissionRole) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{91, 0}
}

func (x *ListPermissionsResponse_PermissionRole) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPermissionsResponse_PermissionRole) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type ListPermissionsResponse_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string                                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Roles []*ListPermissionsResponse_PermissionRole `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ListPermissionsResponse_User) Reset() {
	*x = ListPermissionsResponse_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsResponse_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse_User) ProtoMessage() {}

func (x *ListPermissionsResponse_User) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse_User.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse_User) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{91, 1}
}

func (x *ListPermissionsResponse_User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPermissionsResponse_User) GetRoles() []*ListPermissionsResponse_PermissionRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

type ListPermissionsResponse_ServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id    string                                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Roles []*ListPermissionsResponse_PermissionRole `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ListPermissionsResponse_ServiceAccount) Reset() {
	*x = ListPermissionsResponse_ServiceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsResponse_ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse_ServiceAccount) ProtoMessage() {}

func (x *ListPermissionsResponse_ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse_ServiceAccount.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse_ServiceAccount) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{91, 2}
}

func (x *ListPermissionsResponse_ServiceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPermissionsResponse_ServiceAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPermissionsResponse_ServiceAccount) GetRoles() []*ListPermissionsResponse_PermissionRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

type ListPermissionsResponse_Invitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitee string                                    `protobuf:"bytes,1,opt,name=invitee,proto3" json:"invitee,omitempty"`
	Id      string                                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Roles   []*ListPermissionsResponse_PermissionRole `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ListPermissionsResponse_Invitation) Reset() {
	*x = ListPermissionsResponse_Invitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsResponse_Invitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse_Invitation) ProtoMessage() {}

func (x *ListPermissionsResponse_Invitation) ProtoReflect() protoreflect.Message {
	mi := &file_indykite_config_v1beta1_config_management_api_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse_Invitation.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse_Invitation) Descriptor() ([]byte, []int) {
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP(), []int{91, 3}
}

func (x *ListPermissionsResponse_Invitation) GetInvitee() string {
	if x != nil {
		return x.Invitee
	}
	return ""
}

func (x *ListPermissionsResponse_Invitation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPermissionsResponse_Invitation) GetRoles() []*ListPermissionsResponse_PermissionRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

var File_indykite_config_v1beta1_config_management_api_proto protoreflect.FileDescriptor

var file_indykite_config_v1beta1_config_management_api_proto_rawDesc = []byte{
	0x0a, 0x33, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x23,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a,
	0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f,
	0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72,
	0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x00, 0x22, 0x55, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x84,
	0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f,
	0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a,
	0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xef, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c,
	0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x66, 0x0a, 0x1c, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x38, 0xfa, 0x42, 0x35, 0x92, 0x01,
	0x32, 0x08, 0x01, 0x18, 0x01, 0x22, 0x2c, 0x72, 0x2a, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x32, 0x23,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x32, 0x35, 0x32, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x24, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d,
	0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x67, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x08, 0x61, 0x70, 0x70,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x8d, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e,
	0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a,
	0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xee, 0x01, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38, 0x7d,
	0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d,
	0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x3c, 0x0a, 0x1e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x80, 0x03, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35,
	0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa,
	0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36,
	0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18,
	0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c,
	0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xfb, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xea, 0x01, 0x0a, 0x16,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a,
	0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x61, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35,
	0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x4e, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x38,
	0xfa, 0x42, 0x35, 0x92, 0x01, 0x32, 0x08, 0x01, 0x18, 0x01, 0x22, 0x2c, 0x72, 0x2a, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0x32, 0x23, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x32, 0x35, 0x32, 0x7d, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28,
	0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d,
	0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0x62, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32,
	0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b,
	0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0,
	0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32,
	0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b,
	0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x22, 0xbe, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0xe9, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38,
	0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c,
	0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x37, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x8a, 0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18,
	0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xef, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a,
	0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x76, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x22, 0xf8, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x38, 0xfa, 0x42, 0x35, 0x92, 0x01, 0x32,
	0x08, 0x01, 0x18, 0x01, 0x22, 0x2c, 0x72, 0x2a, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x32, 0x23, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x30, 0x2c, 0x32, 0x35, 0x32, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x24, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42,
	0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x77, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10,
	0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18,
	0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72,
	0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xee, 0x01, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23,
	0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24,
	0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42,
	0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x3c, 0x0a, 0x1e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xa4, 0x04, 0x0a, 0x29, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x12, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe,
	0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x77, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x10,
	0xfa, 0x42, 0x0d, 0x7a, 0x0b, 0x10, 0x60, 0x18, 0x80, 0x40, 0x2a, 0x01, 0x7b, 0x32, 0x01, 0x7d,
	0x48, 0x00, 0x52, 0x03, 0x6a, 0x77, 0x6b, 0x12, 0x55, 0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x41, 0xfa, 0x42, 0x3e, 0x7a, 0x3c, 0x10, 0x80, 0x02, 0x18, 0x80,
	0x40, 0x2a, 0x1a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x32, 0x18, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b,
	0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x48, 0x00, 0x52, 0x03, 0x70, 0x65, 0x6d, 0x12, 0x47,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0xb2, 0x01, 0x04, 0x08, 0x00, 0x40, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xfa, 0x42, 0x28, 0x72, 0x26, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x1c,
	0x5e, 0x67, 0x69, 0x64, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10,
	0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d,
	0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x22, 0x85, 0x03, 0x0a, 0x2a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9f, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f,
	0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x26, 0x52,
	0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xa1, 0x01, 0x0a,
	0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32,
	0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b,
	0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x22, 0x46, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xe4, 0x03, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10,
	0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x4e, 0x72, 0x4c, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6e,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x40, 0x0a,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34,
	0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0xfe, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xed, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c,
	0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0x6e, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x8b, 0x03, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c,
	0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30,
	0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xc1,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0xec, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32,
	0x15, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b,
	0x38, 0x2c, 0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28,
	0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d,
	0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0x3a, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc5, 0x03,
	0x0a, 0x27, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0,
	0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x03, 0x6a, 0x77, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x10, 0xfa, 0x42,
	0x0d, 0x7a, 0x0b, 0x10, 0x60, 0x18, 0x80, 0x40, 0x2a, 0x01, 0x7b, 0x32, 0x01, 0x7d, 0x48, 0x00,
	0x52, 0x03, 0x6a, 0x77, 0x6b, 0x12, 0x55, 0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x41, 0xfa, 0x42, 0x3e, 0x7a, 0x3c, 0x10, 0x80, 0x02, 0x18, 0x80, 0x40, 0x2a,
	0x1a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x32, 0x18, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x48, 0x00, 0x52, 0x03, 0x70, 0x65, 0x6d, 0x12, 0x47, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0xb2, 0x01, 0x04, 0x08, 0x00, 0x40, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c,
	0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x92, 0x03, 0x0a, 0x28, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x23, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f,
	0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x24, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22,
	0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x44, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xf6, 0x02, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f,
	0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a,
	0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xe5,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18,
	0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x4d, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x38, 0xfa, 0x42, 0x35, 0x92, 0x01, 0x32, 0x08, 0x01, 0x18, 0x01, 0x22,
	0x2c, 0x72, 0x2a, 0x10, 0x02, 0x18, 0xfe, 0x01, 0x32, 0x23, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x32,
	0x35, 0x32, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22,
	0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x83, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c, 0x31, 0x38,
	0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d,
	0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d,
	0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xb9, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xe4, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42,
	0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x08, 0x18, 0x12, 0x32, 0x15, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x38, 0x2c,
	0x31, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40, 0x0a,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34,
	0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0x32, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0xe6, 0x0c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30,
	0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10,
	0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x14, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x12, 0x73, 0x6d, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x53, 0x4d, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x14, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x12, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x16, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x6b, 0x0a, 0x18, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57,
	0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x16, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x6e, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x65, 0x71, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x65,
	0x71, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5f, 0x0a, 0x14, 0x73, 0x61, 0x66, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x41, 0x46, 0x52, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x73, 0x61,
	0x66, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x62, 0x0a, 0x15, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x13, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x78, 0x0a, 0x1d, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x49, 0x44, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c,
	0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0d, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xfa, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe,
	0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42,
	0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x5e, 0x0a, 0x16, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xc4, 0x0c, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0,
	0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x14, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x12, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x4d, 0x53, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5f, 0x0a, 0x14, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x6b, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a,
	0x18, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74,
	0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x16, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x19, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x65, 0x71, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x65,
	0x71, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x14, 0x73, 0x61,
	0x66, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x41, 0x46, 0x52, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x73, 0x61, 0x66, 0x72, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x15, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x74, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x19, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x78, 0x0a, 0x1d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x1a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x65, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x44,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01,
	0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xbd, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21,
	0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0xc3, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01,
	0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x36, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xda, 0x03, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18,
	0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18,
	0x3f, 0x32, 0x22, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d,
	0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c,
	0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xfe, 0x01,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x93,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72,
	0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x22, 0x6e, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0xad, 0x03, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72,
	0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32,
	0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc7, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10,
	0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d,
	0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x22, 0x3a, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xec,
	0x03, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x12, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35,
	0x34, 0x7d, 0x24, 0x52, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x02, 0x18, 0x3f, 0x32, 0x22,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x3f, 0x3a, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42,
	0x0a, 0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a,
	0x72, 0x08, 0x10, 0x02, 0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c,
	0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xc3, 0x02,
	0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35,
	0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d,
	0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x7a, 0x0a, 0x1d,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x12, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16,
	0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02,
	0x18, 0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x02, 0x18,
	0xfe, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x09,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30,
	0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xc4,
	0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xca, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01,
	0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a,
	0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10,
	0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d,
	0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x22, 0x3d, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0xa0, 0x03, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f,
	0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x65, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x51, 0xfa, 0x42, 0x4e, 0x72, 0x4c, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35,
	0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b,
	0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72,
	0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x22, 0x51, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xa0, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c,
	0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x4e, 0x72, 0x4c, 0x52, 0x0a, 0x61, 0x6c,
	0x6c, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68,
	0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x45,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32,
	0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d,
	0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10,
	0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f,
	0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d, 0x24, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x51, 0x0a, 0x19, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9c, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72,
	0x1f, 0x10, 0x16, 0x18, 0xfe, 0x01, 0x32, 0x18, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x3a, 0x5d, 0x7b, 0x32, 0x32, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x1f, 0x92, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x10, 0x28, 0x32, 0x14, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x34, 0x30, 0x2c, 0x7d,
	0x24, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x83, 0x06, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x43, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x6d, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x32, 0xf9, 0x2f, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x12, 0x6b, 0x0a, 0x0c, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x89, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x89,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x42, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x43, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x40, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x12, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x83, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x40, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x9b, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01,
	0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x3e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x6b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2c,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x77, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7d, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x79,
	0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x34, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x64,
	0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e,
	0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7a, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b,
	0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6e,
	0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69,
	0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x82,
	0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x18,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x43, 0x58, 0xaa, 0x02, 0x17,
	0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x17, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0xe2, 0x02, 0x23, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x49, 0x6e, 0x64, 0x79, 0x6b, 0x69,
	0x74, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indykite_config_v1beta1_config_management_api_proto_rawDescOnce sync.Once
	file_indykite_config_v1beta1_config_management_api_proto_rawDescData = file_indykite_config_v1beta1_config_management_api_proto_rawDesc
)

func file_indykite_config_v1beta1_config_management_api_proto_rawDescGZIP() []byte {
	file_indykite_config_v1beta1_config_management_api_proto_rawDescOnce.Do(func() {
		file_indykite_config_v1beta1_config_management_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_indykite_config_v1beta1_config_management_api_proto_rawDescData)
	})
	return file_indykite_config_v1beta1_config_management_api_proto_rawDescData
}

var file_indykite_config_v1beta1_config_management_api_proto_msgTypes = make([]protoimpl.MessageInfo, 96)
var file_indykite_config_v1beta1_config_management_api_proto_goTypes = []interface{}{
	(*ReadCustomerRequest)(nil),                        // 0: indykite.config.v1beta1.ReadCustomerRequest
	(*ReadCustomerResponse)(nil),                       // 1: indykite.config.v1beta1.ReadCustomerResponse
	(*CreateApplicationSpaceRequest)(nil),              // 2: indykite.config.v1beta1.CreateApplicationSpaceRequest
	(*CreateApplicationSpaceResponse)(nil),             // 3: indykite.config.v1beta1.CreateApplicationSpaceResponse
	(*ReadApplicationSpaceRequest)(nil),                // 4: indykite.config.v1beta1.ReadApplicationSpaceRequest
	(*ReadApplicationSpaceResponse)(nil),               // 5: indykite.config.v1beta1.ReadApplicationSpaceResponse
	(*ListApplicationSpacesRequest)(nil),               // 6: indykite.config.v1beta1.ListApplicationSpacesRequest
	(*ListApplicationSpacesResponse)(nil),              // 7: indykite.config.v1beta1.ListApplicationSpacesResponse
	(*UpdateApplicationSpaceRequest)(nil),              // 8: indykite.config.v1beta1.UpdateApplicationSpaceRequest
	(*UpdateApplicationSpaceResponse)(nil),             // 9: indykite.config.v1beta1.UpdateApplicationSpaceResponse
	(*DeleteApplicationSpaceRequest)(nil),              // 10: indykite.config.v1beta1.DeleteApplicationSpaceRequest
	(*DeleteApplicationSpaceResponse)(nil),             // 11: indykite.config.v1beta1.DeleteApplicationSpaceResponse
	(*CreateApplicationRequest)(nil),                   // 12: indykite.config.v1beta1.CreateApplicationRequest
	(*CreateApplicationResponse)(nil),                  // 13: indykite.config.v1beta1.CreateApplicationResponse
	(*ReadApplicationRequest)(nil),                     // 14: indykite.config.v1beta1.ReadApplicationRequest
	(*ReadApplicationResponse)(nil),                    // 15: indykite.config.v1beta1.ReadApplicationResponse
	(*ListApplicationsRequest)(nil),                    // 16: indykite.config.v1beta1.ListApplicationsRequest
	(*ListApplicationsResponse)(nil),                   // 17: indykite.config.v1beta1.ListApplicationsResponse
	(*UpdateApplicationRequest)(nil),                   // 18: indykite.config.v1beta1.UpdateApplicationRequest
	(*UpdateApplicationResponse)(nil),                  // 19: indykite.config.v1beta1.UpdateApplicationResponse
	(*DeleteApplicationRequest)(nil),                   // 20: indykite.config.v1beta1.DeleteApplicationRequest
	(*DeleteApplicationResponse)(nil),                  // 21: indykite.config.v1beta1.DeleteApplicationResponse
	(*CreateApplicationAgentRequest)(nil),              // 22: indykite.config.v1beta1.CreateApplicationAgentRequest
	(*CreateApplicationAgentResponse)(nil),             // 23: indykite.config.v1beta1.CreateApplicationAgentResponse
	(*ReadApplicationAgentRequest)(nil),                // 24: indykite.config.v1beta1.ReadApplicationAgentRequest
	(*ReadApplicationAgentResponse)(nil),               // 25: indykite.config.v1beta1.ReadApplicationAgentResponse
	(*ListApplicationAgentsRequest)(nil),               // 26: indykite.config.v1beta1.ListApplicationAgentsRequest
	(*ListApplicationAgentsResponse)(nil),              // 27: indykite.config.v1beta1.ListApplicationAgentsResponse
	(*UpdateApplicationAgentRequest)(nil),              // 28: indykite.config.v1beta1.UpdateApplicationAgentRequest
	(*UpdateApplicationAgentResponse)(nil),             // 29: indykite.config.v1beta1.UpdateApplicationAgentResponse
	(*DeleteApplicationAgentRequest)(nil),              // 30: indykite.config.v1beta1.DeleteApplicationAgentRequest
	(*DeleteApplicationAgentResponse)(nil),             // 31: indykite.config.v1beta1.DeleteApplicationAgentResponse
	(*RegisterApplicationAgentCredentialRequest)(nil),  // 32: indykite.config.v1beta1.RegisterApplicationAgentCredentialRequest
	(*RegisterApplicationAgentCredentialResponse)(nil), // 33: indykite.config.v1beta1.RegisterApplicationAgentCredentialResponse
	(*ReadApplicationAgentCredentialRequest)(nil),      // 34: indykite.config.v1beta1.ReadApplicationAgentCredentialRequest
	(*ReadApplicationAgentCredentialResponse)(nil),     // 35: indykite.config.v1beta1.ReadApplicationAgentCredentialResponse
	(*DeleteApplicationAgentCredentialRequest)(nil),    // 36: indykite.config.v1beta1.DeleteApplicationAgentCredentialRequest
	(*DeleteApplicationAgentCredentialResponse)(nil),   // 37: indykite.config.v1beta1.DeleteApplicationAgentCredentialResponse
	(*CreateServiceAccountRequest)(nil),                // 38: indykite.config.v1beta1.CreateServiceAccountRequest
	(*CreateServiceAccountResponse)(nil),               // 39: indykite.config.v1beta1.CreateServiceAccountResponse
	(*ReadServiceAccountRequest)(nil),                  // 40: indykite.config.v1beta1.ReadServiceAccountRequest
	(*ReadServiceAccountResponse)(nil),                 // 41: indykite.config.v1beta1.ReadServiceAccountResponse
	(*UpdateServiceAccountRequest)(nil),                // 42: indykite.config.v1beta1.UpdateServiceAccountRequest
	(*UpdateServiceAccountResponse)(nil),               // 43: indykite.config.v1beta1.UpdateServiceAccountResponse
	(*DeleteServiceAccountRequest)(nil),                // 44: indykite.config.v1beta1.DeleteServiceAccountRequest
	(*DeleteServiceAccountResponse)(nil),               // 45: indykite.config.v1beta1.DeleteServiceAccountResponse
	(*RegisterServiceAccountCredentialRequest)(nil),    // 46: indykite.config.v1beta1.RegisterServiceAccountCredentialRequest
	(*RegisterServiceAccountCredentialResponse)(nil),   // 47: indykite.config.v1beta1.RegisterServiceAccountCredentialResponse
	(*ReadServiceAccountCredentialRequest)(nil),        // 48: indykite.config.v1beta1.ReadServiceAccountCredentialRequest
	(*ReadServiceAccountCredentialResponse)(nil),       // 49: indykite.config.v1beta1.ReadServiceAccountCredentialResponse
	(*DeleteServiceAccountCredentialRequest)(nil),      // 50: indykite.config.v1beta1.DeleteServiceAccountCredentialRequest
	(*DeleteServiceAccountCredentialResponse)(nil),     // 51: indykite.config.v1beta1.DeleteServiceAccountCredentialResponse
	(*CreateTenantRequest)(nil),                        // 52: indykite.config.v1beta1.CreateTenantRequest
	(*CreateTenantResponse)(nil),                       // 53: indykite.config.v1beta1.CreateTenantResponse
	(*ReadTenantRequest)(nil),                          // 54: indykite.config.v1beta1.ReadTenantRequest
	(*ReadTenantResponse)(nil),                         // 55: indykite.config.v1beta1.ReadTenantResponse
	(*ListTenantsRequest)(nil),                         // 56: indykite.config.v1beta1.ListTenantsRequest
	(*ListTenantsResponse)(nil),                        // 57: indykite.config.v1beta1.ListTenantsResponse
	(*UpdateTenantRequest)(nil),                        // 58: indykite.config.v1beta1.UpdateTenantRequest
	(*UpdateTenantResponse)(nil),                       // 59: indykite.config.v1beta1.UpdateTenantResponse
	(*DeleteTenantRequest)(nil),                        // 60: indykite.config.v1beta1.DeleteTenantRequest
	(*DeleteTenantResponse)(nil),                       // 61: indykite.config.v1beta1.DeleteTenantResponse
	(*CreateConfigNodeRequest)(nil),                    // 62: indykite.config.v1beta1.CreateConfigNodeRequest
	(*CreateConfigNodeResponse)(nil),                   // 63: indykite.config.v1beta1.CreateConfigNodeResponse
	(*ReadConfigNodeRequest)(nil),                      // 64: indykite.config.v1beta1.ReadConfigNodeRequest
	(*ReadConfigNodeResponse)(nil),                     // 65: indykite.config.v1beta1.ReadConfigNodeResponse
	(*UpdateConfigNodeRequest)(nil),                    // 66: indykite.config.v1beta1.UpdateConfigNodeRequest
	(*UpdateConfigNodeResponse)(nil),                   // 67: indykite.config.v1beta1.UpdateConfigNodeResponse
	(*DeleteConfigNodeRequest)(nil),                    // 68: indykite.config.v1beta1.DeleteConfigNodeRequest
	(*DeleteConfigNodeResponse)(nil),                   // 69: indykite.config.v1beta1.DeleteConfigNodeResponse
	(*CreateOAuth2ProviderRequest)(nil),                // 70: indykite.config.v1beta1.CreateOAuth2ProviderRequest
	(*CreateOAuth2ProviderResponse)(nil),               // 71: indykite.config.v1beta1.CreateOAuth2ProviderResponse
	(*ReadOAuth2ProviderRequest)(nil),                  // 72: indykite.config.v1beta1.ReadOAuth2ProviderRequest
	(*ReadOAuth2ProviderResponse)(nil),                 // 73: indykite.config.v1beta1.ReadOAuth2ProviderResponse
	(*UpdateOAuth2ProviderRequest)(nil),                // 74: indykite.config.v1beta1.UpdateOAuth2ProviderRequest
	(*UpdateOAuth2ProviderResponse)(nil),               // 75: indykite.config.v1beta1.UpdateOAuth2ProviderResponse
	(*DeleteOAuth2ProviderRequest)(nil),                // 76: indykite.config.v1beta1.DeleteOAuth2ProviderRequest
	(*DeleteOAuth2ProviderResponse)(nil),               // 77: indykite.config.v1beta1.DeleteOAuth2ProviderResponse
	(*CreateOAuth2ApplicationRequest)(nil),             // 78: indykite.config.v1beta1.CreateOAuth2ApplicationRequest
	(*CreateOAuth2ApplicationResponse)(nil),            // 79: indykite.config.v1beta1.CreateOAuth2ApplicationResponse
	(*ReadOAuth2ApplicationRequest)(nil),               // 80: indykite.config.v1beta1.ReadOAuth2ApplicationRequest
	(*ReadOAuth2ApplicationResponse)(nil),              // 81: indykite.config.v1beta1.ReadOAuth2ApplicationResponse
	(*UpdateOAuth2ApplicationRequest)(nil),             // 82: indykite.config.v1beta1.UpdateOAuth2ApplicationRequest
	(*UpdateOAuth2ApplicationResponse)(nil),            // 83: indykite.config.v1beta1.UpdateOAuth2ApplicationResponse
	(*DeleteOAuth2ApplicationRequest)(nil),             // 84: indykite.config.v1beta1.DeleteOAuth2ApplicationRequest
	(*DeleteOAuth2ApplicationResponse)(nil),            // 85: indykite.config.v1beta1.DeleteOAuth2ApplicationResponse
	(*AssignPermissionsRequest)(nil),                   // 86: indykite.config.v1beta1.AssignPermissionsRequest
	(*AssignPermissionsResponse)(nil),                  // 87: indykite.config.v1beta1.AssignPermissionsResponse
	(*RevokePermissionsRequest)(nil),                   // 88: indykite.config.v1beta1.RevokePermissionsRequest
	(*RevokePermissionsResponse)(nil),                  // 89: indykite.config.v1beta1.RevokePermissionsResponse
	(*ListPermissionsRequest)(nil),                     // 90: indykite.config.v1beta1.ListPermissionsRequest
	(*ListPermissionsResponse)(nil),                    // 91: indykite.config.v1beta1.ListPermissionsResponse
	(*ListPermissionsResponse_PermissionRole)(nil),     // 92: indykite.config.v1beta1.ListPermissionsResponse.PermissionRole
	(*ListPermissionsResponse_User)(nil),               // 93: indykite.config.v1beta1.ListPermissionsResponse.User
	(*ListPermissionsResponse_ServiceAccount)(nil),     // 94: indykite.config.v1beta1.ListPermissionsResponse.ServiceAccount
	(*ListPermissionsResponse_Invitation)(nil),         // 95: indykite.config.v1beta1.ListPermissionsResponse.Invitation
	(*Customer)(nil),                                   // 96: indykite.config.v1beta1.Customer
	(*wrapperspb.StringValue)(nil),                     // 97: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                      // 98: google.protobuf.Timestamp
	(*UniqueNameIdentifier)(nil),                       // 99: indykite.config.v1beta1.UniqueNameIdentifier
	(*ApplicationSpace)(nil),                           // 100: indykite.config.v1beta1.ApplicationSpace
	(*Application)(nil),                                // 101: indykite.config.v1beta1.Application
	(*ApplicationAgent)(nil),                           // 102: indykite.config.v1beta1.ApplicationAgent
	(*ApplicationAgentCredential)(nil),                 // 103: indykite.config.v1beta1.ApplicationAgentCredential
	(*ServiceAccount)(nil),                             // 104: indykite.config.v1beta1.ServiceAccount
	(*ServiceAccountCredential)(nil),                   // 105: indykite.config.v1beta1.ServiceAccountCredential
	(*Tenant)(nil),                                     // 106: indykite.config.v1beta1.Tenant
	(*AuthFlowConfig)(nil),                             // 107: indykite.config.v1beta1.AuthFlowConfig
	(*EmailServiceConfig)(nil),                         // 108: indykite.config.v1beta1.EmailServiceConfig
	(*SMSServiceConfig)(nil),                           // 109: indykite.config.v1beta1.SMSServiceConfig
	(*OAuth2ClientConfig)(nil),                         // 110: indykite.config.v1beta1.OAuth2ClientConfig
	(*PasswordProviderConfig)(nil),                     // 111: indykite.config.v1beta1.PasswordProviderConfig
	(*WebAuthnProviderConfig)(nil),                     // 112: indykite.config.v1beta1.WebAuthnProviderConfig
	(*AuthenteqProviderConfig)(nil),                    // 113: indykite.config.v1beta1.AuthenteqProviderConfig
	(*SAFRProviderConfig)(nil),                         // 114: indykite.config.v1beta1.SAFRProviderConfig
	(*IngestMappingConfig)(nil),                        // 115: indykite.config.v1beta1.IngestMappingConfig
	(*AuthorizationPolicyConfig)(nil),                  // 116: indykite.config.v1beta1.AuthorizationPolicyConfig
	(*KnowledgeGraphSchemaConfig)(nil),                 // 117: indykite.config.v1beta1.KnowledgeGraphSchemaConfig
	(*ReadIDProviderConfig)(nil),                       // 118: indykite.config.v1beta1.ReadIDProviderConfig
	(*ConfigNode)(nil),                                 // 119: indykite.config.v1beta1.ConfigNode
	(*OAuth2ProviderConfig)(nil),                       // 120: indykite.config.v1beta1.OAuth2ProviderConfig
	(*OAuth2Provider)(nil),                             // 121: indykite.config.v1beta1.OAuth2Provider
	(*OAuth2ApplicationConfig)(nil),                    // 122: indykite.config.v1beta1.OAuth2ApplicationConfig
	(*OAuth2Application)(nil),                          // 123: indykite.config.v1beta1.OAuth2Application
}
var file_indykite_config_v1beta1_config_management_api_proto_depIdxs = []int32{
	96,  // 0: indykite.config.v1beta1.ReadCustomerResponse.customer:type_name -> indykite.config.v1beta1.Customer
	97,  // 1: indykite.config.v1beta1.CreateApplicationSpaceRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 2: indykite.config.v1beta1.CreateApplicationSpaceRequest.description:type_name -> google.protobuf.StringValue
	98,  // 3: indykite.config.v1beta1.CreateApplicationSpaceResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 4: indykite.config.v1beta1.CreateApplicationSpaceResponse.update_time:type_name -> google.protobuf.Timestamp
	99,  // 5: indykite.config.v1beta1.ReadApplicationSpaceRequest.name:type_name -> indykite.config.v1beta1.UniqueNameIdentifier
	100, // 6: indykite.config.v1beta1.ReadApplicationSpaceResponse.app_space:type_name -> indykite.config.v1beta1.ApplicationSpace
	100, // 7: indykite.config.v1beta1.ListApplicationSpacesResponse.app_space:type_name -> indykite.config.v1beta1.ApplicationSpace
	97,  // 8: indykite.config.v1beta1.UpdateApplicationSpaceRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 9: indykite.config.v1beta1.UpdateApplicationSpaceRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 10: indykite.config.v1beta1.UpdateApplicationSpaceRequest.description:type_name -> google.protobuf.StringValue
	98,  // 11: indykite.config.v1beta1.UpdateApplicationSpaceResponse.update_time:type_name -> google.protobuf.Timestamp
	97,  // 12: indykite.config.v1beta1.DeleteApplicationSpaceRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 13: indykite.config.v1beta1.CreateApplicationRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 14: indykite.config.v1beta1.CreateApplicationRequest.description:type_name -> google.protobuf.StringValue
	98,  // 15: indykite.config.v1beta1.CreateApplicationResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 16: indykite.config.v1beta1.CreateApplicationResponse.update_time:type_name -> google.protobuf.Timestamp
	99,  // 17: indykite.config.v1beta1.ReadApplicationRequest.name:type_name -> indykite.config.v1beta1.UniqueNameIdentifier
	101, // 18: indykite.config.v1beta1.ReadApplicationResponse.application:type_name -> indykite.config.v1beta1.Application
	101, // 19: indykite.config.v1beta1.ListApplicationsResponse.application:type_name -> indykite.config.v1beta1.Application
	97,  // 20: indykite.config.v1beta1.UpdateApplicationRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 21: indykite.config.v1beta1.UpdateApplicationRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 22: indykite.config.v1beta1.UpdateApplicationRequest.description:type_name -> google.protobuf.StringValue
	98,  // 23: indykite.config.v1beta1.UpdateApplicationResponse.update_time:type_name -> google.protobuf.Timestamp
	97,  // 24: indykite.config.v1beta1.DeleteApplicationRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 25: indykite.config.v1beta1.CreateApplicationAgentRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 26: indykite.config.v1beta1.CreateApplicationAgentRequest.description:type_name -> google.protobuf.StringValue
	98,  // 27: indykite.config.v1beta1.CreateApplicationAgentResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 28: indykite.config.v1beta1.CreateApplicationAgentResponse.update_time:type_name -> google.protobuf.Timestamp
	99,  // 29: indykite.config.v1beta1.ReadApplicationAgentRequest.name:type_name -> indykite.config.v1beta1.UniqueNameIdentifier
	102, // 30: indykite.config.v1beta1.ReadApplicationAgentResponse.application_agent:type_name -> indykite.config.v1beta1.ApplicationAgent
	102, // 31: indykite.config.v1beta1.ListApplicationAgentsResponse.application_agent:type_name -> indykite.config.v1beta1.ApplicationAgent
	97,  // 32: indykite.config.v1beta1.UpdateApplicationAgentRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 33: indykite.config.v1beta1.UpdateApplicationAgentRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 34: indykite.config.v1beta1.UpdateApplicationAgentRequest.description:type_name -> google.protobuf.StringValue
	98,  // 35: indykite.config.v1beta1.UpdateApplicationAgentResponse.update_time:type_name -> google.protobuf.Timestamp
	97,  // 36: indykite.config.v1beta1.DeleteApplicationAgentRequest.etag:type_name -> google.protobuf.StringValue
	98,  // 37: indykite.config.v1beta1.RegisterApplicationAgentCredentialRequest.expire_time:type_name -> google.protobuf.Timestamp
	98,  // 38: indykite.config.v1beta1.RegisterApplicationAgentCredentialResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 39: indykite.config.v1beta1.RegisterApplicationAgentCredentialResponse.expire_time:type_name -> google.protobuf.Timestamp
	103, // 40: indykite.config.v1beta1.ReadApplicationAgentCredentialResponse.application_agent_credential:type_name -> indykite.config.v1beta1.ApplicationAgentCredential
	97,  // 41: indykite.config.v1beta1.CreateServiceAccountRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 42: indykite.config.v1beta1.CreateServiceAccountRequest.description:type_name -> google.protobuf.StringValue
	98,  // 43: indykite.config.v1beta1.CreateServiceAccountResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 44: indykite.config.v1beta1.CreateServiceAccountResponse.update_time:type_name -> google.protobuf.Timestamp
	99,  // 45: indykite.config.v1beta1.ReadServiceAccountRequest.name:type_name -> indykite.config.v1beta1.UniqueNameIdentifier
	104, // 46: indykite.config.v1beta1.ReadServiceAccountResponse.service_account:type_name -> indykite.config.v1beta1.ServiceAccount
	97,  // 47: indykite.config.v1beta1.UpdateServiceAccountRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 48: indykite.config.v1beta1.UpdateServiceAccountRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 49: indykite.config.v1beta1.UpdateServiceAccountRequest.description:type_name -> google.protobuf.StringValue
	98,  // 50: indykite.config.v1beta1.UpdateServiceAccountResponse.update_time:type_name -> google.protobuf.Timestamp
	97,  // 51: indykite.config.v1beta1.DeleteServiceAccountRequest.etag:type_name -> google.protobuf.StringValue
	98,  // 52: indykite.config.v1beta1.RegisterServiceAccountCredentialRequest.expire_time:type_name -> google.protobuf.Timestamp
	98,  // 53: indykite.config.v1beta1.RegisterServiceAccountCredentialResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 54: indykite.config.v1beta1.RegisterServiceAccountCredentialResponse.expire_time:type_name -> google.protobuf.Timestamp
	105, // 55: indykite.config.v1beta1.ReadServiceAccountCredentialResponse.service_account_credential:type_name -> indykite.config.v1beta1.ServiceAccountCredential
	97,  // 56: indykite.config.v1beta1.CreateTenantRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 57: indykite.config.v1beta1.CreateTenantRequest.description:type_name -> google.protobuf.StringValue
	98,  // 58: indykite.config.v1beta1.CreateTenantResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 59: indykite.config.v1beta1.CreateTenantResponse.update_time:type_name -> google.protobuf.Timestamp
	99,  // 60: indykite.config.v1beta1.ReadTenantRequest.name:type_name -> indykite.config.v1beta1.UniqueNameIdentifier
	106, // 61: indykite.config.v1beta1.ReadTenantResponse.tenant:type_name -> indykite.config.v1beta1.Tenant
	106, // 62: indykite.config.v1beta1.ListTenantsResponse.tenant:type_name -> indykite.config.v1beta1.Tenant
	97,  // 63: indykite.config.v1beta1.UpdateTenantRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 64: indykite.config.v1beta1.UpdateTenantRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 65: indykite.config.v1beta1.UpdateTenantRequest.description:type_name -> google.protobuf.StringValue
	98,  // 66: indykite.config.v1beta1.UpdateTenantResponse.update_time:type_name -> google.protobuf.Timestamp
	97,  // 67: indykite.config.v1beta1.DeleteTenantRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 68: indykite.config.v1beta1.CreateConfigNodeRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 69: indykite.config.v1beta1.CreateConfigNodeRequest.description:type_name -> google.protobuf.StringValue
	107, // 70: indykite.config.v1beta1.CreateConfigNodeRequest.auth_flow_config:type_name -> indykite.config.v1beta1.AuthFlowConfig
	108, // 71: indykite.config.v1beta1.CreateConfigNodeRequest.email_service_config:type_name -> indykite.config.v1beta1.EmailServiceConfig
	109, // 72: indykite.config.v1beta1.CreateConfigNodeRequest.sms_service_config:type_name -> indykite.config.v1beta1.SMSServiceConfig
	110, // 73: indykite.config.v1beta1.CreateConfigNodeRequest.oauth2_client_config:type_name -> indykite.config.v1beta1.OAuth2ClientConfig
	111, // 74: indykite.config.v1beta1.CreateConfigNodeRequest.password_provider_config:type_name -> indykite.config.v1beta1.PasswordProviderConfig
	112, // 75: indykite.config.v1beta1.CreateConfigNodeRequest.webauthn_provider_config:type_name -> indykite.config.v1beta1.WebAuthnProviderConfig
	113, // 76: indykite.config.v1beta1.CreateConfigNodeRequest.authenteq_provider_config:type_name -> indykite.config.v1beta1.AuthenteqProviderConfig
	114, // 77: indykite.config.v1beta1.CreateConfigNodeRequest.safr_provider_config:type_name -> indykite.config.v1beta1.SAFRProviderConfig
	115, // 78: indykite.config.v1beta1.CreateConfigNodeRequest.ingest_mapping_config:type_name -> indykite.config.v1beta1.IngestMappingConfig
	116, // 79: indykite.config.v1beta1.CreateConfigNodeRequest.authorization_policy_config:type_name -> indykite.config.v1beta1.AuthorizationPolicyConfig
	117, // 80: indykite.config.v1beta1.CreateConfigNodeRequest.knowledge_graph_schema_config:type_name -> indykite.config.v1beta1.KnowledgeGraphSchemaConfig
	118, // 81: indykite.config.v1beta1.CreateConfigNodeRequest.readid_provider_config:type_name -> indykite.config.v1beta1.ReadIDProviderConfig
	98,  // 82: indykite.config.v1beta1.CreateConfigNodeResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 83: indykite.config.v1beta1.CreateConfigNodeResponse.update_time:type_name -> google.protobuf.Timestamp
	119, // 84: indykite.config.v1beta1.ReadConfigNodeResponse.config_node:type_name -> indykite.config.v1beta1.ConfigNode
	97,  // 85: indykite.config.v1beta1.UpdateConfigNodeRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 86: indykite.config.v1beta1.UpdateConfigNodeRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 87: indykite.config.v1beta1.UpdateConfigNodeRequest.description:type_name -> google.protobuf.StringValue
	107, // 88: indykite.config.v1beta1.UpdateConfigNodeRequest.auth_flow_config:type_name -> indykite.config.v1beta1.AuthFlowConfig
	108, // 89: indykite.config.v1beta1.UpdateConfigNodeRequest.email_service_config:type_name -> indykite.config.v1beta1.EmailServiceConfig
	109, // 90: indykite.config.v1beta1.UpdateConfigNodeRequest.sms_service_config:type_name -> indykite.config.v1beta1.SMSServiceConfig
	110, // 91: indykite.config.v1beta1.UpdateConfigNodeRequest.oauth2_client_config:type_name -> indykite.config.v1beta1.OAuth2ClientConfig
	111, // 92: indykite.config.v1beta1.UpdateConfigNodeRequest.password_provider_config:type_name -> indykite.config.v1beta1.PasswordProviderConfig
	112, // 93: indykite.config.v1beta1.UpdateConfigNodeRequest.webauthn_provider_config:type_name -> indykite.config.v1beta1.WebAuthnProviderConfig
	113, // 94: indykite.config.v1beta1.UpdateConfigNodeRequest.authenteq_provider_config:type_name -> indykite.config.v1beta1.AuthenteqProviderConfig
	114, // 95: indykite.config.v1beta1.UpdateConfigNodeRequest.safr_provider_config:type_name -> indykite.config.v1beta1.SAFRProviderConfig
	115, // 96: indykite.config.v1beta1.UpdateConfigNodeRequest.ingest_mapping_config:type_name -> indykite.config.v1beta1.IngestMappingConfig
	116, // 97: indykite.config.v1beta1.UpdateConfigNodeRequest.authorization_policy_config:type_name -> indykite.config.v1beta1.AuthorizationPolicyConfig
	117, // 98: indykite.config.v1beta1.UpdateConfigNodeRequest.knowledge_graph_schema_config:type_name -> indykite.config.v1beta1.KnowledgeGraphSchemaConfig
	118, // 99: indykite.config.v1beta1.UpdateConfigNodeRequest.readid_provider_config:type_name -> indykite.config.v1beta1.ReadIDProviderConfig
	98,  // 100: indykite.config.v1beta1.UpdateConfigNodeResponse.update_time:type_name -> google.protobuf.Timestamp
	97,  // 101: indykite.config.v1beta1.DeleteConfigNodeRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 102: indykite.config.v1beta1.CreateOAuth2ProviderRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 103: indykite.config.v1beta1.CreateOAuth2ProviderRequest.description:type_name -> google.protobuf.StringValue
	120, // 104: indykite.config.v1beta1.CreateOAuth2ProviderRequest.config:type_name -> indykite.config.v1beta1.OAuth2ProviderConfig
	98,  // 105: indykite.config.v1beta1.CreateOAuth2ProviderResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 106: indykite.config.v1beta1.CreateOAuth2ProviderResponse.update_time:type_name -> google.protobuf.Timestamp
	121, // 107: indykite.config.v1beta1.ReadOAuth2ProviderResponse.oauth2_provider:type_name -> indykite.config.v1beta1.OAuth2Provider
	97,  // 108: indykite.config.v1beta1.UpdateOAuth2ProviderRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 109: indykite.config.v1beta1.UpdateOAuth2ProviderRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 110: indykite.config.v1beta1.UpdateOAuth2ProviderRequest.description:type_name -> google.protobuf.StringValue
	120, // 111: indykite.config.v1beta1.UpdateOAuth2ProviderRequest.config:type_name -> indykite.config.v1beta1.OAuth2ProviderConfig
	98,  // 112: indykite.config.v1beta1.UpdateOAuth2ProviderResponse.update_time:type_name -> google.protobuf.Timestamp
	97,  // 113: indykite.config.v1beta1.DeleteOAuth2ProviderRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 114: indykite.config.v1beta1.CreateOAuth2ApplicationRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 115: indykite.config.v1beta1.CreateOAuth2ApplicationRequest.description:type_name -> google.protobuf.StringValue
	122, // 116: indykite.config.v1beta1.CreateOAuth2ApplicationRequest.config:type_name -> indykite.config.v1beta1.OAuth2ApplicationConfig
	98,  // 117: indykite.config.v1beta1.CreateOAuth2ApplicationResponse.create_time:type_name -> google.protobuf.Timestamp
	98,  // 118: indykite.config.v1beta1.CreateOAuth2ApplicationResponse.update_time:type_name -> google.protobuf.Timestamp
	123, // 119: indykite.config.v1beta1.ReadOAuth2ApplicationResponse.oauth2_application:type_name -> indykite.config.v1beta1.OAuth2Application
	97,  // 120: indykite.config.v1beta1.UpdateOAuth2ApplicationRequest.etag:type_name -> google.protobuf.StringValue
	97,  // 121: indykite.config.v1beta1.UpdateOAuth2ApplicationRequest.display_name:type_name -> google.protobuf.StringValue
	97,  // 122: indykite.config.v1beta1.UpdateOAuth2ApplicationRequest.description:type_name -> google.protobuf.StringValue
	122, // 123: indykite.config.v1beta1.UpdateOAuth2ApplicationRequest.config:type_name -> indykite.config.v1beta1.OAuth2ApplicationConfig
	98,  // 124: indykite.config.v1beta1.UpdateOAuth2ApplicationResponse.update_time:type_name -> google.protobuf.Timestamp
	97,  // 125: indykite.config.v1beta1.DeleteOAuth2ApplicationRequest.etag:type_name -> google.protobuf.StringValue
	93,  // 126: indykite.config.v1beta1.ListPermissionsResponse.users:type_name -> indykite.config.v1beta1.ListPermissionsResponse.User
	94,  // 127: indykite.config.v1beta1.ListPermissionsResponse.service_accounts:type_name -> indykite.config.v1beta1.ListPermissionsResponse.ServiceAccount
	95,  // 128: indykite.config.v1beta1.ListPermissionsResponse.invitations:type_name -> indykite.config.v1beta1.ListPermissionsResponse.Invitation
	92,  // 129: indykite.config.v1beta1.ListPermissionsResponse.User.roles:type_name -> indykite.config.v1beta1.ListPermissionsResponse.PermissionRole
	92,  // 130: indykite.config.v1beta1.ListPermissionsResponse.ServiceAccount.roles:type_name -> indykite.config.v1beta1.ListPermissionsResponse.PermissionRole
	92,  // 131: indykite.config.v1beta1.ListPermissionsResponse.Invitation.roles:type_name -> indykite.config.v1beta1.ListPermissionsResponse.PermissionRole
	0,   // 132: indykite.config.v1beta1.ConfigManagementAPI.ReadCustomer:input_type -> indykite.config.v1beta1.ReadCustomerRequest
	2,   // 133: indykite.config.v1beta1.ConfigManagementAPI.CreateApplicationSpace:input_type -> indykite.config.v1beta1.CreateApplicationSpaceRequest
	4,   // 134: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationSpace:input_type -> indykite.config.v1beta1.ReadApplicationSpaceRequest
	6,   // 135: indykite.config.v1beta1.ConfigManagementAPI.ListApplicationSpaces:input_type -> indykite.config.v1beta1.ListApplicationSpacesRequest
	8,   // 136: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplicationSpace:input_type -> indykite.config.v1beta1.UpdateApplicationSpaceRequest
	10,  // 137: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationSpace:input_type -> indykite.config.v1beta1.DeleteApplicationSpaceRequest
	12,  // 138: indykite.config.v1beta1.ConfigManagementAPI.CreateApplication:input_type -> indykite.config.v1beta1.CreateApplicationRequest
	14,  // 139: indykite.config.v1beta1.ConfigManagementAPI.ReadApplication:input_type -> indykite.config.v1beta1.ReadApplicationRequest
	16,  // 140: indykite.config.v1beta1.ConfigManagementAPI.ListApplications:input_type -> indykite.config.v1beta1.ListApplicationsRequest
	18,  // 141: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplication:input_type -> indykite.config.v1beta1.UpdateApplicationRequest
	20,  // 142: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplication:input_type -> indykite.config.v1beta1.DeleteApplicationRequest
	22,  // 143: indykite.config.v1beta1.ConfigManagementAPI.CreateApplicationAgent:input_type -> indykite.config.v1beta1.CreateApplicationAgentRequest
	24,  // 144: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationAgent:input_type -> indykite.config.v1beta1.ReadApplicationAgentRequest
	26,  // 145: indykite.config.v1beta1.ConfigManagementAPI.ListApplicationAgents:input_type -> indykite.config.v1beta1.ListApplicationAgentsRequest
	28,  // 146: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplicationAgent:input_type -> indykite.config.v1beta1.UpdateApplicationAgentRequest
	30,  // 147: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationAgent:input_type -> indykite.config.v1beta1.DeleteApplicationAgentRequest
	32,  // 148: indykite.config.v1beta1.ConfigManagementAPI.RegisterApplicationAgentCredential:input_type -> indykite.config.v1beta1.RegisterApplicationAgentCredentialRequest
	34,  // 149: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationAgentCredential:input_type -> indykite.config.v1beta1.ReadApplicationAgentCredentialRequest
	36,  // 150: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationAgentCredential:input_type -> indykite.config.v1beta1.DeleteApplicationAgentCredentialRequest
	38,  // 151: indykite.config.v1beta1.ConfigManagementAPI.CreateServiceAccount:input_type -> indykite.config.v1beta1.CreateServiceAccountRequest
	40,  // 152: indykite.config.v1beta1.ConfigManagementAPI.ReadServiceAccount:input_type -> indykite.config.v1beta1.ReadServiceAccountRequest
	42,  // 153: indykite.config.v1beta1.ConfigManagementAPI.UpdateServiceAccount:input_type -> indykite.config.v1beta1.UpdateServiceAccountRequest
	44,  // 154: indykite.config.v1beta1.ConfigManagementAPI.DeleteServiceAccount:input_type -> indykite.config.v1beta1.DeleteServiceAccountRequest
	46,  // 155: indykite.config.v1beta1.ConfigManagementAPI.RegisterServiceAccountCredential:input_type -> indykite.config.v1beta1.RegisterServiceAccountCredentialRequest
	48,  // 156: indykite.config.v1beta1.ConfigManagementAPI.ReadServiceAccountCredential:input_type -> indykite.config.v1beta1.ReadServiceAccountCredentialRequest
	50,  // 157: indykite.config.v1beta1.ConfigManagementAPI.DeleteServiceAccountCredential:input_type -> indykite.config.v1beta1.DeleteServiceAccountCredentialRequest
	52,  // 158: indykite.config.v1beta1.ConfigManagementAPI.CreateTenant:input_type -> indykite.config.v1beta1.CreateTenantRequest
	54,  // 159: indykite.config.v1beta1.ConfigManagementAPI.ReadTenant:input_type -> indykite.config.v1beta1.ReadTenantRequest
	56,  // 160: indykite.config.v1beta1.ConfigManagementAPI.ListTenants:input_type -> indykite.config.v1beta1.ListTenantsRequest
	58,  // 161: indykite.config.v1beta1.ConfigManagementAPI.UpdateTenant:input_type -> indykite.config.v1beta1.UpdateTenantRequest
	60,  // 162: indykite.config.v1beta1.ConfigManagementAPI.DeleteTenant:input_type -> indykite.config.v1beta1.DeleteTenantRequest
	62,  // 163: indykite.config.v1beta1.ConfigManagementAPI.CreateConfigNode:input_type -> indykite.config.v1beta1.CreateConfigNodeRequest
	64,  // 164: indykite.config.v1beta1.ConfigManagementAPI.ReadConfigNode:input_type -> indykite.config.v1beta1.ReadConfigNodeRequest
	66,  // 165: indykite.config.v1beta1.ConfigManagementAPI.UpdateConfigNode:input_type -> indykite.config.v1beta1.UpdateConfigNodeRequest
	68,  // 166: indykite.config.v1beta1.ConfigManagementAPI.DeleteConfigNode:input_type -> indykite.config.v1beta1.DeleteConfigNodeRequest
	70,  // 167: indykite.config.v1beta1.ConfigManagementAPI.CreateOAuth2Provider:input_type -> indykite.config.v1beta1.CreateOAuth2ProviderRequest
	72,  // 168: indykite.config.v1beta1.ConfigManagementAPI.ReadOAuth2Provider:input_type -> indykite.config.v1beta1.ReadOAuth2ProviderRequest
	74,  // 169: indykite.config.v1beta1.ConfigManagementAPI.UpdateOAuth2Provider:input_type -> indykite.config.v1beta1.UpdateOAuth2ProviderRequest
	76,  // 170: indykite.config.v1beta1.ConfigManagementAPI.DeleteOAuth2Provider:input_type -> indykite.config.v1beta1.DeleteOAuth2ProviderRequest
	78,  // 171: indykite.config.v1beta1.ConfigManagementAPI.CreateOAuth2Application:input_type -> indykite.config.v1beta1.CreateOAuth2ApplicationRequest
	80,  // 172: indykite.config.v1beta1.ConfigManagementAPI.ReadOAuth2Application:input_type -> indykite.config.v1beta1.ReadOAuth2ApplicationRequest
	82,  // 173: indykite.config.v1beta1.ConfigManagementAPI.UpdateOAuth2Application:input_type -> indykite.config.v1beta1.UpdateOAuth2ApplicationRequest
	84,  // 174: indykite.config.v1beta1.ConfigManagementAPI.DeleteOAuth2Application:input_type -> indykite.config.v1beta1.DeleteOAuth2ApplicationRequest
	86,  // 175: indykite.config.v1beta1.ConfigManagementAPI.AssignPermissions:input_type -> indykite.config.v1beta1.AssignPermissionsRequest
	88,  // 176: indykite.config.v1beta1.ConfigManagementAPI.RevokePermissions:input_type -> indykite.config.v1beta1.RevokePermissionsRequest
	90,  // 177: indykite.config.v1beta1.ConfigManagementAPI.ListPermissions:input_type -> indykite.config.v1beta1.ListPermissionsRequest
	1,   // 178: indykite.config.v1beta1.ConfigManagementAPI.ReadCustomer:output_type -> indykite.config.v1beta1.ReadCustomerResponse
	3,   // 179: indykite.config.v1beta1.ConfigManagementAPI.CreateApplicationSpace:output_type -> indykite.config.v1beta1.CreateApplicationSpaceResponse
	5,   // 180: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationSpace:output_type -> indykite.config.v1beta1.ReadApplicationSpaceResponse
	7,   // 181: indykite.config.v1beta1.ConfigManagementAPI.ListApplicationSpaces:output_type -> indykite.config.v1beta1.ListApplicationSpacesResponse
	9,   // 182: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplicationSpace:output_type -> indykite.config.v1beta1.UpdateApplicationSpaceResponse
	11,  // 183: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationSpace:output_type -> indykite.config.v1beta1.DeleteApplicationSpaceResponse
	13,  // 184: indykite.config.v1beta1.ConfigManagementAPI.CreateApplication:output_type -> indykite.config.v1beta1.CreateApplicationResponse
	15,  // 185: indykite.config.v1beta1.ConfigManagementAPI.ReadApplication:output_type -> indykite.config.v1beta1.ReadApplicationResponse
	17,  // 186: indykite.config.v1beta1.ConfigManagementAPI.ListApplications:output_type -> indykite.config.v1beta1.ListApplicationsResponse
	19,  // 187: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplication:output_type -> indykite.config.v1beta1.UpdateApplicationResponse
	21,  // 188: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplication:output_type -> indykite.config.v1beta1.DeleteApplicationResponse
	23,  // 189: indykite.config.v1beta1.ConfigManagementAPI.CreateApplicationAgent:output_type -> indykite.config.v1beta1.CreateApplicationAgentResponse
	25,  // 190: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationAgent:output_type -> indykite.config.v1beta1.ReadApplicationAgentResponse
	27,  // 191: indykite.config.v1beta1.ConfigManagementAPI.ListApplicationAgents:output_type -> indykite.config.v1beta1.ListApplicationAgentsResponse
	29,  // 192: indykite.config.v1beta1.ConfigManagementAPI.UpdateApplicationAgent:output_type -> indykite.config.v1beta1.UpdateApplicationAgentResponse
	31,  // 193: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationAgent:output_type -> indykite.config.v1beta1.DeleteApplicationAgentResponse
	33,  // 194: indykite.config.v1beta1.ConfigManagementAPI.RegisterApplicationAgentCredential:output_type -> indykite.config.v1beta1.RegisterApplicationAgentCredentialResponse
	35,  // 195: indykite.config.v1beta1.ConfigManagementAPI.ReadApplicationAgentCredential:output_type -> indykite.config.v1beta1.ReadApplicationAgentCredentialResponse
	37,  // 196: indykite.config.v1beta1.ConfigManagementAPI.DeleteApplicationAgentCredential:output_type -> indykite.config.v1beta1.DeleteApplicationAgentCredentialResponse
	39,  // 197: indykite.config.v1beta1.ConfigManagementAPI.CreateServiceAccount:output_type -> indykite.config.v1beta1.CreateServiceAccountResponse
	41,  // 198: indykite.config.v1beta1.ConfigManagementAPI.ReadServiceAccount:output_type -> indykite.config.v1beta1.ReadServiceAccountResponse
	43,  // 199: indykite.config.v1beta1.ConfigManagementAPI.UpdateServiceAccount:output_type -> indykite.config.v1beta1.UpdateServiceAccountResponse
	45,  // 200: indykite.config.v1beta1.ConfigManagementAPI.DeleteServiceAccount:output_type -> indykite.config.v1beta1.DeleteServiceAccountResponse
	47,  // 201: indykite.config.v1beta1.ConfigManagementAPI.RegisterServiceAccountCredential:output_type -> indykite.config.v1beta1.RegisterServiceAccountCredentialResponse
	49,  // 202: indykite.config.v1beta1.ConfigManagementAPI.ReadServiceAccountCredential:output_type -> indykite.config.v1beta1.ReadServiceAccountCredentialResponse
	51,  // 203: indykite.config.v1beta1.ConfigManagementAPI.DeleteServiceAccountCredential:output_type -> indykite.config.v1beta1.DeleteServiceAccountCredentialResponse
	53,  // 204: indykite.config.v1beta1.ConfigManagementAPI.CreateTenant:output_type -> indykite.config.v1beta1.CreateTenantResponse
	55,  // 205: indykite.config.v1beta1.ConfigManagementAPI.ReadTenant:output_type -> indykite.config.v1beta1.ReadTenantResponse
	57,  // 206: indykite.config.v1beta1.ConfigManagementAPI.ListTenants:output_type -> indykite.config.v1beta1.ListTenantsResponse
	59,  // 207: indykite.config.v1beta1.ConfigManagementAPI.UpdateTenant:output_type -> indykite.config.v1beta1.UpdateTenantResponse
	61,  // 208: indykite.config.v1beta1.ConfigManagementAPI.DeleteTenant:output_type -> indykite.config.v1beta1.DeleteTenantResponse
	63,  // 209: indykite.config.v1beta1.ConfigManagementAPI.CreateConfigNode:output_type -> indykite.config.v1beta1.CreateConfigNodeResponse
	65,  // 210: indykite.config.v1beta1.ConfigManagementAPI.ReadConfigNode:output_type -> indykite.config.v1beta1.ReadConfigNodeResponse
	67,  // 211: indykite.config.v1beta1.ConfigManagementAPI.UpdateConfigNode:output_type -> indykite.config.v1beta1.UpdateConfigNodeResponse
	69,  // 212: indykite.config.v1beta1.ConfigManagementAPI.DeleteConfigNode:output_type -> indykite.config.v1beta1.DeleteConfigNodeResponse
	71,  // 213: indykite.config.v1beta1.ConfigManagementAPI.CreateOAuth2Provider:output_type -> indykite.config.v1beta1.CreateOAuth2ProviderResponse
	73,  // 214: indykite.config.v1beta1.ConfigManagementAPI.ReadOAuth2Provider:output_type -> indykite.config.v1beta1.ReadOAuth2ProviderResponse
	75,  // 215: indykite.config.v1beta1.ConfigManagementAPI.UpdateOAuth2Provider:output_type -> indykite.config.v1beta1.UpdateOAuth2ProviderResponse
	77,  // 216: indykite.config.v1beta1.ConfigManagementAPI.DeleteOAuth2Provider:output_type -> indykite.config.v1beta1.DeleteOAuth2ProviderResponse
	79,  // 217: indykite.config.v1beta1.ConfigManagementAPI.CreateOAuth2Application:output_type -> indykite.config.v1beta1.CreateOAuth2ApplicationResponse
	81,  // 218: indykite.config.v1beta1.ConfigManagementAPI.ReadOAuth2Application:output_type -> indykite.config.v1beta1.ReadOAuth2ApplicationResponse
	83,  // 219: indykite.config.v1beta1.ConfigManagementAPI.UpdateOAuth2Application:output_type -> indykite.config.v1beta1.UpdateOAuth2ApplicationResponse
	85,  // 220: indykite.config.v1beta1.ConfigManagementAPI.DeleteOAuth2Application:output_type -> indykite.config.v1beta1.DeleteOAuth2ApplicationResponse
	87,  // 221: indykite.config.v1beta1.ConfigManagementAPI.AssignPermissions:output_type -> indykite.config.v1beta1.AssignPermissionsResponse
	89,  // 222: indykite.config.v1beta1.ConfigManagementAPI.RevokePermissions:output_type -> indykite.config.v1beta1.RevokePermissionsResponse
	91,  // 223: indykite.config.v1beta1.ConfigManagementAPI.ListPermissions:output_type -> indykite.config.v1beta1.ListPermissionsResponse
	178, // [178:224] is the sub-list for method output_type
	132, // [132:178] is the sub-list for method input_type
	132, // [132:132] is the sub-list for extension type_name
	132, // [132:132] is the sub-list for extension extendee
	0,   // [0:132] is the sub-list for field type_name
}

func init() { file_indykite_config_v1beta1_config_management_api_proto_init() }
func file_indykite_config_v1beta1_config_management_api_proto_init() {
	if File_indykite_config_v1beta1_config_management_api_proto != nil {
		return
	}
	file_indykite_config_v1beta1_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationSpaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadApplicationSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadApplicationSpaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationSpacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationSpacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationSpaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationSpaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadApplicationAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadApplicationAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationAgentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterApplicationAgentCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterApplicationAgentCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadApplicationAgentCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadApplicationAgentCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationAgentCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationAgentCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadServiceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadServiceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterServiceAccountCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterServiceAccountCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadServiceAccountCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadServiceAccountCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTenantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTenantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConfigNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConfigNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadConfigNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadConfigNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOAuth2ProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOAuth2ProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOAuth2ProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOAuth2ProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOAuth2ProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOAuth2ProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOAuth2ProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOAuth2ProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOAuth2ApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOAuth2ApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOAuth2ApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOAuth2ApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOAuth2ApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOAuth2ApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOAuth2ApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOAuth2ApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokePermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokePermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPermissionsResponse_PermissionRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPermissionsResponse_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPermissionsResponse_ServiceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indykite_config_v1beta1_config_management_api_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPermissionsResponse_Invitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ReadCustomerRequest_Id)(nil),
		(*ReadCustomerRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ReadApplicationSpaceRequest_Id)(nil),
		(*ReadApplicationSpaceRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ReadApplicationRequest_Id)(nil),
		(*ReadApplicationRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*ReadApplicationAgentRequest_Id)(nil),
		(*ReadApplicationAgentRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*RegisterApplicationAgentCredentialRequest_Jwk)(nil),
		(*RegisterApplicationAgentCredentialRequest_Pem)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*ReadServiceAccountRequest_Id)(nil),
		(*ReadServiceAccountRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*RegisterServiceAccountCredentialRequest_Jwk)(nil),
		(*RegisterServiceAccountCredentialRequest_Pem)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*ReadTenantRequest_Id)(nil),
		(*ReadTenantRequest_Name)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*CreateConfigNodeRequest_AuthFlowConfig)(nil),
		(*CreateConfigNodeRequest_EmailServiceConfig)(nil),
		(*CreateConfigNodeRequest_SmsServiceConfig)(nil),
		(*CreateConfigNodeRequest_Oauth2ClientConfig)(nil),
		(*CreateConfigNodeRequest_PasswordProviderConfig)(nil),
		(*CreateConfigNodeRequest_WebauthnProviderConfig)(nil),
		(*CreateConfigNodeRequest_AuthenteqProviderConfig)(nil),
		(*CreateConfigNodeRequest_SafrProviderConfig)(nil),
		(*CreateConfigNodeRequest_IngestMappingConfig)(nil),
		(*CreateConfigNodeRequest_AuthorizationPolicyConfig)(nil),
		(*CreateConfigNodeRequest_KnowledgeGraphSchemaConfig)(nil),
		(*CreateConfigNodeRequest_ReadidProviderConfig)(nil),
	}
	file_indykite_config_v1beta1_config_management_api_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*UpdateConfigNodeRequest_AuthFlowConfig)(nil),
		(*UpdateConfigNodeRequest_EmailServiceConfig)(nil),
		(*UpdateConfigNodeRequest_SmsServiceConfig)(nil),
		(*UpdateConfigNodeRequest_Oauth2ClientConfig)(nil),
		(*UpdateConfigNodeRequest_PasswordProviderConfig)(nil),
		(*UpdateConfigNodeRequest_WebauthnProviderConfig)(nil),
		(*UpdateConfigNodeRequest_AuthenteqProviderConfig)(nil),
		(*UpdateConfigNodeRequest_SafrProviderConfig)(nil),
		(*UpdateConfigNodeRequest_IngestMappingConfig)(nil),
		(*UpdateConfigNodeRequest_AuthorizationPolicyConfig)(nil),
		(*UpdateConfigNodeRequest_KnowledgeGraphSchemaConfig)(nil),
		(*UpdateConfigNodeRequest_ReadidProviderConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indykite_config_v1beta1_config_management_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   96,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indykite_config_v1beta1_config_management_api_proto_goTypes,
		DependencyIndexes: file_indykite_config_v1beta1_config_management_api_proto_depIdxs,
		MessageInfos:      file_indykite_config_v1beta1_config_management_api_proto_msgTypes,
	}.Build()
	File_indykite_config_v1beta1_config_management_api_proto = out.File
	file_indykite_config_v1beta1_config_management_api_proto_rawDesc = nil
	file_indykite_config_v1beta1_config_management_api_proto_goTypes = nil
	file_indykite_config_v1beta1_config_management_api_proto_depIdxs = nil
}
