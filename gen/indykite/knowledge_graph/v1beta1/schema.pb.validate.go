// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/knowledge_graph/v1beta1/schema.proto

package knowledge_graphv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SchemaMultiError, or nil if none found.
func (m *Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetEntities()); l < 1 || l > 50 {
		err := SchemaValidationError{
			field:  "Entities",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRelationships()) > 50 {
		err := SchemaValidationError{
			field:  "Relationships",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRelationships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaValidationError{
					field:  fmt.Sprintf("Relationships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SchemaMultiError(errors)
	}

	return nil
}

// SchemaMultiError is an error wrapping multiple validation errors returned by
// Schema.ValidateAll() if the designated constraints aren't met.
type SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaMultiError) AllErrors() []error { return m }

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on Schema_Entity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schema_Entity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema_Entity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Schema_EntityMultiError, or
// nil if none found.
func (m *Schema_Entity) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema_Entity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 2 || l > 50 {
		err := Schema_EntityValidationError{
			field:  "Id",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetLabels()); l < 1 || l > 32 {
		err := Schema_EntityValidationError{
			field:  "Labels",
			reason: "value must contain between 1 and 32 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 2 || l > 50 {
			err := Schema_EntityValidationError{
				field:  fmt.Sprintf("Labels[%v]", idx),
				reason: "value length must be between 2 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_Schema_Entity_Labels_Pattern.MatchString(item) {
			err := Schema_EntityValidationError{
				field:  fmt.Sprintf("Labels[%v]", idx),
				reason: "value does not match regex pattern \"^(?:[A-Z][a-z]+)+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return Schema_EntityMultiError(errors)
	}

	return nil
}

// Schema_EntityMultiError is an error wrapping multiple validation errors
// returned by Schema_Entity.ValidateAll() if the designated constraints
// aren't met.
type Schema_EntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Schema_EntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Schema_EntityMultiError) AllErrors() []error { return m }

// Schema_EntityValidationError is the validation error returned by
// Schema_Entity.Validate if the designated constraints aren't met.
type Schema_EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Schema_EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Schema_EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Schema_EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Schema_EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Schema_EntityValidationError) ErrorName() string { return "Schema_EntityValidationError" }

// Error satisfies the builtin error interface
func (e Schema_EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema_Entity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Schema_EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Schema_EntityValidationError{}

var _Schema_Entity_Labels_Pattern = regexp.MustCompile("^(?:[A-Z][a-z]+)+$")

// Validate checks the field values on Schema_Relationship with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Schema_Relationship) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema_Relationship with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Schema_RelationshipMultiError, or nil if none found.
func (m *Schema_Relationship) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema_Relationship) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSource()); l < 2 || l > 50 {
		err := Schema_RelationshipValidationError{
			field:  "Source",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTarget()); l < 2 || l > 50 {
		err := Schema_RelationshipValidationError{
			field:  "Target",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 2 || l > 50 {
		err := Schema_RelationshipValidationError{
			field:  "Type",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Schema_Relationship_Type_Pattern.MatchString(m.GetType()) {
		err := Schema_RelationshipValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[A-Z]+(?:_[A-Z]+)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Schema_RelationshipMultiError(errors)
	}

	return nil
}

// Schema_RelationshipMultiError is an error wrapping multiple validation
// errors returned by Schema_Relationship.ValidateAll() if the designated
// constraints aren't met.
type Schema_RelationshipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Schema_RelationshipMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Schema_RelationshipMultiError) AllErrors() []error { return m }

// Schema_RelationshipValidationError is the validation error returned by
// Schema_Relationship.Validate if the designated constraints aren't met.
type Schema_RelationshipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Schema_RelationshipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Schema_RelationshipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Schema_RelationshipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Schema_RelationshipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Schema_RelationshipValidationError) ErrorName() string {
	return "Schema_RelationshipValidationError"
}

// Error satisfies the builtin error interface
func (e Schema_RelationshipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema_Relationship.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Schema_RelationshipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Schema_RelationshipValidationError{}

var _Schema_Relationship_Type_Pattern = regexp.MustCompile("^[A-Z]+(?:_[A-Z]+)*$")
