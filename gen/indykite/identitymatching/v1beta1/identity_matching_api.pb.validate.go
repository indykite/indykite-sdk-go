// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indykite/identitymatching/v1beta1/identity_matching_api.proto

package identitymatchingv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RunIdentityMatchingPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RunIdentityMatchingPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunIdentityMatchingPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RunIdentityMatchingPipelineRequestMultiError, or nil if none found.
func (m *RunIdentityMatchingPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunIdentityMatchingPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := RunIdentityMatchingPipelineRequestValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RunIdentityMatchingPipelineRequest_Id_Pattern.MatchString(m.GetId()) {
		err := RunIdentityMatchingPipelineRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCustomPropertyMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunIdentityMatchingPipelineRequestValidationError{
						field:  fmt.Sprintf("CustomPropertyMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunIdentityMatchingPipelineRequestValidationError{
						field:  fmt.Sprintf("CustomPropertyMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunIdentityMatchingPipelineRequestValidationError{
					field:  fmt.Sprintf("CustomPropertyMappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RunIdentityMatchingPipelineRequestMultiError(errors)
	}

	return nil
}

// RunIdentityMatchingPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// RunIdentityMatchingPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type RunIdentityMatchingPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunIdentityMatchingPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunIdentityMatchingPipelineRequestMultiError) AllErrors() []error { return m }

// RunIdentityMatchingPipelineRequestValidationError is the validation error
// returned by RunIdentityMatchingPipelineRequest.Validate if the designated
// constraints aren't met.
type RunIdentityMatchingPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunIdentityMatchingPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunIdentityMatchingPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunIdentityMatchingPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunIdentityMatchingPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunIdentityMatchingPipelineRequestValidationError) ErrorName() string {
	return "RunIdentityMatchingPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunIdentityMatchingPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunIdentityMatchingPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunIdentityMatchingPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunIdentityMatchingPipelineRequestValidationError{}

var _RunIdentityMatchingPipelineRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on RunIdentityMatchingPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RunIdentityMatchingPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunIdentityMatchingPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RunIdentityMatchingPipelineResponseMultiError, or nil if none found.
func (m *RunIdentityMatchingPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunIdentityMatchingPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := RunIdentityMatchingPipelineResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RunIdentityMatchingPipelineResponse_Id_Pattern.MatchString(m.GetId()) {
		err := RunIdentityMatchingPipelineResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLastRunTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunIdentityMatchingPipelineResponseValidationError{
					field:  "LastRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunIdentityMatchingPipelineResponseValidationError{
					field:  "LastRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastRunTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunIdentityMatchingPipelineResponseValidationError{
				field:  "LastRunTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return RunIdentityMatchingPipelineResponseMultiError(errors)
	}

	return nil
}

// RunIdentityMatchingPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// RunIdentityMatchingPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type RunIdentityMatchingPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunIdentityMatchingPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunIdentityMatchingPipelineResponseMultiError) AllErrors() []error { return m }

// RunIdentityMatchingPipelineResponseValidationError is the validation error
// returned by RunIdentityMatchingPipelineResponse.Validate if the designated
// constraints aren't met.
type RunIdentityMatchingPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunIdentityMatchingPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunIdentityMatchingPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunIdentityMatchingPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunIdentityMatchingPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunIdentityMatchingPipelineResponseValidationError) ErrorName() string {
	return "RunIdentityMatchingPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunIdentityMatchingPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunIdentityMatchingPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunIdentityMatchingPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunIdentityMatchingPipelineResponseValidationError{}

var _RunIdentityMatchingPipelineResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

// Validate checks the field values on ReadSuggestedPropertyMappingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadSuggestedPropertyMappingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadSuggestedPropertyMappingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadSuggestedPropertyMappingRequestMultiError, or nil if none found.
func (m *ReadSuggestedPropertyMappingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadSuggestedPropertyMappingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *ReadSuggestedPropertyMappingRequest_Id:
		if v == nil {
			err := ReadSuggestedPropertyMappingRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
			err := ReadSuggestedPropertyMappingRequestValidationError{
				field:  "Id",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadSuggestedPropertyMappingRequest_Id_Pattern.MatchString(m.GetId()) {
			err := ReadSuggestedPropertyMappingRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ReadSuggestedPropertyMappingRequest_Name:
		if v == nil {
			err := ReadSuggestedPropertyMappingRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
			err := ReadSuggestedPropertyMappingRequestValidationError{
				field:  "Name",
				reason: "value length must be between 2 and 63 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadSuggestedPropertyMappingRequest_Name_Pattern.MatchString(m.GetName()) {
			err := ReadSuggestedPropertyMappingRequestValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ReadSuggestedPropertyMappingRequestMultiError(errors)
	}

	return nil
}

// ReadSuggestedPropertyMappingRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReadSuggestedPropertyMappingRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadSuggestedPropertyMappingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadSuggestedPropertyMappingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadSuggestedPropertyMappingRequestMultiError) AllErrors() []error { return m }

// ReadSuggestedPropertyMappingRequestValidationError is the validation error
// returned by ReadSuggestedPropertyMappingRequest.Validate if the designated
// constraints aren't met.
type ReadSuggestedPropertyMappingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadSuggestedPropertyMappingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadSuggestedPropertyMappingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadSuggestedPropertyMappingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadSuggestedPropertyMappingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadSuggestedPropertyMappingRequestValidationError) ErrorName() string {
	return "ReadSuggestedPropertyMappingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadSuggestedPropertyMappingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadSuggestedPropertyMappingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadSuggestedPropertyMappingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadSuggestedPropertyMappingRequestValidationError{}

var _ReadSuggestedPropertyMappingRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _ReadSuggestedPropertyMappingRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on ReadSuggestedPropertyMappingResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReadSuggestedPropertyMappingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadSuggestedPropertyMappingResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadSuggestedPropertyMappingResponseMultiError, or nil if none found.
func (m *ReadSuggestedPropertyMappingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadSuggestedPropertyMappingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := ReadSuggestedPropertyMappingResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReadSuggestedPropertyMappingResponse_Id_Pattern.MatchString(m.GetId()) {
		err := ReadSuggestedPropertyMappingResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPropertyMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadSuggestedPropertyMappingResponseValidationError{
						field:  fmt.Sprintf("PropertyMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadSuggestedPropertyMappingResponseValidationError{
						field:  fmt.Sprintf("PropertyMappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadSuggestedPropertyMappingResponseValidationError{
					field:  fmt.Sprintf("PropertyMappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := _ReadSuggestedPropertyMappingResponse_PropertyMappingStatus_NotInLookup[m.GetPropertyMappingStatus()]; ok {
		err := ReadSuggestedPropertyMappingResponseValidationError{
			field:  "PropertyMappingStatus",
			reason: "value must not be in list [PIPELINE_STATUS_STATUS_INVALID]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PipelineStatus_name[int32(m.GetPropertyMappingStatus())]; !ok {
		err := ReadSuggestedPropertyMappingResponseValidationError{
			field:  "PropertyMappingStatus",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadSuggestedPropertyMappingResponseMultiError(errors)
	}

	return nil
}

// ReadSuggestedPropertyMappingResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReadSuggestedPropertyMappingResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadSuggestedPropertyMappingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadSuggestedPropertyMappingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadSuggestedPropertyMappingResponseMultiError) AllErrors() []error { return m }

// ReadSuggestedPropertyMappingResponseValidationError is the validation error
// returned by ReadSuggestedPropertyMappingResponse.Validate if the designated
// constraints aren't met.
type ReadSuggestedPropertyMappingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadSuggestedPropertyMappingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadSuggestedPropertyMappingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadSuggestedPropertyMappingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadSuggestedPropertyMappingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadSuggestedPropertyMappingResponseValidationError) ErrorName() string {
	return "ReadSuggestedPropertyMappingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadSuggestedPropertyMappingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadSuggestedPropertyMappingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadSuggestedPropertyMappingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadSuggestedPropertyMappingResponseValidationError{}

var _ReadSuggestedPropertyMappingResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _ReadSuggestedPropertyMappingResponse_PropertyMappingStatus_NotInLookup = map[PipelineStatus]struct{}{
	0: {},
}

// Validate checks the field values on ReadEntityMatchingReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadEntityMatchingReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadEntityMatchingReportRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadEntityMatchingReportRequestMultiError, or nil if none found.
func (m *ReadEntityMatchingReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadEntityMatchingReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *ReadEntityMatchingReportRequest_Id:
		if v == nil {
			err := ReadEntityMatchingReportRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
			err := ReadEntityMatchingReportRequestValidationError{
				field:  "Id",
				reason: "value length must be between 22 and 254 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadEntityMatchingReportRequest_Id_Pattern.MatchString(m.GetId()) {
			err := ReadEntityMatchingReportRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ReadEntityMatchingReportRequest_Name:
		if v == nil {
			err := ReadEntityMatchingReportRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 63 {
			err := ReadEntityMatchingReportRequestValidationError{
				field:  "Name",
				reason: "value length must be between 2 and 63 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReadEntityMatchingReportRequest_Name_Pattern.MatchString(m.GetName()) {
			err := ReadEntityMatchingReportRequestValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ReadEntityMatchingReportRequestMultiError(errors)
	}

	return nil
}

// ReadEntityMatchingReportRequestMultiError is an error wrapping multiple
// validation errors returned by ReadEntityMatchingReportRequest.ValidateAll()
// if the designated constraints aren't met.
type ReadEntityMatchingReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadEntityMatchingReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadEntityMatchingReportRequestMultiError) AllErrors() []error { return m }

// ReadEntityMatchingReportRequestValidationError is the validation error
// returned by ReadEntityMatchingReportRequest.Validate if the designated
// constraints aren't met.
type ReadEntityMatchingReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadEntityMatchingReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadEntityMatchingReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadEntityMatchingReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadEntityMatchingReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadEntityMatchingReportRequestValidationError) ErrorName() string {
	return "ReadEntityMatchingReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadEntityMatchingReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadEntityMatchingReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadEntityMatchingReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadEntityMatchingReportRequestValidationError{}

var _ReadEntityMatchingReportRequest_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _ReadEntityMatchingReportRequest_Name_Pattern = regexp.MustCompile("^[a-z](?:[-a-z0-9]{0,61}[a-z0-9])$")

// Validate checks the field values on ReadEntityMatchingReportResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadEntityMatchingReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadEntityMatchingReportResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadEntityMatchingReportResponseMultiError, or nil if none found.
func (m *ReadEntityMatchingReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadEntityMatchingReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 22 || l > 254 {
		err := ReadEntityMatchingReportResponseValidationError{
			field:  "Id",
			reason: "value length must be between 22 and 254 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReadEntityMatchingReportResponse_Id_Pattern.MatchString(m.GetId()) {
		err := ReadEntityMatchingReportResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_:]{22,254}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ReportUrl

	if all {
		switch v := interface{}(m.GetUrlExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadEntityMatchingReportResponseValidationError{
					field:  "UrlExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadEntityMatchingReportResponseValidationError{
					field:  "UrlExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUrlExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadEntityMatchingReportResponseValidationError{
				field:  "UrlExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ReadEntityMatchingReportResponse_EntityMatchingStatus_NotInLookup[m.GetEntityMatchingStatus()]; ok {
		err := ReadEntityMatchingReportResponseValidationError{
			field:  "EntityMatchingStatus",
			reason: "value must not be in list [PIPELINE_STATUS_STATUS_INVALID]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PipelineStatus_name[int32(m.GetEntityMatchingStatus())]; !ok {
		err := ReadEntityMatchingReportResponseValidationError{
			field:  "EntityMatchingStatus",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadEntityMatchingReportResponseMultiError(errors)
	}

	return nil
}

// ReadEntityMatchingReportResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReadEntityMatchingReportResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadEntityMatchingReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadEntityMatchingReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadEntityMatchingReportResponseMultiError) AllErrors() []error { return m }

// ReadEntityMatchingReportResponseValidationError is the validation error
// returned by ReadEntityMatchingReportResponse.Validate if the designated
// constraints aren't met.
type ReadEntityMatchingReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadEntityMatchingReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadEntityMatchingReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadEntityMatchingReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadEntityMatchingReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadEntityMatchingReportResponseValidationError) ErrorName() string {
	return "ReadEntityMatchingReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadEntityMatchingReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadEntityMatchingReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadEntityMatchingReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadEntityMatchingReportResponseValidationError{}

var _ReadEntityMatchingReportResponse_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9-_:]{22,254}$")

var _ReadEntityMatchingReportResponse_EntityMatchingStatus_NotInLookup = map[PipelineStatus]struct{}{
	0: {},
}
