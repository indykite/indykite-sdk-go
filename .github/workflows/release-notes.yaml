---
name: Release notes
on: # yamllint disable-line rule:truthy
  push:
    branches: ["dev", "develop", "main", "master"]
  # to have an ability to run thee workflow manually
  workflow_dispatch: # yamllint disable-line rule:empty-values

# https://github.com/googleapis/release-please-action?tab=readme-ov-file#workflow-permissions
permissions:
  contents: write
  issues: write
  pull-requests: write

concurrency: release-notes

jobs:
  release-please:
    name: Prepare Release notes
    runs-on: ubuntu-latest
    steps:
      - name: action/release-please
        uses: googleapis/release-please-action@16a9c90856f42705d54a6fda1823352bdc62cf38 # v4.4.0 - https://github.com/googleapis/release-please-action/releases
        id: release
        with:
          # secrets.GITHUB_TOKEN cannot be used due to:
          #   when you use the repository's GITHUB_TOKEN to perform tasks, events triggered by the GITHUB_TOKEN,
          #   with the exception of workflow_dispatch and repository_dispatch, will not create a new workflow run.
          token: ${{ secrets.INDYKITEONE_PAT }}
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: action/version-check
        id: version-check
        shell: bash
        run: |
          RELEASE_VERSION="${{ steps.release.outputs.version }}"

          # returned as a JSON string of the PullRequest object, so direct 'steps.release.outputs.pr.title' isn't available
          PR_JSON='${{ steps.release.outputs.pr }}'
          PR_NUMBER=$(echo "${PR_JSON}" | jq -r '.number')
          PR_TITLE=$(echo "${PR_JSON}" | jq -r '.title')

          if [[ -z "${RELEASE_VERSION}" ]]; then
            # RELEASE_VERSION="$(jq -r '.["."]' .release-please-manifest.json)" # <- requires code checkout
            RELEASE_VERSION="$(echo "${PR_TITLE}" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')" # another option: | awk '{print $NF}'
          fi

          {
            echo "version=${RELEASE_VERSION}"
            echo "pr_number=${PR_NUMBER}"
          } >> "$GITHUB_OUTPUT"

      - name: actions/slack-notification
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1 - https://github.com/slackapi/slack-github-action/releases
        if: steps.release.outputs.releases_created || steps.release.outputs.prs_created
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.postMessage
          # https://docs.slack.dev/reference/methods/chat.postmessage for payload fields
          # Bot App must be added under Channel Settings/Integrations tab
          payload: >-
            {
              "channel": "${{ vars.SLACK_CHANNEL_IK_SDK }}",
              "username": "github-actions[bot]",
              "icon_emoji": ":package:",
              "text": "`indykite-sdk-go` release ${{ format('v{0}', steps.version-check.outputs.version) }} is ready:
                ${{ format('<{0}/{1}/pull/{2}|{1}#{2}>', github.server_url, github.repository, steps.version-check.outputs.pr_number) }}"
            }
